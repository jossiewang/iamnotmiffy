
0527_peanuts.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e144  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  0800e414  0800e414  0001e414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e704  0800e704  0001e704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800e70c  0800e70c  0001e70c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e714  0800e714  0001e714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800e718  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000e00  24000078  0800e790  00020078  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24000e78  0800e790  00020e78  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f468  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003361  00000000  00000000  0003f50e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001458  00000000  00000000  00042870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001368  00000000  00000000  00043cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034ec6  00000000  00000000  00045030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a7c3  00000000  00000000  00079ef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001533c3  00000000  00000000  000946b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001e7a7c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005bc0  00000000  00000000  001e7acc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000078 	.word	0x24000078
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800e3fc 	.word	0x0800e3fc

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400007c 	.word	0x2400007c
 800030c:	0800e3fc 	.word	0x0800e3fc

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	0a5a      	lsrs	r2, r3, #9
 8000634:	490f      	ldr	r1, [pc, #60]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000636:	fba1 1202 	umull	r1, r2, r1, r2
 800063a:	09d2      	lsrs	r2, r2, #7
 800063c:	490e      	ldr	r1, [pc, #56]	; (8000678 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063e:	fb01 f202 	mul.w	r2, r1, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	0a5b      	lsrs	r3, r3, #9
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	09db      	lsrs	r3, r3, #7
 8000654:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	441a      	add	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	00044b83 	.word	0x00044b83
 8000678:	3b9aca00 	.word	0x3b9aca00

0800067c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000680:	f004 f844 	bl	800470c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000684:	f000 f84a 	bl	800071c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000688:	f000 fb74 	bl	8000d74 <MX_GPIO_Init>
  MX_DMA_Init();
 800068c:	f000 fb4a 	bl	8000d24 <MX_DMA_Init>
  MX_TIM2_Init();
 8000690:	f000 f910 	bl	80008b4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000694:	f000 f972 	bl	800097c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000698:	f000 f9be 	bl	8000a18 <MX_TIM4_Init>
  MX_TIM8_Init();
 800069c:	f000 fa12 	bl	8000ac4 <MX_TIM8_Init>
  MX_TIM23_Init();
 80006a0:	f000 fa9e 	bl	8000be0 <MX_TIM23_Init>
  MX_USART3_UART_Init();
 80006a4:	f000 faf2 	bl	8000c8c <MX_USART3_UART_Init>
  MX_TIM1_Init();
 80006a8:	f000 f8aa 	bl	8000800 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
    HAL_TIM_Base_Start_IT(&htim3);
 80006ac:	4815      	ldr	r0, [pc, #84]	; (8000704 <main+0x88>)
 80006ae:	f009 ff85 	bl	800a5bc <HAL_TIM_Base_Start_IT>
    HAL_TIM_Encoder_Start(TIM_ENC_MF, TIM_CHANNEL_1);
 80006b2:	2100      	movs	r1, #0
 80006b4:	4814      	ldr	r0, [pc, #80]	; (8000708 <main+0x8c>)
 80006b6:	f00a fa21 	bl	800aafc <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(TIM_ENC_MF, TIM_CHANNEL_2);
 80006ba:	2104      	movs	r1, #4
 80006bc:	4812      	ldr	r0, [pc, #72]	; (8000708 <main+0x8c>)
 80006be:	f00a fa1d 	bl	800aafc <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(TIM_ENC_ML, TIM_CHANNEL_1);
 80006c2:	2100      	movs	r1, #0
 80006c4:	4811      	ldr	r0, [pc, #68]	; (800070c <main+0x90>)
 80006c6:	f00a fa19 	bl	800aafc <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(TIM_ENC_ML, TIM_CHANNEL_2);
 80006ca:	2104      	movs	r1, #4
 80006cc:	480f      	ldr	r0, [pc, #60]	; (800070c <main+0x90>)
 80006ce:	f00a fa15 	bl	800aafc <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(TIM_ENC_MR, TIM_CHANNEL_1);
 80006d2:	2100      	movs	r1, #0
 80006d4:	480e      	ldr	r0, [pc, #56]	; (8000710 <main+0x94>)
 80006d6:	f00a fa11 	bl	800aafc <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(TIM_ENC_MR, TIM_CHANNEL_2);
 80006da:	2104      	movs	r1, #4
 80006dc:	480c      	ldr	r0, [pc, #48]	; (8000710 <main+0x94>)
 80006de:	f00a fa0d 	bl	800aafc <HAL_TIM_Encoder_Start>
    HAL_TIM_PWM_Start(TIM_PWM_MF, CH_PWM_MF);
 80006e2:	2100      	movs	r1, #0
 80006e4:	480b      	ldr	r0, [pc, #44]	; (8000714 <main+0x98>)
 80006e6:	f00a f847 	bl	800a778 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(TIM_PWM_ML, CH_PWM_ML);
 80006ea:	210c      	movs	r1, #12
 80006ec:	4809      	ldr	r0, [pc, #36]	; (8000714 <main+0x98>)
 80006ee:	f00a f843 	bl	800a778 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(TIM_PWM_MR, CH_PWM_MR);
 80006f2:	2108      	movs	r1, #8
 80006f4:	4808      	ldr	r0, [pc, #32]	; (8000718 <main+0x9c>)
 80006f6:	f00a f83f 	bl	800a778 <HAL_TIM_PWM_Start>
  	setup();
 80006fa:	f002 fdfb 	bl	80032f4 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 80006fe:	f002 fe0f 	bl	8003320 <loop>
 8000702:	e7fc      	b.n	80006fe <main+0x82>
 8000704:	2400012c 	.word	0x2400012c
 8000708:	24000094 	.word	0x24000094
 800070c:	24000178 	.word	0x24000178
 8000710:	24000210 	.word	0x24000210
 8000714:	240000e0 	.word	0x240000e0
 8000718:	240001c4 	.word	0x240001c4

0800071c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b09c      	sub	sp, #112	; 0x70
 8000720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000722:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000726:	224c      	movs	r2, #76	; 0x4c
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f00d fcdc 	bl	800e0e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	2220      	movs	r2, #32
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f00d fcd6 	bl	800e0e8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800073c:	2002      	movs	r0, #2
 800073e:	f007 f983 	bl	8007a48 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000742:	2300      	movs	r3, #0
 8000744:	603b      	str	r3, [r7, #0]
 8000746:	4b2d      	ldr	r3, [pc, #180]	; (80007fc <SystemClock_Config+0xe0>)
 8000748:	699b      	ldr	r3, [r3, #24]
 800074a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800074e:	4a2b      	ldr	r2, [pc, #172]	; (80007fc <SystemClock_Config+0xe0>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000754:	6193      	str	r3, [r2, #24]
 8000756:	4b29      	ldr	r3, [pc, #164]	; (80007fc <SystemClock_Config+0xe0>)
 8000758:	699b      	ldr	r3, [r3, #24]
 800075a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800075e:	603b      	str	r3, [r7, #0]
 8000760:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000762:	bf00      	nop
 8000764:	4b25      	ldr	r3, [pc, #148]	; (80007fc <SystemClock_Config+0xe0>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800076c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000770:	d1f8      	bne.n	8000764 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000772:	2302      	movs	r3, #2
 8000774:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000776:	2301      	movs	r3, #1
 8000778:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800077a:	2340      	movs	r3, #64	; 0x40
 800077c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077e:	2302      	movs	r3, #2
 8000780:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000782:	2300      	movs	r3, #0
 8000784:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000786:	2304      	movs	r3, #4
 8000788:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 21;
 800078a:	2315      	movs	r3, #21
 800078c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800078e:	2301      	movs	r3, #1
 8000790:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000792:	2302      	movs	r3, #2
 8000794:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000796:	2302      	movs	r3, #2
 8000798:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800079a:	230c      	movs	r3, #12
 800079c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800079e:	2300      	movs	r3, #0
 80007a0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007aa:	4618      	mov	r0, r3
 80007ac:	f007 f986 	bl	8007abc <HAL_RCC_OscConfig>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007b6:	f000 ff8b 	bl	80016d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ba:	233f      	movs	r3, #63	; 0x3f
 80007bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007be:	2303      	movs	r3, #3
 80007c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 80007c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007c8:	2308      	movs	r3, #8
 80007ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007cc:	2340      	movs	r3, #64	; 0x40
 80007ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007d0:	2340      	movs	r3, #64	; 0x40
 80007d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007d8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007da:	2340      	movs	r3, #64	; 0x40
 80007dc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	2102      	movs	r1, #2
 80007e2:	4618      	mov	r0, r3
 80007e4:	f007 fd44 	bl	8008270 <HAL_RCC_ClockConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80007ee:	f000 ff6f 	bl	80016d0 <Error_Handler>
  }
}
 80007f2:	bf00      	nop
 80007f4:	3770      	adds	r7, #112	; 0x70
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	58024800 	.word	0x58024800

08000800 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08c      	sub	sp, #48	; 0x30
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000806:	f107 030c 	add.w	r3, r7, #12
 800080a:	2224      	movs	r2, #36	; 0x24
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f00d fc6a 	bl	800e0e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000814:	463b      	mov	r3, r7
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800081e:	4b23      	ldr	r3, [pc, #140]	; (80008ac <MX_TIM1_Init+0xac>)
 8000820:	4a23      	ldr	r2, [pc, #140]	; (80008b0 <MX_TIM1_Init+0xb0>)
 8000822:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000824:	4b21      	ldr	r3, [pc, #132]	; (80008ac <MX_TIM1_Init+0xac>)
 8000826:	2200      	movs	r2, #0
 8000828:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800082a:	4b20      	ldr	r3, [pc, #128]	; (80008ac <MX_TIM1_Init+0xac>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000830:	4b1e      	ldr	r3, [pc, #120]	; (80008ac <MX_TIM1_Init+0xac>)
 8000832:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000836:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000838:	4b1c      	ldr	r3, [pc, #112]	; (80008ac <MX_TIM1_Init+0xac>)
 800083a:	2200      	movs	r2, #0
 800083c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800083e:	4b1b      	ldr	r3, [pc, #108]	; (80008ac <MX_TIM1_Init+0xac>)
 8000840:	2200      	movs	r2, #0
 8000842:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000844:	4b19      	ldr	r3, [pc, #100]	; (80008ac <MX_TIM1_Init+0xac>)
 8000846:	2200      	movs	r2, #0
 8000848:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800084a:	2303      	movs	r3, #3
 800084c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800084e:	2300      	movs	r3, #0
 8000850:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000852:	2301      	movs	r3, #1
 8000854:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800085e:	2300      	movs	r3, #0
 8000860:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000862:	2301      	movs	r3, #1
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000866:	2300      	movs	r3, #0
 8000868:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800086a:	2300      	movs	r3, #0
 800086c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800086e:	f107 030c 	add.w	r3, r7, #12
 8000872:	4619      	mov	r1, r3
 8000874:	480d      	ldr	r0, [pc, #52]	; (80008ac <MX_TIM1_Init+0xac>)
 8000876:	f00a f89b 	bl	800a9b0 <HAL_TIM_Encoder_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000880:	f000 ff26 	bl	80016d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000884:	2300      	movs	r3, #0
 8000886:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000888:	2300      	movs	r3, #0
 800088a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800088c:	2300      	movs	r3, #0
 800088e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000890:	463b      	mov	r3, r7
 8000892:	4619      	mov	r1, r3
 8000894:	4805      	ldr	r0, [pc, #20]	; (80008ac <MX_TIM1_Init+0xac>)
 8000896:	f00b f953 	bl	800bb40 <HAL_TIMEx_MasterConfigSynchronization>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80008a0:	f000 ff16 	bl	80016d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80008a4:	bf00      	nop
 80008a6:	3730      	adds	r7, #48	; 0x30
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	24000094 	.word	0x24000094
 80008b0:	40010000 	.word	0x40010000

080008b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08a      	sub	sp, #40	; 0x28
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008c6:	463b      	mov	r3, r7
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
 80008d4:	615a      	str	r2, [r3, #20]
 80008d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008d8:	4b27      	ldr	r3, [pc, #156]	; (8000978 <MX_TIM2_Init+0xc4>)
 80008da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 80008e0:	4b25      	ldr	r3, [pc, #148]	; (8000978 <MX_TIM2_Init+0xc4>)
 80008e2:	223f      	movs	r2, #63	; 0x3f
 80008e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e6:	4b24      	ldr	r3, [pc, #144]	; (8000978 <MX_TIM2_Init+0xc4>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49;
 80008ec:	4b22      	ldr	r3, [pc, #136]	; (8000978 <MX_TIM2_Init+0xc4>)
 80008ee:	2231      	movs	r2, #49	; 0x31
 80008f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f2:	4b21      	ldr	r3, [pc, #132]	; (8000978 <MX_TIM2_Init+0xc4>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f8:	4b1f      	ldr	r3, [pc, #124]	; (8000978 <MX_TIM2_Init+0xc4>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008fe:	481e      	ldr	r0, [pc, #120]	; (8000978 <MX_TIM2_Init+0xc4>)
 8000900:	f009 fee2 	bl	800a6c8 <HAL_TIM_PWM_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800090a:	f000 fee1 	bl	80016d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	4816      	ldr	r0, [pc, #88]	; (8000978 <MX_TIM2_Init+0xc4>)
 800091e:	f00b f90f 	bl	800bb40 <HAL_TIMEx_MasterConfigSynchronization>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000928:	f000 fed2 	bl	80016d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800092c:	2360      	movs	r3, #96	; 0x60
 800092e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000934:	2300      	movs	r3, #0
 8000936:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000938:	2300      	movs	r3, #0
 800093a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800093c:	463b      	mov	r3, r7
 800093e:	2200      	movs	r2, #0
 8000940:	4619      	mov	r1, r3
 8000942:	480d      	ldr	r0, [pc, #52]	; (8000978 <MX_TIM2_Init+0xc4>)
 8000944:	f00a fa88 	bl	800ae58 <HAL_TIM_PWM_ConfigChannel>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800094e:	f000 febf 	bl	80016d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000952:	463b      	mov	r3, r7
 8000954:	220c      	movs	r2, #12
 8000956:	4619      	mov	r1, r3
 8000958:	4807      	ldr	r0, [pc, #28]	; (8000978 <MX_TIM2_Init+0xc4>)
 800095a:	f00a fa7d 	bl	800ae58 <HAL_TIM_PWM_ConfigChannel>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000964:	f000 feb4 	bl	80016d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000968:	4803      	ldr	r0, [pc, #12]	; (8000978 <MX_TIM2_Init+0xc4>)
 800096a:	f003 fc49 	bl	8004200 <HAL_TIM_MspPostInit>

}
 800096e:	bf00      	nop
 8000970:	3728      	adds	r7, #40	; 0x28
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	240000e0 	.word	0x240000e0

0800097c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b088      	sub	sp, #32
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000982:	f107 0310 	add.w	r3, r7, #16
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
 800098e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800099a:	4b1d      	ldr	r3, [pc, #116]	; (8000a10 <MX_TIM3_Init+0x94>)
 800099c:	4a1d      	ldr	r2, [pc, #116]	; (8000a14 <MX_TIM3_Init+0x98>)
 800099e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 80009a0:	4b1b      	ldr	r3, [pc, #108]	; (8000a10 <MX_TIM3_Init+0x94>)
 80009a2:	223f      	movs	r2, #63	; 0x3f
 80009a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a6:	4b1a      	ldr	r3, [pc, #104]	; (8000a10 <MX_TIM3_Init+0x94>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80009ac:	4b18      	ldr	r3, [pc, #96]	; (8000a10 <MX_TIM3_Init+0x94>)
 80009ae:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009b4:	4b16      	ldr	r3, [pc, #88]	; (8000a10 <MX_TIM3_Init+0x94>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ba:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <MX_TIM3_Init+0x94>)
 80009bc:	2200      	movs	r2, #0
 80009be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009c0:	4813      	ldr	r0, [pc, #76]	; (8000a10 <MX_TIM3_Init+0x94>)
 80009c2:	f009 fda3 	bl	800a50c <HAL_TIM_Base_Init>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80009cc:	f000 fe80 	bl	80016d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009d6:	f107 0310 	add.w	r3, r7, #16
 80009da:	4619      	mov	r1, r3
 80009dc:	480c      	ldr	r0, [pc, #48]	; (8000a10 <MX_TIM3_Init+0x94>)
 80009de:	f00a fb4f 	bl	800b080 <HAL_TIM_ConfigClockSource>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80009e8:	f000 fe72 	bl	80016d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ec:	2300      	movs	r3, #0
 80009ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f0:	2300      	movs	r3, #0
 80009f2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	4619      	mov	r1, r3
 80009f8:	4805      	ldr	r0, [pc, #20]	; (8000a10 <MX_TIM3_Init+0x94>)
 80009fa:	f00b f8a1 	bl	800bb40 <HAL_TIMEx_MasterConfigSynchronization>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000a04:	f000 fe64 	bl	80016d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a08:	bf00      	nop
 8000a0a:	3720      	adds	r7, #32
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	2400012c 	.word	0x2400012c
 8000a14:	40000400 	.word	0x40000400

08000a18 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08c      	sub	sp, #48	; 0x30
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a1e:	f107 030c 	add.w	r3, r7, #12
 8000a22:	2224      	movs	r2, #36	; 0x24
 8000a24:	2100      	movs	r1, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f00d fb5e 	bl	800e0e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a2c:	463b      	mov	r3, r7
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a36:	4b21      	ldr	r3, [pc, #132]	; (8000abc <MX_TIM4_Init+0xa4>)
 8000a38:	4a21      	ldr	r2, [pc, #132]	; (8000ac0 <MX_TIM4_Init+0xa8>)
 8000a3a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000a3c:	4b1f      	ldr	r3, [pc, #124]	; (8000abc <MX_TIM4_Init+0xa4>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a42:	4b1e      	ldr	r3, [pc, #120]	; (8000abc <MX_TIM4_Init+0xa4>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000a48:	4b1c      	ldr	r3, [pc, #112]	; (8000abc <MX_TIM4_Init+0xa4>)
 8000a4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a4e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a50:	4b1a      	ldr	r3, [pc, #104]	; (8000abc <MX_TIM4_Init+0xa4>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a56:	4b19      	ldr	r3, [pc, #100]	; (8000abc <MX_TIM4_Init+0xa4>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a60:	2300      	movs	r3, #0
 8000a62:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a64:	2301      	movs	r3, #1
 8000a66:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a70:	2300      	movs	r3, #0
 8000a72:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a74:	2301      	movs	r3, #1
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000a80:	f107 030c 	add.w	r3, r7, #12
 8000a84:	4619      	mov	r1, r3
 8000a86:	480d      	ldr	r0, [pc, #52]	; (8000abc <MX_TIM4_Init+0xa4>)
 8000a88:	f009 ff92 	bl	800a9b0 <HAL_TIM_Encoder_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000a92:	f000 fe1d 	bl	80016d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a96:	2300      	movs	r3, #0
 8000a98:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a9e:	463b      	mov	r3, r7
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4806      	ldr	r0, [pc, #24]	; (8000abc <MX_TIM4_Init+0xa4>)
 8000aa4:	f00b f84c 	bl	800bb40 <HAL_TIMEx_MasterConfigSynchronization>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000aae:	f000 fe0f 	bl	80016d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	3730      	adds	r7, #48	; 0x30
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	24000178 	.word	0x24000178
 8000ac0:	40000800 	.word	0x40000800

08000ac4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b098      	sub	sp, #96	; 0x60
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]
 8000ad4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ad6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
 8000ae4:	611a      	str	r2, [r3, #16]
 8000ae6:	615a      	str	r2, [r3, #20]
 8000ae8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	2234      	movs	r2, #52	; 0x34
 8000aee:	2100      	movs	r1, #0
 8000af0:	4618      	mov	r0, r3
 8000af2:	f00d faf9 	bl	800e0e8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000af6:	4b38      	ldr	r3, [pc, #224]	; (8000bd8 <MX_TIM8_Init+0x114>)
 8000af8:	4a38      	ldr	r2, [pc, #224]	; (8000bdc <MX_TIM8_Init+0x118>)
 8000afa:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 63;
 8000afc:	4b36      	ldr	r3, [pc, #216]	; (8000bd8 <MX_TIM8_Init+0x114>)
 8000afe:	223f      	movs	r2, #63	; 0x3f
 8000b00:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b02:	4b35      	ldr	r3, [pc, #212]	; (8000bd8 <MX_TIM8_Init+0x114>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 49;
 8000b08:	4b33      	ldr	r3, [pc, #204]	; (8000bd8 <MX_TIM8_Init+0x114>)
 8000b0a:	2231      	movs	r2, #49	; 0x31
 8000b0c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0e:	4b32      	ldr	r3, [pc, #200]	; (8000bd8 <MX_TIM8_Init+0x114>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000b14:	4b30      	ldr	r3, [pc, #192]	; (8000bd8 <MX_TIM8_Init+0x114>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b1a:	4b2f      	ldr	r3, [pc, #188]	; (8000bd8 <MX_TIM8_Init+0x114>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000b20:	482d      	ldr	r0, [pc, #180]	; (8000bd8 <MX_TIM8_Init+0x114>)
 8000b22:	f009 fdd1 	bl	800a6c8 <HAL_TIM_PWM_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8000b2c:	f000 fdd0 	bl	80016d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b30:	2300      	movs	r3, #0
 8000b32:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b34:	2300      	movs	r3, #0
 8000b36:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000b3c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b40:	4619      	mov	r1, r3
 8000b42:	4825      	ldr	r0, [pc, #148]	; (8000bd8 <MX_TIM8_Init+0x114>)
 8000b44:	f00a fffc 	bl	800bb40 <HAL_TIMEx_MasterConfigSynchronization>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM8_Init+0x8e>
  {
    Error_Handler();
 8000b4e:	f000 fdbf 	bl	80016d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b52:	2360      	movs	r3, #96	; 0x60
 8000b54:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b62:	2300      	movs	r3, #0
 8000b64:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b66:	2300      	movs	r3, #0
 8000b68:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b6e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b72:	2208      	movs	r2, #8
 8000b74:	4619      	mov	r1, r3
 8000b76:	4818      	ldr	r0, [pc, #96]	; (8000bd8 <MX_TIM8_Init+0x114>)
 8000b78:	f00a f96e 	bl	800ae58 <HAL_TIM_PWM_ConfigChannel>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8000b82:	f000 fda5 	bl	80016d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b86:	2300      	movs	r3, #0
 8000b88:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b96:	2300      	movs	r3, #0
 8000b98:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b9e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ba8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000bac:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4807      	ldr	r0, [pc, #28]	; (8000bd8 <MX_TIM8_Init+0x114>)
 8000bbc:	f00b f85c 	bl	800bc78 <HAL_TIMEx_ConfigBreakDeadTime>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_TIM8_Init+0x106>
  {
    Error_Handler();
 8000bc6:	f000 fd83 	bl	80016d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000bca:	4803      	ldr	r0, [pc, #12]	; (8000bd8 <MX_TIM8_Init+0x114>)
 8000bcc:	f003 fb18 	bl	8004200 <HAL_TIM_MspPostInit>

}
 8000bd0:	bf00      	nop
 8000bd2:	3760      	adds	r7, #96	; 0x60
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	240001c4 	.word	0x240001c4
 8000bdc:	40010400 	.word	0x40010400

08000be0 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08c      	sub	sp, #48	; 0x30
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000be6:	f107 030c 	add.w	r3, r7, #12
 8000bea:	2224      	movs	r2, #36	; 0x24
 8000bec:	2100      	movs	r1, #0
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f00d fa7a 	bl	800e0e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf4:	463b      	mov	r3, r7
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8000bfe:	4b21      	ldr	r3, [pc, #132]	; (8000c84 <MX_TIM23_Init+0xa4>)
 8000c00:	4a21      	ldr	r2, [pc, #132]	; (8000c88 <MX_TIM23_Init+0xa8>)
 8000c02:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 0;
 8000c04:	4b1f      	ldr	r3, [pc, #124]	; (8000c84 <MX_TIM23_Init+0xa4>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c0a:	4b1e      	ldr	r3, [pc, #120]	; (8000c84 <MX_TIM23_Init+0xa4>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 8000c10:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <MX_TIM23_Init+0xa4>)
 8000c12:	f04f 32ff 	mov.w	r2, #4294967295
 8000c16:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c18:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <MX_TIM23_Init+0xa4>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c1e:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <MX_TIM23_Init+0xa4>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c24:	2303      	movs	r3, #3
 8000c26:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c40:	2300      	movs	r3, #0
 8000c42:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim23, &sConfig) != HAL_OK)
 8000c48:	f107 030c 	add.w	r3, r7, #12
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	480d      	ldr	r0, [pc, #52]	; (8000c84 <MX_TIM23_Init+0xa4>)
 8000c50:	f009 feae 	bl	800a9b0 <HAL_TIM_Encoder_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_TIM23_Init+0x7e>
  {
    Error_Handler();
 8000c5a:	f000 fd39 	bl	80016d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c62:	2300      	movs	r3, #0
 8000c64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8000c66:	463b      	mov	r3, r7
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4806      	ldr	r0, [pc, #24]	; (8000c84 <MX_TIM23_Init+0xa4>)
 8000c6c:	f00a ff68 	bl	800bb40 <HAL_TIMEx_MasterConfigSynchronization>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_TIM23_Init+0x9a>
  {
    Error_Handler();
 8000c76:	f000 fd2b 	bl	80016d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 8000c7a:	bf00      	nop
 8000c7c:	3730      	adds	r7, #48	; 0x30
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	24000210 	.word	0x24000210
 8000c88:	4000e000 	.word	0x4000e000

08000c8c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c90:	4b22      	ldr	r3, [pc, #136]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000c92:	4a23      	ldr	r2, [pc, #140]	; (8000d20 <MX_USART3_UART_Init+0x94>)
 8000c94:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c96:	4b21      	ldr	r3, [pc, #132]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000c98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c9c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c9e:	4b1f      	ldr	r3, [pc, #124]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ca4:	4b1d      	ldr	r3, [pc, #116]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000caa:	4b1c      	ldr	r3, [pc, #112]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cb0:	4b1a      	ldr	r3, [pc, #104]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000cb2:	220c      	movs	r2, #12
 8000cb4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cb6:	4b19      	ldr	r3, [pc, #100]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cbc:	4b17      	ldr	r3, [pc, #92]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cc2:	4b16      	ldr	r3, [pc, #88]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cc8:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cce:	4b13      	ldr	r3, [pc, #76]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cd4:	4811      	ldr	r0, [pc, #68]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000cd6:	f00b f88d 	bl	800bdf4 <HAL_UART_Init>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ce0:	f000 fcf6 	bl	80016d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	480d      	ldr	r0, [pc, #52]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000ce8:	f00d f8e0 	bl	800deac <HAL_UARTEx_SetTxFifoThreshold>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000cf2:	f000 fced 	bl	80016d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	4808      	ldr	r0, [pc, #32]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000cfa:	f00d f915 	bl	800df28 <HAL_UARTEx_SetRxFifoThreshold>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d04:	f000 fce4 	bl	80016d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d08:	4804      	ldr	r0, [pc, #16]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000d0a:	f00d f896 	bl	800de3a <HAL_UARTEx_DisableFifoMode>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d14:	f000 fcdc 	bl	80016d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	2400025c 	.word	0x2400025c
 8000d20:	40004800 	.word	0x40004800

08000d24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d2a:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <MX_DMA_Init+0x4c>)
 8000d2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d30:	4a0f      	ldr	r2, [pc, #60]	; (8000d70 <MX_DMA_Init+0x4c>)
 8000d32:	f043 0301 	orr.w	r3, r3, #1
 8000d36:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d3a:	4b0d      	ldr	r3, [pc, #52]	; (8000d70 <MX_DMA_Init+0x4c>)
 8000d3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d40:	f003 0301 	and.w	r3, r3, #1
 8000d44:	607b      	str	r3, [r7, #4]
 8000d46:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	200b      	movs	r0, #11
 8000d4e:	f003 fe4a 	bl	80049e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d52:	200b      	movs	r0, #11
 8000d54:	f003 fe61 	bl	8004a1a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	200c      	movs	r0, #12
 8000d5e:	f003 fe42 	bl	80049e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d62:	200c      	movs	r0, #12
 8000d64:	f003 fe59 	bl	8004a1a <HAL_NVIC_EnableIRQ>

}
 8000d68:	bf00      	nop
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	58024400 	.word	0x58024400

08000d74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08c      	sub	sp, #48	; 0x30
 8000d78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7a:	f107 031c 	add.w	r3, r7, #28
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	609a      	str	r2, [r3, #8]
 8000d86:	60da      	str	r2, [r3, #12]
 8000d88:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d8a:	4b39      	ldr	r3, [pc, #228]	; (8000e70 <MX_GPIO_Init+0xfc>)
 8000d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d90:	4a37      	ldr	r2, [pc, #220]	; (8000e70 <MX_GPIO_Init+0xfc>)
 8000d92:	f043 0310 	orr.w	r3, r3, #16
 8000d96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d9a:	4b35      	ldr	r3, [pc, #212]	; (8000e70 <MX_GPIO_Init+0xfc>)
 8000d9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da0:	f003 0310 	and.w	r3, r3, #16
 8000da4:	61bb      	str	r3, [r7, #24]
 8000da6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000da8:	4b31      	ldr	r3, [pc, #196]	; (8000e70 <MX_GPIO_Init+0xfc>)
 8000daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dae:	4a30      	ldr	r2, [pc, #192]	; (8000e70 <MX_GPIO_Init+0xfc>)
 8000db0:	f043 0320 	orr.w	r3, r3, #32
 8000db4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000db8:	4b2d      	ldr	r3, [pc, #180]	; (8000e70 <MX_GPIO_Init+0xfc>)
 8000dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dbe:	f003 0320 	and.w	r3, r3, #32
 8000dc2:	617b      	str	r3, [r7, #20]
 8000dc4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dc6:	4b2a      	ldr	r3, [pc, #168]	; (8000e70 <MX_GPIO_Init+0xfc>)
 8000dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dcc:	4a28      	ldr	r2, [pc, #160]	; (8000e70 <MX_GPIO_Init+0xfc>)
 8000dce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dd6:	4b26      	ldr	r3, [pc, #152]	; (8000e70 <MX_GPIO_Init+0xfc>)
 8000dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000de0:	613b      	str	r3, [r7, #16]
 8000de2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de4:	4b22      	ldr	r3, [pc, #136]	; (8000e70 <MX_GPIO_Init+0xfc>)
 8000de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dea:	4a21      	ldr	r2, [pc, #132]	; (8000e70 <MX_GPIO_Init+0xfc>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000df4:	4b1e      	ldr	r3, [pc, #120]	; (8000e70 <MX_GPIO_Init+0xfc>)
 8000df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e02:	4b1b      	ldr	r3, [pc, #108]	; (8000e70 <MX_GPIO_Init+0xfc>)
 8000e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e08:	4a19      	ldr	r2, [pc, #100]	; (8000e70 <MX_GPIO_Init+0xfc>)
 8000e0a:	f043 0308 	orr.w	r3, r3, #8
 8000e0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e12:	4b17      	ldr	r3, [pc, #92]	; (8000e70 <MX_GPIO_Init+0xfc>)
 8000e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e18:	f003 0308 	and.w	r3, r3, #8
 8000e1c:	60bb      	str	r3, [r7, #8]
 8000e1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e20:	4b13      	ldr	r3, [pc, #76]	; (8000e70 <MX_GPIO_Init+0xfc>)
 8000e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e26:	4a12      	ldr	r2, [pc, #72]	; (8000e70 <MX_GPIO_Init+0xfc>)
 8000e28:	f043 0304 	orr.w	r3, r3, #4
 8000e2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e30:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <MX_GPIO_Init+0xfc>)
 8000e32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e36:	f003 0304 	and.w	r3, r3, #4
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f249 51c0 	movw	r1, #38336	; 0x95c0
 8000e44:	480b      	ldr	r0, [pc, #44]	; (8000e74 <MX_GPIO_Init+0x100>)
 8000e46:	f006 fde5 	bl	8007a14 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE6 PE7 PE8 PE10
                           PE12 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 8000e4a:	f249 53c0 	movw	r3, #38336	; 0x95c0
 8000e4e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e50:	2301      	movs	r3, #1
 8000e52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e5c:	f107 031c 	add.w	r3, r7, #28
 8000e60:	4619      	mov	r1, r3
 8000e62:	4804      	ldr	r0, [pc, #16]	; (8000e74 <MX_GPIO_Init+0x100>)
 8000e64:	f006 fc2e 	bl	80076c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e68:	bf00      	nop
 8000e6a:	3730      	adds	r7, #48	; 0x30
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	58024400 	.word	0x58024400
 8000e74:	58021000 	.word	0x58021000

08000e78 <HAL_TIM_PeriodElapsedCallback>:
void inverse_kinematics_model();
void Encoder();
void PID_PWM();
void kinematics_model();

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a08      	ldr	r2, [pc, #32]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d109      	bne.n	8000e9e <HAL_TIM_PeriodElapsedCallback+0x26>
    loop();
 8000e8a:	f002 fa49 	bl	8003320 <loop>
		inverse_kinematics_model();
 8000e8e:	f000 f80f 	bl	8000eb0 <inverse_kinematics_model>
		Encoder();
 8000e92:	f000 f895 	bl	8000fc0 <Encoder>
		PID_PWM();
 8000e96:	f000 f91f 	bl	80010d8 <PID_PWM>
		kinematics_model();
 8000e9a:	f000 fb89 	bl	80015b0 <kinematics_model>
	}
}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40000400 	.word	0x40000400
 8000eac:	00000000 	.word	0x00000000

08000eb0 <inverse_kinematics_model>:
void inverse_kinematics_model(){
 8000eb0:	b480      	push	{r7}
 8000eb2:	b087      	sub	sp, #28
 8000eb4:	af00      	add	r7, sp, #0
	Am = A - rA;
	Wm = Am*motor_span;
	W += Wm;
	A += W*motor_span;
	*/
	WF = Vx - LF*W;
 8000eb6:	4b3c      	ldr	r3, [pc, #240]	; (8000fa8 <inverse_kinematics_model+0xf8>)
 8000eb8:	ed93 6b00 	vldr	d6, [r3]
 8000ebc:	4b3b      	ldr	r3, [pc, #236]	; (8000fac <inverse_kinematics_model+0xfc>)
 8000ebe:	ed93 7b00 	vldr	d7, [r3]
 8000ec2:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 8000f80 <inverse_kinematics_model+0xd0>
 8000ec6:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000eca:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000ece:	ed87 7b04 	vstr	d7, [r7, #16]
	WR = -cos(degree60)*Vx - sin(degree60)*Vy - LR*W;
 8000ed2:	4b35      	ldr	r3, [pc, #212]	; (8000fa8 <inverse_kinematics_model+0xf8>)
 8000ed4:	ed93 7b00 	vldr	d7, [r3]
 8000ed8:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 8000f88 <inverse_kinematics_model+0xd8>
 8000edc:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000ee0:	4b33      	ldr	r3, [pc, #204]	; (8000fb0 <inverse_kinematics_model+0x100>)
 8000ee2:	ed93 7b00 	vldr	d7, [r3]
 8000ee6:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8000f90 <inverse_kinematics_model+0xe0>
 8000eea:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000eee:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000ef2:	4b2e      	ldr	r3, [pc, #184]	; (8000fac <inverse_kinematics_model+0xfc>)
 8000ef4:	ed93 7b00 	vldr	d7, [r3]
 8000ef8:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8000f80 <inverse_kinematics_model+0xd0>
 8000efc:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000f00:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000f04:	ed87 7b02 	vstr	d7, [r7, #8]
	WL = -sin(degree30)*Vx + cos(degree30)*Vy - LL*W;
 8000f08:	4b27      	ldr	r3, [pc, #156]	; (8000fa8 <inverse_kinematics_model+0xf8>)
 8000f0a:	ed93 7b00 	vldr	d7, [r3]
 8000f0e:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8000f98 <inverse_kinematics_model+0xe8>
 8000f12:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000f16:	4b26      	ldr	r3, [pc, #152]	; (8000fb0 <inverse_kinematics_model+0x100>)
 8000f18:	ed93 7b00 	vldr	d7, [r3]
 8000f1c:	ed9f 5b20 	vldr	d5, [pc, #128]	; 8000fa0 <inverse_kinematics_model+0xf0>
 8000f20:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000f24:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000f28:	4b20      	ldr	r3, [pc, #128]	; (8000fac <inverse_kinematics_model+0xfc>)
 8000f2a:	ed93 7b00 	vldr	d7, [r3]
 8000f2e:	ed9f 5b14 	vldr	d5, [pc, #80]	; 8000f80 <inverse_kinematics_model+0xd0>
 8000f32:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000f36:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000f3a:	ed87 7b00 	vstr	d7, [r7]

	MF = WF/ratio_motor2wheel;
 8000f3e:	ed97 6b04 	vldr	d6, [r7, #16]
 8000f42:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8000f46:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f4a:	4b1a      	ldr	r3, [pc, #104]	; (8000fb4 <inverse_kinematics_model+0x104>)
 8000f4c:	ed83 7b00 	vstr	d7, [r3]
	MR = WR/ratio_motor2wheel;
 8000f50:	ed97 6b02 	vldr	d6, [r7, #8]
 8000f54:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8000f58:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f5c:	4b16      	ldr	r3, [pc, #88]	; (8000fb8 <inverse_kinematics_model+0x108>)
 8000f5e:	ed83 7b00 	vstr	d7, [r3]
	ML = WL/ratio_motor2wheel;
 8000f62:	ed97 6b00 	vldr	d6, [r7]
 8000f66:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8000f6a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f6e:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <inverse_kinematics_model+0x10c>)
 8000f70:	ed83 7b00 	vstr	d7, [r3]
	}
 8000f74:	bf00      	nop
 8000f76:	371c      	adds	r7, #28
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	00000000 	.word	0x00000000
 8000f84:	40590000 	.word	0x40590000
 8000f88:	fffffbcc 	.word	0xfffffbcc
 8000f8c:	bfdfffff 	.word	0xbfdfffff
 8000f90:	e8584de1 	.word	0xe8584de1
 8000f94:	3febb67a 	.word	0x3febb67a
 8000f98:	0000010d 	.word	0x0000010d
 8000f9c:	bfe00000 	.word	0xbfe00000
 8000fa0:	e8584c0f 	.word	0xe8584c0f
 8000fa4:	3febb67a 	.word	0x3febb67a
 8000fa8:	240003e0 	.word	0x240003e0
 8000fac:	240003f0 	.word	0x240003f0
 8000fb0:	240003e8 	.word	0x240003e8
 8000fb4:	240003f8 	.word	0x240003f8
 8000fb8:	24000400 	.word	0x24000400
 8000fbc:	24000408 	.word	0x24000408

08000fc0 <Encoder>:
void Encoder() {
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
	//front wheel motor
	enc_MF = __HAL_TIM_GetCounter(TIM_ENC_MF);
 8000fc4:	4b3a      	ldr	r3, [pc, #232]	; (80010b0 <Encoder+0xf0>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fca:	b21a      	sxth	r2, r3
 8000fcc:	4b39      	ldr	r3, [pc, #228]	; (80010b4 <Encoder+0xf4>)
 8000fce:	801a      	strh	r2, [r3, #0]
	rMF = (double) enc_MF / (4 * resolution_MF * reductionratio_MF) / motor_span/(2*pi);
 8000fd0:	4b38      	ldr	r3, [pc, #224]	; (80010b4 <Encoder+0xf4>)
 8000fd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fd6:	ee07 3a90 	vmov	s15, r3
 8000fda:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000fde:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8001090 <Encoder+0xd0>
 8000fe2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fe6:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8001098 <Encoder+0xd8>
 8000fea:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000fee:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 80010a0 <Encoder+0xe0>
 8000ff2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ff6:	4b30      	ldr	r3, [pc, #192]	; (80010b8 <Encoder+0xf8>)
 8000ff8:	ed83 7b00 	vstr	d7, [r3]
	__HAL_TIM_SetCounter(TIM_ENC_MF, 0);
 8000ffc:	4b2c      	ldr	r3, [pc, #176]	; (80010b0 <Encoder+0xf0>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2200      	movs	r2, #0
 8001002:	625a      	str	r2, [r3, #36]	; 0x24

	//right wheel motor
	enc_MR = __HAL_TIM_GetCounter(TIM_ENC_MR);
 8001004:	4b2d      	ldr	r3, [pc, #180]	; (80010bc <Encoder+0xfc>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800100a:	b21a      	sxth	r2, r3
 800100c:	4b2c      	ldr	r3, [pc, #176]	; (80010c0 <Encoder+0x100>)
 800100e:	801a      	strh	r2, [r3, #0]
	rMR = (double) enc_MR / (4 * resolution_MR * reductionratio_MR) / motor_span/(2*pi);
 8001010:	4b2b      	ldr	r3, [pc, #172]	; (80010c0 <Encoder+0x100>)
 8001012:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001016:	ee07 3a90 	vmov	s15, r3
 800101a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800101e:	ed9f 5b22 	vldr	d5, [pc, #136]	; 80010a8 <Encoder+0xe8>
 8001022:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001026:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 8001098 <Encoder+0xd8>
 800102a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800102e:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 80010a0 <Encoder+0xe0>
 8001032:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001036:	4b23      	ldr	r3, [pc, #140]	; (80010c4 <Encoder+0x104>)
 8001038:	ed83 7b00 	vstr	d7, [r3]
	__HAL_TIM_SetCounter(TIM_ENC_MR, 0);
 800103c:	4b1f      	ldr	r3, [pc, #124]	; (80010bc <Encoder+0xfc>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2200      	movs	r2, #0
 8001042:	625a      	str	r2, [r3, #36]	; 0x24

	//left wheel motor
	enc_ML = __HAL_TIM_GetCounter(TIM_ENC_ML);
 8001044:	4b20      	ldr	r3, [pc, #128]	; (80010c8 <Encoder+0x108>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800104a:	b21a      	sxth	r2, r3
 800104c:	4b1f      	ldr	r3, [pc, #124]	; (80010cc <Encoder+0x10c>)
 800104e:	801a      	strh	r2, [r3, #0]
	rML = (double) enc_ML / (4 * resolution_ML * reductionratio_ML) / motor_span/(2*pi);
 8001050:	4b1e      	ldr	r3, [pc, #120]	; (80010cc <Encoder+0x10c>)
 8001052:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001056:	ee07 3a90 	vmov	s15, r3
 800105a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800105e:	ed9f 5b12 	vldr	d5, [pc, #72]	; 80010a8 <Encoder+0xe8>
 8001062:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001066:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 8001098 <Encoder+0xd8>
 800106a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800106e:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 80010a0 <Encoder+0xe0>
 8001072:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001076:	4b16      	ldr	r3, [pc, #88]	; (80010d0 <Encoder+0x110>)
 8001078:	ed83 7b00 	vstr	d7, [r3]
	__HAL_TIM_SetCounter(TIM_ENC_ML, 0);
 800107c:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <Encoder+0x108>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2200      	movs	r2, #0
 8001082:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	00000000 	.word	0x00000000
 8001094:	40e00000 	.word	0x40e00000
 8001098:	d2f1a9fc 	.word	0xd2f1a9fc
 800109c:	3f50624d 	.word	0x3f50624d
 80010a0:	54442eea 	.word	0x54442eea
 80010a4:	401921fb 	.word	0x401921fb
 80010a8:	00000000 	.word	0x00000000
 80010ac:	40d9c800 	.word	0x40d9c800
 80010b0:	24000094 	.word	0x24000094
 80010b4:	24000428 	.word	0x24000428
 80010b8:	24000430 	.word	0x24000430
 80010bc:	24000210 	.word	0x24000210
 80010c0:	2400042a 	.word	0x2400042a
 80010c4:	24000438 	.word	0x24000438
 80010c8:	24000178 	.word	0x24000178
 80010cc:	2400042c 	.word	0x2400042c
 80010d0:	24000440 	.word	0x24000440
 80010d4:	00000000 	.word	0x00000000

080010d8 <PID_PWM>:
void PID_PWM(){
 80010d8:	b580      	push	{r7, lr}
 80010da:	b092      	sub	sp, #72	; 0x48
 80010dc:	af00      	add	r7, sp, #0

	//PID_MF
	double err_MF = MF - rMF;
 80010de:	4bac      	ldr	r3, [pc, #688]	; (8001390 <PID_PWM+0x2b8>)
 80010e0:	ed93 6b00 	vldr	d6, [r3]
 80010e4:	4bab      	ldr	r3, [pc, #684]	; (8001394 <PID_PWM+0x2bc>)
 80010e6:	ed93 7b00 	vldr	d7, [r3]
 80010ea:	ee36 7b47 	vsub.f64	d7, d6, d7
 80010ee:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	inte_MF += err_MF * motor_span;
 80010f2:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80010f6:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 8001388 <PID_PWM+0x2b0>
 80010fa:	ee27 6b06 	vmul.f64	d6, d7, d6
 80010fe:	4ba6      	ldr	r3, [pc, #664]	; (8001398 <PID_PWM+0x2c0>)
 8001100:	ed93 7b00 	vldr	d7, [r3]
 8001104:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001108:	4ba3      	ldr	r3, [pc, #652]	; (8001398 <PID_PWM+0x2c0>)
 800110a:	ed83 7b00 	vstr	d7, [r3]
	double bound_MF = 1/ki_MF;
 800110e:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 800139c <PID_PWM+0x2c4>
 8001112:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001116:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800111a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800111e:	ed87 7b08 	vstr	d7, [r7, #32]
	if (ki_MF * inte_MF > 1) inte_MF = bound_MF;
 8001122:	eddf 7a9e 	vldr	s15, [pc, #632]	; 800139c <PID_PWM+0x2c4>
 8001126:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800112a:	4b9b      	ldr	r3, [pc, #620]	; (8001398 <PID_PWM+0x2c0>)
 800112c:	ed93 7b00 	vldr	d7, [r3]
 8001130:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001134:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001138:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800113c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001140:	dd05      	ble.n	800114e <PID_PWM+0x76>
 8001142:	4995      	ldr	r1, [pc, #596]	; (8001398 <PID_PWM+0x2c0>)
 8001144:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001148:	e9c1 2300 	strd	r2, r3, [r1]
 800114c:	e016      	b.n	800117c <PID_PWM+0xa4>
	else if (ki_MF * inte_MF < -1) inte_MF = -bound_MF;
 800114e:	eddf 7a93 	vldr	s15, [pc, #588]	; 800139c <PID_PWM+0x2c4>
 8001152:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001156:	4b90      	ldr	r3, [pc, #576]	; (8001398 <PID_PWM+0x2c0>)
 8001158:	ed93 7b00 	vldr	d7, [r3]
 800115c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001160:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8001164:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800116c:	d506      	bpl.n	800117c <PID_PWM+0xa4>
 800116e:	ed97 7b08 	vldr	d7, [r7, #32]
 8001172:	eeb1 7b47 	vneg.f64	d7, d7
 8001176:	4b88      	ldr	r3, [pc, #544]	; (8001398 <PID_PWM+0x2c0>)
 8001178:	ed83 7b00 	vstr	d7, [r3]
	float u_MF = kp_MF * err_MF + ki_MF * inte_MF;
 800117c:	eddf 7a88 	vldr	s15, [pc, #544]	; 80013a0 <PID_PWM+0x2c8>
 8001180:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001184:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001188:	ee26 6b07 	vmul.f64	d6, d6, d7
 800118c:	eddf 7a83 	vldr	s15, [pc, #524]	; 800139c <PID_PWM+0x2c4>
 8001190:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001194:	4b80      	ldr	r3, [pc, #512]	; (8001398 <PID_PWM+0x2c0>)
 8001196:	ed93 7b00 	vldr	d7, [r3]
 800119a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800119e:	ee36 7b07 	vadd.f64	d7, d6, d7
 80011a2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011a6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	if (u_MF > 1) u_MF = 1;
 80011aa:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80011ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80011b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ba:	dd03      	ble.n	80011c4 <PID_PWM+0xec>
 80011bc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80011c0:	647b      	str	r3, [r7, #68]	; 0x44
 80011c2:	e00a      	b.n	80011da <PID_PWM+0x102>
	else if (u_MF < -1) u_MF = -1;
 80011c4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80011c8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80011cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d4:	d501      	bpl.n	80011da <PID_PWM+0x102>
 80011d6:	4b73      	ldr	r3, [pc, #460]	; (80013a4 <PID_PWM+0x2cc>)
 80011d8:	647b      	str	r3, [r7, #68]	; 0x44

	//PWM_MF
	int pulse_MF;
	if (u_MF > 0) {
 80011da:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80011de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011e6:	dd16      	ble.n	8001216 <PID_PWM+0x13e>
		pulse_MF = (int) (u_MF * (motorARR + 1));
 80011e8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80011ec:	ed9f 7a75 	vldr	s14, [pc, #468]	; 80013c4 <PID_PWM+0x2ec>
 80011f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011f8:	ee17 3a90 	vmov	r3, s15
 80011fc:	643b      	str	r3, [r7, #64]	; 0x40
		HAL_GPIO_WritePin(INA_MF_PORT, INA_MF_PIN, GPIO_PIN_SET); // INA
 80011fe:	2201      	movs	r2, #1
 8001200:	2140      	movs	r1, #64	; 0x40
 8001202:	4869      	ldr	r0, [pc, #420]	; (80013a8 <PID_PWM+0x2d0>)
 8001204:	f006 fc06 	bl	8007a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB_MF_PORT, INB_MF_PIN, GPIO_PIN_RESET); // INB
 8001208:	2200      	movs	r2, #0
 800120a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800120e:	4866      	ldr	r0, [pc, #408]	; (80013a8 <PID_PWM+0x2d0>)
 8001210:	f006 fc00 	bl	8007a14 <HAL_GPIO_WritePin>
 8001214:	e017      	b.n	8001246 <PID_PWM+0x16e>
	} else {
		pulse_MF = (int) (-u_MF * (motorARR + 1));
 8001216:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800121a:	eef1 7a67 	vneg.f32	s15, s15
 800121e:	ed9f 7a69 	vldr	s14, [pc, #420]	; 80013c4 <PID_PWM+0x2ec>
 8001222:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001226:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800122a:	ee17 3a90 	vmov	r3, s15
 800122e:	643b      	str	r3, [r7, #64]	; 0x40
		HAL_GPIO_WritePin(INA_MF_PORT, INA_MF_PIN, GPIO_PIN_RESET); // INA
 8001230:	2200      	movs	r2, #0
 8001232:	2140      	movs	r1, #64	; 0x40
 8001234:	485c      	ldr	r0, [pc, #368]	; (80013a8 <PID_PWM+0x2d0>)
 8001236:	f006 fbed 	bl	8007a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB_MF_PORT, INB_MF_PIN, GPIO_PIN_SET); // INB
 800123a:	2201      	movs	r2, #1
 800123c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001240:	4859      	ldr	r0, [pc, #356]	; (80013a8 <PID_PWM+0x2d0>)
 8001242:	f006 fbe7 	bl	8007a14 <HAL_GPIO_WritePin>
	}
	__HAL_TIM_SET_COMPARE(TIM_PWM_MF, CH_PWM_MF, pulse_MF); // PWM
 8001246:	4b59      	ldr	r3, [pc, #356]	; (80013ac <PID_PWM+0x2d4>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800124c:	635a      	str	r2, [r3, #52]	; 0x34

	//PID_MR
	double err_MR = MR - rMR;
 800124e:	4b58      	ldr	r3, [pc, #352]	; (80013b0 <PID_PWM+0x2d8>)
 8001250:	ed93 6b00 	vldr	d6, [r3]
 8001254:	4b57      	ldr	r3, [pc, #348]	; (80013b4 <PID_PWM+0x2dc>)
 8001256:	ed93 7b00 	vldr	d7, [r3]
 800125a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800125e:	ed87 7b06 	vstr	d7, [r7, #24]
	inte_MR += err_MR * motor_span;
 8001262:	ed97 7b06 	vldr	d7, [r7, #24]
 8001266:	ed9f 6b48 	vldr	d6, [pc, #288]	; 8001388 <PID_PWM+0x2b0>
 800126a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800126e:	4b52      	ldr	r3, [pc, #328]	; (80013b8 <PID_PWM+0x2e0>)
 8001270:	ed93 7b00 	vldr	d7, [r3]
 8001274:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001278:	4b4f      	ldr	r3, [pc, #316]	; (80013b8 <PID_PWM+0x2e0>)
 800127a:	ed83 7b00 	vstr	d7, [r3]
	double bound_MR = 1/ki_MR;
 800127e:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80013bc <PID_PWM+0x2e4>
 8001282:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001286:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800128a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800128e:	ed87 7b04 	vstr	d7, [r7, #16]
	if (ki_MR * inte_MR > 1) inte_MR = bound_MR;
 8001292:	eddf 7a4a 	vldr	s15, [pc, #296]	; 80013bc <PID_PWM+0x2e4>
 8001296:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800129a:	4b47      	ldr	r3, [pc, #284]	; (80013b8 <PID_PWM+0x2e0>)
 800129c:	ed93 7b00 	vldr	d7, [r3]
 80012a0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80012a4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80012a8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80012ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012b0:	dd05      	ble.n	80012be <PID_PWM+0x1e6>
 80012b2:	4941      	ldr	r1, [pc, #260]	; (80013b8 <PID_PWM+0x2e0>)
 80012b4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80012b8:	e9c1 2300 	strd	r2, r3, [r1]
 80012bc:	e016      	b.n	80012ec <PID_PWM+0x214>
	else if (ki_MR * inte_MR < -1) inte_MR = -bound_MR;
 80012be:	eddf 7a3f 	vldr	s15, [pc, #252]	; 80013bc <PID_PWM+0x2e4>
 80012c2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80012c6:	4b3c      	ldr	r3, [pc, #240]	; (80013b8 <PID_PWM+0x2e0>)
 80012c8:	ed93 7b00 	vldr	d7, [r3]
 80012cc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80012d0:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80012d4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80012d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012dc:	d506      	bpl.n	80012ec <PID_PWM+0x214>
 80012de:	ed97 7b04 	vldr	d7, [r7, #16]
 80012e2:	eeb1 7b47 	vneg.f64	d7, d7
 80012e6:	4b34      	ldr	r3, [pc, #208]	; (80013b8 <PID_PWM+0x2e0>)
 80012e8:	ed83 7b00 	vstr	d7, [r3]
	float u_MR = kp_MR * err_MR + ki_MR * inte_MR;
 80012ec:	eddf 7a34 	vldr	s15, [pc, #208]	; 80013c0 <PID_PWM+0x2e8>
 80012f0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80012f4:	ed97 7b06 	vldr	d7, [r7, #24]
 80012f8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80012fc:	eddf 7a2f 	vldr	s15, [pc, #188]	; 80013bc <PID_PWM+0x2e4>
 8001300:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001304:	4b2c      	ldr	r3, [pc, #176]	; (80013b8 <PID_PWM+0x2e0>)
 8001306:	ed93 7b00 	vldr	d7, [r3]
 800130a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800130e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001312:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001316:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	if (u_MR > 1) u_MR = 1;
 800131a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800131e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001322:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800132a:	dd03      	ble.n	8001334 <PID_PWM+0x25c>
 800132c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001330:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001332:	e00a      	b.n	800134a <PID_PWM+0x272>
	else if (u_MR < -1) u_MR = -1;
 8001334:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001338:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800133c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001344:	d501      	bpl.n	800134a <PID_PWM+0x272>
 8001346:	4b17      	ldr	r3, [pc, #92]	; (80013a4 <PID_PWM+0x2cc>)
 8001348:	63fb      	str	r3, [r7, #60]	; 0x3c
	//PWM_MR
	int pulse_MR;
	if (u_MR > 0) {
 800134a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800134e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001356:	dd37      	ble.n	80013c8 <PID_PWM+0x2f0>
		pulse_MR = (int) (u_MR * (motorARR + 1));
 8001358:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800135c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80013c4 <PID_PWM+0x2ec>
 8001360:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001364:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001368:	ee17 3a90 	vmov	r3, s15
 800136c:	63bb      	str	r3, [r7, #56]	; 0x38
		HAL_GPIO_WritePin(INA_MR_PORT, INA_MR_PIN, GPIO_PIN_SET); // INA
 800136e:	2201      	movs	r2, #1
 8001370:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001374:	480c      	ldr	r0, [pc, #48]	; (80013a8 <PID_PWM+0x2d0>)
 8001376:	f006 fb4d 	bl	8007a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB_MR_PORT, INB_MR_PIN, GPIO_PIN_RESET); // INB
 800137a:	2200      	movs	r2, #0
 800137c:	2180      	movs	r1, #128	; 0x80
 800137e:	480a      	ldr	r0, [pc, #40]	; (80013a8 <PID_PWM+0x2d0>)
 8001380:	f006 fb48 	bl	8007a14 <HAL_GPIO_WritePin>
 8001384:	e038      	b.n	80013f8 <PID_PWM+0x320>
 8001386:	bf00      	nop
 8001388:	d2f1a9fc 	.word	0xd2f1a9fc
 800138c:	3f50624d 	.word	0x3f50624d
 8001390:	240003f8 	.word	0x240003f8
 8001394:	24000430 	.word	0x24000430
 8001398:	24000448 	.word	0x24000448
 800139c:	42296dac 	.word	0x42296dac
 80013a0:	3f2280f1 	.word	0x3f2280f1
 80013a4:	bf800000 	.word	0xbf800000
 80013a8:	58021000 	.word	0x58021000
 80013ac:	240000e0 	.word	0x240000e0
 80013b0:	24000400 	.word	0x24000400
 80013b4:	24000438 	.word	0x24000438
 80013b8:	24000450 	.word	0x24000450
 80013bc:	4240d581 	.word	0x4240d581
 80013c0:	3f1edbb6 	.word	0x3f1edbb6
 80013c4:	42480000 	.word	0x42480000
	} else {
		pulse_MR = (int) (-u_MR * (motorARR + 1));
 80013c8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80013cc:	eef1 7a67 	vneg.f32	s15, s15
 80013d0:	ed1f 7a04 	vldr	s14, [pc, #-16]	; 80013c4 <PID_PWM+0x2ec>
 80013d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013dc:	ee17 3a90 	vmov	r3, s15
 80013e0:	63bb      	str	r3, [r7, #56]	; 0x38
		HAL_GPIO_WritePin(INA_MR_PORT, INA_MR_PIN, GPIO_PIN_RESET); // INA
 80013e2:	2200      	movs	r2, #0
 80013e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013e8:	4867      	ldr	r0, [pc, #412]	; (8001588 <PID_PWM+0x4b0>)
 80013ea:	f006 fb13 	bl	8007a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB_MR_PORT, INB_MR_PIN, GPIO_PIN_SET); // INB
 80013ee:	2201      	movs	r2, #1
 80013f0:	2180      	movs	r1, #128	; 0x80
 80013f2:	4865      	ldr	r0, [pc, #404]	; (8001588 <PID_PWM+0x4b0>)
 80013f4:	f006 fb0e 	bl	8007a14 <HAL_GPIO_WritePin>
	}
	__HAL_TIM_SET_COMPARE(TIM_PWM_MR, CH_PWM_MR, pulse_MR); // PWM
 80013f8:	4b64      	ldr	r3, [pc, #400]	; (800158c <PID_PWM+0x4b4>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80013fe:	63da      	str	r2, [r3, #60]	; 0x3c

	//PID_ML
	double err_ML = ML - rML;
 8001400:	4b63      	ldr	r3, [pc, #396]	; (8001590 <PID_PWM+0x4b8>)
 8001402:	ed93 6b00 	vldr	d6, [r3]
 8001406:	4b63      	ldr	r3, [pc, #396]	; (8001594 <PID_PWM+0x4bc>)
 8001408:	ed93 7b00 	vldr	d7, [r3]
 800140c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001410:	ed87 7b02 	vstr	d7, [r7, #8]
	inte_ML += err_ML * motor_span;
 8001414:	ed97 7b02 	vldr	d7, [r7, #8]
 8001418:	ed9f 6b59 	vldr	d6, [pc, #356]	; 8001580 <PID_PWM+0x4a8>
 800141c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001420:	4b5d      	ldr	r3, [pc, #372]	; (8001598 <PID_PWM+0x4c0>)
 8001422:	ed93 7b00 	vldr	d7, [r3]
 8001426:	ee36 7b07 	vadd.f64	d7, d6, d7
 800142a:	4b5b      	ldr	r3, [pc, #364]	; (8001598 <PID_PWM+0x4c0>)
 800142c:	ed83 7b00 	vstr	d7, [r3]
	double bound_ML = 1/ki_ML;
 8001430:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 800159c <PID_PWM+0x4c4>
 8001434:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001438:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800143c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001440:	ed87 7b00 	vstr	d7, [r7]
	if (ki_ML * inte_ML > 1) inte_ML = bound_ML;
 8001444:	eddf 7a55 	vldr	s15, [pc, #340]	; 800159c <PID_PWM+0x4c4>
 8001448:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800144c:	4b52      	ldr	r3, [pc, #328]	; (8001598 <PID_PWM+0x4c0>)
 800144e:	ed93 7b00 	vldr	d7, [r3]
 8001452:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001456:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800145a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800145e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001462:	dd05      	ble.n	8001470 <PID_PWM+0x398>
 8001464:	494c      	ldr	r1, [pc, #304]	; (8001598 <PID_PWM+0x4c0>)
 8001466:	e9d7 2300 	ldrd	r2, r3, [r7]
 800146a:	e9c1 2300 	strd	r2, r3, [r1]
 800146e:	e016      	b.n	800149e <PID_PWM+0x3c6>
	else if (ki_ML * inte_ML < -1) inte_ML = -bound_ML;
 8001470:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800159c <PID_PWM+0x4c4>
 8001474:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001478:	4b47      	ldr	r3, [pc, #284]	; (8001598 <PID_PWM+0x4c0>)
 800147a:	ed93 7b00 	vldr	d7, [r3]
 800147e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001482:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8001486:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800148a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800148e:	d506      	bpl.n	800149e <PID_PWM+0x3c6>
 8001490:	ed97 7b00 	vldr	d7, [r7]
 8001494:	eeb1 7b47 	vneg.f64	d7, d7
 8001498:	4b3f      	ldr	r3, [pc, #252]	; (8001598 <PID_PWM+0x4c0>)
 800149a:	ed83 7b00 	vstr	d7, [r3]
	float u_ML = kp_ML * err_ML + ki_ML * inte_ML;
 800149e:	eddf 7a40 	vldr	s15, [pc, #256]	; 80015a0 <PID_PWM+0x4c8>
 80014a2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80014a6:	ed97 7b02 	vldr	d7, [r7, #8]
 80014aa:	ee26 6b07 	vmul.f64	d6, d6, d7
 80014ae:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800159c <PID_PWM+0x4c4>
 80014b2:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80014b6:	4b38      	ldr	r3, [pc, #224]	; (8001598 <PID_PWM+0x4c0>)
 80014b8:	ed93 7b00 	vldr	d7, [r3]
 80014bc:	ee25 7b07 	vmul.f64	d7, d5, d7
 80014c0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80014c4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80014c8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	if (u_ML > 1) u_ML = 1;
 80014cc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80014d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80014d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014dc:	dd03      	ble.n	80014e6 <PID_PWM+0x40e>
 80014de:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80014e2:	637b      	str	r3, [r7, #52]	; 0x34
 80014e4:	e00a      	b.n	80014fc <PID_PWM+0x424>
	else if (u_ML < -1) u_ML = -1;
 80014e6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80014ea:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80014ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f6:	d501      	bpl.n	80014fc <PID_PWM+0x424>
 80014f8:	4b2a      	ldr	r3, [pc, #168]	; (80015a4 <PID_PWM+0x4cc>)
 80014fa:	637b      	str	r3, [r7, #52]	; 0x34
	//PWM_ML
	int pulse_ML;
	if (u_ML > 0) {
 80014fc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001500:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001508:	dd17      	ble.n	800153a <PID_PWM+0x462>
		pulse_ML = (int) (u_ML * (motorARR + 1));
 800150a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800150e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80015a8 <PID_PWM+0x4d0>
 8001512:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001516:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800151a:	ee17 3a90 	vmov	r3, s15
 800151e:	633b      	str	r3, [r7, #48]	; 0x30
		HAL_GPIO_WritePin(INA_ML_PORT, INA_ML_PIN, GPIO_PIN_SET); // INA
 8001520:	2201      	movs	r2, #1
 8001522:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001526:	4818      	ldr	r0, [pc, #96]	; (8001588 <PID_PWM+0x4b0>)
 8001528:	f006 fa74 	bl	8007a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB_ML_PORT, INB_ML_PIN, GPIO_PIN_RESET); // INB
 800152c:	2200      	movs	r2, #0
 800152e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001532:	4815      	ldr	r0, [pc, #84]	; (8001588 <PID_PWM+0x4b0>)
 8001534:	f006 fa6e 	bl	8007a14 <HAL_GPIO_WritePin>
 8001538:	e018      	b.n	800156c <PID_PWM+0x494>
	} else {
		pulse_ML = (int) (-u_ML * (motorARR + 1));
 800153a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800153e:	eef1 7a67 	vneg.f32	s15, s15
 8001542:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80015a8 <PID_PWM+0x4d0>
 8001546:	ee67 7a87 	vmul.f32	s15, s15, s14
 800154a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800154e:	ee17 3a90 	vmov	r3, s15
 8001552:	633b      	str	r3, [r7, #48]	; 0x30
		HAL_GPIO_WritePin(INA_ML_PORT, INA_ML_PIN, GPIO_PIN_RESET); // INA
 8001554:	2200      	movs	r2, #0
 8001556:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800155a:	480b      	ldr	r0, [pc, #44]	; (8001588 <PID_PWM+0x4b0>)
 800155c:	f006 fa5a 	bl	8007a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB_ML_PORT, INB_ML_PIN, GPIO_PIN_SET); // INB
 8001560:	2201      	movs	r2, #1
 8001562:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001566:	4808      	ldr	r0, [pc, #32]	; (8001588 <PID_PWM+0x4b0>)
 8001568:	f006 fa54 	bl	8007a14 <HAL_GPIO_WritePin>
	}
	__HAL_TIM_SET_COMPARE(TIM_PWM_ML, CH_PWM_ML, pulse_ML); // PWM
 800156c:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <PID_PWM+0x4d4>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001572:	641a      	str	r2, [r3, #64]	; 0x40

}
 8001574:	bf00      	nop
 8001576:	3748      	adds	r7, #72	; 0x48
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	f3af 8000 	nop.w
 8001580:	d2f1a9fc 	.word	0xd2f1a9fc
 8001584:	3f50624d 	.word	0x3f50624d
 8001588:	58021000 	.word	0x58021000
 800158c:	240001c4 	.word	0x240001c4
 8001590:	24000408 	.word	0x24000408
 8001594:	24000440 	.word	0x24000440
 8001598:	24000458 	.word	0x24000458
 800159c:	425adc0f 	.word	0x425adc0f
 80015a0:	3f2e3001 	.word	0x3f2e3001
 80015a4:	bf800000 	.word	0xbf800000
 80015a8:	42480000 	.word	0x42480000
 80015ac:	240000e0 	.word	0x240000e0

080015b0 <kinematics_model>:
void kinematics_model(){
 80015b0:	b480      	push	{r7}
 80015b2:	b087      	sub	sp, #28
 80015b4:	af00      	add	r7, sp, #0
	double rWF = rMF*ratio_motor2wheel,
 80015b6:	4b40      	ldr	r3, [pc, #256]	; (80016b8 <kinematics_model+0x108>)
 80015b8:	ed93 7b00 	vldr	d7, [r3]
 80015bc:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80015c0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80015c4:	ed87 7b04 	vstr	d7, [r7, #16]
				 rWR = rMR*ratio_motor2wheel,
 80015c8:	4b3c      	ldr	r3, [pc, #240]	; (80016bc <kinematics_model+0x10c>)
 80015ca:	ed93 7b00 	vldr	d7, [r3]
 80015ce:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80015d2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80015d6:	ed87 7b02 	vstr	d7, [r7, #8]
				 rWL = rML*ratio_motor2wheel;
 80015da:	4b39      	ldr	r3, [pc, #228]	; (80016c0 <kinematics_model+0x110>)
 80015dc:	ed93 7b00 	vldr	d7, [r3]
 80015e0:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80015e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80015e8:	ed87 7b00 	vstr	d7, [r7]

	rVx = 1/(LF+LR+LL)*((LR+LL)*rWF - LF*rWR - LF*rWL);
 80015ec:	ed97 7b04 	vldr	d7, [r7, #16]
 80015f0:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8001690 <kinematics_model+0xe0>
 80015f4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80015f8:	ed97 7b02 	vldr	d7, [r7, #8]
 80015fc:	ed9f 5b26 	vldr	d5, [pc, #152]	; 8001698 <kinematics_model+0xe8>
 8001600:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001604:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001608:	ed97 7b00 	vldr	d7, [r7]
 800160c:	ed9f 5b22 	vldr	d5, [pc, #136]	; 8001698 <kinematics_model+0xe8>
 8001610:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001614:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001618:	ed9f 6b21 	vldr	d6, [pc, #132]	; 80016a0 <kinematics_model+0xf0>
 800161c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001620:	4b28      	ldr	r3, [pc, #160]	; (80016c4 <kinematics_model+0x114>)
 8001622:	ed83 7b00 	vstr	d7, [r3]
	rVy = 1/sqrt(3)/(LF+LR+LL)*((LR-LL)*rWF - (LF+2*LL)*rWR + (LF+2*LR)*rWL);
 8001626:	ed97 7b04 	vldr	d7, [r7, #16]
 800162a:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 80016a0 <kinematics_model+0xf0>
 800162e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001632:	ed97 7b02 	vldr	d7, [r7, #8]
 8001636:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 80016a8 <kinematics_model+0xf8>
 800163a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800163e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001642:	ed97 7b00 	vldr	d7, [r7]
 8001646:	ed9f 5b18 	vldr	d5, [pc, #96]	; 80016a8 <kinematics_model+0xf8>
 800164a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800164e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001652:	ed9f 6b17 	vldr	d6, [pc, #92]	; 80016b0 <kinematics_model+0x100>
 8001656:	ee27 7b06 	vmul.f64	d7, d7, d6
 800165a:	4b1b      	ldr	r3, [pc, #108]	; (80016c8 <kinematics_model+0x118>)
 800165c:	ed83 7b00 	vstr	d7, [r3]
	rW = -1/(LF+LR+LL)*(rWF + rWR + rWL);
 8001660:	ed97 6b04 	vldr	d6, [r7, #16]
 8001664:	ed97 7b02 	vldr	d7, [r7, #8]
 8001668:	ee36 6b07 	vadd.f64	d6, d6, d7
 800166c:	ed97 7b00 	vldr	d7, [r7]
 8001670:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001674:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 80016a0 <kinematics_model+0xf0>
 8001678:	ee27 7b06 	vmul.f64	d7, d7, d6
 800167c:	4b13      	ldr	r3, [pc, #76]	; (80016cc <kinematics_model+0x11c>)
 800167e:	ed83 7b00 	vstr	d7, [r3]
	/*alpha
	rVx = cos(A)*rVx - sin(A)*rVy;
	rVy = sin(A)*rVx + cos(A)*rVy;
	rA+=rW*motor_span;
	*/
}
 8001682:	bf00      	nop
 8001684:	371c      	adds	r7, #28
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	00000000 	.word	0x00000000
 8001694:	40690000 	.word	0x40690000
 8001698:	00000000 	.word	0x00000000
 800169c:	40590000 	.word	0x40590000
	...
 80016ac:	4072c000 	.word	0x4072c000
 80016b0:	1a8fb365 	.word	0x1a8fb365
 80016b4:	3f5f87f1 	.word	0x3f5f87f1
 80016b8:	24000430 	.word	0x24000430
 80016bc:	24000438 	.word	0x24000438
 80016c0:	24000440 	.word	0x24000440
 80016c4:	24000410 	.word	0x24000410
 80016c8:	24000418 	.word	0x24000418
 80016cc:	24000420 	.word	0x24000420

080016d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016d4:	b672      	cpsid	i
}
 80016d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016d8:	e7fe      	b.n	80016d8 <Error_Handler+0x8>

080016da <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80016da:	b480      	push	{r7}
 80016dc:	b083      	sub	sp, #12
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4618      	mov	r0, r3
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	4a04      	ldr	r2, [pc, #16]	; (8001718 <_ZN3ros3MsgC1Ev+0x1c>)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4618      	mov	r0, r3
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	0800e6b4 	.word	0x0800e6b4

0800171c <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
      data()
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff ffe8 	bl	80016fc <_ZN3ros3MsgC1Ev>
 800172c:	4a06      	ldr	r2, [pc, #24]	; (8001748 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	3304      	adds	r3, #4
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff ffcf 	bl	80016da <_ZN3ros4TimeC1Ev>
    {
    }
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	0800e69c 	.word	0x0800e69c

0800174c <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001756:	2300      	movs	r3, #0
 8001758:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6859      	ldr	r1, [r3, #4]
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	4413      	add	r3, r2
 8001764:	b2ca      	uxtb	r2, r1
 8001766:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	0a19      	lsrs	r1, r3, #8
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	3301      	adds	r3, #1
 8001772:	683a      	ldr	r2, [r7, #0]
 8001774:	4413      	add	r3, r2
 8001776:	b2ca      	uxtb	r2, r1
 8001778:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	0c19      	lsrs	r1, r3, #16
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	3302      	adds	r3, #2
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	4413      	add	r3, r2
 8001788:	b2ca      	uxtb	r2, r1
 800178a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	0e19      	lsrs	r1, r3, #24
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	3303      	adds	r3, #3
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	4413      	add	r3, r2
 800179a:	b2ca      	uxtb	r2, r1
 800179c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	3304      	adds	r3, #4
 80017a2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6899      	ldr	r1, [r3, #8]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	683a      	ldr	r2, [r7, #0]
 80017ac:	4413      	add	r3, r2
 80017ae:	b2ca      	uxtb	r2, r1
 80017b0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	0a19      	lsrs	r1, r3, #8
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	3301      	adds	r3, #1
 80017bc:	683a      	ldr	r2, [r7, #0]
 80017be:	4413      	add	r3, r2
 80017c0:	b2ca      	uxtb	r2, r1
 80017c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	0c19      	lsrs	r1, r3, #16
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	3302      	adds	r3, #2
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	4413      	add	r3, r2
 80017d2:	b2ca      	uxtb	r2, r1
 80017d4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	0e19      	lsrs	r1, r3, #24
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	3303      	adds	r3, #3
 80017e0:	683a      	ldr	r2, [r7, #0]
 80017e2:	4413      	add	r3, r2
 80017e4:	b2ca      	uxtb	r2, r1
 80017e6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	3304      	adds	r3, #4
 80017ec:	60fb      	str	r3, [r7, #12]
      return offset;
 80017ee:	68fb      	ldr	r3, [r7, #12]
    }
 80017f0:	4618      	mov	r0, r3
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	683a      	ldr	r2, [r7, #0]
 800180e:	4413      	add	r3, r2
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	461a      	mov	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685a      	ldr	r2, [r3, #4]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	3301      	adds	r3, #1
 8001820:	6839      	ldr	r1, [r7, #0]
 8001822:	440b      	add	r3, r1
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	021b      	lsls	r3, r3, #8
 8001828:	431a      	orrs	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685a      	ldr	r2, [r3, #4]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	3302      	adds	r3, #2
 8001836:	6839      	ldr	r1, [r7, #0]
 8001838:	440b      	add	r3, r1
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	041b      	lsls	r3, r3, #16
 800183e:	431a      	orrs	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685a      	ldr	r2, [r3, #4]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	3303      	adds	r3, #3
 800184c:	6839      	ldr	r1, [r7, #0]
 800184e:	440b      	add	r3, r1
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	061b      	lsls	r3, r3, #24
 8001854:	431a      	orrs	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	3304      	adds	r3, #4
 800185e:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	4413      	add	r3, r2
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	461a      	mov	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	689a      	ldr	r2, [r3, #8]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	3301      	adds	r3, #1
 8001876:	6839      	ldr	r1, [r7, #0]
 8001878:	440b      	add	r3, r1
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	021b      	lsls	r3, r3, #8
 800187e:	431a      	orrs	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689a      	ldr	r2, [r3, #8]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	3302      	adds	r3, #2
 800188c:	6839      	ldr	r1, [r7, #0]
 800188e:	440b      	add	r3, r1
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	041b      	lsls	r3, r3, #16
 8001894:	431a      	orrs	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689a      	ldr	r2, [r3, #8]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	3303      	adds	r3, #3
 80018a2:	6839      	ldr	r1, [r7, #0]
 80018a4:	440b      	add	r3, r1
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	061b      	lsls	r3, r3, #24
 80018aa:	431a      	orrs	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	3304      	adds	r3, #4
 80018b4:	60fb      	str	r3, [r7, #12]
     return offset;
 80018b6:	68fb      	ldr	r3, [r7, #12]
    }
 80018b8:	4618      	mov	r0, r3
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	4b03      	ldr	r3, [pc, #12]	; (80018dc <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80018ce:	4618      	mov	r0, r3
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	0800e414 	.word	0x0800e414

080018e0 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	4b03      	ldr	r3, [pc, #12]	; (80018f8 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80018ea:	4618      	mov	r0, r3
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	0800e424 	.word	0x0800e424

080018fc <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff fef8 	bl	80016fc <_ZN3ros3MsgC1Ev>
 800190c:	4a0b      	ldr	r2, [pc, #44]	; (800193c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	809a      	strh	r2, [r3, #4]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4a09      	ldr	r2, [pc, #36]	; (8001940 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800191c:	609a      	str	r2, [r3, #8]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a07      	ldr	r2, [pc, #28]	; (8001940 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001922:	60da      	str	r2, [r3, #12]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4a06      	ldr	r2, [pc, #24]	; (8001940 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001928:	611a      	str	r2, [r3, #16]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	615a      	str	r2, [r3, #20]
    {
    }
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4618      	mov	r0, r3
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	0800e684 	.word	0x0800e684
 8001940:	0800e448 	.word	0x0800e448

08001944 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001944:	b580      	push	{r7, lr}
 8001946:	b088      	sub	sp, #32
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800194e:	2300      	movs	r3, #0
 8001950:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	8899      	ldrh	r1, [r3, #4]
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	4413      	add	r3, r2
 800195c:	b2ca      	uxtb	r2, r1
 800195e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	889b      	ldrh	r3, [r3, #4]
 8001964:	0a1b      	lsrs	r3, r3, #8
 8001966:	b299      	uxth	r1, r3
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	3301      	adds	r3, #1
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	4413      	add	r3, r2
 8001970:	b2ca      	uxtb	r2, r1
 8001972:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	3302      	adds	r3, #2
 8001978:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	4618      	mov	r0, r3
 8001980:	f7fe fcc6 	bl	8000310 <strlen>
 8001984:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	4413      	add	r3, r2
 800198c:	69b9      	ldr	r1, [r7, #24]
 800198e:	4618      	mov	r0, r3
 8001990:	f001 fcd0 	bl	8003334 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	3304      	adds	r3, #4
 8001998:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	18d0      	adds	r0, r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	4619      	mov	r1, r3
 80019a8:	f00c fb90 	bl	800e0cc <memcpy>
      offset += length_topic_name;
 80019ac:	69fa      	ldr	r2, [r7, #28]
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	4413      	add	r3, r2
 80019b2:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7fe fca9 	bl	8000310 <strlen>
 80019be:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	4413      	add	r3, r2
 80019c6:	6979      	ldr	r1, [r7, #20]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f001 fcb3 	bl	8003334 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	3304      	adds	r3, #4
 80019d2:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	18d0      	adds	r0, r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	697a      	ldr	r2, [r7, #20]
 80019e0:	4619      	mov	r1, r3
 80019e2:	f00c fb73 	bl	800e0cc <memcpy>
      offset += length_message_type;
 80019e6:	69fa      	ldr	r2, [r7, #28]
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	4413      	add	r3, r2
 80019ec:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7fe fc8c 	bl	8000310 <strlen>
 80019f8:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	683a      	ldr	r2, [r7, #0]
 80019fe:	4413      	add	r3, r2
 8001a00:	6939      	ldr	r1, [r7, #16]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f001 fc96 	bl	8003334 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	3304      	adds	r3, #4
 8001a0c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	18d0      	adds	r0, r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	f00c fb56 	bl	800e0cc <memcpy>
      offset += length_md5sum;
 8001a20:	69fa      	ldr	r2, [r7, #28]
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	4413      	add	r3, r2
 8001a26:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	695b      	ldr	r3, [r3, #20]
 8001a2c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001a2e:	68f9      	ldr	r1, [r7, #12]
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	683a      	ldr	r2, [r7, #0]
 8001a34:	4413      	add	r3, r2
 8001a36:	b2ca      	uxtb	r2, r1
 8001a38:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	0a19      	lsrs	r1, r3, #8
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	3301      	adds	r3, #1
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	4413      	add	r3, r2
 8001a46:	b2ca      	uxtb	r2, r1
 8001a48:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	0c19      	lsrs	r1, r3, #16
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	3302      	adds	r3, #2
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	4413      	add	r3, r2
 8001a56:	b2ca      	uxtb	r2, r1
 8001a58:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	0e19      	lsrs	r1, r3, #24
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	3303      	adds	r3, #3
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	4413      	add	r3, r2
 8001a66:	b2ca      	uxtb	r2, r1
 8001a68:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	3304      	adds	r3, #4
 8001a6e:	61fb      	str	r3, [r7, #28]
      return offset;
 8001a70:	69fb      	ldr	r3, [r7, #28]
    }
 8001a72:	4618      	mov	r0, r3
 8001a74:	3720      	adds	r7, #32
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b08a      	sub	sp, #40	; 0x28
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
 8001a82:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	889b      	ldrh	r3, [r3, #4]
 8001a9a:	b21a      	sxth	r2, r3
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	6839      	ldr	r1, [r7, #0]
 8001aa2:	440b      	add	r3, r1
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	021b      	lsls	r3, r3, #8
 8001aa8:	b21b      	sxth	r3, r3
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	b21b      	sxth	r3, r3
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	3302      	adds	r3, #2
 8001ab8:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	441a      	add	r2, r3
 8001ac0:	f107 0314 	add.w	r3, r7, #20
 8001ac4:	4611      	mov	r1, r2
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f001 fc52 	bl	8003370 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	3304      	adds	r3, #4
 8001ad0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	4413      	add	r3, r2
 8001adc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d20c      	bcs.n	8001afc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae6:	441a      	add	r2, r3
 8001ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aea:	3b01      	subs	r3, #1
 8001aec:	6839      	ldr	r1, [r7, #0]
 8001aee:	440b      	add	r3, r1
 8001af0:	7812      	ldrb	r2, [r2, #0]
 8001af2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af6:	3301      	adds	r3, #1
 8001af8:	627b      	str	r3, [r7, #36]	; 0x24
 8001afa:	e7ec      	b.n	8001ad6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	4413      	add	r3, r2
 8001b02:	3b01      	subs	r3, #1
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	4413      	add	r3, r2
 8001b08:	2200      	movs	r2, #0
 8001b0a:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	441a      	add	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	441a      	add	r2, r3
 8001b26:	f107 0310 	add.w	r3, r7, #16
 8001b2a:	4611      	mov	r1, r2
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f001 fc1f 	bl	8003370 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	3304      	adds	r3, #4
 8001b36:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	623b      	str	r3, [r7, #32]
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	4413      	add	r3, r2
 8001b42:	6a3a      	ldr	r2, [r7, #32]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d20c      	bcs.n	8001b62 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	6a3b      	ldr	r3, [r7, #32]
 8001b4c:	441a      	add	r2, r3
 8001b4e:	6a3b      	ldr	r3, [r7, #32]
 8001b50:	3b01      	subs	r3, #1
 8001b52:	6839      	ldr	r1, [r7, #0]
 8001b54:	440b      	add	r3, r1
 8001b56:	7812      	ldrb	r2, [r2, #0]
 8001b58:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001b5a:	6a3b      	ldr	r3, [r7, #32]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	623b      	str	r3, [r7, #32]
 8001b60:	e7ec      	b.n	8001b3c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	4413      	add	r3, r2
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	683a      	ldr	r2, [r7, #0]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	2200      	movs	r2, #0
 8001b70:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	3b01      	subs	r3, #1
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	441a      	add	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	4413      	add	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	441a      	add	r2, r3
 8001b8c:	f107 030c 	add.w	r3, r7, #12
 8001b90:	4611      	mov	r1, r2
 8001b92:	4618      	mov	r0, r3
 8001b94:	f001 fbec 	bl	8003370 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	3304      	adds	r3, #4
 8001b9c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	61fb      	str	r3, [r7, #28]
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	69fa      	ldr	r2, [r7, #28]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d20c      	bcs.n	8001bc8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	441a      	add	r2, r3
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	6839      	ldr	r1, [r7, #0]
 8001bba:	440b      	add	r3, r1
 8001bbc:	7812      	ldrb	r2, [r2, #0]
 8001bbe:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	61fb      	str	r3, [r7, #28]
 8001bc6:	e7ec      	b.n	8001ba2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	4413      	add	r3, r2
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	441a      	add	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	4413      	add	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	6839      	ldr	r1, [r7, #0]
 8001bf6:	440a      	add	r2, r1
 8001bf8:	7812      	ldrb	r2, [r2, #0]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	3301      	adds	r3, #1
 8001c04:	6839      	ldr	r1, [r7, #0]
 8001c06:	440b      	add	r3, r1
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	021b      	lsls	r3, r3, #8
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001c10:	68ba      	ldr	r2, [r7, #8]
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	3302      	adds	r3, #2
 8001c16:	6839      	ldr	r1, [r7, #0]
 8001c18:	440b      	add	r3, r1
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	041b      	lsls	r3, r3, #16
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001c22:	68ba      	ldr	r2, [r7, #8]
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	3303      	adds	r3, #3
 8001c28:	6839      	ldr	r1, [r7, #0]
 8001c2a:	440b      	add	r3, r1
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	061b      	lsls	r3, r3, #24
 8001c30:	4313      	orrs	r3, r2
 8001c32:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001c34:	68ba      	ldr	r2, [r7, #8]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	61bb      	str	r3, [r7, #24]
     return offset;
 8001c40:	69bb      	ldr	r3, [r7, #24]
    }
 8001c42:	4618      	mov	r0, r3
 8001c44:	3728      	adds	r7, #40	; 0x28
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
	...

08001c4c <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	4b03      	ldr	r3, [pc, #12]	; (8001c64 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001c56:	4618      	mov	r0, r3
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	0800e44c 	.word	0x0800e44c

08001c68 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	4b03      	ldr	r3, [pc, #12]	; (8001c80 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8001c72:	4618      	mov	r0, r3
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	0800e468 	.word	0x0800e468

08001c84 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff fd34 	bl	80016fc <_ZN3ros3MsgC1Ev>
 8001c94:	4a06      	ldr	r2, [pc, #24]	; (8001cb0 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	711a      	strb	r2, [r3, #4]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a04      	ldr	r2, [pc, #16]	; (8001cb4 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001ca4:	609a      	str	r2, [r3, #8]
    {
    }
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	0800e66c 	.word	0x0800e66c
 8001cb4:	0800e448 	.word	0x0800e448

08001cb8 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	4413      	add	r3, r2
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	7912      	ldrb	r2, [r2, #4]
 8001cd0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7fe fb17 	bl	8000310 <strlen>
 8001ce2:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	683a      	ldr	r2, [r7, #0]
 8001ce8:	4413      	add	r3, r2
 8001cea:	68b9      	ldr	r1, [r7, #8]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f001 fb21 	bl	8003334 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	18d0      	adds	r0, r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	68ba      	ldr	r2, [r7, #8]
 8001d04:	4619      	mov	r1, r3
 8001d06:	f00c f9e1 	bl	800e0cc <memcpy>
      offset += length_msg;
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	4413      	add	r3, r2
 8001d10:	60fb      	str	r3, [r7, #12]
      return offset;
 8001d12:	68fb      	ldr	r3, [r7, #12]
    }
 8001d14:	4618      	mov	r0, r3
 8001d16:	3710      	adds	r7, #16
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	4413      	add	r3, r2
 8001d30:	781a      	ldrb	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	441a      	add	r2, r3
 8001d42:	f107 030c 	add.w	r3, r7, #12
 8001d46:	4611      	mov	r1, r2
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f001 fb11 	bl	8003370 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	3304      	adds	r3, #4
 8001d52:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	617b      	str	r3, [r7, #20]
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	697a      	ldr	r2, [r7, #20]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d20c      	bcs.n	8001d7e <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	441a      	add	r2, r3
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	6839      	ldr	r1, [r7, #0]
 8001d70:	440b      	add	r3, r1
 8001d72:	7812      	ldrb	r2, [r2, #0]
 8001d74:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	617b      	str	r3, [r7, #20]
 8001d7c:	e7ec      	b.n	8001d58 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	4413      	add	r3, r2
 8001d84:	3b01      	subs	r3, #1
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	4413      	add	r3, r2
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	3b01      	subs	r3, #1
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	441a      	add	r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4413      	add	r3, r2
 8001da0:	613b      	str	r3, [r7, #16]
     return offset;
 8001da2:	693b      	ldr	r3, [r7, #16]
    }
 8001da4:	4618      	mov	r0, r3
 8001da6:	3718      	adds	r7, #24
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	4b03      	ldr	r3, [pc, #12]	; (8001dc4 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001db6:	4618      	mov	r0, r3
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	0800e48c 	.word	0x0800e48c

08001dc8 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	4b03      	ldr	r3, [pc, #12]	; (8001de0 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	0800e4a0 	.word	0x0800e4a0

08001de4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff fc84 	bl	80016fc <_ZN3ros3MsgC1Ev>
 8001df4:	4a0c      	ldr	r2, [pc, #48]	; (8001e28 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	605a      	str	r2, [r3, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	60da      	str	r2, [r3, #12]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	611a      	str	r2, [r3, #16]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	619a      	str	r2, [r3, #24]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	61da      	str	r2, [r3, #28]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4618      	mov	r0, r3
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	0800e654 	.word	0x0800e654

08001e2c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b08a      	sub	sp, #40	; 0x28
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6859      	ldr	r1, [r3, #4]
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e40:	683a      	ldr	r2, [r7, #0]
 8001e42:	4413      	add	r3, r2
 8001e44:	b2ca      	uxtb	r2, r1
 8001e46:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	0a19      	lsrs	r1, r3, #8
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	3301      	adds	r3, #1
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	4413      	add	r3, r2
 8001e56:	b2ca      	uxtb	r2, r1
 8001e58:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	0c19      	lsrs	r1, r3, #16
 8001e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e62:	3302      	adds	r3, #2
 8001e64:	683a      	ldr	r2, [r7, #0]
 8001e66:	4413      	add	r3, r2
 8001e68:	b2ca      	uxtb	r2, r1
 8001e6a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	0e19      	lsrs	r1, r3, #24
 8001e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e74:	3303      	adds	r3, #3
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	4413      	add	r3, r2
 8001e7a:	b2ca      	uxtb	r2, r1
 8001e7c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e80:	3304      	adds	r3, #4
 8001e82:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001e84:	2300      	movs	r3, #0
 8001e86:	623b      	str	r3, [r7, #32]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	6a3a      	ldr	r2, [r7, #32]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d22b      	bcs.n	8001eea <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	68da      	ldr	r2, [r3, #12]
 8001e96:	6a3b      	ldr	r3, [r7, #32]
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	4413      	add	r3, r2
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001ea0:	6939      	ldr	r1, [r7, #16]
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	b2ca      	uxtb	r2, r1
 8001eaa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	0a19      	lsrs	r1, r3, #8
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	b2ca      	uxtb	r2, r1
 8001eba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	0c19      	lsrs	r1, r3, #16
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec2:	3302      	adds	r3, #2
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	b2ca      	uxtb	r2, r1
 8001eca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	0e19      	lsrs	r1, r3, #24
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed2:	3303      	adds	r3, #3
 8001ed4:	683a      	ldr	r2, [r7, #0]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	b2ca      	uxtb	r2, r1
 8001eda:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ede:	3304      	adds	r3, #4
 8001ee0:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001ee2:	6a3b      	ldr	r3, [r7, #32]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	623b      	str	r3, [r7, #32]
 8001ee8:	e7ce      	b.n	8001e88 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6919      	ldr	r1, [r3, #16]
 8001eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	b2ca      	uxtb	r2, r1
 8001ef6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	0a19      	lsrs	r1, r3, #8
 8001efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f00:	3301      	adds	r3, #1
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	4413      	add	r3, r2
 8001f06:	b2ca      	uxtb	r2, r1
 8001f08:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	0c19      	lsrs	r1, r3, #16
 8001f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f12:	3302      	adds	r3, #2
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	4413      	add	r3, r2
 8001f18:	b2ca      	uxtb	r2, r1
 8001f1a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	691b      	ldr	r3, [r3, #16]
 8001f20:	0e19      	lsrs	r1, r3, #24
 8001f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f24:	3303      	adds	r3, #3
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	4413      	add	r3, r2
 8001f2a:	b2ca      	uxtb	r2, r1
 8001f2c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	3304      	adds	r3, #4
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001f34:	2300      	movs	r3, #0
 8001f36:	61fb      	str	r3, [r7, #28]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	69fa      	ldr	r2, [r7, #28]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d22b      	bcs.n	8001f9a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	699a      	ldr	r2, [r3, #24]
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	4413      	add	r3, r2
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001f50:	68f9      	ldr	r1, [r7, #12]
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	4413      	add	r3, r2
 8001f58:	b2ca      	uxtb	r2, r1
 8001f5a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	0a19      	lsrs	r1, r3, #8
 8001f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f62:	3301      	adds	r3, #1
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	4413      	add	r3, r2
 8001f68:	b2ca      	uxtb	r2, r1
 8001f6a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	0c19      	lsrs	r1, r3, #16
 8001f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f72:	3302      	adds	r3, #2
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	4413      	add	r3, r2
 8001f78:	b2ca      	uxtb	r2, r1
 8001f7a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	0e19      	lsrs	r1, r3, #24
 8001f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f82:	3303      	adds	r3, #3
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	4413      	add	r3, r2
 8001f88:	b2ca      	uxtb	r2, r1
 8001f8a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8e:	3304      	adds	r3, #4
 8001f90:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	3301      	adds	r3, #1
 8001f96:	61fb      	str	r3, [r7, #28]
 8001f98:	e7ce      	b.n	8001f38 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	69d9      	ldr	r1, [r3, #28]
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	b2ca      	uxtb	r2, r1
 8001fa6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	69db      	ldr	r3, [r3, #28]
 8001fac:	0a19      	lsrs	r1, r3, #8
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	b2ca      	uxtb	r2, r1
 8001fb8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	0c19      	lsrs	r1, r3, #16
 8001fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc2:	3302      	adds	r3, #2
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	b2ca      	uxtb	r2, r1
 8001fca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	69db      	ldr	r3, [r3, #28]
 8001fd0:	0e19      	lsrs	r1, r3, #24
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd4:	3303      	adds	r3, #3
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	4413      	add	r3, r2
 8001fda:	b2ca      	uxtb	r2, r1
 8001fdc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe0:	3304      	adds	r3, #4
 8001fe2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	61bb      	str	r3, [r7, #24]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	69db      	ldr	r3, [r3, #28]
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d228      	bcs.n	8002044 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4413      	add	r3, r2
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7fe f986 	bl	8000310 <strlen>
 8002004:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8002006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002008:	683a      	ldr	r2, [r7, #0]
 800200a:	4413      	add	r3, r2
 800200c:	6979      	ldr	r1, [r7, #20]
 800200e:	4618      	mov	r0, r3
 8002010:	f001 f990 	bl	8003334 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002016:	3304      	adds	r3, #4
 8002018:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	18d0      	adds	r0, r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	4413      	add	r3, r2
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	697a      	ldr	r2, [r7, #20]
 800202e:	4619      	mov	r1, r3
 8002030:	f00c f84c 	bl	800e0cc <memcpy>
      offset += length_stringsi;
 8002034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	4413      	add	r3, r2
 800203a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	3301      	adds	r3, #1
 8002040:	61bb      	str	r3, [r7, #24]
 8002042:	e7d1      	b.n	8001fe8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8002044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002046:	4618      	mov	r0, r3
 8002048:	3728      	adds	r7, #40	; 0x28
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800204e:	b580      	push	{r7, lr}
 8002050:	b08e      	sub	sp, #56	; 0x38
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
 8002056:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002058:	2300      	movs	r3, #0
 800205a:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800205c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	4413      	add	r3, r2
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002068:	3301      	adds	r3, #1
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	4413      	add	r3, r2
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	021b      	lsls	r3, r3, #8
 8002072:	6a3a      	ldr	r2, [r7, #32]
 8002074:	4313      	orrs	r3, r2
 8002076:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800207a:	3302      	adds	r3, #2
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	4413      	add	r3, r2
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	041b      	lsls	r3, r3, #16
 8002084:	6a3a      	ldr	r2, [r7, #32]
 8002086:	4313      	orrs	r3, r2
 8002088:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800208a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800208c:	3303      	adds	r3, #3
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	4413      	add	r3, r2
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	061b      	lsls	r3, r3, #24
 8002096:	6a3a      	ldr	r2, [r7, #32]
 8002098:	4313      	orrs	r3, r2
 800209a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 800209c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800209e:	3304      	adds	r3, #4
 80020a0:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	6a3a      	ldr	r2, [r7, #32]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d90a      	bls.n	80020c2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68da      	ldr	r2, [r3, #12]
 80020b0:	6a3b      	ldr	r3, [r7, #32]
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4619      	mov	r1, r3
 80020b6:	4610      	mov	r0, r2
 80020b8:	f00c f81e 	bl	800e0f8 <realloc>
 80020bc:	4602      	mov	r2, r0
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a3a      	ldr	r2, [r7, #32]
 80020c6:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80020c8:	2300      	movs	r3, #0
 80020ca:	633b      	str	r3, [r7, #48]	; 0x30
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d236      	bcs.n	8002144 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80020d6:	2300      	movs	r3, #0
 80020d8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020de:	6839      	ldr	r1, [r7, #0]
 80020e0:	440a      	add	r2, r1
 80020e2:	7812      	ldrb	r2, [r2, #0]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ec:	3301      	adds	r3, #1
 80020ee:	6839      	ldr	r1, [r7, #0]
 80020f0:	440b      	add	r3, r1
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	021b      	lsls	r3, r3, #8
 80020f6:	4313      	orrs	r3, r2
 80020f8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80020fa:	697a      	ldr	r2, [r7, #20]
 80020fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020fe:	3302      	adds	r3, #2
 8002100:	6839      	ldr	r1, [r7, #0]
 8002102:	440b      	add	r3, r1
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	041b      	lsls	r3, r3, #16
 8002108:	4313      	orrs	r3, r2
 800210a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800210c:	697a      	ldr	r2, [r7, #20]
 800210e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002110:	3303      	adds	r3, #3
 8002112:	6839      	ldr	r1, [r7, #0]
 8002114:	440b      	add	r3, r1
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	061b      	lsls	r3, r3, #24
 800211a:	4313      	orrs	r3, r2
 800211c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 800211e:	697a      	ldr	r2, [r7, #20]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002126:	3304      	adds	r3, #4
 8002128:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	68da      	ldr	r2, [r3, #12]
 800212e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4413      	add	r3, r2
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	3208      	adds	r2, #8
 8002138:	6812      	ldr	r2, [r2, #0]
 800213a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 800213c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800213e:	3301      	adds	r3, #1
 8002140:	633b      	str	r3, [r7, #48]	; 0x30
 8002142:	e7c3      	b.n	80020cc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	4413      	add	r3, r2
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800214e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002150:	3301      	adds	r3, #1
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	4413      	add	r3, r2
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	021b      	lsls	r3, r3, #8
 800215a:	69fa      	ldr	r2, [r7, #28]
 800215c:	4313      	orrs	r3, r2
 800215e:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002162:	3302      	adds	r3, #2
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	4413      	add	r3, r2
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	041b      	lsls	r3, r3, #16
 800216c:	69fa      	ldr	r2, [r7, #28]
 800216e:	4313      	orrs	r3, r2
 8002170:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002174:	3303      	adds	r3, #3
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	4413      	add	r3, r2
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	061b      	lsls	r3, r3, #24
 800217e:	69fa      	ldr	r2, [r7, #28]
 8002180:	4313      	orrs	r3, r2
 8002182:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002186:	3304      	adds	r3, #4
 8002188:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	69fa      	ldr	r2, [r7, #28]
 8002190:	429a      	cmp	r2, r3
 8002192:	d90a      	bls.n	80021aa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	699a      	ldr	r2, [r3, #24]
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4619      	mov	r1, r3
 800219e:	4610      	mov	r0, r2
 80021a0:	f00b ffaa 	bl	800e0f8 <realloc>
 80021a4:	4602      	mov	r2, r0
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69fa      	ldr	r2, [r7, #28]
 80021ae:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80021b0:	2300      	movs	r3, #0
 80021b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d236      	bcs.n	800222c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80021be:	2300      	movs	r3, #0
 80021c0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021c6:	6839      	ldr	r1, [r7, #0]
 80021c8:	440a      	add	r2, r1
 80021ca:	7812      	ldrb	r2, [r2, #0]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021d4:	3301      	adds	r3, #1
 80021d6:	6839      	ldr	r1, [r7, #0]
 80021d8:	440b      	add	r3, r1
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	021b      	lsls	r3, r3, #8
 80021de:	4313      	orrs	r3, r2
 80021e0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021e6:	3302      	adds	r3, #2
 80021e8:	6839      	ldr	r1, [r7, #0]
 80021ea:	440b      	add	r3, r1
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	041b      	lsls	r3, r3, #16
 80021f0:	4313      	orrs	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021f8:	3303      	adds	r3, #3
 80021fa:	6839      	ldr	r1, [r7, #0]
 80021fc:	440b      	add	r3, r1
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	061b      	lsls	r3, r3, #24
 8002202:	4313      	orrs	r3, r2
 8002204:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 800220c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800220e:	3304      	adds	r3, #4
 8002210:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	699a      	ldr	r2, [r3, #24]
 8002216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	4413      	add	r3, r2
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	3214      	adds	r2, #20
 8002220:	6812      	ldr	r2, [r2, #0]
 8002222:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002226:	3301      	adds	r3, #1
 8002228:	62fb      	str	r3, [r7, #44]	; 0x2c
 800222a:	e7c3      	b.n	80021b4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800222c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	4413      	add	r3, r2
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002238:	3301      	adds	r3, #1
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	4413      	add	r3, r2
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	021b      	lsls	r3, r3, #8
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	4313      	orrs	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800224a:	3302      	adds	r3, #2
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	4413      	add	r3, r2
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	041b      	lsls	r3, r3, #16
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	4313      	orrs	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800225a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800225c:	3303      	adds	r3, #3
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	4413      	add	r3, r2
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	061b      	lsls	r3, r3, #24
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4313      	orrs	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 800226c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800226e:	3304      	adds	r3, #4
 8002270:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	429a      	cmp	r2, r3
 800227a:	d90a      	bls.n	8002292 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4619      	mov	r1, r3
 8002286:	4610      	mov	r0, r2
 8002288:	f00b ff36 	bl	800e0f8 <realloc>
 800228c:	4602      	mov	r2, r0
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002298:	2300      	movs	r3, #0
 800229a:	62bb      	str	r3, [r7, #40]	; 0x28
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	69db      	ldr	r3, [r3, #28]
 80022a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d23f      	bcs.n	8002326 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80022a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	441a      	add	r2, r3
 80022ac:	f107 030c 	add.w	r3, r7, #12
 80022b0:	4611      	mov	r1, r2
 80022b2:	4618      	mov	r0, r3
 80022b4:	f001 f85c 	bl	8003370 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80022b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ba:	3304      	adds	r3, #4
 80022bc:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80022be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022c0:	627b      	str	r3, [r7, #36]	; 0x24
 80022c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	4413      	add	r3, r2
 80022c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d20c      	bcs.n	80022e8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d2:	441a      	add	r2, r3
 80022d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d6:	3b01      	subs	r3, #1
 80022d8:	6839      	ldr	r1, [r7, #0]
 80022da:	440b      	add	r3, r1
 80022dc:	7812      	ldrb	r2, [r2, #0]
 80022de:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80022e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e2:	3301      	adds	r3, #1
 80022e4:	627b      	str	r3, [r7, #36]	; 0x24
 80022e6:	e7ec      	b.n	80022c2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80022e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	4413      	add	r3, r2
 80022ee:	3b01      	subs	r3, #1
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	4413      	add	r3, r2
 80022f4:	2200      	movs	r2, #0
 80022f6:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80022f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022fa:	3b01      	subs	r3, #1
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	441a      	add	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002304:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	4413      	add	r3, r2
 800230a:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	3220      	adds	r2, #32
 800231a:	6812      	ldr	r2, [r2, #0]
 800231c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800231e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002320:	3301      	adds	r3, #1
 8002322:	62bb      	str	r3, [r7, #40]	; 0x28
 8002324:	e7ba      	b.n	800229c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8002326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002328:	4618      	mov	r0, r3
 800232a:	3738      	adds	r7, #56	; 0x38
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	4b03      	ldr	r3, [pc, #12]	; (8002348 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 800233a:	4618      	mov	r0, r3
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	0800e5a8 	.word	0x0800e5a8

0800234c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	4b03      	ldr	r3, [pc, #12]	; (8002364 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002356:	4618      	mov	r0, r3
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	0800e4c4 	.word	0x0800e4c4

08002368 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
 8002374:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	68ba      	ldr	r2, [r7, #8]
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	605a      	str	r2, [r3, #4]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	611a      	str	r2, [r3, #16]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	4618      	mov	r0, r3
 800238c:	3714      	adds	r7, #20
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr

08002396 <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 8002396:	b480      	push	{r7}
 8002398:	b083      	sub	sp, #12
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	691b      	ldr	r3, [r3, #16]
  }
 80023a2:	4618      	mov	r0, r3
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
	...

080023b0 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a4b      	ldr	r2, [pc, #300]	; (80024f0 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d077      	beq.n	80024b8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a48      	ldr	r2, [pc, #288]	; (80024f4 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d06f      	beq.n	80024b8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a45      	ldr	r2, [pc, #276]	; (80024f8 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d067      	beq.n	80024b8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a42      	ldr	r2, [pc, #264]	; (80024fc <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d05f      	beq.n	80024b8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a3f      	ldr	r2, [pc, #252]	; (8002500 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d057      	beq.n	80024b8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a3c      	ldr	r2, [pc, #240]	; (8002504 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d04f      	beq.n	80024b8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a39      	ldr	r2, [pc, #228]	; (8002508 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d047      	beq.n	80024b8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a36      	ldr	r2, [pc, #216]	; (800250c <_ZN13STM32Hardware10getRdmaIndEv+0x15c>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d03f      	beq.n	80024b8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a33      	ldr	r2, [pc, #204]	; (8002510 <_ZN13STM32Hardware10getRdmaIndEv+0x160>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d037      	beq.n	80024b8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a30      	ldr	r2, [pc, #192]	; (8002514 <_ZN13STM32Hardware10getRdmaIndEv+0x164>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d02f      	beq.n	80024b8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a2d      	ldr	r2, [pc, #180]	; (8002518 <_ZN13STM32Hardware10getRdmaIndEv+0x168>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d027      	beq.n	80024b8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a2a      	ldr	r2, [pc, #168]	; (800251c <_ZN13STM32Hardware10getRdmaIndEv+0x16c>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d01f      	beq.n	80024b8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a27      	ldr	r2, [pc, #156]	; (8002520 <_ZN13STM32Hardware10getRdmaIndEv+0x170>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d017      	beq.n	80024b8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a24      	ldr	r2, [pc, #144]	; (8002524 <_ZN13STM32Hardware10getRdmaIndEv+0x174>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d00f      	beq.n	80024b8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a21      	ldr	r2, [pc, #132]	; (8002528 <_ZN13STM32Hardware10getRdmaIndEv+0x178>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d007      	beq.n	80024b8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a1e      	ldr	r2, [pc, #120]	; (800252c <_ZN13STM32Hardware10getRdmaIndEv+0x17c>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d10a      	bne.n	80024ce <_ZN13STM32Hardware10getRdmaIndEv+0x11e>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80024c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024cc:	e009      	b.n	80024e2 <_ZN13STM32Hardware10getRdmaIndEv+0x132>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80024de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024e2:	4618      	mov	r0, r3
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	40020010 	.word	0x40020010
 80024f4:	40020028 	.word	0x40020028
 80024f8:	40020040 	.word	0x40020040
 80024fc:	40020058 	.word	0x40020058
 8002500:	40020070 	.word	0x40020070
 8002504:	40020088 	.word	0x40020088
 8002508:	400200a0 	.word	0x400200a0
 800250c:	400200b8 	.word	0x400200b8
 8002510:	40020410 	.word	0x40020410
 8002514:	40020428 	.word	0x40020428
 8002518:	40020440 	.word	0x40020440
 800251c:	40020458 	.word	0x40020458
 8002520:	40020470 	.word	0x40020470
 8002524:	40020488 	.word	0x40020488
 8002528:	400204a0 	.word	0x400204a0
 800252c:	400204b8 	.word	0x400204b8

08002530 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
      huart(&huart3), rind(0), twind(0), tfind(0){
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a0a      	ldr	r2, [pc, #40]	; (8002564 <_ZN13STM32HardwareC1Ev+0x34>)
 800253c:	601a      	str	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4618      	mov	r0, r3
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	2400025c 	.word	0x2400025c

08002568 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f000 f804 	bl	800257e <_ZN13STM32Hardware10reset_rbufEv>
    }
 8002576:	bf00      	nop
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 800257e:	b580      	push	{r7, lr}
 8002580:	b082      	sub	sp, #8
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6818      	ldr	r0, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	3304      	adds	r3, #4
 800258e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002592:	4619      	mov	r1, r3
 8002594:	f009 fcfe 	bl	800bf94 <HAL_UART_Receive_DMA>
    }
 8002598:	bf00      	nop
 800259a:	3708      	adds	r7, #8
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <_ZN13STM32Hardware4readEv>:

    int read(){
 80025a0:	b590      	push	{r4, r7, lr}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
      int c = -1;
 80025a8:	f04f 33ff 	mov.w	r3, #4294967295
 80025ac:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f7ff fefb 	bl	80023b0 <_ZN13STM32Hardware10getRdmaIndEv>
 80025ba:	4603      	mov	r3, r0
 80025bc:	429c      	cmp	r4, r3
 80025be:	bf14      	ite	ne
 80025c0:	2301      	movne	r3, #1
 80025c2:	2300      	moveq	r3, #0
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d012      	beq.n	80025f0 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80025d0:	1c59      	adds	r1, r3, #1
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	4413      	add	r3, r2
 80025dc:	791b      	ldrb	r3, [r3, #4]
 80025de:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80025e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 80025f0:	68fb      	ldr	r3, [r7, #12]
    }
 80025f2:	4618      	mov	r0, r3
 80025f4:	3714      	adds	r7, #20
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd90      	pop	{r4, r7, pc}
	...

080025fc <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260c:	2b20      	cmp	r3, #32
 800260e:	d108      	bne.n	8002622 <_ZN13STM32Hardware5flushEv+0x26>
 8002610:	4b27      	ldr	r3, [pc, #156]	; (80026b0 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	f083 0301 	eor.w	r3, r3, #1
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <_ZN13STM32Hardware5flushEv+0x26>
 800261e:	2301      	movs	r3, #1
 8002620:	e000      	b.n	8002624 <_ZN13STM32Hardware5flushEv+0x28>
 8002622:	2300      	movs	r3, #0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d03f      	beq.n	80026a8 <_ZN13STM32Hardware5flushEv+0xac>
        mutex = true;
 8002628:	4b21      	ldr	r3, [pc, #132]	; (80026b0 <_ZN13STM32Hardware5flushEv+0xb4>)
 800262a:	2201      	movs	r2, #1
 800262c:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800263a:	429a      	cmp	r2, r3
 800263c:	d031      	beq.n	80026a2 <_ZN13STM32Hardware5flushEv+0xa6>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800264a:	429a      	cmp	r2, r3
 800264c:	d20a      	bcs.n	8002664 <_ZN13STM32Hardware5flushEv+0x68>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002654:	b29a      	uxth	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800265c:	b29b      	uxth	r3, r3
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	b29b      	uxth	r3, r3
 8002662:	e006      	b.n	8002672 <_ZN13STM32Hardware5flushEv+0x76>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800266a:	b29b      	uxth	r3, r3
 800266c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002670:	b29b      	uxth	r3, r3
 8002672:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6818      	ldr	r0, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800267e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	4413      	add	r3, r2
 8002686:	89fa      	ldrh	r2, [r7, #14]
 8002688:	4619      	mov	r1, r3
 800268a:	f009 fc03 	bl	800be94 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002694:	89fb      	ldrh	r3, [r7, #14]
 8002696:	4413      	add	r3, r2
 8002698:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 80026a2:	4b03      	ldr	r3, [pc, #12]	; (80026b0 <_ZN13STM32Hardware5flushEv+0xb4>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	701a      	strb	r2, [r3, #0]
      }
    }
 80026a8:	bf00      	nop
 80026aa:	3710      	adds	r7, #16
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	24000460 	.word	0x24000460

080026b4 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
      int n = length;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026ca:	bfa8      	it	ge
 80026cc:	f44f 7300 	movge.w	r3, #512	; 0x200
 80026d0:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80026d8:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	4293      	cmp	r3, r2
 80026e0:	bf28      	it	cs
 80026e2:	4613      	movcs	r3, r2
 80026e4:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80026ec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	4413      	add	r3, r2
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	68b9      	ldr	r1, [r7, #8]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f00b fce7 	bl	800e0cc <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	4413      	add	r3, r2
 8002708:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	429a      	cmp	r2, r3
 8002718:	d00b      	beq.n	8002732 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	68ba      	ldr	r2, [r7, #8]
 8002724:	18d1      	adds	r1, r2, r3
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	461a      	mov	r2, r3
 800272e:	f00b fccd 	bl	800e0cc <memcpy>
      }

      flush();
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f7ff ff62 	bl	80025fc <_ZN13STM32Hardware5flushEv>
    }
 8002738:	bf00      	nop
 800273a:	3718      	adds	r7, #24
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	f002 f866 	bl	8004818 <HAL_GetTick>
 800274c:	4603      	mov	r3, r0
 800274e:	4618      	mov	r0, r3
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
	...

08002758 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4618      	mov	r0, r3
 8002764:	f7fe ffca 	bl	80016fc <_ZN3ros3MsgC1Ev>
 8002768:	4a0e      	ldr	r2, [pc, #56]	; (80027a4 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	6879      	ldr	r1, [r7, #4]
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	f04f 0300 	mov.w	r3, #0
 8002778:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800277c:	6879      	ldr	r1, [r7, #4]
 800277e:	f04f 0200 	mov.w	r2, #0
 8002782:	f04f 0300 	mov.w	r3, #0
 8002786:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800278a:	6879      	ldr	r1, [r7, #4]
 800278c:	f04f 0200 	mov.w	r2, #0
 8002790:	f04f 0300 	mov.w	r3, #0
 8002794:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4618      	mov	r0, r3
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	0800e610 	.word	0x0800e610

080027a8 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80027a8:	b480      	push	{r7}
 80027aa:	b08b      	sub	sp, #44	; 0x2c
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80027b2:	2300      	movs	r3, #0
 80027b4:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80027bc:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80027c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027c6:	6838      	ldr	r0, [r7, #0]
 80027c8:	4401      	add	r1, r0
 80027ca:	b2d3      	uxtb	r3, r2
 80027cc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 80027ce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80027d2:	f04f 0200 	mov.w	r2, #0
 80027d6:	f04f 0300 	mov.w	r3, #0
 80027da:	0a02      	lsrs	r2, r0, #8
 80027dc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80027e0:	0a0b      	lsrs	r3, r1, #8
 80027e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027e4:	3101      	adds	r1, #1
 80027e6:	6838      	ldr	r0, [r7, #0]
 80027e8:	4401      	add	r1, r0
 80027ea:	b2d3      	uxtb	r3, r2
 80027ec:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 80027ee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80027f2:	f04f 0200 	mov.w	r2, #0
 80027f6:	f04f 0300 	mov.w	r3, #0
 80027fa:	0c02      	lsrs	r2, r0, #16
 80027fc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002800:	0c0b      	lsrs	r3, r1, #16
 8002802:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002804:	3102      	adds	r1, #2
 8002806:	6838      	ldr	r0, [r7, #0]
 8002808:	4401      	add	r1, r0
 800280a:	b2d3      	uxtb	r3, r2
 800280c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 800280e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002812:	f04f 0200 	mov.w	r2, #0
 8002816:	f04f 0300 	mov.w	r3, #0
 800281a:	0e02      	lsrs	r2, r0, #24
 800281c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002820:	0e0b      	lsrs	r3, r1, #24
 8002822:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002824:	3103      	adds	r1, #3
 8002826:	6838      	ldr	r0, [r7, #0]
 8002828:	4401      	add	r1, r0
 800282a:	b2d3      	uxtb	r3, r2
 800282c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 800282e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002832:	f04f 0200 	mov.w	r2, #0
 8002836:	f04f 0300 	mov.w	r3, #0
 800283a:	000a      	movs	r2, r1
 800283c:	2300      	movs	r3, #0
 800283e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002840:	3104      	adds	r1, #4
 8002842:	6838      	ldr	r0, [r7, #0]
 8002844:	4401      	add	r1, r0
 8002846:	b2d3      	uxtb	r3, r2
 8002848:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 800284a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800284e:	f04f 0200 	mov.w	r2, #0
 8002852:	f04f 0300 	mov.w	r3, #0
 8002856:	0a0a      	lsrs	r2, r1, #8
 8002858:	2300      	movs	r3, #0
 800285a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800285c:	3105      	adds	r1, #5
 800285e:	6838      	ldr	r0, [r7, #0]
 8002860:	4401      	add	r1, r0
 8002862:	b2d3      	uxtb	r3, r2
 8002864:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8002866:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800286a:	f04f 0200 	mov.w	r2, #0
 800286e:	f04f 0300 	mov.w	r3, #0
 8002872:	0c0a      	lsrs	r2, r1, #16
 8002874:	2300      	movs	r3, #0
 8002876:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002878:	3106      	adds	r1, #6
 800287a:	6838      	ldr	r0, [r7, #0]
 800287c:	4401      	add	r1, r0
 800287e:	b2d3      	uxtb	r3, r2
 8002880:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8002882:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002886:	f04f 0200 	mov.w	r2, #0
 800288a:	f04f 0300 	mov.w	r3, #0
 800288e:	0e0a      	lsrs	r2, r1, #24
 8002890:	2300      	movs	r3, #0
 8002892:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002894:	3107      	adds	r1, #7
 8002896:	6838      	ldr	r0, [r7, #0]
 8002898:	4401      	add	r1, r0
 800289a:	b2d3      	uxtb	r3, r2
 800289c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 800289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a0:	3308      	adds	r3, #8
 80028a2:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80028aa:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80028ae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80028b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028b4:	6838      	ldr	r0, [r7, #0]
 80028b6:	4401      	add	r1, r0
 80028b8:	b2d3      	uxtb	r3, r2
 80028ba:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 80028bc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80028c0:	f04f 0200 	mov.w	r2, #0
 80028c4:	f04f 0300 	mov.w	r3, #0
 80028c8:	0a02      	lsrs	r2, r0, #8
 80028ca:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80028ce:	0a0b      	lsrs	r3, r1, #8
 80028d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028d2:	3101      	adds	r1, #1
 80028d4:	6838      	ldr	r0, [r7, #0]
 80028d6:	4401      	add	r1, r0
 80028d8:	b2d3      	uxtb	r3, r2
 80028da:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 80028dc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80028e0:	f04f 0200 	mov.w	r2, #0
 80028e4:	f04f 0300 	mov.w	r3, #0
 80028e8:	0c02      	lsrs	r2, r0, #16
 80028ea:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80028ee:	0c0b      	lsrs	r3, r1, #16
 80028f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028f2:	3102      	adds	r1, #2
 80028f4:	6838      	ldr	r0, [r7, #0]
 80028f6:	4401      	add	r1, r0
 80028f8:	b2d3      	uxtb	r3, r2
 80028fa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 80028fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002900:	f04f 0200 	mov.w	r2, #0
 8002904:	f04f 0300 	mov.w	r3, #0
 8002908:	0e02      	lsrs	r2, r0, #24
 800290a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800290e:	0e0b      	lsrs	r3, r1, #24
 8002910:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002912:	3103      	adds	r1, #3
 8002914:	6838      	ldr	r0, [r7, #0]
 8002916:	4401      	add	r1, r0
 8002918:	b2d3      	uxtb	r3, r2
 800291a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 800291c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002920:	f04f 0200 	mov.w	r2, #0
 8002924:	f04f 0300 	mov.w	r3, #0
 8002928:	000a      	movs	r2, r1
 800292a:	2300      	movs	r3, #0
 800292c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800292e:	3104      	adds	r1, #4
 8002930:	6838      	ldr	r0, [r7, #0]
 8002932:	4401      	add	r1, r0
 8002934:	b2d3      	uxtb	r3, r2
 8002936:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8002938:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800293c:	f04f 0200 	mov.w	r2, #0
 8002940:	f04f 0300 	mov.w	r3, #0
 8002944:	0a0a      	lsrs	r2, r1, #8
 8002946:	2300      	movs	r3, #0
 8002948:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800294a:	3105      	adds	r1, #5
 800294c:	6838      	ldr	r0, [r7, #0]
 800294e:	4401      	add	r1, r0
 8002950:	b2d3      	uxtb	r3, r2
 8002952:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8002954:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002958:	f04f 0200 	mov.w	r2, #0
 800295c:	f04f 0300 	mov.w	r3, #0
 8002960:	0c0a      	lsrs	r2, r1, #16
 8002962:	2300      	movs	r3, #0
 8002964:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002966:	3106      	adds	r1, #6
 8002968:	6838      	ldr	r0, [r7, #0]
 800296a:	4401      	add	r1, r0
 800296c:	b2d3      	uxtb	r3, r2
 800296e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8002970:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002974:	f04f 0200 	mov.w	r2, #0
 8002978:	f04f 0300 	mov.w	r3, #0
 800297c:	0e0a      	lsrs	r2, r1, #24
 800297e:	2300      	movs	r3, #0
 8002980:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002982:	3107      	adds	r1, #7
 8002984:	6838      	ldr	r0, [r7, #0]
 8002986:	4401      	add	r1, r0
 8002988:	b2d3      	uxtb	r3, r2
 800298a:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 800298c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298e:	3308      	adds	r3, #8
 8002990:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002998:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 800299c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029a2:	6838      	ldr	r0, [r7, #0]
 80029a4:	4401      	add	r1, r0
 80029a6:	b2d3      	uxtb	r3, r2
 80029a8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 80029aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80029ae:	f04f 0200 	mov.w	r2, #0
 80029b2:	f04f 0300 	mov.w	r3, #0
 80029b6:	0a02      	lsrs	r2, r0, #8
 80029b8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80029bc:	0a0b      	lsrs	r3, r1, #8
 80029be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029c0:	3101      	adds	r1, #1
 80029c2:	6838      	ldr	r0, [r7, #0]
 80029c4:	4401      	add	r1, r0
 80029c6:	b2d3      	uxtb	r3, r2
 80029c8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 80029ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80029ce:	f04f 0200 	mov.w	r2, #0
 80029d2:	f04f 0300 	mov.w	r3, #0
 80029d6:	0c02      	lsrs	r2, r0, #16
 80029d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80029dc:	0c0b      	lsrs	r3, r1, #16
 80029de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029e0:	3102      	adds	r1, #2
 80029e2:	6838      	ldr	r0, [r7, #0]
 80029e4:	4401      	add	r1, r0
 80029e6:	b2d3      	uxtb	r3, r2
 80029e8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 80029ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80029ee:	f04f 0200 	mov.w	r2, #0
 80029f2:	f04f 0300 	mov.w	r3, #0
 80029f6:	0e02      	lsrs	r2, r0, #24
 80029f8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80029fc:	0e0b      	lsrs	r3, r1, #24
 80029fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a00:	3103      	adds	r1, #3
 8002a02:	6838      	ldr	r0, [r7, #0]
 8002a04:	4401      	add	r1, r0
 8002a06:	b2d3      	uxtb	r3, r2
 8002a08:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8002a0a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a0e:	f04f 0200 	mov.w	r2, #0
 8002a12:	f04f 0300 	mov.w	r3, #0
 8002a16:	000a      	movs	r2, r1
 8002a18:	2300      	movs	r3, #0
 8002a1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a1c:	3104      	adds	r1, #4
 8002a1e:	6838      	ldr	r0, [r7, #0]
 8002a20:	4401      	add	r1, r0
 8002a22:	b2d3      	uxtb	r3, r2
 8002a24:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8002a26:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a2a:	f04f 0200 	mov.w	r2, #0
 8002a2e:	f04f 0300 	mov.w	r3, #0
 8002a32:	0a0a      	lsrs	r2, r1, #8
 8002a34:	2300      	movs	r3, #0
 8002a36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a38:	3105      	adds	r1, #5
 8002a3a:	6838      	ldr	r0, [r7, #0]
 8002a3c:	4401      	add	r1, r0
 8002a3e:	b2d3      	uxtb	r3, r2
 8002a40:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8002a42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a46:	f04f 0200 	mov.w	r2, #0
 8002a4a:	f04f 0300 	mov.w	r3, #0
 8002a4e:	0c0a      	lsrs	r2, r1, #16
 8002a50:	2300      	movs	r3, #0
 8002a52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a54:	3106      	adds	r1, #6
 8002a56:	6838      	ldr	r0, [r7, #0]
 8002a58:	4401      	add	r1, r0
 8002a5a:	b2d3      	uxtb	r3, r2
 8002a5c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8002a5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a62:	f04f 0200 	mov.w	r2, #0
 8002a66:	f04f 0300 	mov.w	r3, #0
 8002a6a:	0e0a      	lsrs	r2, r1, #24
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a70:	3107      	adds	r1, #7
 8002a72:	6838      	ldr	r0, [r7, #0]
 8002a74:	4401      	add	r1, r0
 8002a76:	b2d3      	uxtb	r3, r2
 8002a78:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7c:	3308      	adds	r3, #8
 8002a7e:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8002a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002a82:	4618      	mov	r0, r3
 8002a84:	372c      	adds	r7, #44	; 0x2c
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr

08002a8e <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002a8e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002a92:	b0eb      	sub	sp, #428	; 0x1ac
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8002a9a:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8002aa4:	f04f 0200 	mov.w	r2, #0
 8002aa8:	f04f 0300 	mov.w	r3, #0
 8002aac:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002ab0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002ab4:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002ab8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002abc:	4413      	add	r3, r2
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	461c      	mov	r4, r3
 8002ac6:	4615      	mov	r5, r2
 8002ac8:	ea40 0804 	orr.w	r8, r0, r4
 8002acc:	ea41 0905 	orr.w	r9, r1, r5
 8002ad0:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002ad4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002ad8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002adc:	1c5a      	adds	r2, r3, #1
 8002ade:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ae2:	4413      	add	r3, r2
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2200      	movs	r2, #0
 8002aea:	469a      	mov	sl, r3
 8002aec:	4693      	mov	fp, r2
 8002aee:	f04f 0200 	mov.w	r2, #0
 8002af2:	f04f 0300 	mov.w	r3, #0
 8002af6:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8002afa:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8002afe:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8002b02:	ea40 0402 	orr.w	r4, r0, r2
 8002b06:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8002b0a:	430b      	orrs	r3, r1
 8002b0c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002b10:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8002b14:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002b18:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002b1c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b20:	1c9a      	adds	r2, r3, #2
 8002b22:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b26:	4413      	add	r3, r2
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8002b32:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8002b36:	f04f 0200 	mov.w	r2, #0
 8002b3a:	f04f 0300 	mov.w	r3, #0
 8002b3e:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8002b42:	464c      	mov	r4, r9
 8002b44:	0423      	lsls	r3, r4, #16
 8002b46:	4644      	mov	r4, r8
 8002b48:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002b4c:	4644      	mov	r4, r8
 8002b4e:	0422      	lsls	r2, r4, #16
 8002b50:	ea40 0402 	orr.w	r4, r0, r2
 8002b54:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8002b58:	430b      	orrs	r3, r1
 8002b5a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8002b5e:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8002b62:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002b66:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002b6a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b6e:	1cda      	adds	r2, r3, #3
 8002b70:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b74:	4413      	add	r3, r2
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8002b80:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8002b84:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8002b88:	4623      	mov	r3, r4
 8002b8a:	0a1b      	lsrs	r3, r3, #8
 8002b8c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8002b90:	4623      	mov	r3, r4
 8002b92:	061b      	lsls	r3, r3, #24
 8002b94:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002b98:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8002b9c:	4623      	mov	r3, r4
 8002b9e:	4303      	orrs	r3, r0
 8002ba0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002ba4:	462b      	mov	r3, r5
 8002ba6:	430b      	orrs	r3, r1
 8002ba8:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002bac:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8002bb0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002bb4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002bb8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002bbc:	1d1a      	adds	r2, r3, #4
 8002bbe:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002bc2:	4413      	add	r3, r2
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8002bce:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002bd2:	f04f 0200 	mov.w	r2, #0
 8002bd6:	f04f 0300 	mov.w	r3, #0
 8002bda:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8002bde:	0023      	movs	r3, r4
 8002be0:	2200      	movs	r2, #0
 8002be2:	ea40 0402 	orr.w	r4, r0, r2
 8002be6:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8002bea:	430b      	orrs	r3, r1
 8002bec:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002bf0:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8002bf4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002bf8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002bfc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c00:	1d5a      	adds	r2, r3, #5
 8002c02:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c06:	4413      	add	r3, r2
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002c12:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8002c16:	f04f 0200 	mov.w	r2, #0
 8002c1a:	f04f 0300 	mov.w	r3, #0
 8002c1e:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8002c22:	0223      	lsls	r3, r4, #8
 8002c24:	2200      	movs	r2, #0
 8002c26:	ea40 0402 	orr.w	r4, r0, r2
 8002c2a:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8002c2e:	430b      	orrs	r3, r1
 8002c30:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002c34:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8002c38:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002c3c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002c40:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c44:	1d9a      	adds	r2, r3, #6
 8002c46:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c4a:	4413      	add	r3, r2
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2200      	movs	r2, #0
 8002c52:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002c56:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8002c5a:	f04f 0200 	mov.w	r2, #0
 8002c5e:	f04f 0300 	mov.w	r3, #0
 8002c62:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8002c66:	0423      	lsls	r3, r4, #16
 8002c68:	2200      	movs	r2, #0
 8002c6a:	ea40 0402 	orr.w	r4, r0, r2
 8002c6e:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8002c72:	430b      	orrs	r3, r1
 8002c74:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002c78:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8002c7c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002c80:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002c84:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c88:	1dda      	adds	r2, r3, #7
 8002c8a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c8e:	4413      	add	r3, r2
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	2200      	movs	r2, #0
 8002c96:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8002c9a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002c9e:	f04f 0200 	mov.w	r2, #0
 8002ca2:	f04f 0300 	mov.w	r3, #0
 8002ca6:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8002caa:	0623      	lsls	r3, r4, #24
 8002cac:	2200      	movs	r2, #0
 8002cae:	ea40 0402 	orr.w	r4, r0, r2
 8002cb2:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8002cb6:	430b      	orrs	r3, r1
 8002cb8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002cbc:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8002cc0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8002cc4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002cc8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002ccc:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8002cd0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002cd4:	3308      	adds	r3, #8
 8002cd6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8002cda:	f04f 0200 	mov.w	r2, #0
 8002cde:	f04f 0300 	mov.w	r3, #0
 8002ce2:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002ce6:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002cea:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002cee:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002cf2:	4413      	add	r3, r2
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002cfe:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8002d02:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8002d06:	4623      	mov	r3, r4
 8002d08:	4303      	orrs	r3, r0
 8002d0a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002d0e:	462b      	mov	r3, r5
 8002d10:	430b      	orrs	r3, r1
 8002d12:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002d16:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8002d1a:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002d1e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002d22:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d26:	1c5a      	adds	r2, r3, #1
 8002d28:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d2c:	4413      	add	r3, r2
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2200      	movs	r2, #0
 8002d34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002d38:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8002d3c:	f04f 0200 	mov.w	r2, #0
 8002d40:	f04f 0300 	mov.w	r3, #0
 8002d44:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8002d48:	464c      	mov	r4, r9
 8002d4a:	0223      	lsls	r3, r4, #8
 8002d4c:	4644      	mov	r4, r8
 8002d4e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002d52:	4644      	mov	r4, r8
 8002d54:	0222      	lsls	r2, r4, #8
 8002d56:	ea40 0402 	orr.w	r4, r0, r2
 8002d5a:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8002d5e:	430b      	orrs	r3, r1
 8002d60:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002d64:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8002d68:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002d6c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002d70:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d74:	1c9a      	adds	r2, r3, #2
 8002d76:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d7a:	4413      	add	r3, r2
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2200      	movs	r2, #0
 8002d82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002d86:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002d8a:	f04f 0200 	mov.w	r2, #0
 8002d8e:	f04f 0300 	mov.w	r3, #0
 8002d92:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8002d96:	464c      	mov	r4, r9
 8002d98:	0423      	lsls	r3, r4, #16
 8002d9a:	4644      	mov	r4, r8
 8002d9c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002da0:	4644      	mov	r4, r8
 8002da2:	0422      	lsls	r2, r4, #16
 8002da4:	ea40 0402 	orr.w	r4, r0, r2
 8002da8:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8002dac:	430b      	orrs	r3, r1
 8002dae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002db2:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8002db6:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002dba:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002dbe:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002dc2:	1cda      	adds	r2, r3, #3
 8002dc4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002dc8:	4413      	add	r3, r2
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002dd4:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002dd8:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002ddc:	4623      	mov	r3, r4
 8002dde:	0a1b      	lsrs	r3, r3, #8
 8002de0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002de4:	4623      	mov	r3, r4
 8002de6:	061b      	lsls	r3, r3, #24
 8002de8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002dec:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002df0:	4623      	mov	r3, r4
 8002df2:	4303      	orrs	r3, r0
 8002df4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002df8:	462b      	mov	r3, r5
 8002dfa:	430b      	orrs	r3, r1
 8002dfc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002e00:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8002e04:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002e08:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002e0c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e10:	1d1a      	adds	r2, r3, #4
 8002e12:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e16:	4413      	add	r3, r2
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e22:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002e26:	f04f 0200 	mov.w	r2, #0
 8002e2a:	f04f 0300 	mov.w	r3, #0
 8002e2e:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8002e32:	0023      	movs	r3, r4
 8002e34:	2200      	movs	r2, #0
 8002e36:	ea40 0402 	orr.w	r4, r0, r2
 8002e3a:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8002e3e:	430b      	orrs	r3, r1
 8002e40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002e44:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8002e48:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002e4c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002e50:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e54:	1d5a      	adds	r2, r3, #5
 8002e56:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e5a:	4413      	add	r3, r2
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	2200      	movs	r2, #0
 8002e62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e66:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8002e6a:	f04f 0200 	mov.w	r2, #0
 8002e6e:	f04f 0300 	mov.w	r3, #0
 8002e72:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8002e76:	0223      	lsls	r3, r4, #8
 8002e78:	2200      	movs	r2, #0
 8002e7a:	ea40 0402 	orr.w	r4, r0, r2
 8002e7e:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8002e82:	430b      	orrs	r3, r1
 8002e84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002e88:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8002e8c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002e90:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002e94:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e98:	1d9a      	adds	r2, r3, #6
 8002e9a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e9e:	4413      	add	r3, r2
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002eaa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002eae:	f04f 0200 	mov.w	r2, #0
 8002eb2:	f04f 0300 	mov.w	r3, #0
 8002eb6:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8002eba:	0423      	lsls	r3, r4, #16
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	ea40 0402 	orr.w	r4, r0, r2
 8002ec2:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8002ec6:	430b      	orrs	r3, r1
 8002ec8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002ecc:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8002ed0:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002ed4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002ed8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002edc:	1dda      	adds	r2, r3, #7
 8002ede:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ee2:	4413      	add	r3, r2
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002eee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002ef2:	f04f 0200 	mov.w	r2, #0
 8002ef6:	f04f 0300 	mov.w	r3, #0
 8002efa:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8002efe:	0623      	lsls	r3, r4, #24
 8002f00:	2200      	movs	r2, #0
 8002f02:	ea40 0402 	orr.w	r4, r0, r2
 8002f06:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8002f0a:	430b      	orrs	r3, r1
 8002f0c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002f10:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8002f14:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8002f18:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002f1c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002f20:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8002f24:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f28:	3308      	adds	r3, #8
 8002f2a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8002f2e:	f04f 0200 	mov.w	r2, #0
 8002f32:	f04f 0300 	mov.w	r3, #0
 8002f36:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002f3a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002f3e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002f42:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f46:	4413      	add	r3, r2
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f52:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002f56:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8002f5a:	4623      	mov	r3, r4
 8002f5c:	4303      	orrs	r3, r0
 8002f5e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f60:	462b      	mov	r3, r5
 8002f62:	430b      	orrs	r3, r1
 8002f64:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002f66:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8002f6a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002f6e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002f72:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f76:	1c5a      	adds	r2, r3, #1
 8002f78:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f7c:	4413      	add	r3, r2
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2200      	movs	r2, #0
 8002f84:	673b      	str	r3, [r7, #112]	; 0x70
 8002f86:	677a      	str	r2, [r7, #116]	; 0x74
 8002f88:	f04f 0200 	mov.w	r2, #0
 8002f8c:	f04f 0300 	mov.w	r3, #0
 8002f90:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002f94:	464c      	mov	r4, r9
 8002f96:	0223      	lsls	r3, r4, #8
 8002f98:	4644      	mov	r4, r8
 8002f9a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002f9e:	4644      	mov	r4, r8
 8002fa0:	0222      	lsls	r2, r4, #8
 8002fa2:	ea40 0402 	orr.w	r4, r0, r2
 8002fa6:	66bc      	str	r4, [r7, #104]	; 0x68
 8002fa8:	430b      	orrs	r3, r1
 8002faa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002fac:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8002fb0:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002fb4:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002fb8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002fbc:	1c9a      	adds	r2, r3, #2
 8002fbe:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002fc2:	4413      	add	r3, r2
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	2200      	movs	r2, #0
 8002fca:	663b      	str	r3, [r7, #96]	; 0x60
 8002fcc:	667a      	str	r2, [r7, #100]	; 0x64
 8002fce:	f04f 0200 	mov.w	r2, #0
 8002fd2:	f04f 0300 	mov.w	r3, #0
 8002fd6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002fda:	464c      	mov	r4, r9
 8002fdc:	0423      	lsls	r3, r4, #16
 8002fde:	4644      	mov	r4, r8
 8002fe0:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002fe4:	4644      	mov	r4, r8
 8002fe6:	0422      	lsls	r2, r4, #16
 8002fe8:	ea40 0402 	orr.w	r4, r0, r2
 8002fec:	65bc      	str	r4, [r7, #88]	; 0x58
 8002fee:	430b      	orrs	r3, r1
 8002ff0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ff2:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8002ff6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002ffa:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002ffe:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003002:	1cda      	adds	r2, r3, #3
 8003004:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003008:	4413      	add	r3, r2
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2200      	movs	r2, #0
 8003010:	653b      	str	r3, [r7, #80]	; 0x50
 8003012:	657a      	str	r2, [r7, #84]	; 0x54
 8003014:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8003018:	4623      	mov	r3, r4
 800301a:	0a1b      	lsrs	r3, r3, #8
 800301c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800301e:	4623      	mov	r3, r4
 8003020:	061b      	lsls	r3, r3, #24
 8003022:	64bb      	str	r3, [r7, #72]	; 0x48
 8003024:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003028:	4623      	mov	r3, r4
 800302a:	4303      	orrs	r3, r0
 800302c:	643b      	str	r3, [r7, #64]	; 0x40
 800302e:	462b      	mov	r3, r5
 8003030:	430b      	orrs	r3, r1
 8003032:	647b      	str	r3, [r7, #68]	; 0x44
 8003034:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003038:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800303c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003040:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003044:	1d1a      	adds	r2, r3, #4
 8003046:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800304a:	4413      	add	r3, r2
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2200      	movs	r2, #0
 8003052:	63bb      	str	r3, [r7, #56]	; 0x38
 8003054:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003056:	f04f 0200 	mov.w	r2, #0
 800305a:	f04f 0300 	mov.w	r3, #0
 800305e:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8003060:	0023      	movs	r3, r4
 8003062:	2200      	movs	r2, #0
 8003064:	ea40 0402 	orr.w	r4, r0, r2
 8003068:	633c      	str	r4, [r7, #48]	; 0x30
 800306a:	430b      	orrs	r3, r1
 800306c:	637b      	str	r3, [r7, #52]	; 0x34
 800306e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003072:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003076:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800307a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800307e:	1d5a      	adds	r2, r3, #5
 8003080:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003084:	4413      	add	r3, r2
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2200      	movs	r2, #0
 800308c:	62bb      	str	r3, [r7, #40]	; 0x28
 800308e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003090:	f04f 0200 	mov.w	r2, #0
 8003094:	f04f 0300 	mov.w	r3, #0
 8003098:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800309a:	0223      	lsls	r3, r4, #8
 800309c:	2200      	movs	r2, #0
 800309e:	ea40 0402 	orr.w	r4, r0, r2
 80030a2:	623c      	str	r4, [r7, #32]
 80030a4:	430b      	orrs	r3, r1
 80030a6:	627b      	str	r3, [r7, #36]	; 0x24
 80030a8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80030ac:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80030b0:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80030b4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80030b8:	3306      	adds	r3, #6
 80030ba:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80030be:	4413      	add	r3, r2
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	2200      	movs	r2, #0
 80030c6:	61bb      	str	r3, [r7, #24]
 80030c8:	61fa      	str	r2, [r7, #28]
 80030ca:	f04f 0200 	mov.w	r2, #0
 80030ce:	f04f 0300 	mov.w	r3, #0
 80030d2:	69bc      	ldr	r4, [r7, #24]
 80030d4:	0423      	lsls	r3, r4, #16
 80030d6:	2200      	movs	r2, #0
 80030d8:	ea40 0402 	orr.w	r4, r0, r2
 80030dc:	613c      	str	r4, [r7, #16]
 80030de:	430b      	orrs	r3, r1
 80030e0:	617b      	str	r3, [r7, #20]
 80030e2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80030e6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80030ea:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80030ee:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80030f2:	3307      	adds	r3, #7
 80030f4:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80030f8:	4413      	add	r3, r2
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2200      	movs	r2, #0
 8003100:	60bb      	str	r3, [r7, #8]
 8003102:	60fa      	str	r2, [r7, #12]
 8003104:	f04f 0200 	mov.w	r2, #0
 8003108:	f04f 0300 	mov.w	r3, #0
 800310c:	68bc      	ldr	r4, [r7, #8]
 800310e:	0623      	lsls	r3, r4, #24
 8003110:	2200      	movs	r2, #0
 8003112:	ea40 0402 	orr.w	r4, r0, r2
 8003116:	603c      	str	r4, [r7, #0]
 8003118:	430b      	orrs	r3, r1
 800311a:	607b      	str	r3, [r7, #4]
 800311c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003120:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8003124:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003128:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 800312c:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8003130:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003134:	3308      	adds	r3, #8
 8003136:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 800313a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 800313e:	4618      	mov	r0, r3
 8003140:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8003144:	46bd      	mov	sp, r7
 8003146:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800314a:	4770      	bx	lr

0800314c <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	4b03      	ldr	r3, [pc, #12]	; (8003164 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8003156:	4618      	mov	r0, r3
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	0800e4e8 	.word	0x0800e4e8

08003168 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	4b03      	ldr	r3, [pc, #12]	; (8003180 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8003172:	4618      	mov	r0, r3
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	0800e500 	.word	0x0800e500

08003184 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4618      	mov	r0, r3
 8003190:	f7fe fab4 	bl	80016fc <_ZN3ros3MsgC1Ev>
 8003194:	4a08      	ldr	r2, [pc, #32]	; (80031b8 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	601a      	str	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	3308      	adds	r3, #8
 800319e:	4618      	mov	r0, r3
 80031a0:	f7ff fada 	bl	8002758 <_ZN13geometry_msgs7Vector3C1Ev>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	3328      	adds	r3, #40	; 0x28
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7ff fad5 	bl	8002758 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4618      	mov	r0, r3
 80031b2:	3708      	adds	r7, #8
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	0800e5f8 	.word	0x0800e5f8

080031bc <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80031c6:	2300      	movs	r3, #0
 80031c8:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f103 0008 	add.w	r0, r3, #8
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	4413      	add	r3, r2
 80031d6:	4619      	mov	r1, r3
 80031d8:	f7ff fae6 	bl	80027a8 <_ZNK13geometry_msgs7Vector39serializeEPh>
 80031dc:	4602      	mov	r2, r0
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	4413      	add	r3, r2
 80031e2:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	4413      	add	r3, r2
 80031f0:	4619      	mov	r1, r3
 80031f2:	f7ff fad9 	bl	80027a8 <_ZNK13geometry_msgs7Vector39serializeEPh>
 80031f6:	4602      	mov	r2, r0
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	4413      	add	r3, r2
 80031fc:	60fb      	str	r3, [r7, #12]
      return offset;
 80031fe:	68fb      	ldr	r3, [r7, #12]
    }
 8003200:	4618      	mov	r0, r3
 8003202:	3710      	adds	r7, #16
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003212:	2300      	movs	r3, #0
 8003214:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f103 0008 	add.w	r0, r3, #8
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	4413      	add	r3, r2
 8003222:	4619      	mov	r1, r3
 8003224:	f7ff fc33 	bl	8002a8e <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003228:	4602      	mov	r2, r0
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	4413      	add	r3, r2
 800322e:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	4413      	add	r3, r2
 800323c:	4619      	mov	r1, r3
 800323e:	f7ff fc26 	bl	8002a8e <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003242:	4602      	mov	r2, r0
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4413      	add	r3, r2
 8003248:	60fb      	str	r3, [r7, #12]
     return offset;
 800324a:	68fb      	ldr	r3, [r7, #12]
    }
 800324c:	4618      	mov	r0, r3
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	4b03      	ldr	r3, [pc, #12]	; (800326c <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 800325e:	4618      	mov	r0, r3
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	0800e524 	.word	0x0800e524

08003270 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	4b03      	ldr	r3, [pc, #12]	; (8003288 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 800327a:	4618      	mov	r0, r3
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	0800e538 	.word	0x0800e538

0800328c <_Z12vel_callbackRKN13geometry_msgs5TwistE>:
ros::NodeHandle nh;
int n=0;
geometry_msgs::Twist speed;
ros::Publisher pub("speed",&speed);
void vel_callback(const geometry_msgs::Twist &msg)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
	Vx = msg.linear.x;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800329a:	490a      	ldr	r1, [pc, #40]	; (80032c4 <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x38>)
 800329c:	e9c1 2300 	strd	r2, r3, [r1]
	Vy = msg.linear.y;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80032a6:	4908      	ldr	r1, [pc, #32]	; (80032c8 <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x3c>)
 80032a8:	e9c1 2300 	strd	r2, r3, [r1]
	W=msg.angular.z;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80032b2:	4906      	ldr	r1, [pc, #24]	; (80032cc <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x40>)
 80032b4:	e9c1 2300 	strd	r2, r3, [r1]
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr
 80032c4:	240003e0 	.word	0x240003e0
 80032c8:	240003e8 	.word	0x240003e8
 80032cc:	240003f0 	.word	0x240003f0

080032d0 <HAL_UART_TxCpltCallback>:

ros::Subscriber<geometry_msgs::Twist> sub("cmd_vel",vel_callback);


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 {
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
nh.getHardware()->flush();
 80032d8:	4805      	ldr	r0, [pc, #20]	; (80032f0 <HAL_UART_TxCpltCallback+0x20>)
 80032da:	f000 f933 	bl	8003544 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80032de:	4603      	mov	r3, r0
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7ff f98b 	bl	80025fc <_ZN13STM32Hardware5flushEv>
 }
 80032e6:	bf00      	nop
 80032e8:	3708      	adds	r7, #8
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	24000464 	.word	0x24000464

080032f4 <setup>:
 //void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 //{
 //nh.getHardware()->reset_rbuf();
 //}
 void setup(void)
 {
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
 nh.initNode();
 80032f8:	4806      	ldr	r0, [pc, #24]	; (8003314 <setup+0x20>)
 80032fa:	f000 f92f 	bl	800355c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
 nh.subscribe(sub);
 80032fe:	4906      	ldr	r1, [pc, #24]	; (8003318 <setup+0x24>)
 8003300:	4804      	ldr	r0, [pc, #16]	; (8003314 <setup+0x20>)
 8003302:	f000 f948 	bl	8003596 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
 nh.advertise(pub);
 8003306:	4905      	ldr	r1, [pc, #20]	; (800331c <setup+0x28>)
 8003308:	4802      	ldr	r0, [pc, #8]	; (8003314 <setup+0x20>)
 800330a:	f000 f96f 	bl	80035ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
 }
 800330e:	bf00      	nop
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	24000464 	.word	0x24000464
 8003318:	24000e00 	.word	0x24000e00
 800331c:	24000de8 	.word	0x24000de8

08003320 <loop>:
 void loop(void)
 {
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
 nh.spinOnce();
 8003324:	4802      	ldr	r0, [pc, #8]	; (8003330 <loop+0x10>)
 8003326:	f000 f991 	bl	800364c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
 }
 800332a:	bf00      	nop
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	24000464 	.word	0x24000464

08003334 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 800333e:	2300      	movs	r3, #0
 8003340:	60fb      	str	r3, [r7, #12]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2b03      	cmp	r3, #3
 8003346:	d80d      	bhi.n	8003364 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	fa22 f103 	lsr.w	r1, r2, r3
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	4413      	add	r3, r2
 8003358:	b2ca      	uxtb	r2, r1
 800335a:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	3301      	adds	r3, #1
 8003360:	60fb      	str	r3, [r7, #12]
 8003362:	e7ee      	b.n	8003342 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8003364:	bf00      	nop
 8003366:	3714      	adds	r7, #20
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003380:	2300      	movs	r3, #0
 8003382:	60fb      	str	r3, [r7, #12]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2b03      	cmp	r3, #3
 8003388:	d811      	bhi.n	80033ae <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6839      	ldr	r1, [r7, #0]
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	440a      	add	r2, r1
 8003394:	7812      	ldrb	r2, [r2, #0]
 8003396:	4611      	mov	r1, r2
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	00d2      	lsls	r2, r2, #3
 800339c:	fa01 f202 	lsl.w	r2, r1, r2
 80033a0:	431a      	orrs	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	3301      	adds	r3, #1
 80033aa:	60fb      	str	r3, [r7, #12]
 80033ac:	e7ea      	b.n	8003384 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 80033ae:	bf00      	nop
 80033b0:	3714      	adds	r7, #20
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
	...

080033bc <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	4a04      	ldr	r2, [pc, #16]	; (80033d8 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	601a      	str	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4618      	mov	r0, r3
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	0800e640 	.word	0x0800e640

080033dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7ff ffe8 	bl	80033bc <_ZN3ros15NodeHandleBase_C1Ev>
 80033ec:	4a3a      	ldr	r2, [pc, #232]	; (80034d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	601a      	str	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	3304      	adds	r3, #4
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7ff f89a 	bl	8002530 <_ZN13STM32HardwareC1Ev>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f603 1314 	addw	r3, r3, #2324	; 0x914
 800340a:	4618      	mov	r0, r3
 800340c:	f7fe fcea 	bl	8001de4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003410:	2300      	movs	r3, #0
 8003412:	617b      	str	r3, [r7, #20]
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	2b18      	cmp	r3, #24
 8003418:	d80b      	bhi.n	8003432 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	4413      	add	r3, r2
 8003426:	2200      	movs	r2, #0
 8003428:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	3301      	adds	r3, #1
 800342e:	617b      	str	r3, [r7, #20]
 8003430:	e7f0      	b.n	8003414 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003432:	2300      	movs	r3, #0
 8003434:	613b      	str	r3, [r7, #16]
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	2b18      	cmp	r3, #24
 800343a:	d80a      	bhi.n	8003452 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003444:	2100      	movs	r1, #0
 8003446:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	3301      	adds	r3, #1
 800344e:	613b      	str	r3, [r7, #16]
 8003450:	e7f1      	b.n	8003436 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003452:	2300      	movs	r3, #0
 8003454:	60fb      	str	r3, [r7, #12]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800345c:	d20a      	bcs.n	8003474 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	4413      	add	r3, r2
 8003464:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003468:	2200      	movs	r2, #0
 800346a:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	3301      	adds	r3, #1
 8003470:	60fb      	str	r3, [r7, #12]
 8003472:	e7f0      	b.n	8003456 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003474:	2300      	movs	r3, #0
 8003476:	60bb      	str	r3, [r7, #8]
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800347e:	d20a      	bcs.n	8003496 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	4413      	add	r3, r2
 8003486:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800348a:	2200      	movs	r2, #0
 800348c:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	3301      	adds	r3, #1
 8003492:	60bb      	str	r3, [r7, #8]
 8003494:	e7f0      	b.n	8003478 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4618      	mov	r0, r3
 80034d2:	3718      	adds	r7, #24
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	0800e5e4 	.word	0x0800e5e4

080034dc <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	4a04      	ldr	r2, [pc, #16]	; (80034f8 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	601a      	str	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4618      	mov	r0, r3
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr
 80034f8:	0800e628 	.word	0x0800e628

080034fc <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
 8003508:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	4618      	mov	r0, r3
 800350e:	f7ff ffe5 	bl	80034dc <_ZN3ros11Subscriber_C1Ev>
 8003512:	4a0b      	ldr	r2, [pc, #44]	; (8003540 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	601a      	str	r2, [r3, #0]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	3310      	adds	r3, #16
 800351c:	4618      	mov	r0, r3
 800351e:	f7ff fe31 	bl	8003184 <_ZN13geometry_msgs5TwistC1Ev>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	659a      	str	r2, [r3, #88]	; 0x58
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	68ba      	ldr	r2, [r7, #8]
 8003532:	609a      	str	r2, [r3, #8]
  };
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	4618      	mov	r0, r3
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	0800e5cc 	.word	0x0800e5cc

08003544 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	3304      	adds	r3, #4
  }
 8003550:	4618      	mov	r0, r3
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	3304      	adds	r3, #4
 8003568:	4618      	mov	r0, r3
 800356a:	f7fe fffd 	bl	8002568 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 800358e:	bf00      	nop
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8003596:	b480      	push	{r7}
 8003598:	b085      	sub	sp, #20
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
 800359e:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80035a0:	2300      	movs	r3, #0
 80035a2:	60fb      	str	r3, [r7, #12]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2b18      	cmp	r3, #24
 80035a8:	dc19      	bgt.n	80035de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	f202 2222 	addw	r2, r2, #546	; 0x222
 80035b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d10d      	bne.n	80035d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 80035ba:	6839      	ldr	r1, [r7, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	f202 2222 	addw	r2, r2, #546	; 0x222
 80035c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	605a      	str	r2, [r3, #4]
        return true;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e004      	b.n	80035e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	3301      	adds	r3, #1
 80035da:	60fb      	str	r3, [r7, #12]
 80035dc:	e7e2      	b.n	80035a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0xe>
      }
    }
    return false;
 80035de:	2300      	movs	r3, #0
  }
 80035e0:	4618      	mov	r0, r3
 80035e2:	3714      	adds	r7, #20
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80035f6:	2300      	movs	r3, #0
 80035f8:	60fb      	str	r3, [r7, #12]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2b18      	cmp	r3, #24
 80035fe:	dc1e      	bgt.n	800363e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4413      	add	r3, r2
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d111      	bne.n	8003636 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	4413      	add	r3, r2
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	60da      	str	r2, [r3, #12]
        return true;
 8003632:	2301      	movs	r3, #1
 8003634:	e004      	b.n	8003640 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	3301      	adds	r3, #1
 800363a:	60fb      	str	r3, [r7, #12]
 800363c:	e7dd      	b.n	80035fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 800363e:	2300      	movs	r3, #0
  }
 8003640:	4618      	mov	r0, r3
 8003642:	3714      	adds	r7, #20
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	3304      	adds	r3, #4
 8003658:	4618      	mov	r0, r3
 800365a:	f7ff f871 	bl	8002740 <_ZN13STM32Hardware4timeEv>
 800365e:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800366e:	4293      	cmp	r3, r2
 8003670:	d903      	bls.n	800367a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003680:	2b00      	cmp	r3, #0
 8003682:	d009      	beq.n	8003698 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	429a      	cmp	r2, r3
 800368e:	d903      	bls.n	8003698 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d014      	beq.n	80036cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	3304      	adds	r3, #4
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7ff f84a 	bl	8002740 <_ZN13STM32Hardware4timeEv>
 80036ac:	4602      	mov	r2, r0
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	1ad2      	subs	r2, r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80036b8:	429a      	cmp	r2, r3
 80036ba:	bf8c      	ite	hi
 80036bc:	2301      	movhi	r3, #1
 80036be:	2300      	movls	r3, #0
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d002      	beq.n	80036cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 80036c6:	f06f 0301 	mvn.w	r3, #1
 80036ca:	e194      	b.n	80039f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	3304      	adds	r3, #4
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7fe ff65 	bl	80025a0 <_ZN13STM32Hardware4readEv>
 80036d6:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	f2c0 8174 	blt.w	80039c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	441a      	add	r2, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80036f6:	2b07      	cmp	r3, #7
 80036f8:	d11e      	bne.n	8003738 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8003700:	1c59      	adds	r1, r3, #1
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8003708:	68ba      	ldr	r2, [r7, #8]
 800370a:	b2d1      	uxtb	r1, r2
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	4413      	add	r3, r2
 8003710:	460a      	mov	r2, r1
 8003712:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800371c:	1e5a      	subs	r2, r3, #1
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1b4      	bne.n	8003698 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2208      	movs	r2, #8
 8003732:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003736:	e7af      	b.n	8003698 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800373e:	2b00      	cmp	r3, #0
 8003740:	d128      	bne.n	8003794 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	2bff      	cmp	r3, #255	; 0xff
 8003746:	d10d      	bne.n	8003764 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800374e:	1c5a      	adds	r2, r3, #1
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f103 0214 	add.w	r2, r3, #20
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8003762:	e799      	b.n	8003698 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	3304      	adds	r3, #4
 8003768:	4618      	mov	r0, r3
 800376a:	f7fe ffe9 	bl	8002740 <_ZN13STM32Hardware4timeEv>
 800376e:	4602      	mov	r2, r0
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	f241 3288 	movw	r2, #5000	; 0x1388
 8003778:	4293      	cmp	r3, r2
 800377a:	bf8c      	ite	hi
 800377c:	2301      	movhi	r3, #1
 800377e:	2300      	movls	r3, #0
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d088      	beq.n	8003698 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 800378e:	f06f 0301 	mvn.w	r3, #1
 8003792:	e130      	b.n	80039f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800379a:	2b01      	cmp	r3, #1
 800379c:	d118      	bne.n	80037d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	2bfe      	cmp	r3, #254	; 0xfe
 80037a2:	d107      	bne.n	80037b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80037aa:	1c5a      	adds	r2, r3, #1
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80037b2:	e771      	b.n	8003698 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f47f af68 	bne.w	8003698 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f918 	bl	80039fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 80037ce:	e763      	b.n	8003698 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d113      	bne.n	8003802 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	68ba      	ldr	r2, [r7, #8]
 80037de:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80037f0:	1c5a      	adds	r2, r3, #1
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68ba      	ldr	r2, [r7, #8]
 80037fc:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8003800:	e74a      	b.n	8003698 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003808:	2b03      	cmp	r3, #3
 800380a:	d110      	bne.n	800382e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	021b      	lsls	r3, r3, #8
 8003816:	441a      	add	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003824:	1c5a      	adds	r2, r3, #1
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800382c:	e734      	b.n	8003698 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003834:	2b04      	cmp	r3, #4
 8003836:	d116      	bne.n	8003866 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 800383e:	425a      	negs	r2, r3
 8003840:	b2db      	uxtb	r3, r3
 8003842:	b2d2      	uxtb	r2, r2
 8003844:	bf58      	it	pl
 8003846:	4253      	negpl	r3, r2
 8003848:	2bff      	cmp	r3, #255	; 0xff
 800384a:	d107      	bne.n	800385c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003852:	1c5a      	adds	r2, r3, #1
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800385a:	e71d      	b.n	8003698 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003864:	e718      	b.n	8003698 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800386c:	2b05      	cmp	r3, #5
 800386e:	d10f      	bne.n	8003890 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68ba      	ldr	r2, [r7, #8]
 8003874:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800387e:	1c5a      	adds	r2, r3, #1
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68ba      	ldr	r2, [r7, #8]
 800388a:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 800388e:	e703      	b.n	8003698 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003896:	2b06      	cmp	r3, #6
 8003898:	d117      	bne.n	80038ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	021b      	lsls	r3, r3, #8
 80038a4:	441a      	add	r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2207      	movs	r2, #7
 80038b0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f47f aeec 	bne.w	8003698 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2208      	movs	r2, #8
 80038c4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80038c8:	e6e6      	b.n	8003698 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80038d0:	2b08      	cmp	r3, #8
 80038d2:	f47f aee1 	bne.w	8003698 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80038e4:	425a      	negs	r2, r3
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	b2d2      	uxtb	r2, r2
 80038ea:	bf58      	it	pl
 80038ec:	4253      	negpl	r3, r2
 80038ee:	2bff      	cmp	r3, #255	; 0xff
 80038f0:	f47f aed2 	bne.w	8003698 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d110      	bne.n	8003920 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f87d 	bl	80039fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 f898 	bl	8003a3a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 800391a:	f04f 33ff 	mov.w	r3, #4294967295
 800391e:	e06a      	b.n	80039f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003926:	2b0a      	cmp	r3, #10
 8003928:	d107      	bne.n	800393a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003930:	4619      	mov	r1, r3
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f960 	bl	8003bf8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8003938:	e6ae      	b.n	8003698 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003940:	2b06      	cmp	r3, #6
 8003942:	d10e      	bne.n	8003962 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f603 1214 	addw	r2, r3, #2324	; 0x914
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003950:	4619      	mov	r1, r3
 8003952:	4610      	mov	r0, r2
 8003954:	f7fe fb7b 	bl	800204e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8003960:	e69a      	b.n	8003698 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003968:	2b0b      	cmp	r3, #11
 800396a:	d104      	bne.n	8003976 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8003974:	e690      	b.n	8003698 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800397c:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800398a:	2b00      	cmp	r3, #0
 800398c:	f43f ae84 	beq.w	8003698 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003996:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f202 2222 	addw	r2, r2, #546	; 0x222
 80039a0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80039aa:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f202 2222 	addw	r2, r2, #546	; 0x222
 80039b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	f202 4224 	addw	r2, r2, #1060	; 0x424
 80039c2:	4611      	mov	r1, r2
 80039c4:	4798      	blx	r3
    while (true)
 80039c6:	e667      	b.n	8003698 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 80039c8:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00f      	beq.n	80039f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d906      	bls.n	80039f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 f809 	bl	80039fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 80039f4:	2300      	movs	r3, #0
  }
 80039f6:	4618      	mov	r0, r3
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b086      	sub	sp, #24
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8003a06:	f107 030c 	add.w	r3, r7, #12
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7fd fe86 	bl	800171c <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f107 020c 	add.w	r2, r7, #12
 8003a1a:	210a      	movs	r1, #10
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	4798      	blx	r3
    rt_time = hardware_.time();
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	3304      	adds	r3, #4
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7fe fe8b 	bl	8002740 <_ZN13STM32Hardware4timeEv>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8003a32:	bf00      	nop
 8003a34:	3718      	adds	r7, #24
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8003a3a:	b590      	push	{r4, r7, lr}
 8003a3c:	b08b      	sub	sp, #44	; 0x2c
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003a42:	f107 030c 	add.w	r3, r7, #12
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7fd ff58 	bl	80018fc <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a52:	2b18      	cmp	r3, #24
 8003a54:	dc63      	bgt.n	8003b1e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	4413      	add	r3, r2
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d056      	beq.n	8003b16 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	4413      	add	r3, r2
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a80:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	4413      	add	r3, r2
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a92:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4413      	add	r3, r2
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	6859      	ldr	r1, [r3, #4]
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	4413      	add	r3, r2
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	3308      	adds	r3, #8
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4608      	mov	r0, r1
 8003ab6:	4798      	blx	r3
 8003ab8:	4603      	mov	r3, r0
 8003aba:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	4413      	add	r3, r2
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	6859      	ldr	r1, [r3, #4]
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	4413      	add	r3, r2
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	330c      	adds	r3, #12
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4608      	mov	r0, r1
 8003ae4:	4798      	blx	r3
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8003aea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003aee:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681c      	ldr	r4, [r3, #0]
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4413      	add	r3, r2
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7fe fc46 	bl	8002396 <_ZN3ros9Publisher15getEndpointTypeEv>
 8003b0a:	4601      	mov	r1, r0
 8003b0c:	f107 030c 	add.w	r3, r7, #12
 8003b10:	461a      	mov	r2, r3
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b18:	3301      	adds	r3, #1
 8003b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b1c:	e798      	b.n	8003a50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003b1e:	2300      	movs	r3, #0
 8003b20:	627b      	str	r3, [r7, #36]	; 0x24
 8003b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b24:	2b18      	cmp	r3, #24
 8003b26:	dc5f      	bgt.n	8003be8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b2c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d053      	beq.n	8003be0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b3c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b4e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b5e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003b62:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b6a:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	3308      	adds	r3, #8
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4608      	mov	r0, r1
 8003b7a:	4798      	blx	r3
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b84:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003b88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b90:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	330c      	adds	r3, #12
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4608      	mov	r0, r1
 8003ba0:	4798      	blx	r3
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003ba6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003baa:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681c      	ldr	r4, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bb6:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003bba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bc2:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003bc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	3304      	adds	r3, #4
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4608      	mov	r0, r1
 8003bd2:	4798      	blx	r3
 8003bd4:	4601      	mov	r1, r0
 8003bd6:	f107 030c 	add.w	r3, r7, #12
 8003bda:	461a      	mov	r2, r3
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be2:	3301      	adds	r3, #1
 8003be4:	627b      	str	r3, [r7, #36]	; 0x24
 8003be6:	e79c      	b.n	8003b22 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8003bf0:	bf00      	nop
 8003bf2:	372c      	adds	r7, #44	; 0x2c
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd90      	pop	{r4, r7, pc}

08003bf8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b086      	sub	sp, #24
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8003c02:	f107 0308 	add.w	r3, r7, #8
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7fd fd88 	bl	800171c <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	3304      	adds	r3, #4
 8003c10:	4618      	mov	r0, r3
 8003c12:	f7fe fd95 	bl	8002740 <_ZN13STM32Hardware4timeEv>
 8003c16:	4602      	mov	r2, r0
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003c22:	f107 0308 	add.w	r3, r7, #8
 8003c26:	6839      	ldr	r1, [r7, #0]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7fd fde7 	bl	80017fc <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	4915      	ldr	r1, [pc, #84]	; (8003c88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003c34:	fba1 1303 	umull	r1, r3, r1, r3
 8003c38:	099b      	lsrs	r3, r3, #6
 8003c3a:	4413      	add	r3, r2
 8003c3c:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003c3e:	6939      	ldr	r1, [r7, #16]
 8003c40:	697a      	ldr	r2, [r7, #20]
 8003c42:	4b11      	ldr	r3, [pc, #68]	; (8003c88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003c44:	fba3 0302 	umull	r0, r3, r3, r2
 8003c48:	099b      	lsrs	r3, r3, #6
 8003c4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c4e:	fb00 f303 	mul.w	r3, r0, r3
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	4a0d      	ldr	r2, [pc, #52]	; (8003c8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8003c56:	fb02 f303 	mul.w	r3, r2, r3
 8003c5a:	440b      	add	r3, r1
 8003c5c:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003c5e:	f107 0308 	add.w	r3, r7, #8
 8003c62:	3304      	adds	r3, #4
 8003c64:	4619      	mov	r1, r3
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 f8a6 	bl	8003db8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	3304      	adds	r3, #4
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7fe fd65 	bl	8002740 <_ZN13STM32Hardware4timeEv>
 8003c76:	4602      	mov	r2, r0
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8003c7e:	bf00      	nop
 8003c80:	3718      	adds	r7, #24
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	10624dd3 	.word	0x10624dd3
 8003c8c:	000f4240 	.word	0x000f4240

08003c90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b088      	sub	sp, #32
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	2b63      	cmp	r3, #99	; 0x63
 8003ca0:	dd09      	ble.n	8003cb6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003ca8:	f083 0301 	eor.w	r3, r3, #1
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	e079      	b.n	8003daa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8003cc2:	3207      	adds	r2, #7
 8003cc4:	4611      	mov	r1, r2
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	4798      	blx	r3
 8003cca:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	22ff      	movs	r2, #255	; 0xff
 8003cd0:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	22fe      	movs	r2, #254	; 0xfe
 8003cd8:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	b2da      	uxtb	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	0a1b      	lsrs	r3, r3, #8
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	b2da      	uxtb	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8003d02:	4413      	add	r3, r2
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	43db      	mvns	r3, r3
 8003d08:	b2da      	uxtb	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	b2da      	uxtb	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	b21b      	sxth	r3, r3
 8003d1e:	121b      	asrs	r3, r3, #8
 8003d20:	b21b      	sxth	r3, r3
 8003d22:	b2da      	uxtb	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003d2e:	2305      	movs	r3, #5
 8003d30:	61bb      	str	r3, [r7, #24]
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	3306      	adds	r3, #6
 8003d36:	69ba      	ldr	r2, [r7, #24]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	dc0d      	bgt.n	8003d58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	4413      	add	r3, r2
 8003d42:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	461a      	mov	r2, r3
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	3301      	adds	r3, #1
 8003d54:	61bb      	str	r3, [r7, #24]
 8003d56:	e7ec      	b.n	8003d32 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	3307      	adds	r3, #7
 8003d5c:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	425a      	negs	r2, r3
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	b2d2      	uxtb	r2, r2
 8003d66:	bf58      	it	pl
 8003d68:	4253      	negpl	r3, r2
 8003d6a:	b2da      	uxtb	r2, r3
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	1c59      	adds	r1, r3, #1
 8003d70:	6179      	str	r1, [r7, #20]
 8003d72:	43d2      	mvns	r2, r2
 8003d74:	b2d1      	uxtb	r1, r2
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	4413      	add	r3, r2
 8003d7a:	460a      	mov	r2, r1
 8003d7c:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d86:	dc0a      	bgt.n	8003d9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	1d18      	adds	r0, r3, #4
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	4619      	mov	r1, r3
 8003d96:	f7fe fc8d 	bl	80026b4 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	e005      	b.n	8003daa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8003d9e:	4905      	ldr	r1, [pc, #20]	; (8003db4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f000 f849 	bl	8003e38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8003da6:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8003daa:	4618      	mov	r0, r3
 8003dac:	3720      	adds	r7, #32
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	0800e55c 	.word	0x0800e55c

08003db8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	3304      	adds	r3, #4
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7fe fcba 	bl	8002740 <_ZN13STM32Hardware4timeEv>
 8003dcc:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	4915      	ldr	r1, [pc, #84]	; (8003e2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8003dd6:	fba1 1303 	umull	r1, r3, r1, r3
 8003dda:	099b      	lsrs	r3, r3, #6
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	1e5a      	subs	r2, r3, #1
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	6859      	ldr	r1, [r3, #4]
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	4b0f      	ldr	r3, [pc, #60]	; (8003e2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8003dee:	fba3 0302 	umull	r0, r3, r3, r2
 8003df2:	099b      	lsrs	r3, r3, #6
 8003df4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003df8:	fb00 f303 	mul.w	r3, r0, r3
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	4a0c      	ldr	r2, [pc, #48]	; (8003e30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 8003e00:	fb02 f303 	mul.w	r3, r2, r3
 8003e04:	1aca      	subs	r2, r1, r3
 8003e06:	4b0b      	ldr	r3, [pc, #44]	; (8003e34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8003e08:	4413      	add	r3, r2
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	4610      	mov	r0, r2
 8003e20:	f7fc fc00 	bl	8000624 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003e24:	bf00      	nop
 8003e26:	3710      	adds	r7, #16
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	10624dd3 	.word	0x10624dd3
 8003e30:	000f4240 	.word	0x000f4240
 8003e34:	3b9aca00 	.word	0x3b9aca00

08003e38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003e42:	683a      	ldr	r2, [r7, #0]
 8003e44:	2103      	movs	r1, #3
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 f804 	bl	8003e54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8003e4c:	bf00      	nop
 8003e4e:	3708      	adds	r7, #8
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b088      	sub	sp, #32
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	607a      	str	r2, [r7, #4]
 8003e60:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003e62:	f107 0314 	add.w	r3, r7, #20
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7fd ff0c 	bl	8001c84 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003e6c:	7afb      	ldrb	r3, [r7, #11]
 8003e6e:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f107 0214 	add.w	r2, r7, #20
 8003e7e:	2107      	movs	r1, #7
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	4798      	blx	r3
  }
 8003e84:	bf00      	nop
 8003e86:	3720      	adds	r7, #32
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <_Z41__static_initialization_and_destruction_0ii>:
   }
   /* USER CODE BEGIN USART3_Init 2 */

   /* USER CODE END USART3_Init 2 */

 }
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d116      	bne.n	8003eca <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d111      	bne.n	8003eca <_Z41__static_initialization_and_destruction_0ii+0x3e>
ros::NodeHandle nh;
 8003ea6:	480b      	ldr	r0, [pc, #44]	; (8003ed4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8003ea8:	f7ff fa98 	bl	80033dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
geometry_msgs::Twist speed;
 8003eac:	480a      	ldr	r0, [pc, #40]	; (8003ed8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8003eae:	f7ff f969 	bl	8003184 <_ZN13geometry_msgs5TwistC1Ev>
ros::Publisher pub("speed",&speed);
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	4a08      	ldr	r2, [pc, #32]	; (8003ed8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8003eb6:	4909      	ldr	r1, [pc, #36]	; (8003edc <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8003eb8:	4809      	ldr	r0, [pc, #36]	; (8003ee0 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8003eba:	f7fe fa55 	bl	8002368 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<geometry_msgs::Twist> sub("cmd_vel",vel_callback);
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	4a08      	ldr	r2, [pc, #32]	; (8003ee4 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8003ec2:	4909      	ldr	r1, [pc, #36]	; (8003ee8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003ec4:	4809      	ldr	r0, [pc, #36]	; (8003eec <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003ec6:	f7ff fb19 	bl	80034fc <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
 }
 8003eca:	bf00      	nop
 8003ecc:	3708      	adds	r7, #8
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	24000464 	.word	0x24000464
 8003ed8:	24000da0 	.word	0x24000da0
 8003edc:	0800e598 	.word	0x0800e598
 8003ee0:	24000de8 	.word	0x24000de8
 8003ee4:	0800328d 	.word	0x0800328d
 8003ee8:	0800e5a0 	.word	0x0800e5a0
 8003eec:	24000e00 	.word	0x24000e00

08003ef0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	3310      	adds	r3, #16
 8003efe:	6839      	ldr	r1, [r7, #0]
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7ff f981 	bl	8003208 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	3210      	adds	r2, #16
 8003f0e:	4610      	mov	r0, r2
 8003f10:	4798      	blx	r3
  }
 8003f12:	bf00      	nop
 8003f14:	3708      	adds	r7, #8
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8003f1a:	b480      	push	{r7}
 8003f1c:	b083      	sub	sp, #12
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 8003f26:	4618      	mov	r0, r3
 8003f28:	370c      	adds	r7, #12
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr

08003f32 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b082      	sub	sp, #8
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	3310      	adds	r3, #16
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7ff f988 	bl	8003254 <_ZN13geometry_msgs5Twist7getTypeEv>
 8003f44:	4603      	mov	r3, r0
  }
 8003f46:	4618      	mov	r0, r3
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b082      	sub	sp, #8
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	3310      	adds	r3, #16
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7ff f988 	bl	8003270 <_ZN13geometry_msgs5Twist6getMD5Ev>
 8003f60:	4603      	mov	r3, r0
  }
 8003f62:	4618      	mov	r0, r3
 8003f64:	3708      	adds	r7, #8
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8003f6a:	b480      	push	{r7}
 8003f6c:	b083      	sub	sp, #12
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
    return configured_;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8003f78:	4618      	mov	r0, r3
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <_GLOBAL__sub_I_nh>:
 8003f84:	b580      	push	{r7, lr}
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003f8c:	2001      	movs	r0, #1
 8003f8e:	f7ff ff7d 	bl	8003e8c <_Z41__static_initialization_and_destruction_0ii>
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f9a:	4b0a      	ldr	r3, [pc, #40]	; (8003fc4 <HAL_MspInit+0x30>)
 8003f9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003fa0:	4a08      	ldr	r2, [pc, #32]	; (8003fc4 <HAL_MspInit+0x30>)
 8003fa2:	f043 0302 	orr.w	r3, r3, #2
 8003fa6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003faa:	4b06      	ldr	r3, [pc, #24]	; (8003fc4 <HAL_MspInit+0x30>)
 8003fac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	607b      	str	r3, [r7, #4]
 8003fb6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr
 8003fc4:	58024400 	.word	0x58024400

08003fc8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b08e      	sub	sp, #56	; 0x38
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	601a      	str	r2, [r3, #0]
 8003fd8:	605a      	str	r2, [r3, #4]
 8003fda:	609a      	str	r2, [r3, #8]
 8003fdc:	60da      	str	r2, [r3, #12]
 8003fde:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a4f      	ldr	r2, [pc, #316]	; (8004124 <HAL_TIM_Encoder_MspInit+0x15c>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d12f      	bne.n	800404a <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003fea:	4b4f      	ldr	r3, [pc, #316]	; (8004128 <HAL_TIM_Encoder_MspInit+0x160>)
 8003fec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ff0:	4a4d      	ldr	r2, [pc, #308]	; (8004128 <HAL_TIM_Encoder_MspInit+0x160>)
 8003ff2:	f043 0301 	orr.w	r3, r3, #1
 8003ff6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003ffa:	4b4b      	ldr	r3, [pc, #300]	; (8004128 <HAL_TIM_Encoder_MspInit+0x160>)
 8003ffc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	623b      	str	r3, [r7, #32]
 8004006:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004008:	4b47      	ldr	r3, [pc, #284]	; (8004128 <HAL_TIM_Encoder_MspInit+0x160>)
 800400a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800400e:	4a46      	ldr	r2, [pc, #280]	; (8004128 <HAL_TIM_Encoder_MspInit+0x160>)
 8004010:	f043 0310 	orr.w	r3, r3, #16
 8004014:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004018:	4b43      	ldr	r3, [pc, #268]	; (8004128 <HAL_TIM_Encoder_MspInit+0x160>)
 800401a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800401e:	f003 0310 	and.w	r3, r3, #16
 8004022:	61fb      	str	r3, [r7, #28]
 8004024:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8004026:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800402a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800402c:	2302      	movs	r3, #2
 800402e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004030:	2300      	movs	r3, #0
 8004032:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004034:	2300      	movs	r3, #0
 8004036:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004038:	2301      	movs	r3, #1
 800403a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800403c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004040:	4619      	mov	r1, r3
 8004042:	483a      	ldr	r0, [pc, #232]	; (800412c <HAL_TIM_Encoder_MspInit+0x164>)
 8004044:	f003 fb3e 	bl	80076c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM23_MspInit 1 */

  /* USER CODE END TIM23_MspInit 1 */
  }

}
 8004048:	e067      	b.n	800411a <HAL_TIM_Encoder_MspInit+0x152>
  else if(htim_encoder->Instance==TIM4)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a38      	ldr	r2, [pc, #224]	; (8004130 <HAL_TIM_Encoder_MspInit+0x168>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d12f      	bne.n	80040b4 <HAL_TIM_Encoder_MspInit+0xec>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004054:	4b34      	ldr	r3, [pc, #208]	; (8004128 <HAL_TIM_Encoder_MspInit+0x160>)
 8004056:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800405a:	4a33      	ldr	r2, [pc, #204]	; (8004128 <HAL_TIM_Encoder_MspInit+0x160>)
 800405c:	f043 0304 	orr.w	r3, r3, #4
 8004060:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004064:	4b30      	ldr	r3, [pc, #192]	; (8004128 <HAL_TIM_Encoder_MspInit+0x160>)
 8004066:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800406a:	f003 0304 	and.w	r3, r3, #4
 800406e:	61bb      	str	r3, [r7, #24]
 8004070:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004072:	4b2d      	ldr	r3, [pc, #180]	; (8004128 <HAL_TIM_Encoder_MspInit+0x160>)
 8004074:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004078:	4a2b      	ldr	r2, [pc, #172]	; (8004128 <HAL_TIM_Encoder_MspInit+0x160>)
 800407a:	f043 0308 	orr.w	r3, r3, #8
 800407e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004082:	4b29      	ldr	r3, [pc, #164]	; (8004128 <HAL_TIM_Encoder_MspInit+0x160>)
 8004084:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004088:	f003 0308 	and.w	r3, r3, #8
 800408c:	617b      	str	r3, [r7, #20]
 800408e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004090:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004094:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004096:	2302      	movs	r3, #2
 8004098:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800409a:	2300      	movs	r3, #0
 800409c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800409e:	2300      	movs	r3, #0
 80040a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80040a2:	2302      	movs	r3, #2
 80040a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040aa:	4619      	mov	r1, r3
 80040ac:	4821      	ldr	r0, [pc, #132]	; (8004134 <HAL_TIM_Encoder_MspInit+0x16c>)
 80040ae:	f003 fb09 	bl	80076c4 <HAL_GPIO_Init>
}
 80040b2:	e032      	b.n	800411a <HAL_TIM_Encoder_MspInit+0x152>
  else if(htim_encoder->Instance==TIM23)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a1f      	ldr	r2, [pc, #124]	; (8004138 <HAL_TIM_Encoder_MspInit+0x170>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d12d      	bne.n	800411a <HAL_TIM_Encoder_MspInit+0x152>
    __HAL_RCC_TIM23_CLK_ENABLE();
 80040be:	4b1a      	ldr	r3, [pc, #104]	; (8004128 <HAL_TIM_Encoder_MspInit+0x160>)
 80040c0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80040c4:	4a18      	ldr	r2, [pc, #96]	; (8004128 <HAL_TIM_Encoder_MspInit+0x160>)
 80040c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040ca:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80040ce:	4b16      	ldr	r3, [pc, #88]	; (8004128 <HAL_TIM_Encoder_MspInit+0x160>)
 80040d0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80040d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040d8:	613b      	str	r3, [r7, #16]
 80040da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80040dc:	4b12      	ldr	r3, [pc, #72]	; (8004128 <HAL_TIM_Encoder_MspInit+0x160>)
 80040de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040e2:	4a11      	ldr	r2, [pc, #68]	; (8004128 <HAL_TIM_Encoder_MspInit+0x160>)
 80040e4:	f043 0320 	orr.w	r3, r3, #32
 80040e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80040ec:	4b0e      	ldr	r3, [pc, #56]	; (8004128 <HAL_TIM_Encoder_MspInit+0x160>)
 80040ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040f2:	f003 0320 	and.w	r3, r3, #32
 80040f6:	60fb      	str	r3, [r7, #12]
 80040f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80040fa:	2303      	movs	r3, #3
 80040fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040fe:	2302      	movs	r3, #2
 8004100:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004102:	2300      	movs	r3, #0
 8004104:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004106:	2300      	movs	r3, #0
 8004108:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 800410a:	230d      	movs	r3, #13
 800410c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800410e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004112:	4619      	mov	r1, r3
 8004114:	4809      	ldr	r0, [pc, #36]	; (800413c <HAL_TIM_Encoder_MspInit+0x174>)
 8004116:	f003 fad5 	bl	80076c4 <HAL_GPIO_Init>
}
 800411a:	bf00      	nop
 800411c:	3738      	adds	r7, #56	; 0x38
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	40010000 	.word	0x40010000
 8004128:	58024400 	.word	0x58024400
 800412c:	58021000 	.word	0x58021000
 8004130:	40000800 	.word	0x40000800
 8004134:	58020c00 	.word	0x58020c00
 8004138:	4000e000 	.word	0x4000e000
 800413c:	58021400 	.word	0x58021400

08004140 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004140:	b480      	push	{r7}
 8004142:	b085      	sub	sp, #20
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004150:	d10f      	bne.n	8004172 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004152:	4b15      	ldr	r3, [pc, #84]	; (80041a8 <HAL_TIM_PWM_MspInit+0x68>)
 8004154:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004158:	4a13      	ldr	r2, [pc, #76]	; (80041a8 <HAL_TIM_PWM_MspInit+0x68>)
 800415a:	f043 0301 	orr.w	r3, r3, #1
 800415e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004162:	4b11      	ldr	r3, [pc, #68]	; (80041a8 <HAL_TIM_PWM_MspInit+0x68>)
 8004164:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	60fb      	str	r3, [r7, #12]
 800416e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004170:	e013      	b.n	800419a <HAL_TIM_PWM_MspInit+0x5a>
  else if(htim_pwm->Instance==TIM8)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a0d      	ldr	r2, [pc, #52]	; (80041ac <HAL_TIM_PWM_MspInit+0x6c>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d10e      	bne.n	800419a <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800417c:	4b0a      	ldr	r3, [pc, #40]	; (80041a8 <HAL_TIM_PWM_MspInit+0x68>)
 800417e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004182:	4a09      	ldr	r2, [pc, #36]	; (80041a8 <HAL_TIM_PWM_MspInit+0x68>)
 8004184:	f043 0302 	orr.w	r3, r3, #2
 8004188:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800418c:	4b06      	ldr	r3, [pc, #24]	; (80041a8 <HAL_TIM_PWM_MspInit+0x68>)
 800418e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	60bb      	str	r3, [r7, #8]
 8004198:	68bb      	ldr	r3, [r7, #8]
}
 800419a:	bf00      	nop
 800419c:	3714      	adds	r7, #20
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	58024400 	.word	0x58024400
 80041ac:	40010400 	.word	0x40010400

080041b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a0e      	ldr	r2, [pc, #56]	; (80041f8 <HAL_TIM_Base_MspInit+0x48>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d116      	bne.n	80041f0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80041c2:	4b0e      	ldr	r3, [pc, #56]	; (80041fc <HAL_TIM_Base_MspInit+0x4c>)
 80041c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80041c8:	4a0c      	ldr	r2, [pc, #48]	; (80041fc <HAL_TIM_Base_MspInit+0x4c>)
 80041ca:	f043 0302 	orr.w	r3, r3, #2
 80041ce:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80041d2:	4b0a      	ldr	r3, [pc, #40]	; (80041fc <HAL_TIM_Base_MspInit+0x4c>)
 80041d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80041d8:	f003 0302 	and.w	r3, r3, #2
 80041dc:	60fb      	str	r3, [r7, #12]
 80041de:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80041e0:	2200      	movs	r2, #0
 80041e2:	2100      	movs	r1, #0
 80041e4:	201d      	movs	r0, #29
 80041e6:	f000 fbfe 	bl	80049e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80041ea:	201d      	movs	r0, #29
 80041ec:	f000 fc15 	bl	8004a1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80041f0:	bf00      	nop
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	40000400 	.word	0x40000400
 80041fc:	58024400 	.word	0x58024400

08004200 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b08a      	sub	sp, #40	; 0x28
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004208:	f107 0314 	add.w	r3, r7, #20
 800420c:	2200      	movs	r2, #0
 800420e:	601a      	str	r2, [r3, #0]
 8004210:	605a      	str	r2, [r3, #4]
 8004212:	609a      	str	r2, [r3, #8]
 8004214:	60da      	str	r2, [r3, #12]
 8004216:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004220:	d11f      	bne.n	8004262 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004222:	4b24      	ldr	r3, [pc, #144]	; (80042b4 <HAL_TIM_MspPostInit+0xb4>)
 8004224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004228:	4a22      	ldr	r2, [pc, #136]	; (80042b4 <HAL_TIM_MspPostInit+0xb4>)
 800422a:	f043 0301 	orr.w	r3, r3, #1
 800422e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004232:	4b20      	ldr	r3, [pc, #128]	; (80042b4 <HAL_TIM_MspPostInit+0xb4>)
 8004234:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004238:	f003 0301 	and.w	r3, r3, #1
 800423c:	613b      	str	r3, [r7, #16]
 800423e:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8004240:	2309      	movs	r3, #9
 8004242:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004244:	2302      	movs	r3, #2
 8004246:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004248:	2300      	movs	r3, #0
 800424a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800424c:	2300      	movs	r3, #0
 800424e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004250:	2301      	movs	r3, #1
 8004252:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004254:	f107 0314 	add.w	r3, r7, #20
 8004258:	4619      	mov	r1, r3
 800425a:	4817      	ldr	r0, [pc, #92]	; (80042b8 <HAL_TIM_MspPostInit+0xb8>)
 800425c:	f003 fa32 	bl	80076c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8004260:	e024      	b.n	80042ac <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM8)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a15      	ldr	r2, [pc, #84]	; (80042bc <HAL_TIM_MspPostInit+0xbc>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d11f      	bne.n	80042ac <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800426c:	4b11      	ldr	r3, [pc, #68]	; (80042b4 <HAL_TIM_MspPostInit+0xb4>)
 800426e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004272:	4a10      	ldr	r2, [pc, #64]	; (80042b4 <HAL_TIM_MspPostInit+0xb4>)
 8004274:	f043 0304 	orr.w	r3, r3, #4
 8004278:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800427c:	4b0d      	ldr	r3, [pc, #52]	; (80042b4 <HAL_TIM_MspPostInit+0xb4>)
 800427e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004282:	f003 0304 	and.w	r3, r3, #4
 8004286:	60fb      	str	r3, [r7, #12]
 8004288:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800428a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800428e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004290:	2302      	movs	r3, #2
 8004292:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004294:	2300      	movs	r3, #0
 8004296:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004298:	2300      	movs	r3, #0
 800429a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800429c:	2303      	movs	r3, #3
 800429e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042a0:	f107 0314 	add.w	r3, r7, #20
 80042a4:	4619      	mov	r1, r3
 80042a6:	4806      	ldr	r0, [pc, #24]	; (80042c0 <HAL_TIM_MspPostInit+0xc0>)
 80042a8:	f003 fa0c 	bl	80076c4 <HAL_GPIO_Init>
}
 80042ac:	bf00      	nop
 80042ae:	3728      	adds	r7, #40	; 0x28
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	58024400 	.word	0x58024400
 80042b8:	58020000 	.word	0x58020000
 80042bc:	40010400 	.word	0x40010400
 80042c0:	58020800 	.word	0x58020800

080042c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b0b8      	sub	sp, #224	; 0xe0
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042cc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80042d0:	2200      	movs	r2, #0
 80042d2:	601a      	str	r2, [r3, #0]
 80042d4:	605a      	str	r2, [r3, #4]
 80042d6:	609a      	str	r2, [r3, #8]
 80042d8:	60da      	str	r2, [r3, #12]
 80042da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80042dc:	f107 0310 	add.w	r3, r7, #16
 80042e0:	22b8      	movs	r2, #184	; 0xb8
 80042e2:	2100      	movs	r1, #0
 80042e4:	4618      	mov	r0, r3
 80042e6:	f009 feff 	bl	800e0e8 <memset>
  if(huart->Instance==USART3)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a5a      	ldr	r2, [pc, #360]	; (8004458 <HAL_UART_MspInit+0x194>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	f040 80ac 	bne.w	800444e <HAL_UART_MspInit+0x18a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80042f6:	f04f 0202 	mov.w	r2, #2
 80042fa:	f04f 0300 	mov.w	r3, #0
 80042fe:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004302:	2300      	movs	r3, #0
 8004304:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004308:	f107 0310 	add.w	r3, r7, #16
 800430c:	4618      	mov	r0, r3
 800430e:	f004 fb3b 	bl	8008988 <HAL_RCCEx_PeriphCLKConfig>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d001      	beq.n	800431c <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8004318:	f7fd f9da 	bl	80016d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800431c:	4b4f      	ldr	r3, [pc, #316]	; (800445c <HAL_UART_MspInit+0x198>)
 800431e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004322:	4a4e      	ldr	r2, [pc, #312]	; (800445c <HAL_UART_MspInit+0x198>)
 8004324:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004328:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800432c:	4b4b      	ldr	r3, [pc, #300]	; (800445c <HAL_UART_MspInit+0x198>)
 800432e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004332:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004336:	60fb      	str	r3, [r7, #12]
 8004338:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800433a:	4b48      	ldr	r3, [pc, #288]	; (800445c <HAL_UART_MspInit+0x198>)
 800433c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004340:	4a46      	ldr	r2, [pc, #280]	; (800445c <HAL_UART_MspInit+0x198>)
 8004342:	f043 0304 	orr.w	r3, r3, #4
 8004346:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800434a:	4b44      	ldr	r3, [pc, #272]	; (800445c <HAL_UART_MspInit+0x198>)
 800434c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004350:	f003 0304 	and.w	r3, r3, #4
 8004354:	60bb      	str	r3, [r7, #8]
 8004356:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004358:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800435c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004360:	2302      	movs	r3, #2
 8004362:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004366:	2300      	movs	r3, #0
 8004368:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800436c:	2300      	movs	r3, #0
 800436e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004372:	2307      	movs	r3, #7
 8004374:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004378:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800437c:	4619      	mov	r1, r3
 800437e:	4838      	ldr	r0, [pc, #224]	; (8004460 <HAL_UART_MspInit+0x19c>)
 8004380:	f003 f9a0 	bl	80076c4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8004384:	4b37      	ldr	r3, [pc, #220]	; (8004464 <HAL_UART_MspInit+0x1a0>)
 8004386:	4a38      	ldr	r2, [pc, #224]	; (8004468 <HAL_UART_MspInit+0x1a4>)
 8004388:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800438a:	4b36      	ldr	r3, [pc, #216]	; (8004464 <HAL_UART_MspInit+0x1a0>)
 800438c:	222d      	movs	r2, #45	; 0x2d
 800438e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004390:	4b34      	ldr	r3, [pc, #208]	; (8004464 <HAL_UART_MspInit+0x1a0>)
 8004392:	2200      	movs	r2, #0
 8004394:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004396:	4b33      	ldr	r3, [pc, #204]	; (8004464 <HAL_UART_MspInit+0x1a0>)
 8004398:	2200      	movs	r2, #0
 800439a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800439c:	4b31      	ldr	r3, [pc, #196]	; (8004464 <HAL_UART_MspInit+0x1a0>)
 800439e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043a2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80043a4:	4b2f      	ldr	r3, [pc, #188]	; (8004464 <HAL_UART_MspInit+0x1a0>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80043aa:	4b2e      	ldr	r3, [pc, #184]	; (8004464 <HAL_UART_MspInit+0x1a0>)
 80043ac:	2200      	movs	r2, #0
 80043ae:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80043b0:	4b2c      	ldr	r3, [pc, #176]	; (8004464 <HAL_UART_MspInit+0x1a0>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80043b6:	4b2b      	ldr	r3, [pc, #172]	; (8004464 <HAL_UART_MspInit+0x1a0>)
 80043b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80043bc:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80043be:	4b29      	ldr	r3, [pc, #164]	; (8004464 <HAL_UART_MspInit+0x1a0>)
 80043c0:	2200      	movs	r2, #0
 80043c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80043c4:	4827      	ldr	r0, [pc, #156]	; (8004464 <HAL_UART_MspInit+0x1a0>)
 80043c6:	f000 fb43 	bl	8004a50 <HAL_DMA_Init>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d001      	beq.n	80043d4 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 80043d0:	f7fd f97e 	bl	80016d0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a23      	ldr	r2, [pc, #140]	; (8004464 <HAL_UART_MspInit+0x1a0>)
 80043d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80043dc:	4a21      	ldr	r2, [pc, #132]	; (8004464 <HAL_UART_MspInit+0x1a0>)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 80043e2:	4b22      	ldr	r3, [pc, #136]	; (800446c <HAL_UART_MspInit+0x1a8>)
 80043e4:	4a22      	ldr	r2, [pc, #136]	; (8004470 <HAL_UART_MspInit+0x1ac>)
 80043e6:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80043e8:	4b20      	ldr	r3, [pc, #128]	; (800446c <HAL_UART_MspInit+0x1a8>)
 80043ea:	222e      	movs	r2, #46	; 0x2e
 80043ec:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80043ee:	4b1f      	ldr	r3, [pc, #124]	; (800446c <HAL_UART_MspInit+0x1a8>)
 80043f0:	2240      	movs	r2, #64	; 0x40
 80043f2:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043f4:	4b1d      	ldr	r3, [pc, #116]	; (800446c <HAL_UART_MspInit+0x1a8>)
 80043f6:	2200      	movs	r2, #0
 80043f8:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80043fa:	4b1c      	ldr	r3, [pc, #112]	; (800446c <HAL_UART_MspInit+0x1a8>)
 80043fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004400:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004402:	4b1a      	ldr	r3, [pc, #104]	; (800446c <HAL_UART_MspInit+0x1a8>)
 8004404:	2200      	movs	r2, #0
 8004406:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004408:	4b18      	ldr	r3, [pc, #96]	; (800446c <HAL_UART_MspInit+0x1a8>)
 800440a:	2200      	movs	r2, #0
 800440c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800440e:	4b17      	ldr	r3, [pc, #92]	; (800446c <HAL_UART_MspInit+0x1a8>)
 8004410:	2200      	movs	r2, #0
 8004412:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004414:	4b15      	ldr	r3, [pc, #84]	; (800446c <HAL_UART_MspInit+0x1a8>)
 8004416:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800441a:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800441c:	4b13      	ldr	r3, [pc, #76]	; (800446c <HAL_UART_MspInit+0x1a8>)
 800441e:	2200      	movs	r2, #0
 8004420:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004422:	4812      	ldr	r0, [pc, #72]	; (800446c <HAL_UART_MspInit+0x1a8>)
 8004424:	f000 fb14 	bl	8004a50 <HAL_DMA_Init>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d001      	beq.n	8004432 <HAL_UART_MspInit+0x16e>
    {
      Error_Handler();
 800442e:	f7fd f94f 	bl	80016d0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a0d      	ldr	r2, [pc, #52]	; (800446c <HAL_UART_MspInit+0x1a8>)
 8004436:	67da      	str	r2, [r3, #124]	; 0x7c
 8004438:	4a0c      	ldr	r2, [pc, #48]	; (800446c <HAL_UART_MspInit+0x1a8>)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800443e:	2200      	movs	r2, #0
 8004440:	2100      	movs	r1, #0
 8004442:	2027      	movs	r0, #39	; 0x27
 8004444:	f000 facf 	bl	80049e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004448:	2027      	movs	r0, #39	; 0x27
 800444a:	f000 fae6 	bl	8004a1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800444e:	bf00      	nop
 8004450:	37e0      	adds	r7, #224	; 0xe0
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	40004800 	.word	0x40004800
 800445c:	58024400 	.word	0x58024400
 8004460:	58020800 	.word	0x58020800
 8004464:	240002f0 	.word	0x240002f0
 8004468:	40020010 	.word	0x40020010
 800446c:	24000368 	.word	0x24000368
 8004470:	40020028 	.word	0x40020028

08004474 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004474:	b480      	push	{r7}
 8004476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004478:	e7fe      	b.n	8004478 <NMI_Handler+0x4>

0800447a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800447a:	b480      	push	{r7}
 800447c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800447e:	e7fe      	b.n	800447e <HardFault_Handler+0x4>

08004480 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004480:	b480      	push	{r7}
 8004482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004484:	e7fe      	b.n	8004484 <MemManage_Handler+0x4>

08004486 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004486:	b480      	push	{r7}
 8004488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800448a:	e7fe      	b.n	800448a <BusFault_Handler+0x4>

0800448c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800448c:	b480      	push	{r7}
 800448e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004490:	e7fe      	b.n	8004490 <UsageFault_Handler+0x4>

08004492 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004492:	b480      	push	{r7}
 8004494:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004496:	bf00      	nop
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80044a0:	b480      	push	{r7}
 80044a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80044a4:	bf00      	nop
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr

080044ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80044ae:	b480      	push	{r7}
 80044b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80044b2:	bf00      	nop
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80044c0:	f000 f996 	bl	80047f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80044c4:	bf00      	nop
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80044cc:	4802      	ldr	r0, [pc, #8]	; (80044d8 <DMA1_Stream0_IRQHandler+0x10>)
 80044ce:	f001 fde7 	bl	80060a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80044d2:	bf00      	nop
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	240002f0 	.word	0x240002f0

080044dc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80044e0:	4802      	ldr	r0, [pc, #8]	; (80044ec <DMA1_Stream1_IRQHandler+0x10>)
 80044e2:	f001 fddd 	bl	80060a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80044e6:	bf00      	nop
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	24000368 	.word	0x24000368

080044f0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80044f4:	4802      	ldr	r0, [pc, #8]	; (8004500 <TIM3_IRQHandler+0x10>)
 80044f6:	f006 fb8f 	bl	800ac18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80044fa:	bf00      	nop
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	2400012c 	.word	0x2400012c

08004504 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004508:	4802      	ldr	r0, [pc, #8]	; (8004514 <USART3_IRQHandler+0x10>)
 800450a:	f007 fd8f 	bl	800c02c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800450e:	bf00      	nop
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	2400025c 	.word	0x2400025c

08004518 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004518:	b480      	push	{r7}
 800451a:	af00      	add	r7, sp, #0
  return 1;
 800451c:	2301      	movs	r3, #1
}
 800451e:	4618      	mov	r0, r3
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <_kill>:

int _kill(int pid, int sig)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004532:	f009 fda1 	bl	800e078 <__errno>
 8004536:	4603      	mov	r3, r0
 8004538:	2216      	movs	r2, #22
 800453a:	601a      	str	r2, [r3, #0]
  return -1;
 800453c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004540:	4618      	mov	r0, r3
 8004542:	3708      	adds	r7, #8
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <_exit>:

void _exit (int status)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004550:	f04f 31ff 	mov.w	r1, #4294967295
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f7ff ffe7 	bl	8004528 <_kill>
  while (1) {}    /* Make sure we hang here */
 800455a:	e7fe      	b.n	800455a <_exit+0x12>

0800455c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b086      	sub	sp, #24
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004564:	4a14      	ldr	r2, [pc, #80]	; (80045b8 <_sbrk+0x5c>)
 8004566:	4b15      	ldr	r3, [pc, #84]	; (80045bc <_sbrk+0x60>)
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004570:	4b13      	ldr	r3, [pc, #76]	; (80045c0 <_sbrk+0x64>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d102      	bne.n	800457e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004578:	4b11      	ldr	r3, [pc, #68]	; (80045c0 <_sbrk+0x64>)
 800457a:	4a12      	ldr	r2, [pc, #72]	; (80045c4 <_sbrk+0x68>)
 800457c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800457e:	4b10      	ldr	r3, [pc, #64]	; (80045c0 <_sbrk+0x64>)
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4413      	add	r3, r2
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	429a      	cmp	r2, r3
 800458a:	d207      	bcs.n	800459c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800458c:	f009 fd74 	bl	800e078 <__errno>
 8004590:	4603      	mov	r3, r0
 8004592:	220c      	movs	r2, #12
 8004594:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004596:	f04f 33ff 	mov.w	r3, #4294967295
 800459a:	e009      	b.n	80045b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800459c:	4b08      	ldr	r3, [pc, #32]	; (80045c0 <_sbrk+0x64>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80045a2:	4b07      	ldr	r3, [pc, #28]	; (80045c0 <_sbrk+0x64>)
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4413      	add	r3, r2
 80045aa:	4a05      	ldr	r2, [pc, #20]	; (80045c0 <_sbrk+0x64>)
 80045ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80045ae:	68fb      	ldr	r3, [r7, #12]
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3718      	adds	r7, #24
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	24050000 	.word	0x24050000
 80045bc:	00000400 	.word	0x00000400
 80045c0:	24000e60 	.word	0x24000e60
 80045c4:	24000e78 	.word	0x24000e78

080045c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80045c8:	b480      	push	{r7}
 80045ca:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80045cc:	4b32      	ldr	r3, [pc, #200]	; (8004698 <SystemInit+0xd0>)
 80045ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d2:	4a31      	ldr	r2, [pc, #196]	; (8004698 <SystemInit+0xd0>)
 80045d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80045d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80045dc:	4b2f      	ldr	r3, [pc, #188]	; (800469c <SystemInit+0xd4>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 030f 	and.w	r3, r3, #15
 80045e4:	2b06      	cmp	r3, #6
 80045e6:	d807      	bhi.n	80045f8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80045e8:	4b2c      	ldr	r3, [pc, #176]	; (800469c <SystemInit+0xd4>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f023 030f 	bic.w	r3, r3, #15
 80045f0:	4a2a      	ldr	r2, [pc, #168]	; (800469c <SystemInit+0xd4>)
 80045f2:	f043 0307 	orr.w	r3, r3, #7
 80045f6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80045f8:	4b29      	ldr	r3, [pc, #164]	; (80046a0 <SystemInit+0xd8>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a28      	ldr	r2, [pc, #160]	; (80046a0 <SystemInit+0xd8>)
 80045fe:	f043 0301 	orr.w	r3, r3, #1
 8004602:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004604:	4b26      	ldr	r3, [pc, #152]	; (80046a0 <SystemInit+0xd8>)
 8004606:	2200      	movs	r2, #0
 8004608:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800460a:	4b25      	ldr	r3, [pc, #148]	; (80046a0 <SystemInit+0xd8>)
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	4924      	ldr	r1, [pc, #144]	; (80046a0 <SystemInit+0xd8>)
 8004610:	4b24      	ldr	r3, [pc, #144]	; (80046a4 <SystemInit+0xdc>)
 8004612:	4013      	ands	r3, r2
 8004614:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004616:	4b21      	ldr	r3, [pc, #132]	; (800469c <SystemInit+0xd4>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0308 	and.w	r3, r3, #8
 800461e:	2b00      	cmp	r3, #0
 8004620:	d007      	beq.n	8004632 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004622:	4b1e      	ldr	r3, [pc, #120]	; (800469c <SystemInit+0xd4>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f023 030f 	bic.w	r3, r3, #15
 800462a:	4a1c      	ldr	r2, [pc, #112]	; (800469c <SystemInit+0xd4>)
 800462c:	f043 0307 	orr.w	r3, r3, #7
 8004630:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004632:	4b1b      	ldr	r3, [pc, #108]	; (80046a0 <SystemInit+0xd8>)
 8004634:	2200      	movs	r2, #0
 8004636:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004638:	4b19      	ldr	r3, [pc, #100]	; (80046a0 <SystemInit+0xd8>)
 800463a:	2200      	movs	r2, #0
 800463c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800463e:	4b18      	ldr	r3, [pc, #96]	; (80046a0 <SystemInit+0xd8>)
 8004640:	2200      	movs	r2, #0
 8004642:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004644:	4b16      	ldr	r3, [pc, #88]	; (80046a0 <SystemInit+0xd8>)
 8004646:	4a18      	ldr	r2, [pc, #96]	; (80046a8 <SystemInit+0xe0>)
 8004648:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800464a:	4b15      	ldr	r3, [pc, #84]	; (80046a0 <SystemInit+0xd8>)
 800464c:	4a17      	ldr	r2, [pc, #92]	; (80046ac <SystemInit+0xe4>)
 800464e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004650:	4b13      	ldr	r3, [pc, #76]	; (80046a0 <SystemInit+0xd8>)
 8004652:	4a17      	ldr	r2, [pc, #92]	; (80046b0 <SystemInit+0xe8>)
 8004654:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004656:	4b12      	ldr	r3, [pc, #72]	; (80046a0 <SystemInit+0xd8>)
 8004658:	2200      	movs	r2, #0
 800465a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800465c:	4b10      	ldr	r3, [pc, #64]	; (80046a0 <SystemInit+0xd8>)
 800465e:	4a14      	ldr	r2, [pc, #80]	; (80046b0 <SystemInit+0xe8>)
 8004660:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004662:	4b0f      	ldr	r3, [pc, #60]	; (80046a0 <SystemInit+0xd8>)
 8004664:	2200      	movs	r2, #0
 8004666:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004668:	4b0d      	ldr	r3, [pc, #52]	; (80046a0 <SystemInit+0xd8>)
 800466a:	4a11      	ldr	r2, [pc, #68]	; (80046b0 <SystemInit+0xe8>)
 800466c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800466e:	4b0c      	ldr	r3, [pc, #48]	; (80046a0 <SystemInit+0xd8>)
 8004670:	2200      	movs	r2, #0
 8004672:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004674:	4b0a      	ldr	r3, [pc, #40]	; (80046a0 <SystemInit+0xd8>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a09      	ldr	r2, [pc, #36]	; (80046a0 <SystemInit+0xd8>)
 800467a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800467e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004680:	4b07      	ldr	r3, [pc, #28]	; (80046a0 <SystemInit+0xd8>)
 8004682:	2200      	movs	r2, #0
 8004684:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004686:	4b0b      	ldr	r3, [pc, #44]	; (80046b4 <SystemInit+0xec>)
 8004688:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800468c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800468e:	bf00      	nop
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr
 8004698:	e000ed00 	.word	0xe000ed00
 800469c:	52002000 	.word	0x52002000
 80046a0:	58024400 	.word	0x58024400
 80046a4:	eaf6ed7f 	.word	0xeaf6ed7f
 80046a8:	02020200 	.word	0x02020200
 80046ac:	01ff0000 	.word	0x01ff0000
 80046b0:	01010280 	.word	0x01010280
 80046b4:	52004000 	.word	0x52004000

080046b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80046b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80046f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80046bc:	f7ff ff84 	bl	80045c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80046c0:	480c      	ldr	r0, [pc, #48]	; (80046f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80046c2:	490d      	ldr	r1, [pc, #52]	; (80046f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80046c4:	4a0d      	ldr	r2, [pc, #52]	; (80046fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80046c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80046c8:	e002      	b.n	80046d0 <LoopCopyDataInit>

080046ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80046ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80046cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80046ce:	3304      	adds	r3, #4

080046d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80046d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80046d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80046d4:	d3f9      	bcc.n	80046ca <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80046d6:	4a0a      	ldr	r2, [pc, #40]	; (8004700 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80046d8:	4c0a      	ldr	r4, [pc, #40]	; (8004704 <LoopFillZerobss+0x22>)
  movs r3, #0
 80046da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80046dc:	e001      	b.n	80046e2 <LoopFillZerobss>

080046de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80046de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80046e0:	3204      	adds	r2, #4

080046e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80046e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80046e4:	d3fb      	bcc.n	80046de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80046e6:	f009 fccd 	bl	800e084 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80046ea:	f7fb ffc7 	bl	800067c <main>
  bx  lr
 80046ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80046f0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80046f4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80046f8:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 80046fc:	0800e718 	.word	0x0800e718
  ldr r2, =_sbss
 8004700:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8004704:	24000e78 	.word	0x24000e78

08004708 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004708:	e7fe      	b.n	8004708 <ADC3_IRQHandler>
	...

0800470c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004712:	2003      	movs	r0, #3
 8004714:	f000 f95c 	bl	80049d0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004718:	f003 ff60 	bl	80085dc <HAL_RCC_GetSysClockFreq>
 800471c:	4602      	mov	r2, r0
 800471e:	4b15      	ldr	r3, [pc, #84]	; (8004774 <HAL_Init+0x68>)
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	0a1b      	lsrs	r3, r3, #8
 8004724:	f003 030f 	and.w	r3, r3, #15
 8004728:	4913      	ldr	r1, [pc, #76]	; (8004778 <HAL_Init+0x6c>)
 800472a:	5ccb      	ldrb	r3, [r1, r3]
 800472c:	f003 031f 	and.w	r3, r3, #31
 8004730:	fa22 f303 	lsr.w	r3, r2, r3
 8004734:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004736:	4b0f      	ldr	r3, [pc, #60]	; (8004774 <HAL_Init+0x68>)
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	f003 030f 	and.w	r3, r3, #15
 800473e:	4a0e      	ldr	r2, [pc, #56]	; (8004778 <HAL_Init+0x6c>)
 8004740:	5cd3      	ldrb	r3, [r2, r3]
 8004742:	f003 031f 	and.w	r3, r3, #31
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	fa22 f303 	lsr.w	r3, r2, r3
 800474c:	4a0b      	ldr	r2, [pc, #44]	; (800477c <HAL_Init+0x70>)
 800474e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004750:	4a0b      	ldr	r2, [pc, #44]	; (8004780 <HAL_Init+0x74>)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004756:	200f      	movs	r0, #15
 8004758:	f000 f814 	bl	8004784 <HAL_InitTick>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d001      	beq.n	8004766 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e002      	b.n	800476c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004766:	f7ff fc15 	bl	8003f94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3708      	adds	r7, #8
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}
 8004774:	58024400 	.word	0x58024400
 8004778:	0800e6c4 	.word	0x0800e6c4
 800477c:	24000004 	.word	0x24000004
 8004780:	24000000 	.word	0x24000000

08004784 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800478c:	4b15      	ldr	r3, [pc, #84]	; (80047e4 <HAL_InitTick+0x60>)
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d101      	bne.n	8004798 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e021      	b.n	80047dc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004798:	4b13      	ldr	r3, [pc, #76]	; (80047e8 <HAL_InitTick+0x64>)
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	4b11      	ldr	r3, [pc, #68]	; (80047e4 <HAL_InitTick+0x60>)
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	4619      	mov	r1, r3
 80047a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80047a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80047aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ae:	4618      	mov	r0, r3
 80047b0:	f000 f941 	bl	8004a36 <HAL_SYSTICK_Config>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d001      	beq.n	80047be <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e00e      	b.n	80047dc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2b0f      	cmp	r3, #15
 80047c2:	d80a      	bhi.n	80047da <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80047c4:	2200      	movs	r2, #0
 80047c6:	6879      	ldr	r1, [r7, #4]
 80047c8:	f04f 30ff 	mov.w	r0, #4294967295
 80047cc:	f000 f90b 	bl	80049e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80047d0:	4a06      	ldr	r2, [pc, #24]	; (80047ec <HAL_InitTick+0x68>)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
 80047d8:	e000      	b.n	80047dc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3708      	adds	r7, #8
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	2400000c 	.word	0x2400000c
 80047e8:	24000000 	.word	0x24000000
 80047ec:	24000008 	.word	0x24000008

080047f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80047f0:	b480      	push	{r7}
 80047f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80047f4:	4b06      	ldr	r3, [pc, #24]	; (8004810 <HAL_IncTick+0x20>)
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	461a      	mov	r2, r3
 80047fa:	4b06      	ldr	r3, [pc, #24]	; (8004814 <HAL_IncTick+0x24>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4413      	add	r3, r2
 8004800:	4a04      	ldr	r2, [pc, #16]	; (8004814 <HAL_IncTick+0x24>)
 8004802:	6013      	str	r3, [r2, #0]
}
 8004804:	bf00      	nop
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	2400000c 	.word	0x2400000c
 8004814:	24000e64 	.word	0x24000e64

08004818 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004818:	b480      	push	{r7}
 800481a:	af00      	add	r7, sp, #0
  return uwTick;
 800481c:	4b03      	ldr	r3, [pc, #12]	; (800482c <HAL_GetTick+0x14>)
 800481e:	681b      	ldr	r3, [r3, #0]
}
 8004820:	4618      	mov	r0, r3
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	24000e64 	.word	0x24000e64

08004830 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f003 0307 	and.w	r3, r3, #7
 800483e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004840:	4b0b      	ldr	r3, [pc, #44]	; (8004870 <__NVIC_SetPriorityGrouping+0x40>)
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004846:	68ba      	ldr	r2, [r7, #8]
 8004848:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800484c:	4013      	ands	r3, r2
 800484e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004858:	4b06      	ldr	r3, [pc, #24]	; (8004874 <__NVIC_SetPriorityGrouping+0x44>)
 800485a:	4313      	orrs	r3, r2
 800485c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800485e:	4a04      	ldr	r2, [pc, #16]	; (8004870 <__NVIC_SetPriorityGrouping+0x40>)
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	60d3      	str	r3, [r2, #12]
}
 8004864:	bf00      	nop
 8004866:	3714      	adds	r7, #20
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr
 8004870:	e000ed00 	.word	0xe000ed00
 8004874:	05fa0000 	.word	0x05fa0000

08004878 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004878:	b480      	push	{r7}
 800487a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800487c:	4b04      	ldr	r3, [pc, #16]	; (8004890 <__NVIC_GetPriorityGrouping+0x18>)
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	0a1b      	lsrs	r3, r3, #8
 8004882:	f003 0307 	and.w	r3, r3, #7
}
 8004886:	4618      	mov	r0, r3
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr
 8004890:	e000ed00 	.word	0xe000ed00

08004894 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	4603      	mov	r3, r0
 800489c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800489e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	db0b      	blt.n	80048be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048a6:	88fb      	ldrh	r3, [r7, #6]
 80048a8:	f003 021f 	and.w	r2, r3, #31
 80048ac:	4907      	ldr	r1, [pc, #28]	; (80048cc <__NVIC_EnableIRQ+0x38>)
 80048ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048b2:	095b      	lsrs	r3, r3, #5
 80048b4:	2001      	movs	r0, #1
 80048b6:	fa00 f202 	lsl.w	r2, r0, r2
 80048ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80048be:	bf00      	nop
 80048c0:	370c      	adds	r7, #12
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	e000e100 	.word	0xe000e100

080048d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	4603      	mov	r3, r0
 80048d8:	6039      	str	r1, [r7, #0]
 80048da:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80048dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	db0a      	blt.n	80048fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	b2da      	uxtb	r2, r3
 80048e8:	490c      	ldr	r1, [pc, #48]	; (800491c <__NVIC_SetPriority+0x4c>)
 80048ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048ee:	0112      	lsls	r2, r2, #4
 80048f0:	b2d2      	uxtb	r2, r2
 80048f2:	440b      	add	r3, r1
 80048f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048f8:	e00a      	b.n	8004910 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	b2da      	uxtb	r2, r3
 80048fe:	4908      	ldr	r1, [pc, #32]	; (8004920 <__NVIC_SetPriority+0x50>)
 8004900:	88fb      	ldrh	r3, [r7, #6]
 8004902:	f003 030f 	and.w	r3, r3, #15
 8004906:	3b04      	subs	r3, #4
 8004908:	0112      	lsls	r2, r2, #4
 800490a:	b2d2      	uxtb	r2, r2
 800490c:	440b      	add	r3, r1
 800490e:	761a      	strb	r2, [r3, #24]
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr
 800491c:	e000e100 	.word	0xe000e100
 8004920:	e000ed00 	.word	0xe000ed00

08004924 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004924:	b480      	push	{r7}
 8004926:	b089      	sub	sp, #36	; 0x24
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f003 0307 	and.w	r3, r3, #7
 8004936:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	f1c3 0307 	rsb	r3, r3, #7
 800493e:	2b04      	cmp	r3, #4
 8004940:	bf28      	it	cs
 8004942:	2304      	movcs	r3, #4
 8004944:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	3304      	adds	r3, #4
 800494a:	2b06      	cmp	r3, #6
 800494c:	d902      	bls.n	8004954 <NVIC_EncodePriority+0x30>
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	3b03      	subs	r3, #3
 8004952:	e000      	b.n	8004956 <NVIC_EncodePriority+0x32>
 8004954:	2300      	movs	r3, #0
 8004956:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004958:	f04f 32ff 	mov.w	r2, #4294967295
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	fa02 f303 	lsl.w	r3, r2, r3
 8004962:	43da      	mvns	r2, r3
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	401a      	ands	r2, r3
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800496c:	f04f 31ff 	mov.w	r1, #4294967295
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	fa01 f303 	lsl.w	r3, r1, r3
 8004976:	43d9      	mvns	r1, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800497c:	4313      	orrs	r3, r2
         );
}
 800497e:	4618      	mov	r0, r3
 8004980:	3724      	adds	r7, #36	; 0x24
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
	...

0800498c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	3b01      	subs	r3, #1
 8004998:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800499c:	d301      	bcc.n	80049a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800499e:	2301      	movs	r3, #1
 80049a0:	e00f      	b.n	80049c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80049a2:	4a0a      	ldr	r2, [pc, #40]	; (80049cc <SysTick_Config+0x40>)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	3b01      	subs	r3, #1
 80049a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80049aa:	210f      	movs	r1, #15
 80049ac:	f04f 30ff 	mov.w	r0, #4294967295
 80049b0:	f7ff ff8e 	bl	80048d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80049b4:	4b05      	ldr	r3, [pc, #20]	; (80049cc <SysTick_Config+0x40>)
 80049b6:	2200      	movs	r2, #0
 80049b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80049ba:	4b04      	ldr	r3, [pc, #16]	; (80049cc <SysTick_Config+0x40>)
 80049bc:	2207      	movs	r2, #7
 80049be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3708      	adds	r7, #8
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	e000e010 	.word	0xe000e010

080049d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f7ff ff29 	bl	8004830 <__NVIC_SetPriorityGrouping>
}
 80049de:	bf00      	nop
 80049e0:	3708      	adds	r7, #8
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b086      	sub	sp, #24
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	4603      	mov	r3, r0
 80049ee:	60b9      	str	r1, [r7, #8]
 80049f0:	607a      	str	r2, [r7, #4]
 80049f2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80049f4:	f7ff ff40 	bl	8004878 <__NVIC_GetPriorityGrouping>
 80049f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	68b9      	ldr	r1, [r7, #8]
 80049fe:	6978      	ldr	r0, [r7, #20]
 8004a00:	f7ff ff90 	bl	8004924 <NVIC_EncodePriority>
 8004a04:	4602      	mov	r2, r0
 8004a06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004a0a:	4611      	mov	r1, r2
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f7ff ff5f 	bl	80048d0 <__NVIC_SetPriority>
}
 8004a12:	bf00      	nop
 8004a14:	3718      	adds	r7, #24
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b082      	sub	sp, #8
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	4603      	mov	r3, r0
 8004a22:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f7ff ff33 	bl	8004894 <__NVIC_EnableIRQ>
}
 8004a2e:	bf00      	nop
 8004a30:	3708      	adds	r7, #8
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}

08004a36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a36:	b580      	push	{r7, lr}
 8004a38:	b082      	sub	sp, #8
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f7ff ffa4 	bl	800498c <SysTick_Config>
 8004a44:	4603      	mov	r3, r0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3708      	adds	r7, #8
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
	...

08004a50 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b086      	sub	sp, #24
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004a58:	f7ff fede 	bl	8004818 <HAL_GetTick>
 8004a5c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d101      	bne.n	8004a68 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e314      	b.n	8005092 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a66      	ldr	r2, [pc, #408]	; (8004c08 <HAL_DMA_Init+0x1b8>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d04a      	beq.n	8004b08 <HAL_DMA_Init+0xb8>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a65      	ldr	r2, [pc, #404]	; (8004c0c <HAL_DMA_Init+0x1bc>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d045      	beq.n	8004b08 <HAL_DMA_Init+0xb8>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a63      	ldr	r2, [pc, #396]	; (8004c10 <HAL_DMA_Init+0x1c0>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d040      	beq.n	8004b08 <HAL_DMA_Init+0xb8>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a62      	ldr	r2, [pc, #392]	; (8004c14 <HAL_DMA_Init+0x1c4>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d03b      	beq.n	8004b08 <HAL_DMA_Init+0xb8>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a60      	ldr	r2, [pc, #384]	; (8004c18 <HAL_DMA_Init+0x1c8>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d036      	beq.n	8004b08 <HAL_DMA_Init+0xb8>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a5f      	ldr	r2, [pc, #380]	; (8004c1c <HAL_DMA_Init+0x1cc>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d031      	beq.n	8004b08 <HAL_DMA_Init+0xb8>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a5d      	ldr	r2, [pc, #372]	; (8004c20 <HAL_DMA_Init+0x1d0>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d02c      	beq.n	8004b08 <HAL_DMA_Init+0xb8>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a5c      	ldr	r2, [pc, #368]	; (8004c24 <HAL_DMA_Init+0x1d4>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d027      	beq.n	8004b08 <HAL_DMA_Init+0xb8>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a5a      	ldr	r2, [pc, #360]	; (8004c28 <HAL_DMA_Init+0x1d8>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d022      	beq.n	8004b08 <HAL_DMA_Init+0xb8>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a59      	ldr	r2, [pc, #356]	; (8004c2c <HAL_DMA_Init+0x1dc>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d01d      	beq.n	8004b08 <HAL_DMA_Init+0xb8>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a57      	ldr	r2, [pc, #348]	; (8004c30 <HAL_DMA_Init+0x1e0>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d018      	beq.n	8004b08 <HAL_DMA_Init+0xb8>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a56      	ldr	r2, [pc, #344]	; (8004c34 <HAL_DMA_Init+0x1e4>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d013      	beq.n	8004b08 <HAL_DMA_Init+0xb8>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a54      	ldr	r2, [pc, #336]	; (8004c38 <HAL_DMA_Init+0x1e8>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d00e      	beq.n	8004b08 <HAL_DMA_Init+0xb8>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a53      	ldr	r2, [pc, #332]	; (8004c3c <HAL_DMA_Init+0x1ec>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d009      	beq.n	8004b08 <HAL_DMA_Init+0xb8>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a51      	ldr	r2, [pc, #324]	; (8004c40 <HAL_DMA_Init+0x1f0>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d004      	beq.n	8004b08 <HAL_DMA_Init+0xb8>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a50      	ldr	r2, [pc, #320]	; (8004c44 <HAL_DMA_Init+0x1f4>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d101      	bne.n	8004b0c <HAL_DMA_Init+0xbc>
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e000      	b.n	8004b0e <HAL_DMA_Init+0xbe>
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f000 813c 	beq.w	8004d8c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2202      	movs	r2, #2
 8004b18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a37      	ldr	r2, [pc, #220]	; (8004c08 <HAL_DMA_Init+0x1b8>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d04a      	beq.n	8004bc4 <HAL_DMA_Init+0x174>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a36      	ldr	r2, [pc, #216]	; (8004c0c <HAL_DMA_Init+0x1bc>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d045      	beq.n	8004bc4 <HAL_DMA_Init+0x174>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a34      	ldr	r2, [pc, #208]	; (8004c10 <HAL_DMA_Init+0x1c0>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d040      	beq.n	8004bc4 <HAL_DMA_Init+0x174>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a33      	ldr	r2, [pc, #204]	; (8004c14 <HAL_DMA_Init+0x1c4>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d03b      	beq.n	8004bc4 <HAL_DMA_Init+0x174>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a31      	ldr	r2, [pc, #196]	; (8004c18 <HAL_DMA_Init+0x1c8>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d036      	beq.n	8004bc4 <HAL_DMA_Init+0x174>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a30      	ldr	r2, [pc, #192]	; (8004c1c <HAL_DMA_Init+0x1cc>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d031      	beq.n	8004bc4 <HAL_DMA_Init+0x174>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a2e      	ldr	r2, [pc, #184]	; (8004c20 <HAL_DMA_Init+0x1d0>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d02c      	beq.n	8004bc4 <HAL_DMA_Init+0x174>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a2d      	ldr	r2, [pc, #180]	; (8004c24 <HAL_DMA_Init+0x1d4>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d027      	beq.n	8004bc4 <HAL_DMA_Init+0x174>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a2b      	ldr	r2, [pc, #172]	; (8004c28 <HAL_DMA_Init+0x1d8>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d022      	beq.n	8004bc4 <HAL_DMA_Init+0x174>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a2a      	ldr	r2, [pc, #168]	; (8004c2c <HAL_DMA_Init+0x1dc>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d01d      	beq.n	8004bc4 <HAL_DMA_Init+0x174>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a28      	ldr	r2, [pc, #160]	; (8004c30 <HAL_DMA_Init+0x1e0>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d018      	beq.n	8004bc4 <HAL_DMA_Init+0x174>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a27      	ldr	r2, [pc, #156]	; (8004c34 <HAL_DMA_Init+0x1e4>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d013      	beq.n	8004bc4 <HAL_DMA_Init+0x174>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a25      	ldr	r2, [pc, #148]	; (8004c38 <HAL_DMA_Init+0x1e8>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d00e      	beq.n	8004bc4 <HAL_DMA_Init+0x174>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a24      	ldr	r2, [pc, #144]	; (8004c3c <HAL_DMA_Init+0x1ec>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d009      	beq.n	8004bc4 <HAL_DMA_Init+0x174>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a22      	ldr	r2, [pc, #136]	; (8004c40 <HAL_DMA_Init+0x1f0>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d004      	beq.n	8004bc4 <HAL_DMA_Init+0x174>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a21      	ldr	r2, [pc, #132]	; (8004c44 <HAL_DMA_Init+0x1f4>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d108      	bne.n	8004bd6 <HAL_DMA_Init+0x186>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f022 0201 	bic.w	r2, r2, #1
 8004bd2:	601a      	str	r2, [r3, #0]
 8004bd4:	e007      	b.n	8004be6 <HAL_DMA_Init+0x196>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f022 0201 	bic.w	r2, r2, #1
 8004be4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004be6:	e02f      	b.n	8004c48 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004be8:	f7ff fe16 	bl	8004818 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	2b05      	cmp	r3, #5
 8004bf4:	d928      	bls.n	8004c48 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2220      	movs	r2, #32
 8004bfa:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2203      	movs	r2, #3
 8004c00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e244      	b.n	8005092 <HAL_DMA_Init+0x642>
 8004c08:	40020010 	.word	0x40020010
 8004c0c:	40020028 	.word	0x40020028
 8004c10:	40020040 	.word	0x40020040
 8004c14:	40020058 	.word	0x40020058
 8004c18:	40020070 	.word	0x40020070
 8004c1c:	40020088 	.word	0x40020088
 8004c20:	400200a0 	.word	0x400200a0
 8004c24:	400200b8 	.word	0x400200b8
 8004c28:	40020410 	.word	0x40020410
 8004c2c:	40020428 	.word	0x40020428
 8004c30:	40020440 	.word	0x40020440
 8004c34:	40020458 	.word	0x40020458
 8004c38:	40020470 	.word	0x40020470
 8004c3c:	40020488 	.word	0x40020488
 8004c40:	400204a0 	.word	0x400204a0
 8004c44:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0301 	and.w	r3, r3, #1
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1c8      	bne.n	8004be8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004c5e:	697a      	ldr	r2, [r7, #20]
 8004c60:	4b84      	ldr	r3, [pc, #528]	; (8004e74 <HAL_DMA_Init+0x424>)
 8004c62:	4013      	ands	r3, r2
 8004c64:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004c6e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c7a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	699b      	ldr	r3, [r3, #24]
 8004c80:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c86:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a1b      	ldr	r3, [r3, #32]
 8004c8c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c98:	2b04      	cmp	r3, #4
 8004c9a:	d107      	bne.n	8004cac <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	2b28      	cmp	r3, #40	; 0x28
 8004cb2:	d903      	bls.n	8004cbc <HAL_DMA_Init+0x26c>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	2b2e      	cmp	r3, #46	; 0x2e
 8004cba:	d91f      	bls.n	8004cfc <HAL_DMA_Init+0x2ac>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	2b3e      	cmp	r3, #62	; 0x3e
 8004cc2:	d903      	bls.n	8004ccc <HAL_DMA_Init+0x27c>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	2b42      	cmp	r3, #66	; 0x42
 8004cca:	d917      	bls.n	8004cfc <HAL_DMA_Init+0x2ac>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	2b46      	cmp	r3, #70	; 0x46
 8004cd2:	d903      	bls.n	8004cdc <HAL_DMA_Init+0x28c>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	2b48      	cmp	r3, #72	; 0x48
 8004cda:	d90f      	bls.n	8004cfc <HAL_DMA_Init+0x2ac>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	2b4e      	cmp	r3, #78	; 0x4e
 8004ce2:	d903      	bls.n	8004cec <HAL_DMA_Init+0x29c>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	2b52      	cmp	r3, #82	; 0x52
 8004cea:	d907      	bls.n	8004cfc <HAL_DMA_Init+0x2ac>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	2b73      	cmp	r3, #115	; 0x73
 8004cf2:	d905      	bls.n	8004d00 <HAL_DMA_Init+0x2b0>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	2b77      	cmp	r3, #119	; 0x77
 8004cfa:	d801      	bhi.n	8004d00 <HAL_DMA_Init+0x2b0>
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e000      	b.n	8004d02 <HAL_DMA_Init+0x2b2>
 8004d00:	2300      	movs	r3, #0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d003      	beq.n	8004d0e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d0c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	697a      	ldr	r2, [r7, #20]
 8004d14:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	695b      	ldr	r3, [r3, #20]
 8004d1c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	f023 0307 	bic.w	r3, r3, #7
 8004d24:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d34:	2b04      	cmp	r3, #4
 8004d36:	d117      	bne.n	8004d68 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d3c:	697a      	ldr	r2, [r7, #20]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00e      	beq.n	8004d68 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f002 fb30 	bl	80073b0 <DMA_CheckFifoParam>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d008      	beq.n	8004d68 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2240      	movs	r2, #64	; 0x40
 8004d5a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e194      	b.n	8005092 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	697a      	ldr	r2, [r7, #20]
 8004d6e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f002 fa6b 	bl	800724c <DMA_CalcBaseAndBitshift>
 8004d76:	4603      	mov	r3, r0
 8004d78:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d7e:	f003 031f 	and.w	r3, r3, #31
 8004d82:	223f      	movs	r2, #63	; 0x3f
 8004d84:	409a      	lsls	r2, r3
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	609a      	str	r2, [r3, #8]
 8004d8a:	e0ca      	b.n	8004f22 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a39      	ldr	r2, [pc, #228]	; (8004e78 <HAL_DMA_Init+0x428>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d022      	beq.n	8004ddc <HAL_DMA_Init+0x38c>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a38      	ldr	r2, [pc, #224]	; (8004e7c <HAL_DMA_Init+0x42c>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d01d      	beq.n	8004ddc <HAL_DMA_Init+0x38c>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a36      	ldr	r2, [pc, #216]	; (8004e80 <HAL_DMA_Init+0x430>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d018      	beq.n	8004ddc <HAL_DMA_Init+0x38c>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a35      	ldr	r2, [pc, #212]	; (8004e84 <HAL_DMA_Init+0x434>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d013      	beq.n	8004ddc <HAL_DMA_Init+0x38c>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a33      	ldr	r2, [pc, #204]	; (8004e88 <HAL_DMA_Init+0x438>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d00e      	beq.n	8004ddc <HAL_DMA_Init+0x38c>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a32      	ldr	r2, [pc, #200]	; (8004e8c <HAL_DMA_Init+0x43c>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d009      	beq.n	8004ddc <HAL_DMA_Init+0x38c>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a30      	ldr	r2, [pc, #192]	; (8004e90 <HAL_DMA_Init+0x440>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d004      	beq.n	8004ddc <HAL_DMA_Init+0x38c>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a2f      	ldr	r2, [pc, #188]	; (8004e94 <HAL_DMA_Init+0x444>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d101      	bne.n	8004de0 <HAL_DMA_Init+0x390>
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e000      	b.n	8004de2 <HAL_DMA_Init+0x392>
 8004de0:	2300      	movs	r3, #0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	f000 8094 	beq.w	8004f10 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a22      	ldr	r2, [pc, #136]	; (8004e78 <HAL_DMA_Init+0x428>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d021      	beq.n	8004e36 <HAL_DMA_Init+0x3e6>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a21      	ldr	r2, [pc, #132]	; (8004e7c <HAL_DMA_Init+0x42c>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d01c      	beq.n	8004e36 <HAL_DMA_Init+0x3e6>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a1f      	ldr	r2, [pc, #124]	; (8004e80 <HAL_DMA_Init+0x430>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d017      	beq.n	8004e36 <HAL_DMA_Init+0x3e6>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a1e      	ldr	r2, [pc, #120]	; (8004e84 <HAL_DMA_Init+0x434>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d012      	beq.n	8004e36 <HAL_DMA_Init+0x3e6>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a1c      	ldr	r2, [pc, #112]	; (8004e88 <HAL_DMA_Init+0x438>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d00d      	beq.n	8004e36 <HAL_DMA_Init+0x3e6>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a1b      	ldr	r2, [pc, #108]	; (8004e8c <HAL_DMA_Init+0x43c>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d008      	beq.n	8004e36 <HAL_DMA_Init+0x3e6>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a19      	ldr	r2, [pc, #100]	; (8004e90 <HAL_DMA_Init+0x440>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d003      	beq.n	8004e36 <HAL_DMA_Init+0x3e6>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a18      	ldr	r2, [pc, #96]	; (8004e94 <HAL_DMA_Init+0x444>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2202      	movs	r2, #2
 8004e3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	4b11      	ldr	r3, [pc, #68]	; (8004e98 <HAL_DMA_Init+0x448>)
 8004e54:	4013      	ands	r3, r2
 8004e56:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	2b40      	cmp	r3, #64	; 0x40
 8004e5e:	d01d      	beq.n	8004e9c <HAL_DMA_Init+0x44c>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	2b80      	cmp	r3, #128	; 0x80
 8004e66:	d102      	bne.n	8004e6e <HAL_DMA_Init+0x41e>
 8004e68:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e6c:	e017      	b.n	8004e9e <HAL_DMA_Init+0x44e>
 8004e6e:	2300      	movs	r3, #0
 8004e70:	e015      	b.n	8004e9e <HAL_DMA_Init+0x44e>
 8004e72:	bf00      	nop
 8004e74:	fe10803f 	.word	0xfe10803f
 8004e78:	58025408 	.word	0x58025408
 8004e7c:	5802541c 	.word	0x5802541c
 8004e80:	58025430 	.word	0x58025430
 8004e84:	58025444 	.word	0x58025444
 8004e88:	58025458 	.word	0x58025458
 8004e8c:	5802546c 	.word	0x5802546c
 8004e90:	58025480 	.word	0x58025480
 8004e94:	58025494 	.word	0x58025494
 8004e98:	fffe000f 	.word	0xfffe000f
 8004e9c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	68d2      	ldr	r2, [r2, #12]
 8004ea2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004ea4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004eac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004eb4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004ebc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	69db      	ldr	r3, [r3, #28]
 8004ec2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004ec4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
 8004eca:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004ecc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004ece:	697a      	ldr	r2, [r7, #20]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	4b6e      	ldr	r3, [pc, #440]	; (800509c <HAL_DMA_Init+0x64c>)
 8004ee4:	4413      	add	r3, r2
 8004ee6:	4a6e      	ldr	r2, [pc, #440]	; (80050a0 <HAL_DMA_Init+0x650>)
 8004ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8004eec:	091b      	lsrs	r3, r3, #4
 8004eee:	009a      	lsls	r2, r3, #2
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f002 f9a9 	bl	800724c <DMA_CalcBaseAndBitshift>
 8004efa:	4603      	mov	r3, r0
 8004efc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f02:	f003 031f 	and.w	r3, r3, #31
 8004f06:	2201      	movs	r2, #1
 8004f08:	409a      	lsls	r2, r3
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	605a      	str	r2, [r3, #4]
 8004f0e:	e008      	b.n	8004f22 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2240      	movs	r2, #64	; 0x40
 8004f14:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2203      	movs	r2, #3
 8004f1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e0b7      	b.n	8005092 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a5f      	ldr	r2, [pc, #380]	; (80050a4 <HAL_DMA_Init+0x654>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d072      	beq.n	8005012 <HAL_DMA_Init+0x5c2>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a5d      	ldr	r2, [pc, #372]	; (80050a8 <HAL_DMA_Init+0x658>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d06d      	beq.n	8005012 <HAL_DMA_Init+0x5c2>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a5c      	ldr	r2, [pc, #368]	; (80050ac <HAL_DMA_Init+0x65c>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d068      	beq.n	8005012 <HAL_DMA_Init+0x5c2>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a5a      	ldr	r2, [pc, #360]	; (80050b0 <HAL_DMA_Init+0x660>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d063      	beq.n	8005012 <HAL_DMA_Init+0x5c2>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a59      	ldr	r2, [pc, #356]	; (80050b4 <HAL_DMA_Init+0x664>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d05e      	beq.n	8005012 <HAL_DMA_Init+0x5c2>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a57      	ldr	r2, [pc, #348]	; (80050b8 <HAL_DMA_Init+0x668>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d059      	beq.n	8005012 <HAL_DMA_Init+0x5c2>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a56      	ldr	r2, [pc, #344]	; (80050bc <HAL_DMA_Init+0x66c>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d054      	beq.n	8005012 <HAL_DMA_Init+0x5c2>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a54      	ldr	r2, [pc, #336]	; (80050c0 <HAL_DMA_Init+0x670>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d04f      	beq.n	8005012 <HAL_DMA_Init+0x5c2>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a53      	ldr	r2, [pc, #332]	; (80050c4 <HAL_DMA_Init+0x674>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d04a      	beq.n	8005012 <HAL_DMA_Init+0x5c2>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a51      	ldr	r2, [pc, #324]	; (80050c8 <HAL_DMA_Init+0x678>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d045      	beq.n	8005012 <HAL_DMA_Init+0x5c2>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a50      	ldr	r2, [pc, #320]	; (80050cc <HAL_DMA_Init+0x67c>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d040      	beq.n	8005012 <HAL_DMA_Init+0x5c2>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a4e      	ldr	r2, [pc, #312]	; (80050d0 <HAL_DMA_Init+0x680>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d03b      	beq.n	8005012 <HAL_DMA_Init+0x5c2>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a4d      	ldr	r2, [pc, #308]	; (80050d4 <HAL_DMA_Init+0x684>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d036      	beq.n	8005012 <HAL_DMA_Init+0x5c2>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a4b      	ldr	r2, [pc, #300]	; (80050d8 <HAL_DMA_Init+0x688>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d031      	beq.n	8005012 <HAL_DMA_Init+0x5c2>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a4a      	ldr	r2, [pc, #296]	; (80050dc <HAL_DMA_Init+0x68c>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d02c      	beq.n	8005012 <HAL_DMA_Init+0x5c2>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a48      	ldr	r2, [pc, #288]	; (80050e0 <HAL_DMA_Init+0x690>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d027      	beq.n	8005012 <HAL_DMA_Init+0x5c2>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a47      	ldr	r2, [pc, #284]	; (80050e4 <HAL_DMA_Init+0x694>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d022      	beq.n	8005012 <HAL_DMA_Init+0x5c2>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a45      	ldr	r2, [pc, #276]	; (80050e8 <HAL_DMA_Init+0x698>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d01d      	beq.n	8005012 <HAL_DMA_Init+0x5c2>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a44      	ldr	r2, [pc, #272]	; (80050ec <HAL_DMA_Init+0x69c>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d018      	beq.n	8005012 <HAL_DMA_Init+0x5c2>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a42      	ldr	r2, [pc, #264]	; (80050f0 <HAL_DMA_Init+0x6a0>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d013      	beq.n	8005012 <HAL_DMA_Init+0x5c2>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a41      	ldr	r2, [pc, #260]	; (80050f4 <HAL_DMA_Init+0x6a4>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d00e      	beq.n	8005012 <HAL_DMA_Init+0x5c2>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a3f      	ldr	r2, [pc, #252]	; (80050f8 <HAL_DMA_Init+0x6a8>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d009      	beq.n	8005012 <HAL_DMA_Init+0x5c2>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a3e      	ldr	r2, [pc, #248]	; (80050fc <HAL_DMA_Init+0x6ac>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d004      	beq.n	8005012 <HAL_DMA_Init+0x5c2>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a3c      	ldr	r2, [pc, #240]	; (8005100 <HAL_DMA_Init+0x6b0>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d101      	bne.n	8005016 <HAL_DMA_Init+0x5c6>
 8005012:	2301      	movs	r3, #1
 8005014:	e000      	b.n	8005018 <HAL_DMA_Init+0x5c8>
 8005016:	2300      	movs	r3, #0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d032      	beq.n	8005082 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f002 fa43 	bl	80074a8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	2b80      	cmp	r3, #128	; 0x80
 8005028:	d102      	bne.n	8005030 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685a      	ldr	r2, [r3, #4]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005038:	b2d2      	uxtb	r2, r2
 800503a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005044:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d010      	beq.n	8005070 <HAL_DMA_Init+0x620>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	2b08      	cmp	r3, #8
 8005054:	d80c      	bhi.n	8005070 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f002 fac0 	bl	80075dc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005060:	2200      	movs	r2, #0
 8005062:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800506c:	605a      	str	r2, [r3, #4]
 800506e:	e008      	b.n	8005082 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3718      	adds	r7, #24
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	a7fdabf8 	.word	0xa7fdabf8
 80050a0:	cccccccd 	.word	0xcccccccd
 80050a4:	40020010 	.word	0x40020010
 80050a8:	40020028 	.word	0x40020028
 80050ac:	40020040 	.word	0x40020040
 80050b0:	40020058 	.word	0x40020058
 80050b4:	40020070 	.word	0x40020070
 80050b8:	40020088 	.word	0x40020088
 80050bc:	400200a0 	.word	0x400200a0
 80050c0:	400200b8 	.word	0x400200b8
 80050c4:	40020410 	.word	0x40020410
 80050c8:	40020428 	.word	0x40020428
 80050cc:	40020440 	.word	0x40020440
 80050d0:	40020458 	.word	0x40020458
 80050d4:	40020470 	.word	0x40020470
 80050d8:	40020488 	.word	0x40020488
 80050dc:	400204a0 	.word	0x400204a0
 80050e0:	400204b8 	.word	0x400204b8
 80050e4:	58025408 	.word	0x58025408
 80050e8:	5802541c 	.word	0x5802541c
 80050ec:	58025430 	.word	0x58025430
 80050f0:	58025444 	.word	0x58025444
 80050f4:	58025458 	.word	0x58025458
 80050f8:	5802546c 	.word	0x5802546c
 80050fc:	58025480 	.word	0x58025480
 8005100:	58025494 	.word	0x58025494

08005104 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b086      	sub	sp, #24
 8005108:	af00      	add	r7, sp, #0
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	60b9      	str	r1, [r7, #8]
 800510e:	607a      	str	r2, [r7, #4]
 8005110:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005112:	2300      	movs	r3, #0
 8005114:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d101      	bne.n	8005120 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e226      	b.n	800556e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005126:	2b01      	cmp	r3, #1
 8005128:	d101      	bne.n	800512e <HAL_DMA_Start_IT+0x2a>
 800512a:	2302      	movs	r3, #2
 800512c:	e21f      	b.n	800556e <HAL_DMA_Start_IT+0x46a>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800513c:	b2db      	uxtb	r3, r3
 800513e:	2b01      	cmp	r3, #1
 8005140:	f040 820a 	bne.w	8005558 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2202      	movs	r2, #2
 8005148:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2200      	movs	r2, #0
 8005150:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a68      	ldr	r2, [pc, #416]	; (80052f8 <HAL_DMA_Start_IT+0x1f4>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d04a      	beq.n	80051f2 <HAL_DMA_Start_IT+0xee>
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a66      	ldr	r2, [pc, #408]	; (80052fc <HAL_DMA_Start_IT+0x1f8>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d045      	beq.n	80051f2 <HAL_DMA_Start_IT+0xee>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a65      	ldr	r2, [pc, #404]	; (8005300 <HAL_DMA_Start_IT+0x1fc>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d040      	beq.n	80051f2 <HAL_DMA_Start_IT+0xee>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a63      	ldr	r2, [pc, #396]	; (8005304 <HAL_DMA_Start_IT+0x200>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d03b      	beq.n	80051f2 <HAL_DMA_Start_IT+0xee>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a62      	ldr	r2, [pc, #392]	; (8005308 <HAL_DMA_Start_IT+0x204>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d036      	beq.n	80051f2 <HAL_DMA_Start_IT+0xee>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a60      	ldr	r2, [pc, #384]	; (800530c <HAL_DMA_Start_IT+0x208>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d031      	beq.n	80051f2 <HAL_DMA_Start_IT+0xee>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a5f      	ldr	r2, [pc, #380]	; (8005310 <HAL_DMA_Start_IT+0x20c>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d02c      	beq.n	80051f2 <HAL_DMA_Start_IT+0xee>
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a5d      	ldr	r2, [pc, #372]	; (8005314 <HAL_DMA_Start_IT+0x210>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d027      	beq.n	80051f2 <HAL_DMA_Start_IT+0xee>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a5c      	ldr	r2, [pc, #368]	; (8005318 <HAL_DMA_Start_IT+0x214>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d022      	beq.n	80051f2 <HAL_DMA_Start_IT+0xee>
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a5a      	ldr	r2, [pc, #360]	; (800531c <HAL_DMA_Start_IT+0x218>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d01d      	beq.n	80051f2 <HAL_DMA_Start_IT+0xee>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a59      	ldr	r2, [pc, #356]	; (8005320 <HAL_DMA_Start_IT+0x21c>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d018      	beq.n	80051f2 <HAL_DMA_Start_IT+0xee>
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a57      	ldr	r2, [pc, #348]	; (8005324 <HAL_DMA_Start_IT+0x220>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d013      	beq.n	80051f2 <HAL_DMA_Start_IT+0xee>
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a56      	ldr	r2, [pc, #344]	; (8005328 <HAL_DMA_Start_IT+0x224>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d00e      	beq.n	80051f2 <HAL_DMA_Start_IT+0xee>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a54      	ldr	r2, [pc, #336]	; (800532c <HAL_DMA_Start_IT+0x228>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d009      	beq.n	80051f2 <HAL_DMA_Start_IT+0xee>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a53      	ldr	r2, [pc, #332]	; (8005330 <HAL_DMA_Start_IT+0x22c>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d004      	beq.n	80051f2 <HAL_DMA_Start_IT+0xee>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a51      	ldr	r2, [pc, #324]	; (8005334 <HAL_DMA_Start_IT+0x230>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d108      	bne.n	8005204 <HAL_DMA_Start_IT+0x100>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f022 0201 	bic.w	r2, r2, #1
 8005200:	601a      	str	r2, [r3, #0]
 8005202:	e007      	b.n	8005214 <HAL_DMA_Start_IT+0x110>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f022 0201 	bic.w	r2, r2, #1
 8005212:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	68b9      	ldr	r1, [r7, #8]
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	f001 fe6a 	bl	8006ef4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a34      	ldr	r2, [pc, #208]	; (80052f8 <HAL_DMA_Start_IT+0x1f4>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d04a      	beq.n	80052c0 <HAL_DMA_Start_IT+0x1bc>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a33      	ldr	r2, [pc, #204]	; (80052fc <HAL_DMA_Start_IT+0x1f8>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d045      	beq.n	80052c0 <HAL_DMA_Start_IT+0x1bc>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a31      	ldr	r2, [pc, #196]	; (8005300 <HAL_DMA_Start_IT+0x1fc>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d040      	beq.n	80052c0 <HAL_DMA_Start_IT+0x1bc>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a30      	ldr	r2, [pc, #192]	; (8005304 <HAL_DMA_Start_IT+0x200>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d03b      	beq.n	80052c0 <HAL_DMA_Start_IT+0x1bc>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a2e      	ldr	r2, [pc, #184]	; (8005308 <HAL_DMA_Start_IT+0x204>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d036      	beq.n	80052c0 <HAL_DMA_Start_IT+0x1bc>
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a2d      	ldr	r2, [pc, #180]	; (800530c <HAL_DMA_Start_IT+0x208>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d031      	beq.n	80052c0 <HAL_DMA_Start_IT+0x1bc>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a2b      	ldr	r2, [pc, #172]	; (8005310 <HAL_DMA_Start_IT+0x20c>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d02c      	beq.n	80052c0 <HAL_DMA_Start_IT+0x1bc>
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a2a      	ldr	r2, [pc, #168]	; (8005314 <HAL_DMA_Start_IT+0x210>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d027      	beq.n	80052c0 <HAL_DMA_Start_IT+0x1bc>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a28      	ldr	r2, [pc, #160]	; (8005318 <HAL_DMA_Start_IT+0x214>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d022      	beq.n	80052c0 <HAL_DMA_Start_IT+0x1bc>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a27      	ldr	r2, [pc, #156]	; (800531c <HAL_DMA_Start_IT+0x218>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d01d      	beq.n	80052c0 <HAL_DMA_Start_IT+0x1bc>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a25      	ldr	r2, [pc, #148]	; (8005320 <HAL_DMA_Start_IT+0x21c>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d018      	beq.n	80052c0 <HAL_DMA_Start_IT+0x1bc>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a24      	ldr	r2, [pc, #144]	; (8005324 <HAL_DMA_Start_IT+0x220>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d013      	beq.n	80052c0 <HAL_DMA_Start_IT+0x1bc>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a22      	ldr	r2, [pc, #136]	; (8005328 <HAL_DMA_Start_IT+0x224>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d00e      	beq.n	80052c0 <HAL_DMA_Start_IT+0x1bc>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a21      	ldr	r2, [pc, #132]	; (800532c <HAL_DMA_Start_IT+0x228>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d009      	beq.n	80052c0 <HAL_DMA_Start_IT+0x1bc>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a1f      	ldr	r2, [pc, #124]	; (8005330 <HAL_DMA_Start_IT+0x22c>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d004      	beq.n	80052c0 <HAL_DMA_Start_IT+0x1bc>
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a1e      	ldr	r2, [pc, #120]	; (8005334 <HAL_DMA_Start_IT+0x230>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d101      	bne.n	80052c4 <HAL_DMA_Start_IT+0x1c0>
 80052c0:	2301      	movs	r3, #1
 80052c2:	e000      	b.n	80052c6 <HAL_DMA_Start_IT+0x1c2>
 80052c4:	2300      	movs	r3, #0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d036      	beq.n	8005338 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f023 021e 	bic.w	r2, r3, #30
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f042 0216 	orr.w	r2, r2, #22
 80052dc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d03e      	beq.n	8005364 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f042 0208 	orr.w	r2, r2, #8
 80052f4:	601a      	str	r2, [r3, #0]
 80052f6:	e035      	b.n	8005364 <HAL_DMA_Start_IT+0x260>
 80052f8:	40020010 	.word	0x40020010
 80052fc:	40020028 	.word	0x40020028
 8005300:	40020040 	.word	0x40020040
 8005304:	40020058 	.word	0x40020058
 8005308:	40020070 	.word	0x40020070
 800530c:	40020088 	.word	0x40020088
 8005310:	400200a0 	.word	0x400200a0
 8005314:	400200b8 	.word	0x400200b8
 8005318:	40020410 	.word	0x40020410
 800531c:	40020428 	.word	0x40020428
 8005320:	40020440 	.word	0x40020440
 8005324:	40020458 	.word	0x40020458
 8005328:	40020470 	.word	0x40020470
 800532c:	40020488 	.word	0x40020488
 8005330:	400204a0 	.word	0x400204a0
 8005334:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f023 020e 	bic.w	r2, r3, #14
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f042 020a 	orr.w	r2, r2, #10
 800534a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005350:	2b00      	cmp	r3, #0
 8005352:	d007      	beq.n	8005364 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f042 0204 	orr.w	r2, r2, #4
 8005362:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a83      	ldr	r2, [pc, #524]	; (8005578 <HAL_DMA_Start_IT+0x474>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d072      	beq.n	8005454 <HAL_DMA_Start_IT+0x350>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a82      	ldr	r2, [pc, #520]	; (800557c <HAL_DMA_Start_IT+0x478>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d06d      	beq.n	8005454 <HAL_DMA_Start_IT+0x350>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a80      	ldr	r2, [pc, #512]	; (8005580 <HAL_DMA_Start_IT+0x47c>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d068      	beq.n	8005454 <HAL_DMA_Start_IT+0x350>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a7f      	ldr	r2, [pc, #508]	; (8005584 <HAL_DMA_Start_IT+0x480>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d063      	beq.n	8005454 <HAL_DMA_Start_IT+0x350>
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a7d      	ldr	r2, [pc, #500]	; (8005588 <HAL_DMA_Start_IT+0x484>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d05e      	beq.n	8005454 <HAL_DMA_Start_IT+0x350>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a7c      	ldr	r2, [pc, #496]	; (800558c <HAL_DMA_Start_IT+0x488>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d059      	beq.n	8005454 <HAL_DMA_Start_IT+0x350>
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a7a      	ldr	r2, [pc, #488]	; (8005590 <HAL_DMA_Start_IT+0x48c>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d054      	beq.n	8005454 <HAL_DMA_Start_IT+0x350>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a79      	ldr	r2, [pc, #484]	; (8005594 <HAL_DMA_Start_IT+0x490>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d04f      	beq.n	8005454 <HAL_DMA_Start_IT+0x350>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a77      	ldr	r2, [pc, #476]	; (8005598 <HAL_DMA_Start_IT+0x494>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d04a      	beq.n	8005454 <HAL_DMA_Start_IT+0x350>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a76      	ldr	r2, [pc, #472]	; (800559c <HAL_DMA_Start_IT+0x498>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d045      	beq.n	8005454 <HAL_DMA_Start_IT+0x350>
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a74      	ldr	r2, [pc, #464]	; (80055a0 <HAL_DMA_Start_IT+0x49c>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d040      	beq.n	8005454 <HAL_DMA_Start_IT+0x350>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a73      	ldr	r2, [pc, #460]	; (80055a4 <HAL_DMA_Start_IT+0x4a0>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d03b      	beq.n	8005454 <HAL_DMA_Start_IT+0x350>
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a71      	ldr	r2, [pc, #452]	; (80055a8 <HAL_DMA_Start_IT+0x4a4>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d036      	beq.n	8005454 <HAL_DMA_Start_IT+0x350>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a70      	ldr	r2, [pc, #448]	; (80055ac <HAL_DMA_Start_IT+0x4a8>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d031      	beq.n	8005454 <HAL_DMA_Start_IT+0x350>
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a6e      	ldr	r2, [pc, #440]	; (80055b0 <HAL_DMA_Start_IT+0x4ac>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d02c      	beq.n	8005454 <HAL_DMA_Start_IT+0x350>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a6d      	ldr	r2, [pc, #436]	; (80055b4 <HAL_DMA_Start_IT+0x4b0>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d027      	beq.n	8005454 <HAL_DMA_Start_IT+0x350>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a6b      	ldr	r2, [pc, #428]	; (80055b8 <HAL_DMA_Start_IT+0x4b4>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d022      	beq.n	8005454 <HAL_DMA_Start_IT+0x350>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a6a      	ldr	r2, [pc, #424]	; (80055bc <HAL_DMA_Start_IT+0x4b8>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d01d      	beq.n	8005454 <HAL_DMA_Start_IT+0x350>
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a68      	ldr	r2, [pc, #416]	; (80055c0 <HAL_DMA_Start_IT+0x4bc>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d018      	beq.n	8005454 <HAL_DMA_Start_IT+0x350>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a67      	ldr	r2, [pc, #412]	; (80055c4 <HAL_DMA_Start_IT+0x4c0>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d013      	beq.n	8005454 <HAL_DMA_Start_IT+0x350>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a65      	ldr	r2, [pc, #404]	; (80055c8 <HAL_DMA_Start_IT+0x4c4>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d00e      	beq.n	8005454 <HAL_DMA_Start_IT+0x350>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a64      	ldr	r2, [pc, #400]	; (80055cc <HAL_DMA_Start_IT+0x4c8>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d009      	beq.n	8005454 <HAL_DMA_Start_IT+0x350>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a62      	ldr	r2, [pc, #392]	; (80055d0 <HAL_DMA_Start_IT+0x4cc>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d004      	beq.n	8005454 <HAL_DMA_Start_IT+0x350>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a61      	ldr	r2, [pc, #388]	; (80055d4 <HAL_DMA_Start_IT+0x4d0>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d101      	bne.n	8005458 <HAL_DMA_Start_IT+0x354>
 8005454:	2301      	movs	r3, #1
 8005456:	e000      	b.n	800545a <HAL_DMA_Start_IT+0x356>
 8005458:	2300      	movs	r3, #0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d01a      	beq.n	8005494 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005468:	2b00      	cmp	r3, #0
 800546a:	d007      	beq.n	800547c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005476:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800547a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005480:	2b00      	cmp	r3, #0
 8005482:	d007      	beq.n	8005494 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800548e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005492:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a37      	ldr	r2, [pc, #220]	; (8005578 <HAL_DMA_Start_IT+0x474>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d04a      	beq.n	8005534 <HAL_DMA_Start_IT+0x430>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a36      	ldr	r2, [pc, #216]	; (800557c <HAL_DMA_Start_IT+0x478>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d045      	beq.n	8005534 <HAL_DMA_Start_IT+0x430>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a34      	ldr	r2, [pc, #208]	; (8005580 <HAL_DMA_Start_IT+0x47c>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d040      	beq.n	8005534 <HAL_DMA_Start_IT+0x430>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a33      	ldr	r2, [pc, #204]	; (8005584 <HAL_DMA_Start_IT+0x480>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d03b      	beq.n	8005534 <HAL_DMA_Start_IT+0x430>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a31      	ldr	r2, [pc, #196]	; (8005588 <HAL_DMA_Start_IT+0x484>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d036      	beq.n	8005534 <HAL_DMA_Start_IT+0x430>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a30      	ldr	r2, [pc, #192]	; (800558c <HAL_DMA_Start_IT+0x488>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d031      	beq.n	8005534 <HAL_DMA_Start_IT+0x430>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a2e      	ldr	r2, [pc, #184]	; (8005590 <HAL_DMA_Start_IT+0x48c>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d02c      	beq.n	8005534 <HAL_DMA_Start_IT+0x430>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a2d      	ldr	r2, [pc, #180]	; (8005594 <HAL_DMA_Start_IT+0x490>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d027      	beq.n	8005534 <HAL_DMA_Start_IT+0x430>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a2b      	ldr	r2, [pc, #172]	; (8005598 <HAL_DMA_Start_IT+0x494>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d022      	beq.n	8005534 <HAL_DMA_Start_IT+0x430>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a2a      	ldr	r2, [pc, #168]	; (800559c <HAL_DMA_Start_IT+0x498>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d01d      	beq.n	8005534 <HAL_DMA_Start_IT+0x430>
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a28      	ldr	r2, [pc, #160]	; (80055a0 <HAL_DMA_Start_IT+0x49c>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d018      	beq.n	8005534 <HAL_DMA_Start_IT+0x430>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a27      	ldr	r2, [pc, #156]	; (80055a4 <HAL_DMA_Start_IT+0x4a0>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d013      	beq.n	8005534 <HAL_DMA_Start_IT+0x430>
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a25      	ldr	r2, [pc, #148]	; (80055a8 <HAL_DMA_Start_IT+0x4a4>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d00e      	beq.n	8005534 <HAL_DMA_Start_IT+0x430>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a24      	ldr	r2, [pc, #144]	; (80055ac <HAL_DMA_Start_IT+0x4a8>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d009      	beq.n	8005534 <HAL_DMA_Start_IT+0x430>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a22      	ldr	r2, [pc, #136]	; (80055b0 <HAL_DMA_Start_IT+0x4ac>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d004      	beq.n	8005534 <HAL_DMA_Start_IT+0x430>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a21      	ldr	r2, [pc, #132]	; (80055b4 <HAL_DMA_Start_IT+0x4b0>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d108      	bne.n	8005546 <HAL_DMA_Start_IT+0x442>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f042 0201 	orr.w	r2, r2, #1
 8005542:	601a      	str	r2, [r3, #0]
 8005544:	e012      	b.n	800556c <HAL_DMA_Start_IT+0x468>
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f042 0201 	orr.w	r2, r2, #1
 8005554:	601a      	str	r2, [r3, #0]
 8005556:	e009      	b.n	800556c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800555e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800556c:	7dfb      	ldrb	r3, [r7, #23]
}
 800556e:	4618      	mov	r0, r3
 8005570:	3718      	adds	r7, #24
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	40020010 	.word	0x40020010
 800557c:	40020028 	.word	0x40020028
 8005580:	40020040 	.word	0x40020040
 8005584:	40020058 	.word	0x40020058
 8005588:	40020070 	.word	0x40020070
 800558c:	40020088 	.word	0x40020088
 8005590:	400200a0 	.word	0x400200a0
 8005594:	400200b8 	.word	0x400200b8
 8005598:	40020410 	.word	0x40020410
 800559c:	40020428 	.word	0x40020428
 80055a0:	40020440 	.word	0x40020440
 80055a4:	40020458 	.word	0x40020458
 80055a8:	40020470 	.word	0x40020470
 80055ac:	40020488 	.word	0x40020488
 80055b0:	400204a0 	.word	0x400204a0
 80055b4:	400204b8 	.word	0x400204b8
 80055b8:	58025408 	.word	0x58025408
 80055bc:	5802541c 	.word	0x5802541c
 80055c0:	58025430 	.word	0x58025430
 80055c4:	58025444 	.word	0x58025444
 80055c8:	58025458 	.word	0x58025458
 80055cc:	5802546c 	.word	0x5802546c
 80055d0:	58025480 	.word	0x58025480
 80055d4:	58025494 	.word	0x58025494

080055d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b086      	sub	sp, #24
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80055e0:	f7ff f91a 	bl	8004818 <HAL_GetTick>
 80055e4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d101      	bne.n	80055f0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e2dc      	b.n	8005baa <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	2b02      	cmp	r3, #2
 80055fa:	d008      	beq.n	800560e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2280      	movs	r2, #128	; 0x80
 8005600:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e2cd      	b.n	8005baa <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a76      	ldr	r2, [pc, #472]	; (80057ec <HAL_DMA_Abort+0x214>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d04a      	beq.n	80056ae <HAL_DMA_Abort+0xd6>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a74      	ldr	r2, [pc, #464]	; (80057f0 <HAL_DMA_Abort+0x218>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d045      	beq.n	80056ae <HAL_DMA_Abort+0xd6>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a73      	ldr	r2, [pc, #460]	; (80057f4 <HAL_DMA_Abort+0x21c>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d040      	beq.n	80056ae <HAL_DMA_Abort+0xd6>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a71      	ldr	r2, [pc, #452]	; (80057f8 <HAL_DMA_Abort+0x220>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d03b      	beq.n	80056ae <HAL_DMA_Abort+0xd6>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a70      	ldr	r2, [pc, #448]	; (80057fc <HAL_DMA_Abort+0x224>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d036      	beq.n	80056ae <HAL_DMA_Abort+0xd6>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a6e      	ldr	r2, [pc, #440]	; (8005800 <HAL_DMA_Abort+0x228>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d031      	beq.n	80056ae <HAL_DMA_Abort+0xd6>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a6d      	ldr	r2, [pc, #436]	; (8005804 <HAL_DMA_Abort+0x22c>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d02c      	beq.n	80056ae <HAL_DMA_Abort+0xd6>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a6b      	ldr	r2, [pc, #428]	; (8005808 <HAL_DMA_Abort+0x230>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d027      	beq.n	80056ae <HAL_DMA_Abort+0xd6>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a6a      	ldr	r2, [pc, #424]	; (800580c <HAL_DMA_Abort+0x234>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d022      	beq.n	80056ae <HAL_DMA_Abort+0xd6>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a68      	ldr	r2, [pc, #416]	; (8005810 <HAL_DMA_Abort+0x238>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d01d      	beq.n	80056ae <HAL_DMA_Abort+0xd6>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a67      	ldr	r2, [pc, #412]	; (8005814 <HAL_DMA_Abort+0x23c>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d018      	beq.n	80056ae <HAL_DMA_Abort+0xd6>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a65      	ldr	r2, [pc, #404]	; (8005818 <HAL_DMA_Abort+0x240>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d013      	beq.n	80056ae <HAL_DMA_Abort+0xd6>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a64      	ldr	r2, [pc, #400]	; (800581c <HAL_DMA_Abort+0x244>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d00e      	beq.n	80056ae <HAL_DMA_Abort+0xd6>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a62      	ldr	r2, [pc, #392]	; (8005820 <HAL_DMA_Abort+0x248>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d009      	beq.n	80056ae <HAL_DMA_Abort+0xd6>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a61      	ldr	r2, [pc, #388]	; (8005824 <HAL_DMA_Abort+0x24c>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d004      	beq.n	80056ae <HAL_DMA_Abort+0xd6>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a5f      	ldr	r2, [pc, #380]	; (8005828 <HAL_DMA_Abort+0x250>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d101      	bne.n	80056b2 <HAL_DMA_Abort+0xda>
 80056ae:	2301      	movs	r3, #1
 80056b0:	e000      	b.n	80056b4 <HAL_DMA_Abort+0xdc>
 80056b2:	2300      	movs	r3, #0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d013      	beq.n	80056e0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f022 021e 	bic.w	r2, r2, #30
 80056c6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	695a      	ldr	r2, [r3, #20]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056d6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	617b      	str	r3, [r7, #20]
 80056de:	e00a      	b.n	80056f6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f022 020e 	bic.w	r2, r2, #14
 80056ee:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a3c      	ldr	r2, [pc, #240]	; (80057ec <HAL_DMA_Abort+0x214>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d072      	beq.n	80057e6 <HAL_DMA_Abort+0x20e>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a3a      	ldr	r2, [pc, #232]	; (80057f0 <HAL_DMA_Abort+0x218>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d06d      	beq.n	80057e6 <HAL_DMA_Abort+0x20e>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a39      	ldr	r2, [pc, #228]	; (80057f4 <HAL_DMA_Abort+0x21c>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d068      	beq.n	80057e6 <HAL_DMA_Abort+0x20e>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a37      	ldr	r2, [pc, #220]	; (80057f8 <HAL_DMA_Abort+0x220>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d063      	beq.n	80057e6 <HAL_DMA_Abort+0x20e>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a36      	ldr	r2, [pc, #216]	; (80057fc <HAL_DMA_Abort+0x224>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d05e      	beq.n	80057e6 <HAL_DMA_Abort+0x20e>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a34      	ldr	r2, [pc, #208]	; (8005800 <HAL_DMA_Abort+0x228>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d059      	beq.n	80057e6 <HAL_DMA_Abort+0x20e>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a33      	ldr	r2, [pc, #204]	; (8005804 <HAL_DMA_Abort+0x22c>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d054      	beq.n	80057e6 <HAL_DMA_Abort+0x20e>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a31      	ldr	r2, [pc, #196]	; (8005808 <HAL_DMA_Abort+0x230>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d04f      	beq.n	80057e6 <HAL_DMA_Abort+0x20e>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a30      	ldr	r2, [pc, #192]	; (800580c <HAL_DMA_Abort+0x234>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d04a      	beq.n	80057e6 <HAL_DMA_Abort+0x20e>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a2e      	ldr	r2, [pc, #184]	; (8005810 <HAL_DMA_Abort+0x238>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d045      	beq.n	80057e6 <HAL_DMA_Abort+0x20e>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a2d      	ldr	r2, [pc, #180]	; (8005814 <HAL_DMA_Abort+0x23c>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d040      	beq.n	80057e6 <HAL_DMA_Abort+0x20e>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a2b      	ldr	r2, [pc, #172]	; (8005818 <HAL_DMA_Abort+0x240>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d03b      	beq.n	80057e6 <HAL_DMA_Abort+0x20e>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a2a      	ldr	r2, [pc, #168]	; (800581c <HAL_DMA_Abort+0x244>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d036      	beq.n	80057e6 <HAL_DMA_Abort+0x20e>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a28      	ldr	r2, [pc, #160]	; (8005820 <HAL_DMA_Abort+0x248>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d031      	beq.n	80057e6 <HAL_DMA_Abort+0x20e>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a27      	ldr	r2, [pc, #156]	; (8005824 <HAL_DMA_Abort+0x24c>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d02c      	beq.n	80057e6 <HAL_DMA_Abort+0x20e>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a25      	ldr	r2, [pc, #148]	; (8005828 <HAL_DMA_Abort+0x250>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d027      	beq.n	80057e6 <HAL_DMA_Abort+0x20e>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a24      	ldr	r2, [pc, #144]	; (800582c <HAL_DMA_Abort+0x254>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d022      	beq.n	80057e6 <HAL_DMA_Abort+0x20e>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a22      	ldr	r2, [pc, #136]	; (8005830 <HAL_DMA_Abort+0x258>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d01d      	beq.n	80057e6 <HAL_DMA_Abort+0x20e>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a21      	ldr	r2, [pc, #132]	; (8005834 <HAL_DMA_Abort+0x25c>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d018      	beq.n	80057e6 <HAL_DMA_Abort+0x20e>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a1f      	ldr	r2, [pc, #124]	; (8005838 <HAL_DMA_Abort+0x260>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d013      	beq.n	80057e6 <HAL_DMA_Abort+0x20e>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a1e      	ldr	r2, [pc, #120]	; (800583c <HAL_DMA_Abort+0x264>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d00e      	beq.n	80057e6 <HAL_DMA_Abort+0x20e>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a1c      	ldr	r2, [pc, #112]	; (8005840 <HAL_DMA_Abort+0x268>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d009      	beq.n	80057e6 <HAL_DMA_Abort+0x20e>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a1b      	ldr	r2, [pc, #108]	; (8005844 <HAL_DMA_Abort+0x26c>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d004      	beq.n	80057e6 <HAL_DMA_Abort+0x20e>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a19      	ldr	r2, [pc, #100]	; (8005848 <HAL_DMA_Abort+0x270>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d132      	bne.n	800584c <HAL_DMA_Abort+0x274>
 80057e6:	2301      	movs	r3, #1
 80057e8:	e031      	b.n	800584e <HAL_DMA_Abort+0x276>
 80057ea:	bf00      	nop
 80057ec:	40020010 	.word	0x40020010
 80057f0:	40020028 	.word	0x40020028
 80057f4:	40020040 	.word	0x40020040
 80057f8:	40020058 	.word	0x40020058
 80057fc:	40020070 	.word	0x40020070
 8005800:	40020088 	.word	0x40020088
 8005804:	400200a0 	.word	0x400200a0
 8005808:	400200b8 	.word	0x400200b8
 800580c:	40020410 	.word	0x40020410
 8005810:	40020428 	.word	0x40020428
 8005814:	40020440 	.word	0x40020440
 8005818:	40020458 	.word	0x40020458
 800581c:	40020470 	.word	0x40020470
 8005820:	40020488 	.word	0x40020488
 8005824:	400204a0 	.word	0x400204a0
 8005828:	400204b8 	.word	0x400204b8
 800582c:	58025408 	.word	0x58025408
 8005830:	5802541c 	.word	0x5802541c
 8005834:	58025430 	.word	0x58025430
 8005838:	58025444 	.word	0x58025444
 800583c:	58025458 	.word	0x58025458
 8005840:	5802546c 	.word	0x5802546c
 8005844:	58025480 	.word	0x58025480
 8005848:	58025494 	.word	0x58025494
 800584c:	2300      	movs	r3, #0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d007      	beq.n	8005862 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800585c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005860:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a6d      	ldr	r2, [pc, #436]	; (8005a1c <HAL_DMA_Abort+0x444>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d04a      	beq.n	8005902 <HAL_DMA_Abort+0x32a>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a6b      	ldr	r2, [pc, #428]	; (8005a20 <HAL_DMA_Abort+0x448>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d045      	beq.n	8005902 <HAL_DMA_Abort+0x32a>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a6a      	ldr	r2, [pc, #424]	; (8005a24 <HAL_DMA_Abort+0x44c>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d040      	beq.n	8005902 <HAL_DMA_Abort+0x32a>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a68      	ldr	r2, [pc, #416]	; (8005a28 <HAL_DMA_Abort+0x450>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d03b      	beq.n	8005902 <HAL_DMA_Abort+0x32a>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a67      	ldr	r2, [pc, #412]	; (8005a2c <HAL_DMA_Abort+0x454>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d036      	beq.n	8005902 <HAL_DMA_Abort+0x32a>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a65      	ldr	r2, [pc, #404]	; (8005a30 <HAL_DMA_Abort+0x458>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d031      	beq.n	8005902 <HAL_DMA_Abort+0x32a>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a64      	ldr	r2, [pc, #400]	; (8005a34 <HAL_DMA_Abort+0x45c>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d02c      	beq.n	8005902 <HAL_DMA_Abort+0x32a>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a62      	ldr	r2, [pc, #392]	; (8005a38 <HAL_DMA_Abort+0x460>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d027      	beq.n	8005902 <HAL_DMA_Abort+0x32a>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a61      	ldr	r2, [pc, #388]	; (8005a3c <HAL_DMA_Abort+0x464>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d022      	beq.n	8005902 <HAL_DMA_Abort+0x32a>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a5f      	ldr	r2, [pc, #380]	; (8005a40 <HAL_DMA_Abort+0x468>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d01d      	beq.n	8005902 <HAL_DMA_Abort+0x32a>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a5e      	ldr	r2, [pc, #376]	; (8005a44 <HAL_DMA_Abort+0x46c>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d018      	beq.n	8005902 <HAL_DMA_Abort+0x32a>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a5c      	ldr	r2, [pc, #368]	; (8005a48 <HAL_DMA_Abort+0x470>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d013      	beq.n	8005902 <HAL_DMA_Abort+0x32a>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a5b      	ldr	r2, [pc, #364]	; (8005a4c <HAL_DMA_Abort+0x474>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d00e      	beq.n	8005902 <HAL_DMA_Abort+0x32a>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a59      	ldr	r2, [pc, #356]	; (8005a50 <HAL_DMA_Abort+0x478>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d009      	beq.n	8005902 <HAL_DMA_Abort+0x32a>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a58      	ldr	r2, [pc, #352]	; (8005a54 <HAL_DMA_Abort+0x47c>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d004      	beq.n	8005902 <HAL_DMA_Abort+0x32a>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a56      	ldr	r2, [pc, #344]	; (8005a58 <HAL_DMA_Abort+0x480>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d108      	bne.n	8005914 <HAL_DMA_Abort+0x33c>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f022 0201 	bic.w	r2, r2, #1
 8005910:	601a      	str	r2, [r3, #0]
 8005912:	e007      	b.n	8005924 <HAL_DMA_Abort+0x34c>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f022 0201 	bic.w	r2, r2, #1
 8005922:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005924:	e013      	b.n	800594e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005926:	f7fe ff77 	bl	8004818 <HAL_GetTick>
 800592a:	4602      	mov	r2, r0
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	1ad3      	subs	r3, r2, r3
 8005930:	2b05      	cmp	r3, #5
 8005932:	d90c      	bls.n	800594e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2220      	movs	r2, #32
 8005938:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2203      	movs	r2, #3
 800593e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e12d      	b.n	8005baa <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 0301 	and.w	r3, r3, #1
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1e5      	bne.n	8005926 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a2f      	ldr	r2, [pc, #188]	; (8005a1c <HAL_DMA_Abort+0x444>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d04a      	beq.n	80059fa <HAL_DMA_Abort+0x422>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a2d      	ldr	r2, [pc, #180]	; (8005a20 <HAL_DMA_Abort+0x448>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d045      	beq.n	80059fa <HAL_DMA_Abort+0x422>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a2c      	ldr	r2, [pc, #176]	; (8005a24 <HAL_DMA_Abort+0x44c>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d040      	beq.n	80059fa <HAL_DMA_Abort+0x422>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a2a      	ldr	r2, [pc, #168]	; (8005a28 <HAL_DMA_Abort+0x450>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d03b      	beq.n	80059fa <HAL_DMA_Abort+0x422>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a29      	ldr	r2, [pc, #164]	; (8005a2c <HAL_DMA_Abort+0x454>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d036      	beq.n	80059fa <HAL_DMA_Abort+0x422>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a27      	ldr	r2, [pc, #156]	; (8005a30 <HAL_DMA_Abort+0x458>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d031      	beq.n	80059fa <HAL_DMA_Abort+0x422>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a26      	ldr	r2, [pc, #152]	; (8005a34 <HAL_DMA_Abort+0x45c>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d02c      	beq.n	80059fa <HAL_DMA_Abort+0x422>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a24      	ldr	r2, [pc, #144]	; (8005a38 <HAL_DMA_Abort+0x460>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d027      	beq.n	80059fa <HAL_DMA_Abort+0x422>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a23      	ldr	r2, [pc, #140]	; (8005a3c <HAL_DMA_Abort+0x464>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d022      	beq.n	80059fa <HAL_DMA_Abort+0x422>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a21      	ldr	r2, [pc, #132]	; (8005a40 <HAL_DMA_Abort+0x468>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d01d      	beq.n	80059fa <HAL_DMA_Abort+0x422>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a20      	ldr	r2, [pc, #128]	; (8005a44 <HAL_DMA_Abort+0x46c>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d018      	beq.n	80059fa <HAL_DMA_Abort+0x422>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a1e      	ldr	r2, [pc, #120]	; (8005a48 <HAL_DMA_Abort+0x470>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d013      	beq.n	80059fa <HAL_DMA_Abort+0x422>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a1d      	ldr	r2, [pc, #116]	; (8005a4c <HAL_DMA_Abort+0x474>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d00e      	beq.n	80059fa <HAL_DMA_Abort+0x422>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a1b      	ldr	r2, [pc, #108]	; (8005a50 <HAL_DMA_Abort+0x478>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d009      	beq.n	80059fa <HAL_DMA_Abort+0x422>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a1a      	ldr	r2, [pc, #104]	; (8005a54 <HAL_DMA_Abort+0x47c>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d004      	beq.n	80059fa <HAL_DMA_Abort+0x422>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a18      	ldr	r2, [pc, #96]	; (8005a58 <HAL_DMA_Abort+0x480>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d101      	bne.n	80059fe <HAL_DMA_Abort+0x426>
 80059fa:	2301      	movs	r3, #1
 80059fc:	e000      	b.n	8005a00 <HAL_DMA_Abort+0x428>
 80059fe:	2300      	movs	r3, #0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d02b      	beq.n	8005a5c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a08:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a0e:	f003 031f 	and.w	r3, r3, #31
 8005a12:	223f      	movs	r2, #63	; 0x3f
 8005a14:	409a      	lsls	r2, r3
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	609a      	str	r2, [r3, #8]
 8005a1a:	e02a      	b.n	8005a72 <HAL_DMA_Abort+0x49a>
 8005a1c:	40020010 	.word	0x40020010
 8005a20:	40020028 	.word	0x40020028
 8005a24:	40020040 	.word	0x40020040
 8005a28:	40020058 	.word	0x40020058
 8005a2c:	40020070 	.word	0x40020070
 8005a30:	40020088 	.word	0x40020088
 8005a34:	400200a0 	.word	0x400200a0
 8005a38:	400200b8 	.word	0x400200b8
 8005a3c:	40020410 	.word	0x40020410
 8005a40:	40020428 	.word	0x40020428
 8005a44:	40020440 	.word	0x40020440
 8005a48:	40020458 	.word	0x40020458
 8005a4c:	40020470 	.word	0x40020470
 8005a50:	40020488 	.word	0x40020488
 8005a54:	400204a0 	.word	0x400204a0
 8005a58:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a60:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a66:	f003 031f 	and.w	r3, r3, #31
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	409a      	lsls	r2, r3
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a4f      	ldr	r2, [pc, #316]	; (8005bb4 <HAL_DMA_Abort+0x5dc>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d072      	beq.n	8005b62 <HAL_DMA_Abort+0x58a>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a4d      	ldr	r2, [pc, #308]	; (8005bb8 <HAL_DMA_Abort+0x5e0>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d06d      	beq.n	8005b62 <HAL_DMA_Abort+0x58a>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a4c      	ldr	r2, [pc, #304]	; (8005bbc <HAL_DMA_Abort+0x5e4>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d068      	beq.n	8005b62 <HAL_DMA_Abort+0x58a>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a4a      	ldr	r2, [pc, #296]	; (8005bc0 <HAL_DMA_Abort+0x5e8>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d063      	beq.n	8005b62 <HAL_DMA_Abort+0x58a>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a49      	ldr	r2, [pc, #292]	; (8005bc4 <HAL_DMA_Abort+0x5ec>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d05e      	beq.n	8005b62 <HAL_DMA_Abort+0x58a>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a47      	ldr	r2, [pc, #284]	; (8005bc8 <HAL_DMA_Abort+0x5f0>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d059      	beq.n	8005b62 <HAL_DMA_Abort+0x58a>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a46      	ldr	r2, [pc, #280]	; (8005bcc <HAL_DMA_Abort+0x5f4>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d054      	beq.n	8005b62 <HAL_DMA_Abort+0x58a>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a44      	ldr	r2, [pc, #272]	; (8005bd0 <HAL_DMA_Abort+0x5f8>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d04f      	beq.n	8005b62 <HAL_DMA_Abort+0x58a>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a43      	ldr	r2, [pc, #268]	; (8005bd4 <HAL_DMA_Abort+0x5fc>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d04a      	beq.n	8005b62 <HAL_DMA_Abort+0x58a>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a41      	ldr	r2, [pc, #260]	; (8005bd8 <HAL_DMA_Abort+0x600>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d045      	beq.n	8005b62 <HAL_DMA_Abort+0x58a>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a40      	ldr	r2, [pc, #256]	; (8005bdc <HAL_DMA_Abort+0x604>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d040      	beq.n	8005b62 <HAL_DMA_Abort+0x58a>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a3e      	ldr	r2, [pc, #248]	; (8005be0 <HAL_DMA_Abort+0x608>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d03b      	beq.n	8005b62 <HAL_DMA_Abort+0x58a>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a3d      	ldr	r2, [pc, #244]	; (8005be4 <HAL_DMA_Abort+0x60c>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d036      	beq.n	8005b62 <HAL_DMA_Abort+0x58a>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a3b      	ldr	r2, [pc, #236]	; (8005be8 <HAL_DMA_Abort+0x610>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d031      	beq.n	8005b62 <HAL_DMA_Abort+0x58a>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a3a      	ldr	r2, [pc, #232]	; (8005bec <HAL_DMA_Abort+0x614>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d02c      	beq.n	8005b62 <HAL_DMA_Abort+0x58a>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a38      	ldr	r2, [pc, #224]	; (8005bf0 <HAL_DMA_Abort+0x618>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d027      	beq.n	8005b62 <HAL_DMA_Abort+0x58a>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a37      	ldr	r2, [pc, #220]	; (8005bf4 <HAL_DMA_Abort+0x61c>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d022      	beq.n	8005b62 <HAL_DMA_Abort+0x58a>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a35      	ldr	r2, [pc, #212]	; (8005bf8 <HAL_DMA_Abort+0x620>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d01d      	beq.n	8005b62 <HAL_DMA_Abort+0x58a>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a34      	ldr	r2, [pc, #208]	; (8005bfc <HAL_DMA_Abort+0x624>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d018      	beq.n	8005b62 <HAL_DMA_Abort+0x58a>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a32      	ldr	r2, [pc, #200]	; (8005c00 <HAL_DMA_Abort+0x628>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d013      	beq.n	8005b62 <HAL_DMA_Abort+0x58a>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a31      	ldr	r2, [pc, #196]	; (8005c04 <HAL_DMA_Abort+0x62c>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d00e      	beq.n	8005b62 <HAL_DMA_Abort+0x58a>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a2f      	ldr	r2, [pc, #188]	; (8005c08 <HAL_DMA_Abort+0x630>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d009      	beq.n	8005b62 <HAL_DMA_Abort+0x58a>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a2e      	ldr	r2, [pc, #184]	; (8005c0c <HAL_DMA_Abort+0x634>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d004      	beq.n	8005b62 <HAL_DMA_Abort+0x58a>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a2c      	ldr	r2, [pc, #176]	; (8005c10 <HAL_DMA_Abort+0x638>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d101      	bne.n	8005b66 <HAL_DMA_Abort+0x58e>
 8005b62:	2301      	movs	r3, #1
 8005b64:	e000      	b.n	8005b68 <HAL_DMA_Abort+0x590>
 8005b66:	2300      	movs	r3, #0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d015      	beq.n	8005b98 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005b74:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00c      	beq.n	8005b98 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b8c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005b96:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3718      	adds	r7, #24
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	40020010 	.word	0x40020010
 8005bb8:	40020028 	.word	0x40020028
 8005bbc:	40020040 	.word	0x40020040
 8005bc0:	40020058 	.word	0x40020058
 8005bc4:	40020070 	.word	0x40020070
 8005bc8:	40020088 	.word	0x40020088
 8005bcc:	400200a0 	.word	0x400200a0
 8005bd0:	400200b8 	.word	0x400200b8
 8005bd4:	40020410 	.word	0x40020410
 8005bd8:	40020428 	.word	0x40020428
 8005bdc:	40020440 	.word	0x40020440
 8005be0:	40020458 	.word	0x40020458
 8005be4:	40020470 	.word	0x40020470
 8005be8:	40020488 	.word	0x40020488
 8005bec:	400204a0 	.word	0x400204a0
 8005bf0:	400204b8 	.word	0x400204b8
 8005bf4:	58025408 	.word	0x58025408
 8005bf8:	5802541c 	.word	0x5802541c
 8005bfc:	58025430 	.word	0x58025430
 8005c00:	58025444 	.word	0x58025444
 8005c04:	58025458 	.word	0x58025458
 8005c08:	5802546c 	.word	0x5802546c
 8005c0c:	58025480 	.word	0x58025480
 8005c10:	58025494 	.word	0x58025494

08005c14 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d101      	bne.n	8005c26 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e237      	b.n	8006096 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d004      	beq.n	8005c3c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2280      	movs	r2, #128	; 0x80
 8005c36:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e22c      	b.n	8006096 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a5c      	ldr	r2, [pc, #368]	; (8005db4 <HAL_DMA_Abort_IT+0x1a0>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d04a      	beq.n	8005cdc <HAL_DMA_Abort_IT+0xc8>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a5b      	ldr	r2, [pc, #364]	; (8005db8 <HAL_DMA_Abort_IT+0x1a4>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d045      	beq.n	8005cdc <HAL_DMA_Abort_IT+0xc8>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a59      	ldr	r2, [pc, #356]	; (8005dbc <HAL_DMA_Abort_IT+0x1a8>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d040      	beq.n	8005cdc <HAL_DMA_Abort_IT+0xc8>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a58      	ldr	r2, [pc, #352]	; (8005dc0 <HAL_DMA_Abort_IT+0x1ac>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d03b      	beq.n	8005cdc <HAL_DMA_Abort_IT+0xc8>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a56      	ldr	r2, [pc, #344]	; (8005dc4 <HAL_DMA_Abort_IT+0x1b0>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d036      	beq.n	8005cdc <HAL_DMA_Abort_IT+0xc8>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a55      	ldr	r2, [pc, #340]	; (8005dc8 <HAL_DMA_Abort_IT+0x1b4>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d031      	beq.n	8005cdc <HAL_DMA_Abort_IT+0xc8>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a53      	ldr	r2, [pc, #332]	; (8005dcc <HAL_DMA_Abort_IT+0x1b8>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d02c      	beq.n	8005cdc <HAL_DMA_Abort_IT+0xc8>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a52      	ldr	r2, [pc, #328]	; (8005dd0 <HAL_DMA_Abort_IT+0x1bc>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d027      	beq.n	8005cdc <HAL_DMA_Abort_IT+0xc8>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a50      	ldr	r2, [pc, #320]	; (8005dd4 <HAL_DMA_Abort_IT+0x1c0>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d022      	beq.n	8005cdc <HAL_DMA_Abort_IT+0xc8>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a4f      	ldr	r2, [pc, #316]	; (8005dd8 <HAL_DMA_Abort_IT+0x1c4>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d01d      	beq.n	8005cdc <HAL_DMA_Abort_IT+0xc8>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a4d      	ldr	r2, [pc, #308]	; (8005ddc <HAL_DMA_Abort_IT+0x1c8>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d018      	beq.n	8005cdc <HAL_DMA_Abort_IT+0xc8>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a4c      	ldr	r2, [pc, #304]	; (8005de0 <HAL_DMA_Abort_IT+0x1cc>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d013      	beq.n	8005cdc <HAL_DMA_Abort_IT+0xc8>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a4a      	ldr	r2, [pc, #296]	; (8005de4 <HAL_DMA_Abort_IT+0x1d0>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d00e      	beq.n	8005cdc <HAL_DMA_Abort_IT+0xc8>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a49      	ldr	r2, [pc, #292]	; (8005de8 <HAL_DMA_Abort_IT+0x1d4>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d009      	beq.n	8005cdc <HAL_DMA_Abort_IT+0xc8>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a47      	ldr	r2, [pc, #284]	; (8005dec <HAL_DMA_Abort_IT+0x1d8>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d004      	beq.n	8005cdc <HAL_DMA_Abort_IT+0xc8>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a46      	ldr	r2, [pc, #280]	; (8005df0 <HAL_DMA_Abort_IT+0x1dc>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d101      	bne.n	8005ce0 <HAL_DMA_Abort_IT+0xcc>
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e000      	b.n	8005ce2 <HAL_DMA_Abort_IT+0xce>
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	f000 8086 	beq.w	8005df4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2204      	movs	r2, #4
 8005cec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a2f      	ldr	r2, [pc, #188]	; (8005db4 <HAL_DMA_Abort_IT+0x1a0>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d04a      	beq.n	8005d90 <HAL_DMA_Abort_IT+0x17c>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a2e      	ldr	r2, [pc, #184]	; (8005db8 <HAL_DMA_Abort_IT+0x1a4>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d045      	beq.n	8005d90 <HAL_DMA_Abort_IT+0x17c>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a2c      	ldr	r2, [pc, #176]	; (8005dbc <HAL_DMA_Abort_IT+0x1a8>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d040      	beq.n	8005d90 <HAL_DMA_Abort_IT+0x17c>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a2b      	ldr	r2, [pc, #172]	; (8005dc0 <HAL_DMA_Abort_IT+0x1ac>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d03b      	beq.n	8005d90 <HAL_DMA_Abort_IT+0x17c>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a29      	ldr	r2, [pc, #164]	; (8005dc4 <HAL_DMA_Abort_IT+0x1b0>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d036      	beq.n	8005d90 <HAL_DMA_Abort_IT+0x17c>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a28      	ldr	r2, [pc, #160]	; (8005dc8 <HAL_DMA_Abort_IT+0x1b4>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d031      	beq.n	8005d90 <HAL_DMA_Abort_IT+0x17c>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a26      	ldr	r2, [pc, #152]	; (8005dcc <HAL_DMA_Abort_IT+0x1b8>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d02c      	beq.n	8005d90 <HAL_DMA_Abort_IT+0x17c>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a25      	ldr	r2, [pc, #148]	; (8005dd0 <HAL_DMA_Abort_IT+0x1bc>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d027      	beq.n	8005d90 <HAL_DMA_Abort_IT+0x17c>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a23      	ldr	r2, [pc, #140]	; (8005dd4 <HAL_DMA_Abort_IT+0x1c0>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d022      	beq.n	8005d90 <HAL_DMA_Abort_IT+0x17c>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a22      	ldr	r2, [pc, #136]	; (8005dd8 <HAL_DMA_Abort_IT+0x1c4>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d01d      	beq.n	8005d90 <HAL_DMA_Abort_IT+0x17c>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a20      	ldr	r2, [pc, #128]	; (8005ddc <HAL_DMA_Abort_IT+0x1c8>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d018      	beq.n	8005d90 <HAL_DMA_Abort_IT+0x17c>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a1f      	ldr	r2, [pc, #124]	; (8005de0 <HAL_DMA_Abort_IT+0x1cc>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d013      	beq.n	8005d90 <HAL_DMA_Abort_IT+0x17c>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a1d      	ldr	r2, [pc, #116]	; (8005de4 <HAL_DMA_Abort_IT+0x1d0>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d00e      	beq.n	8005d90 <HAL_DMA_Abort_IT+0x17c>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a1c      	ldr	r2, [pc, #112]	; (8005de8 <HAL_DMA_Abort_IT+0x1d4>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d009      	beq.n	8005d90 <HAL_DMA_Abort_IT+0x17c>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a1a      	ldr	r2, [pc, #104]	; (8005dec <HAL_DMA_Abort_IT+0x1d8>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d004      	beq.n	8005d90 <HAL_DMA_Abort_IT+0x17c>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a19      	ldr	r2, [pc, #100]	; (8005df0 <HAL_DMA_Abort_IT+0x1dc>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d108      	bne.n	8005da2 <HAL_DMA_Abort_IT+0x18e>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f022 0201 	bic.w	r2, r2, #1
 8005d9e:	601a      	str	r2, [r3, #0]
 8005da0:	e178      	b.n	8006094 <HAL_DMA_Abort_IT+0x480>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f022 0201 	bic.w	r2, r2, #1
 8005db0:	601a      	str	r2, [r3, #0]
 8005db2:	e16f      	b.n	8006094 <HAL_DMA_Abort_IT+0x480>
 8005db4:	40020010 	.word	0x40020010
 8005db8:	40020028 	.word	0x40020028
 8005dbc:	40020040 	.word	0x40020040
 8005dc0:	40020058 	.word	0x40020058
 8005dc4:	40020070 	.word	0x40020070
 8005dc8:	40020088 	.word	0x40020088
 8005dcc:	400200a0 	.word	0x400200a0
 8005dd0:	400200b8 	.word	0x400200b8
 8005dd4:	40020410 	.word	0x40020410
 8005dd8:	40020428 	.word	0x40020428
 8005ddc:	40020440 	.word	0x40020440
 8005de0:	40020458 	.word	0x40020458
 8005de4:	40020470 	.word	0x40020470
 8005de8:	40020488 	.word	0x40020488
 8005dec:	400204a0 	.word	0x400204a0
 8005df0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f022 020e 	bic.w	r2, r2, #14
 8005e02:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a6c      	ldr	r2, [pc, #432]	; (8005fbc <HAL_DMA_Abort_IT+0x3a8>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d04a      	beq.n	8005ea4 <HAL_DMA_Abort_IT+0x290>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a6b      	ldr	r2, [pc, #428]	; (8005fc0 <HAL_DMA_Abort_IT+0x3ac>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d045      	beq.n	8005ea4 <HAL_DMA_Abort_IT+0x290>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a69      	ldr	r2, [pc, #420]	; (8005fc4 <HAL_DMA_Abort_IT+0x3b0>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d040      	beq.n	8005ea4 <HAL_DMA_Abort_IT+0x290>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a68      	ldr	r2, [pc, #416]	; (8005fc8 <HAL_DMA_Abort_IT+0x3b4>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d03b      	beq.n	8005ea4 <HAL_DMA_Abort_IT+0x290>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a66      	ldr	r2, [pc, #408]	; (8005fcc <HAL_DMA_Abort_IT+0x3b8>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d036      	beq.n	8005ea4 <HAL_DMA_Abort_IT+0x290>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a65      	ldr	r2, [pc, #404]	; (8005fd0 <HAL_DMA_Abort_IT+0x3bc>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d031      	beq.n	8005ea4 <HAL_DMA_Abort_IT+0x290>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a63      	ldr	r2, [pc, #396]	; (8005fd4 <HAL_DMA_Abort_IT+0x3c0>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d02c      	beq.n	8005ea4 <HAL_DMA_Abort_IT+0x290>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a62      	ldr	r2, [pc, #392]	; (8005fd8 <HAL_DMA_Abort_IT+0x3c4>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d027      	beq.n	8005ea4 <HAL_DMA_Abort_IT+0x290>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a60      	ldr	r2, [pc, #384]	; (8005fdc <HAL_DMA_Abort_IT+0x3c8>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d022      	beq.n	8005ea4 <HAL_DMA_Abort_IT+0x290>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a5f      	ldr	r2, [pc, #380]	; (8005fe0 <HAL_DMA_Abort_IT+0x3cc>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d01d      	beq.n	8005ea4 <HAL_DMA_Abort_IT+0x290>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a5d      	ldr	r2, [pc, #372]	; (8005fe4 <HAL_DMA_Abort_IT+0x3d0>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d018      	beq.n	8005ea4 <HAL_DMA_Abort_IT+0x290>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a5c      	ldr	r2, [pc, #368]	; (8005fe8 <HAL_DMA_Abort_IT+0x3d4>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d013      	beq.n	8005ea4 <HAL_DMA_Abort_IT+0x290>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a5a      	ldr	r2, [pc, #360]	; (8005fec <HAL_DMA_Abort_IT+0x3d8>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d00e      	beq.n	8005ea4 <HAL_DMA_Abort_IT+0x290>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a59      	ldr	r2, [pc, #356]	; (8005ff0 <HAL_DMA_Abort_IT+0x3dc>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d009      	beq.n	8005ea4 <HAL_DMA_Abort_IT+0x290>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a57      	ldr	r2, [pc, #348]	; (8005ff4 <HAL_DMA_Abort_IT+0x3e0>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d004      	beq.n	8005ea4 <HAL_DMA_Abort_IT+0x290>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a56      	ldr	r2, [pc, #344]	; (8005ff8 <HAL_DMA_Abort_IT+0x3e4>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d108      	bne.n	8005eb6 <HAL_DMA_Abort_IT+0x2a2>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f022 0201 	bic.w	r2, r2, #1
 8005eb2:	601a      	str	r2, [r3, #0]
 8005eb4:	e007      	b.n	8005ec6 <HAL_DMA_Abort_IT+0x2b2>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f022 0201 	bic.w	r2, r2, #1
 8005ec4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a3c      	ldr	r2, [pc, #240]	; (8005fbc <HAL_DMA_Abort_IT+0x3a8>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d072      	beq.n	8005fb6 <HAL_DMA_Abort_IT+0x3a2>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a3a      	ldr	r2, [pc, #232]	; (8005fc0 <HAL_DMA_Abort_IT+0x3ac>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d06d      	beq.n	8005fb6 <HAL_DMA_Abort_IT+0x3a2>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a39      	ldr	r2, [pc, #228]	; (8005fc4 <HAL_DMA_Abort_IT+0x3b0>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d068      	beq.n	8005fb6 <HAL_DMA_Abort_IT+0x3a2>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a37      	ldr	r2, [pc, #220]	; (8005fc8 <HAL_DMA_Abort_IT+0x3b4>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d063      	beq.n	8005fb6 <HAL_DMA_Abort_IT+0x3a2>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a36      	ldr	r2, [pc, #216]	; (8005fcc <HAL_DMA_Abort_IT+0x3b8>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d05e      	beq.n	8005fb6 <HAL_DMA_Abort_IT+0x3a2>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a34      	ldr	r2, [pc, #208]	; (8005fd0 <HAL_DMA_Abort_IT+0x3bc>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d059      	beq.n	8005fb6 <HAL_DMA_Abort_IT+0x3a2>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a33      	ldr	r2, [pc, #204]	; (8005fd4 <HAL_DMA_Abort_IT+0x3c0>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d054      	beq.n	8005fb6 <HAL_DMA_Abort_IT+0x3a2>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a31      	ldr	r2, [pc, #196]	; (8005fd8 <HAL_DMA_Abort_IT+0x3c4>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d04f      	beq.n	8005fb6 <HAL_DMA_Abort_IT+0x3a2>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a30      	ldr	r2, [pc, #192]	; (8005fdc <HAL_DMA_Abort_IT+0x3c8>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d04a      	beq.n	8005fb6 <HAL_DMA_Abort_IT+0x3a2>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a2e      	ldr	r2, [pc, #184]	; (8005fe0 <HAL_DMA_Abort_IT+0x3cc>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d045      	beq.n	8005fb6 <HAL_DMA_Abort_IT+0x3a2>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a2d      	ldr	r2, [pc, #180]	; (8005fe4 <HAL_DMA_Abort_IT+0x3d0>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d040      	beq.n	8005fb6 <HAL_DMA_Abort_IT+0x3a2>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a2b      	ldr	r2, [pc, #172]	; (8005fe8 <HAL_DMA_Abort_IT+0x3d4>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d03b      	beq.n	8005fb6 <HAL_DMA_Abort_IT+0x3a2>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a2a      	ldr	r2, [pc, #168]	; (8005fec <HAL_DMA_Abort_IT+0x3d8>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d036      	beq.n	8005fb6 <HAL_DMA_Abort_IT+0x3a2>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a28      	ldr	r2, [pc, #160]	; (8005ff0 <HAL_DMA_Abort_IT+0x3dc>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d031      	beq.n	8005fb6 <HAL_DMA_Abort_IT+0x3a2>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a27      	ldr	r2, [pc, #156]	; (8005ff4 <HAL_DMA_Abort_IT+0x3e0>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d02c      	beq.n	8005fb6 <HAL_DMA_Abort_IT+0x3a2>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a25      	ldr	r2, [pc, #148]	; (8005ff8 <HAL_DMA_Abort_IT+0x3e4>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d027      	beq.n	8005fb6 <HAL_DMA_Abort_IT+0x3a2>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a24      	ldr	r2, [pc, #144]	; (8005ffc <HAL_DMA_Abort_IT+0x3e8>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d022      	beq.n	8005fb6 <HAL_DMA_Abort_IT+0x3a2>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a22      	ldr	r2, [pc, #136]	; (8006000 <HAL_DMA_Abort_IT+0x3ec>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d01d      	beq.n	8005fb6 <HAL_DMA_Abort_IT+0x3a2>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a21      	ldr	r2, [pc, #132]	; (8006004 <HAL_DMA_Abort_IT+0x3f0>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d018      	beq.n	8005fb6 <HAL_DMA_Abort_IT+0x3a2>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a1f      	ldr	r2, [pc, #124]	; (8006008 <HAL_DMA_Abort_IT+0x3f4>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d013      	beq.n	8005fb6 <HAL_DMA_Abort_IT+0x3a2>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a1e      	ldr	r2, [pc, #120]	; (800600c <HAL_DMA_Abort_IT+0x3f8>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d00e      	beq.n	8005fb6 <HAL_DMA_Abort_IT+0x3a2>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a1c      	ldr	r2, [pc, #112]	; (8006010 <HAL_DMA_Abort_IT+0x3fc>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d009      	beq.n	8005fb6 <HAL_DMA_Abort_IT+0x3a2>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a1b      	ldr	r2, [pc, #108]	; (8006014 <HAL_DMA_Abort_IT+0x400>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d004      	beq.n	8005fb6 <HAL_DMA_Abort_IT+0x3a2>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a19      	ldr	r2, [pc, #100]	; (8006018 <HAL_DMA_Abort_IT+0x404>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d132      	bne.n	800601c <HAL_DMA_Abort_IT+0x408>
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e031      	b.n	800601e <HAL_DMA_Abort_IT+0x40a>
 8005fba:	bf00      	nop
 8005fbc:	40020010 	.word	0x40020010
 8005fc0:	40020028 	.word	0x40020028
 8005fc4:	40020040 	.word	0x40020040
 8005fc8:	40020058 	.word	0x40020058
 8005fcc:	40020070 	.word	0x40020070
 8005fd0:	40020088 	.word	0x40020088
 8005fd4:	400200a0 	.word	0x400200a0
 8005fd8:	400200b8 	.word	0x400200b8
 8005fdc:	40020410 	.word	0x40020410
 8005fe0:	40020428 	.word	0x40020428
 8005fe4:	40020440 	.word	0x40020440
 8005fe8:	40020458 	.word	0x40020458
 8005fec:	40020470 	.word	0x40020470
 8005ff0:	40020488 	.word	0x40020488
 8005ff4:	400204a0 	.word	0x400204a0
 8005ff8:	400204b8 	.word	0x400204b8
 8005ffc:	58025408 	.word	0x58025408
 8006000:	5802541c 	.word	0x5802541c
 8006004:	58025430 	.word	0x58025430
 8006008:	58025444 	.word	0x58025444
 800600c:	58025458 	.word	0x58025458
 8006010:	5802546c 	.word	0x5802546c
 8006014:	58025480 	.word	0x58025480
 8006018:	58025494 	.word	0x58025494
 800601c:	2300      	movs	r3, #0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d028      	beq.n	8006074 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800602c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006030:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006036:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800603c:	f003 031f 	and.w	r3, r3, #31
 8006040:	2201      	movs	r2, #1
 8006042:	409a      	lsls	r2, r3
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006050:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00c      	beq.n	8006074 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006064:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006068:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006072:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006088:	2b00      	cmp	r3, #0
 800608a:	d003      	beq.n	8006094 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	3710      	adds	r7, #16
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop

080060a0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b08a      	sub	sp, #40	; 0x28
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80060a8:	2300      	movs	r3, #0
 80060aa:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80060ac:	4b67      	ldr	r3, [pc, #412]	; (800624c <HAL_DMA_IRQHandler+0x1ac>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a67      	ldr	r2, [pc, #412]	; (8006250 <HAL_DMA_IRQHandler+0x1b0>)
 80060b2:	fba2 2303 	umull	r2, r3, r2, r3
 80060b6:	0a9b      	lsrs	r3, r3, #10
 80060b8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060be:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060c4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80060c6:	6a3b      	ldr	r3, [r7, #32]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a5f      	ldr	r2, [pc, #380]	; (8006254 <HAL_DMA_IRQHandler+0x1b4>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d04a      	beq.n	8006172 <HAL_DMA_IRQHandler+0xd2>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a5d      	ldr	r2, [pc, #372]	; (8006258 <HAL_DMA_IRQHandler+0x1b8>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d045      	beq.n	8006172 <HAL_DMA_IRQHandler+0xd2>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a5c      	ldr	r2, [pc, #368]	; (800625c <HAL_DMA_IRQHandler+0x1bc>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d040      	beq.n	8006172 <HAL_DMA_IRQHandler+0xd2>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a5a      	ldr	r2, [pc, #360]	; (8006260 <HAL_DMA_IRQHandler+0x1c0>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d03b      	beq.n	8006172 <HAL_DMA_IRQHandler+0xd2>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a59      	ldr	r2, [pc, #356]	; (8006264 <HAL_DMA_IRQHandler+0x1c4>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d036      	beq.n	8006172 <HAL_DMA_IRQHandler+0xd2>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a57      	ldr	r2, [pc, #348]	; (8006268 <HAL_DMA_IRQHandler+0x1c8>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d031      	beq.n	8006172 <HAL_DMA_IRQHandler+0xd2>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a56      	ldr	r2, [pc, #344]	; (800626c <HAL_DMA_IRQHandler+0x1cc>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d02c      	beq.n	8006172 <HAL_DMA_IRQHandler+0xd2>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a54      	ldr	r2, [pc, #336]	; (8006270 <HAL_DMA_IRQHandler+0x1d0>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d027      	beq.n	8006172 <HAL_DMA_IRQHandler+0xd2>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a53      	ldr	r2, [pc, #332]	; (8006274 <HAL_DMA_IRQHandler+0x1d4>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d022      	beq.n	8006172 <HAL_DMA_IRQHandler+0xd2>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a51      	ldr	r2, [pc, #324]	; (8006278 <HAL_DMA_IRQHandler+0x1d8>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d01d      	beq.n	8006172 <HAL_DMA_IRQHandler+0xd2>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a50      	ldr	r2, [pc, #320]	; (800627c <HAL_DMA_IRQHandler+0x1dc>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d018      	beq.n	8006172 <HAL_DMA_IRQHandler+0xd2>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a4e      	ldr	r2, [pc, #312]	; (8006280 <HAL_DMA_IRQHandler+0x1e0>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d013      	beq.n	8006172 <HAL_DMA_IRQHandler+0xd2>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a4d      	ldr	r2, [pc, #308]	; (8006284 <HAL_DMA_IRQHandler+0x1e4>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d00e      	beq.n	8006172 <HAL_DMA_IRQHandler+0xd2>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a4b      	ldr	r2, [pc, #300]	; (8006288 <HAL_DMA_IRQHandler+0x1e8>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d009      	beq.n	8006172 <HAL_DMA_IRQHandler+0xd2>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a4a      	ldr	r2, [pc, #296]	; (800628c <HAL_DMA_IRQHandler+0x1ec>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d004      	beq.n	8006172 <HAL_DMA_IRQHandler+0xd2>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a48      	ldr	r2, [pc, #288]	; (8006290 <HAL_DMA_IRQHandler+0x1f0>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d101      	bne.n	8006176 <HAL_DMA_IRQHandler+0xd6>
 8006172:	2301      	movs	r3, #1
 8006174:	e000      	b.n	8006178 <HAL_DMA_IRQHandler+0xd8>
 8006176:	2300      	movs	r3, #0
 8006178:	2b00      	cmp	r3, #0
 800617a:	f000 842b 	beq.w	80069d4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006182:	f003 031f 	and.w	r3, r3, #31
 8006186:	2208      	movs	r2, #8
 8006188:	409a      	lsls	r2, r3
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	4013      	ands	r3, r2
 800618e:	2b00      	cmp	r3, #0
 8006190:	f000 80a2 	beq.w	80062d8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a2e      	ldr	r2, [pc, #184]	; (8006254 <HAL_DMA_IRQHandler+0x1b4>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d04a      	beq.n	8006234 <HAL_DMA_IRQHandler+0x194>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a2d      	ldr	r2, [pc, #180]	; (8006258 <HAL_DMA_IRQHandler+0x1b8>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d045      	beq.n	8006234 <HAL_DMA_IRQHandler+0x194>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a2b      	ldr	r2, [pc, #172]	; (800625c <HAL_DMA_IRQHandler+0x1bc>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d040      	beq.n	8006234 <HAL_DMA_IRQHandler+0x194>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a2a      	ldr	r2, [pc, #168]	; (8006260 <HAL_DMA_IRQHandler+0x1c0>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d03b      	beq.n	8006234 <HAL_DMA_IRQHandler+0x194>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a28      	ldr	r2, [pc, #160]	; (8006264 <HAL_DMA_IRQHandler+0x1c4>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d036      	beq.n	8006234 <HAL_DMA_IRQHandler+0x194>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a27      	ldr	r2, [pc, #156]	; (8006268 <HAL_DMA_IRQHandler+0x1c8>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d031      	beq.n	8006234 <HAL_DMA_IRQHandler+0x194>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a25      	ldr	r2, [pc, #148]	; (800626c <HAL_DMA_IRQHandler+0x1cc>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d02c      	beq.n	8006234 <HAL_DMA_IRQHandler+0x194>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a24      	ldr	r2, [pc, #144]	; (8006270 <HAL_DMA_IRQHandler+0x1d0>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d027      	beq.n	8006234 <HAL_DMA_IRQHandler+0x194>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a22      	ldr	r2, [pc, #136]	; (8006274 <HAL_DMA_IRQHandler+0x1d4>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d022      	beq.n	8006234 <HAL_DMA_IRQHandler+0x194>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a21      	ldr	r2, [pc, #132]	; (8006278 <HAL_DMA_IRQHandler+0x1d8>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d01d      	beq.n	8006234 <HAL_DMA_IRQHandler+0x194>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a1f      	ldr	r2, [pc, #124]	; (800627c <HAL_DMA_IRQHandler+0x1dc>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d018      	beq.n	8006234 <HAL_DMA_IRQHandler+0x194>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a1e      	ldr	r2, [pc, #120]	; (8006280 <HAL_DMA_IRQHandler+0x1e0>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d013      	beq.n	8006234 <HAL_DMA_IRQHandler+0x194>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a1c      	ldr	r2, [pc, #112]	; (8006284 <HAL_DMA_IRQHandler+0x1e4>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d00e      	beq.n	8006234 <HAL_DMA_IRQHandler+0x194>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a1b      	ldr	r2, [pc, #108]	; (8006288 <HAL_DMA_IRQHandler+0x1e8>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d009      	beq.n	8006234 <HAL_DMA_IRQHandler+0x194>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a19      	ldr	r2, [pc, #100]	; (800628c <HAL_DMA_IRQHandler+0x1ec>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d004      	beq.n	8006234 <HAL_DMA_IRQHandler+0x194>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a18      	ldr	r2, [pc, #96]	; (8006290 <HAL_DMA_IRQHandler+0x1f0>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d12f      	bne.n	8006294 <HAL_DMA_IRQHandler+0x1f4>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 0304 	and.w	r3, r3, #4
 800623e:	2b00      	cmp	r3, #0
 8006240:	bf14      	ite	ne
 8006242:	2301      	movne	r3, #1
 8006244:	2300      	moveq	r3, #0
 8006246:	b2db      	uxtb	r3, r3
 8006248:	e02e      	b.n	80062a8 <HAL_DMA_IRQHandler+0x208>
 800624a:	bf00      	nop
 800624c:	24000000 	.word	0x24000000
 8006250:	1b4e81b5 	.word	0x1b4e81b5
 8006254:	40020010 	.word	0x40020010
 8006258:	40020028 	.word	0x40020028
 800625c:	40020040 	.word	0x40020040
 8006260:	40020058 	.word	0x40020058
 8006264:	40020070 	.word	0x40020070
 8006268:	40020088 	.word	0x40020088
 800626c:	400200a0 	.word	0x400200a0
 8006270:	400200b8 	.word	0x400200b8
 8006274:	40020410 	.word	0x40020410
 8006278:	40020428 	.word	0x40020428
 800627c:	40020440 	.word	0x40020440
 8006280:	40020458 	.word	0x40020458
 8006284:	40020470 	.word	0x40020470
 8006288:	40020488 	.word	0x40020488
 800628c:	400204a0 	.word	0x400204a0
 8006290:	400204b8 	.word	0x400204b8
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 0308 	and.w	r3, r3, #8
 800629e:	2b00      	cmp	r3, #0
 80062a0:	bf14      	ite	ne
 80062a2:	2301      	movne	r3, #1
 80062a4:	2300      	moveq	r3, #0
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d015      	beq.n	80062d8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f022 0204 	bic.w	r2, r2, #4
 80062ba:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062c0:	f003 031f 	and.w	r3, r3, #31
 80062c4:	2208      	movs	r2, #8
 80062c6:	409a      	lsls	r2, r3
 80062c8:	6a3b      	ldr	r3, [r7, #32]
 80062ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062d0:	f043 0201 	orr.w	r2, r3, #1
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062dc:	f003 031f 	and.w	r3, r3, #31
 80062e0:	69ba      	ldr	r2, [r7, #24]
 80062e2:	fa22 f303 	lsr.w	r3, r2, r3
 80062e6:	f003 0301 	and.w	r3, r3, #1
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d06e      	beq.n	80063cc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a69      	ldr	r2, [pc, #420]	; (8006498 <HAL_DMA_IRQHandler+0x3f8>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d04a      	beq.n	800638e <HAL_DMA_IRQHandler+0x2ee>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a67      	ldr	r2, [pc, #412]	; (800649c <HAL_DMA_IRQHandler+0x3fc>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d045      	beq.n	800638e <HAL_DMA_IRQHandler+0x2ee>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a66      	ldr	r2, [pc, #408]	; (80064a0 <HAL_DMA_IRQHandler+0x400>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d040      	beq.n	800638e <HAL_DMA_IRQHandler+0x2ee>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a64      	ldr	r2, [pc, #400]	; (80064a4 <HAL_DMA_IRQHandler+0x404>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d03b      	beq.n	800638e <HAL_DMA_IRQHandler+0x2ee>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a63      	ldr	r2, [pc, #396]	; (80064a8 <HAL_DMA_IRQHandler+0x408>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d036      	beq.n	800638e <HAL_DMA_IRQHandler+0x2ee>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a61      	ldr	r2, [pc, #388]	; (80064ac <HAL_DMA_IRQHandler+0x40c>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d031      	beq.n	800638e <HAL_DMA_IRQHandler+0x2ee>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a60      	ldr	r2, [pc, #384]	; (80064b0 <HAL_DMA_IRQHandler+0x410>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d02c      	beq.n	800638e <HAL_DMA_IRQHandler+0x2ee>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a5e      	ldr	r2, [pc, #376]	; (80064b4 <HAL_DMA_IRQHandler+0x414>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d027      	beq.n	800638e <HAL_DMA_IRQHandler+0x2ee>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a5d      	ldr	r2, [pc, #372]	; (80064b8 <HAL_DMA_IRQHandler+0x418>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d022      	beq.n	800638e <HAL_DMA_IRQHandler+0x2ee>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a5b      	ldr	r2, [pc, #364]	; (80064bc <HAL_DMA_IRQHandler+0x41c>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d01d      	beq.n	800638e <HAL_DMA_IRQHandler+0x2ee>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a5a      	ldr	r2, [pc, #360]	; (80064c0 <HAL_DMA_IRQHandler+0x420>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d018      	beq.n	800638e <HAL_DMA_IRQHandler+0x2ee>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a58      	ldr	r2, [pc, #352]	; (80064c4 <HAL_DMA_IRQHandler+0x424>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d013      	beq.n	800638e <HAL_DMA_IRQHandler+0x2ee>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a57      	ldr	r2, [pc, #348]	; (80064c8 <HAL_DMA_IRQHandler+0x428>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d00e      	beq.n	800638e <HAL_DMA_IRQHandler+0x2ee>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a55      	ldr	r2, [pc, #340]	; (80064cc <HAL_DMA_IRQHandler+0x42c>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d009      	beq.n	800638e <HAL_DMA_IRQHandler+0x2ee>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a54      	ldr	r2, [pc, #336]	; (80064d0 <HAL_DMA_IRQHandler+0x430>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d004      	beq.n	800638e <HAL_DMA_IRQHandler+0x2ee>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a52      	ldr	r2, [pc, #328]	; (80064d4 <HAL_DMA_IRQHandler+0x434>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d10a      	bne.n	80063a4 <HAL_DMA_IRQHandler+0x304>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	695b      	ldr	r3, [r3, #20]
 8006394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006398:	2b00      	cmp	r3, #0
 800639a:	bf14      	ite	ne
 800639c:	2301      	movne	r3, #1
 800639e:	2300      	moveq	r3, #0
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	e003      	b.n	80063ac <HAL_DMA_IRQHandler+0x30c>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2300      	movs	r3, #0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d00d      	beq.n	80063cc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063b4:	f003 031f 	and.w	r3, r3, #31
 80063b8:	2201      	movs	r2, #1
 80063ba:	409a      	lsls	r2, r3
 80063bc:	6a3b      	ldr	r3, [r7, #32]
 80063be:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063c4:	f043 0202 	orr.w	r2, r3, #2
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063d0:	f003 031f 	and.w	r3, r3, #31
 80063d4:	2204      	movs	r2, #4
 80063d6:	409a      	lsls	r2, r3
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	4013      	ands	r3, r2
 80063dc:	2b00      	cmp	r3, #0
 80063de:	f000 808f 	beq.w	8006500 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a2c      	ldr	r2, [pc, #176]	; (8006498 <HAL_DMA_IRQHandler+0x3f8>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d04a      	beq.n	8006482 <HAL_DMA_IRQHandler+0x3e2>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a2a      	ldr	r2, [pc, #168]	; (800649c <HAL_DMA_IRQHandler+0x3fc>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d045      	beq.n	8006482 <HAL_DMA_IRQHandler+0x3e2>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a29      	ldr	r2, [pc, #164]	; (80064a0 <HAL_DMA_IRQHandler+0x400>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d040      	beq.n	8006482 <HAL_DMA_IRQHandler+0x3e2>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a27      	ldr	r2, [pc, #156]	; (80064a4 <HAL_DMA_IRQHandler+0x404>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d03b      	beq.n	8006482 <HAL_DMA_IRQHandler+0x3e2>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a26      	ldr	r2, [pc, #152]	; (80064a8 <HAL_DMA_IRQHandler+0x408>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d036      	beq.n	8006482 <HAL_DMA_IRQHandler+0x3e2>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a24      	ldr	r2, [pc, #144]	; (80064ac <HAL_DMA_IRQHandler+0x40c>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d031      	beq.n	8006482 <HAL_DMA_IRQHandler+0x3e2>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a23      	ldr	r2, [pc, #140]	; (80064b0 <HAL_DMA_IRQHandler+0x410>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d02c      	beq.n	8006482 <HAL_DMA_IRQHandler+0x3e2>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a21      	ldr	r2, [pc, #132]	; (80064b4 <HAL_DMA_IRQHandler+0x414>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d027      	beq.n	8006482 <HAL_DMA_IRQHandler+0x3e2>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a20      	ldr	r2, [pc, #128]	; (80064b8 <HAL_DMA_IRQHandler+0x418>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d022      	beq.n	8006482 <HAL_DMA_IRQHandler+0x3e2>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a1e      	ldr	r2, [pc, #120]	; (80064bc <HAL_DMA_IRQHandler+0x41c>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d01d      	beq.n	8006482 <HAL_DMA_IRQHandler+0x3e2>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a1d      	ldr	r2, [pc, #116]	; (80064c0 <HAL_DMA_IRQHandler+0x420>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d018      	beq.n	8006482 <HAL_DMA_IRQHandler+0x3e2>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a1b      	ldr	r2, [pc, #108]	; (80064c4 <HAL_DMA_IRQHandler+0x424>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d013      	beq.n	8006482 <HAL_DMA_IRQHandler+0x3e2>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a1a      	ldr	r2, [pc, #104]	; (80064c8 <HAL_DMA_IRQHandler+0x428>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d00e      	beq.n	8006482 <HAL_DMA_IRQHandler+0x3e2>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a18      	ldr	r2, [pc, #96]	; (80064cc <HAL_DMA_IRQHandler+0x42c>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d009      	beq.n	8006482 <HAL_DMA_IRQHandler+0x3e2>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a17      	ldr	r2, [pc, #92]	; (80064d0 <HAL_DMA_IRQHandler+0x430>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d004      	beq.n	8006482 <HAL_DMA_IRQHandler+0x3e2>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a15      	ldr	r2, [pc, #84]	; (80064d4 <HAL_DMA_IRQHandler+0x434>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d12a      	bne.n	80064d8 <HAL_DMA_IRQHandler+0x438>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 0302 	and.w	r3, r3, #2
 800648c:	2b00      	cmp	r3, #0
 800648e:	bf14      	ite	ne
 8006490:	2301      	movne	r3, #1
 8006492:	2300      	moveq	r3, #0
 8006494:	b2db      	uxtb	r3, r3
 8006496:	e023      	b.n	80064e0 <HAL_DMA_IRQHandler+0x440>
 8006498:	40020010 	.word	0x40020010
 800649c:	40020028 	.word	0x40020028
 80064a0:	40020040 	.word	0x40020040
 80064a4:	40020058 	.word	0x40020058
 80064a8:	40020070 	.word	0x40020070
 80064ac:	40020088 	.word	0x40020088
 80064b0:	400200a0 	.word	0x400200a0
 80064b4:	400200b8 	.word	0x400200b8
 80064b8:	40020410 	.word	0x40020410
 80064bc:	40020428 	.word	0x40020428
 80064c0:	40020440 	.word	0x40020440
 80064c4:	40020458 	.word	0x40020458
 80064c8:	40020470 	.word	0x40020470
 80064cc:	40020488 	.word	0x40020488
 80064d0:	400204a0 	.word	0x400204a0
 80064d4:	400204b8 	.word	0x400204b8
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2300      	movs	r3, #0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d00d      	beq.n	8006500 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064e8:	f003 031f 	and.w	r3, r3, #31
 80064ec:	2204      	movs	r2, #4
 80064ee:	409a      	lsls	r2, r3
 80064f0:	6a3b      	ldr	r3, [r7, #32]
 80064f2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064f8:	f043 0204 	orr.w	r2, r3, #4
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006504:	f003 031f 	and.w	r3, r3, #31
 8006508:	2210      	movs	r2, #16
 800650a:	409a      	lsls	r2, r3
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	4013      	ands	r3, r2
 8006510:	2b00      	cmp	r3, #0
 8006512:	f000 80a6 	beq.w	8006662 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a85      	ldr	r2, [pc, #532]	; (8006730 <HAL_DMA_IRQHandler+0x690>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d04a      	beq.n	80065b6 <HAL_DMA_IRQHandler+0x516>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a83      	ldr	r2, [pc, #524]	; (8006734 <HAL_DMA_IRQHandler+0x694>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d045      	beq.n	80065b6 <HAL_DMA_IRQHandler+0x516>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a82      	ldr	r2, [pc, #520]	; (8006738 <HAL_DMA_IRQHandler+0x698>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d040      	beq.n	80065b6 <HAL_DMA_IRQHandler+0x516>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a80      	ldr	r2, [pc, #512]	; (800673c <HAL_DMA_IRQHandler+0x69c>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d03b      	beq.n	80065b6 <HAL_DMA_IRQHandler+0x516>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a7f      	ldr	r2, [pc, #508]	; (8006740 <HAL_DMA_IRQHandler+0x6a0>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d036      	beq.n	80065b6 <HAL_DMA_IRQHandler+0x516>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a7d      	ldr	r2, [pc, #500]	; (8006744 <HAL_DMA_IRQHandler+0x6a4>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d031      	beq.n	80065b6 <HAL_DMA_IRQHandler+0x516>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a7c      	ldr	r2, [pc, #496]	; (8006748 <HAL_DMA_IRQHandler+0x6a8>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d02c      	beq.n	80065b6 <HAL_DMA_IRQHandler+0x516>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a7a      	ldr	r2, [pc, #488]	; (800674c <HAL_DMA_IRQHandler+0x6ac>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d027      	beq.n	80065b6 <HAL_DMA_IRQHandler+0x516>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a79      	ldr	r2, [pc, #484]	; (8006750 <HAL_DMA_IRQHandler+0x6b0>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d022      	beq.n	80065b6 <HAL_DMA_IRQHandler+0x516>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a77      	ldr	r2, [pc, #476]	; (8006754 <HAL_DMA_IRQHandler+0x6b4>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d01d      	beq.n	80065b6 <HAL_DMA_IRQHandler+0x516>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a76      	ldr	r2, [pc, #472]	; (8006758 <HAL_DMA_IRQHandler+0x6b8>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d018      	beq.n	80065b6 <HAL_DMA_IRQHandler+0x516>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a74      	ldr	r2, [pc, #464]	; (800675c <HAL_DMA_IRQHandler+0x6bc>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d013      	beq.n	80065b6 <HAL_DMA_IRQHandler+0x516>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a73      	ldr	r2, [pc, #460]	; (8006760 <HAL_DMA_IRQHandler+0x6c0>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d00e      	beq.n	80065b6 <HAL_DMA_IRQHandler+0x516>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a71      	ldr	r2, [pc, #452]	; (8006764 <HAL_DMA_IRQHandler+0x6c4>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d009      	beq.n	80065b6 <HAL_DMA_IRQHandler+0x516>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a70      	ldr	r2, [pc, #448]	; (8006768 <HAL_DMA_IRQHandler+0x6c8>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d004      	beq.n	80065b6 <HAL_DMA_IRQHandler+0x516>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a6e      	ldr	r2, [pc, #440]	; (800676c <HAL_DMA_IRQHandler+0x6cc>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d10a      	bne.n	80065cc <HAL_DMA_IRQHandler+0x52c>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 0308 	and.w	r3, r3, #8
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	bf14      	ite	ne
 80065c4:	2301      	movne	r3, #1
 80065c6:	2300      	moveq	r3, #0
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	e009      	b.n	80065e0 <HAL_DMA_IRQHandler+0x540>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 0304 	and.w	r3, r3, #4
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	bf14      	ite	ne
 80065da:	2301      	movne	r3, #1
 80065dc:	2300      	moveq	r3, #0
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d03e      	beq.n	8006662 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065e8:	f003 031f 	and.w	r3, r3, #31
 80065ec:	2210      	movs	r2, #16
 80065ee:	409a      	lsls	r2, r3
 80065f0:	6a3b      	ldr	r3, [r7, #32]
 80065f2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d018      	beq.n	8006634 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800660c:	2b00      	cmp	r3, #0
 800660e:	d108      	bne.n	8006622 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006614:	2b00      	cmp	r3, #0
 8006616:	d024      	beq.n	8006662 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	4798      	blx	r3
 8006620:	e01f      	b.n	8006662 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006626:	2b00      	cmp	r3, #0
 8006628:	d01b      	beq.n	8006662 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	4798      	blx	r3
 8006632:	e016      	b.n	8006662 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800663e:	2b00      	cmp	r3, #0
 8006640:	d107      	bne.n	8006652 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f022 0208 	bic.w	r2, r2, #8
 8006650:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006656:	2b00      	cmp	r3, #0
 8006658:	d003      	beq.n	8006662 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006666:	f003 031f 	and.w	r3, r3, #31
 800666a:	2220      	movs	r2, #32
 800666c:	409a      	lsls	r2, r3
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	4013      	ands	r3, r2
 8006672:	2b00      	cmp	r3, #0
 8006674:	f000 8110 	beq.w	8006898 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a2c      	ldr	r2, [pc, #176]	; (8006730 <HAL_DMA_IRQHandler+0x690>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d04a      	beq.n	8006718 <HAL_DMA_IRQHandler+0x678>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a2b      	ldr	r2, [pc, #172]	; (8006734 <HAL_DMA_IRQHandler+0x694>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d045      	beq.n	8006718 <HAL_DMA_IRQHandler+0x678>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a29      	ldr	r2, [pc, #164]	; (8006738 <HAL_DMA_IRQHandler+0x698>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d040      	beq.n	8006718 <HAL_DMA_IRQHandler+0x678>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a28      	ldr	r2, [pc, #160]	; (800673c <HAL_DMA_IRQHandler+0x69c>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d03b      	beq.n	8006718 <HAL_DMA_IRQHandler+0x678>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a26      	ldr	r2, [pc, #152]	; (8006740 <HAL_DMA_IRQHandler+0x6a0>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d036      	beq.n	8006718 <HAL_DMA_IRQHandler+0x678>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a25      	ldr	r2, [pc, #148]	; (8006744 <HAL_DMA_IRQHandler+0x6a4>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d031      	beq.n	8006718 <HAL_DMA_IRQHandler+0x678>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a23      	ldr	r2, [pc, #140]	; (8006748 <HAL_DMA_IRQHandler+0x6a8>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d02c      	beq.n	8006718 <HAL_DMA_IRQHandler+0x678>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a22      	ldr	r2, [pc, #136]	; (800674c <HAL_DMA_IRQHandler+0x6ac>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d027      	beq.n	8006718 <HAL_DMA_IRQHandler+0x678>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a20      	ldr	r2, [pc, #128]	; (8006750 <HAL_DMA_IRQHandler+0x6b0>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d022      	beq.n	8006718 <HAL_DMA_IRQHandler+0x678>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a1f      	ldr	r2, [pc, #124]	; (8006754 <HAL_DMA_IRQHandler+0x6b4>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d01d      	beq.n	8006718 <HAL_DMA_IRQHandler+0x678>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a1d      	ldr	r2, [pc, #116]	; (8006758 <HAL_DMA_IRQHandler+0x6b8>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d018      	beq.n	8006718 <HAL_DMA_IRQHandler+0x678>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a1c      	ldr	r2, [pc, #112]	; (800675c <HAL_DMA_IRQHandler+0x6bc>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d013      	beq.n	8006718 <HAL_DMA_IRQHandler+0x678>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a1a      	ldr	r2, [pc, #104]	; (8006760 <HAL_DMA_IRQHandler+0x6c0>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d00e      	beq.n	8006718 <HAL_DMA_IRQHandler+0x678>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a19      	ldr	r2, [pc, #100]	; (8006764 <HAL_DMA_IRQHandler+0x6c4>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d009      	beq.n	8006718 <HAL_DMA_IRQHandler+0x678>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a17      	ldr	r2, [pc, #92]	; (8006768 <HAL_DMA_IRQHandler+0x6c8>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d004      	beq.n	8006718 <HAL_DMA_IRQHandler+0x678>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a16      	ldr	r2, [pc, #88]	; (800676c <HAL_DMA_IRQHandler+0x6cc>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d12b      	bne.n	8006770 <HAL_DMA_IRQHandler+0x6d0>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 0310 	and.w	r3, r3, #16
 8006722:	2b00      	cmp	r3, #0
 8006724:	bf14      	ite	ne
 8006726:	2301      	movne	r3, #1
 8006728:	2300      	moveq	r3, #0
 800672a:	b2db      	uxtb	r3, r3
 800672c:	e02a      	b.n	8006784 <HAL_DMA_IRQHandler+0x6e4>
 800672e:	bf00      	nop
 8006730:	40020010 	.word	0x40020010
 8006734:	40020028 	.word	0x40020028
 8006738:	40020040 	.word	0x40020040
 800673c:	40020058 	.word	0x40020058
 8006740:	40020070 	.word	0x40020070
 8006744:	40020088 	.word	0x40020088
 8006748:	400200a0 	.word	0x400200a0
 800674c:	400200b8 	.word	0x400200b8
 8006750:	40020410 	.word	0x40020410
 8006754:	40020428 	.word	0x40020428
 8006758:	40020440 	.word	0x40020440
 800675c:	40020458 	.word	0x40020458
 8006760:	40020470 	.word	0x40020470
 8006764:	40020488 	.word	0x40020488
 8006768:	400204a0 	.word	0x400204a0
 800676c:	400204b8 	.word	0x400204b8
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 0302 	and.w	r3, r3, #2
 800677a:	2b00      	cmp	r3, #0
 800677c:	bf14      	ite	ne
 800677e:	2301      	movne	r3, #1
 8006780:	2300      	moveq	r3, #0
 8006782:	b2db      	uxtb	r3, r3
 8006784:	2b00      	cmp	r3, #0
 8006786:	f000 8087 	beq.w	8006898 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800678e:	f003 031f 	and.w	r3, r3, #31
 8006792:	2220      	movs	r2, #32
 8006794:	409a      	lsls	r2, r3
 8006796:	6a3b      	ldr	r3, [r7, #32]
 8006798:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	2b04      	cmp	r3, #4
 80067a4:	d139      	bne.n	800681a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f022 0216 	bic.w	r2, r2, #22
 80067b4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	695a      	ldr	r2, [r3, #20]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067c4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d103      	bne.n	80067d6 <HAL_DMA_IRQHandler+0x736>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d007      	beq.n	80067e6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f022 0208 	bic.w	r2, r2, #8
 80067e4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067ea:	f003 031f 	and.w	r3, r3, #31
 80067ee:	223f      	movs	r2, #63	; 0x3f
 80067f0:	409a      	lsls	r2, r3
 80067f2:	6a3b      	ldr	r3, [r7, #32]
 80067f4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2201      	movs	r2, #1
 80067fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800680a:	2b00      	cmp	r3, #0
 800680c:	f000 834a 	beq.w	8006ea4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	4798      	blx	r3
          }
          return;
 8006818:	e344      	b.n	8006ea4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006824:	2b00      	cmp	r3, #0
 8006826:	d018      	beq.n	800685a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006832:	2b00      	cmp	r3, #0
 8006834:	d108      	bne.n	8006848 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800683a:	2b00      	cmp	r3, #0
 800683c:	d02c      	beq.n	8006898 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	4798      	blx	r3
 8006846:	e027      	b.n	8006898 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800684c:	2b00      	cmp	r3, #0
 800684e:	d023      	beq.n	8006898 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	4798      	blx	r3
 8006858:	e01e      	b.n	8006898 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006864:	2b00      	cmp	r3, #0
 8006866:	d10f      	bne.n	8006888 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f022 0210 	bic.w	r2, r2, #16
 8006876:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2201      	movs	r2, #1
 800687c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800688c:	2b00      	cmp	r3, #0
 800688e:	d003      	beq.n	8006898 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800689c:	2b00      	cmp	r3, #0
 800689e:	f000 8306 	beq.w	8006eae <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068a6:	f003 0301 	and.w	r3, r3, #1
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	f000 8088 	beq.w	80069c0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2204      	movs	r2, #4
 80068b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a7a      	ldr	r2, [pc, #488]	; (8006aa8 <HAL_DMA_IRQHandler+0xa08>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d04a      	beq.n	8006958 <HAL_DMA_IRQHandler+0x8b8>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a79      	ldr	r2, [pc, #484]	; (8006aac <HAL_DMA_IRQHandler+0xa0c>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d045      	beq.n	8006958 <HAL_DMA_IRQHandler+0x8b8>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a77      	ldr	r2, [pc, #476]	; (8006ab0 <HAL_DMA_IRQHandler+0xa10>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d040      	beq.n	8006958 <HAL_DMA_IRQHandler+0x8b8>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a76      	ldr	r2, [pc, #472]	; (8006ab4 <HAL_DMA_IRQHandler+0xa14>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d03b      	beq.n	8006958 <HAL_DMA_IRQHandler+0x8b8>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a74      	ldr	r2, [pc, #464]	; (8006ab8 <HAL_DMA_IRQHandler+0xa18>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d036      	beq.n	8006958 <HAL_DMA_IRQHandler+0x8b8>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a73      	ldr	r2, [pc, #460]	; (8006abc <HAL_DMA_IRQHandler+0xa1c>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d031      	beq.n	8006958 <HAL_DMA_IRQHandler+0x8b8>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a71      	ldr	r2, [pc, #452]	; (8006ac0 <HAL_DMA_IRQHandler+0xa20>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d02c      	beq.n	8006958 <HAL_DMA_IRQHandler+0x8b8>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a70      	ldr	r2, [pc, #448]	; (8006ac4 <HAL_DMA_IRQHandler+0xa24>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d027      	beq.n	8006958 <HAL_DMA_IRQHandler+0x8b8>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a6e      	ldr	r2, [pc, #440]	; (8006ac8 <HAL_DMA_IRQHandler+0xa28>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d022      	beq.n	8006958 <HAL_DMA_IRQHandler+0x8b8>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a6d      	ldr	r2, [pc, #436]	; (8006acc <HAL_DMA_IRQHandler+0xa2c>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d01d      	beq.n	8006958 <HAL_DMA_IRQHandler+0x8b8>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a6b      	ldr	r2, [pc, #428]	; (8006ad0 <HAL_DMA_IRQHandler+0xa30>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d018      	beq.n	8006958 <HAL_DMA_IRQHandler+0x8b8>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a6a      	ldr	r2, [pc, #424]	; (8006ad4 <HAL_DMA_IRQHandler+0xa34>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d013      	beq.n	8006958 <HAL_DMA_IRQHandler+0x8b8>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a68      	ldr	r2, [pc, #416]	; (8006ad8 <HAL_DMA_IRQHandler+0xa38>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d00e      	beq.n	8006958 <HAL_DMA_IRQHandler+0x8b8>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a67      	ldr	r2, [pc, #412]	; (8006adc <HAL_DMA_IRQHandler+0xa3c>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d009      	beq.n	8006958 <HAL_DMA_IRQHandler+0x8b8>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a65      	ldr	r2, [pc, #404]	; (8006ae0 <HAL_DMA_IRQHandler+0xa40>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d004      	beq.n	8006958 <HAL_DMA_IRQHandler+0x8b8>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a64      	ldr	r2, [pc, #400]	; (8006ae4 <HAL_DMA_IRQHandler+0xa44>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d108      	bne.n	800696a <HAL_DMA_IRQHandler+0x8ca>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f022 0201 	bic.w	r2, r2, #1
 8006966:	601a      	str	r2, [r3, #0]
 8006968:	e007      	b.n	800697a <HAL_DMA_IRQHandler+0x8da>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f022 0201 	bic.w	r2, r2, #1
 8006978:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	3301      	adds	r3, #1
 800697e:	60fb      	str	r3, [r7, #12]
 8006980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006982:	429a      	cmp	r2, r3
 8006984:	d307      	bcc.n	8006996 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 0301 	and.w	r3, r3, #1
 8006990:	2b00      	cmp	r3, #0
 8006992:	d1f2      	bne.n	800697a <HAL_DMA_IRQHandler+0x8da>
 8006994:	e000      	b.n	8006998 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006996:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 0301 	and.w	r3, r3, #1
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d004      	beq.n	80069b0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2203      	movs	r2, #3
 80069aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80069ae:	e003      	b.n	80069b8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	f000 8272 	beq.w	8006eae <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	4798      	blx	r3
 80069d2:	e26c      	b.n	8006eae <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a43      	ldr	r2, [pc, #268]	; (8006ae8 <HAL_DMA_IRQHandler+0xa48>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d022      	beq.n	8006a24 <HAL_DMA_IRQHandler+0x984>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a42      	ldr	r2, [pc, #264]	; (8006aec <HAL_DMA_IRQHandler+0xa4c>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d01d      	beq.n	8006a24 <HAL_DMA_IRQHandler+0x984>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a40      	ldr	r2, [pc, #256]	; (8006af0 <HAL_DMA_IRQHandler+0xa50>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d018      	beq.n	8006a24 <HAL_DMA_IRQHandler+0x984>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a3f      	ldr	r2, [pc, #252]	; (8006af4 <HAL_DMA_IRQHandler+0xa54>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d013      	beq.n	8006a24 <HAL_DMA_IRQHandler+0x984>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a3d      	ldr	r2, [pc, #244]	; (8006af8 <HAL_DMA_IRQHandler+0xa58>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d00e      	beq.n	8006a24 <HAL_DMA_IRQHandler+0x984>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a3c      	ldr	r2, [pc, #240]	; (8006afc <HAL_DMA_IRQHandler+0xa5c>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d009      	beq.n	8006a24 <HAL_DMA_IRQHandler+0x984>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a3a      	ldr	r2, [pc, #232]	; (8006b00 <HAL_DMA_IRQHandler+0xa60>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d004      	beq.n	8006a24 <HAL_DMA_IRQHandler+0x984>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a39      	ldr	r2, [pc, #228]	; (8006b04 <HAL_DMA_IRQHandler+0xa64>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d101      	bne.n	8006a28 <HAL_DMA_IRQHandler+0x988>
 8006a24:	2301      	movs	r3, #1
 8006a26:	e000      	b.n	8006a2a <HAL_DMA_IRQHandler+0x98a>
 8006a28:	2300      	movs	r3, #0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	f000 823f 	beq.w	8006eae <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a3c:	f003 031f 	and.w	r3, r3, #31
 8006a40:	2204      	movs	r2, #4
 8006a42:	409a      	lsls	r2, r3
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	4013      	ands	r3, r2
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f000 80cd 	beq.w	8006be8 <HAL_DMA_IRQHandler+0xb48>
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	f003 0304 	and.w	r3, r3, #4
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	f000 80c7 	beq.w	8006be8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a5e:	f003 031f 	and.w	r3, r3, #31
 8006a62:	2204      	movs	r2, #4
 8006a64:	409a      	lsls	r2, r3
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d049      	beq.n	8006b08 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d109      	bne.n	8006a92 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	f000 8210 	beq.w	8006ea8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a90:	e20a      	b.n	8006ea8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	f000 8206 	beq.w	8006ea8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006aa4:	e200      	b.n	8006ea8 <HAL_DMA_IRQHandler+0xe08>
 8006aa6:	bf00      	nop
 8006aa8:	40020010 	.word	0x40020010
 8006aac:	40020028 	.word	0x40020028
 8006ab0:	40020040 	.word	0x40020040
 8006ab4:	40020058 	.word	0x40020058
 8006ab8:	40020070 	.word	0x40020070
 8006abc:	40020088 	.word	0x40020088
 8006ac0:	400200a0 	.word	0x400200a0
 8006ac4:	400200b8 	.word	0x400200b8
 8006ac8:	40020410 	.word	0x40020410
 8006acc:	40020428 	.word	0x40020428
 8006ad0:	40020440 	.word	0x40020440
 8006ad4:	40020458 	.word	0x40020458
 8006ad8:	40020470 	.word	0x40020470
 8006adc:	40020488 	.word	0x40020488
 8006ae0:	400204a0 	.word	0x400204a0
 8006ae4:	400204b8 	.word	0x400204b8
 8006ae8:	58025408 	.word	0x58025408
 8006aec:	5802541c 	.word	0x5802541c
 8006af0:	58025430 	.word	0x58025430
 8006af4:	58025444 	.word	0x58025444
 8006af8:	58025458 	.word	0x58025458
 8006afc:	5802546c 	.word	0x5802546c
 8006b00:	58025480 	.word	0x58025480
 8006b04:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	f003 0320 	and.w	r3, r3, #32
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d160      	bne.n	8006bd4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a7f      	ldr	r2, [pc, #508]	; (8006d14 <HAL_DMA_IRQHandler+0xc74>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d04a      	beq.n	8006bb2 <HAL_DMA_IRQHandler+0xb12>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a7d      	ldr	r2, [pc, #500]	; (8006d18 <HAL_DMA_IRQHandler+0xc78>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d045      	beq.n	8006bb2 <HAL_DMA_IRQHandler+0xb12>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a7c      	ldr	r2, [pc, #496]	; (8006d1c <HAL_DMA_IRQHandler+0xc7c>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d040      	beq.n	8006bb2 <HAL_DMA_IRQHandler+0xb12>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a7a      	ldr	r2, [pc, #488]	; (8006d20 <HAL_DMA_IRQHandler+0xc80>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d03b      	beq.n	8006bb2 <HAL_DMA_IRQHandler+0xb12>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a79      	ldr	r2, [pc, #484]	; (8006d24 <HAL_DMA_IRQHandler+0xc84>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d036      	beq.n	8006bb2 <HAL_DMA_IRQHandler+0xb12>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a77      	ldr	r2, [pc, #476]	; (8006d28 <HAL_DMA_IRQHandler+0xc88>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d031      	beq.n	8006bb2 <HAL_DMA_IRQHandler+0xb12>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a76      	ldr	r2, [pc, #472]	; (8006d2c <HAL_DMA_IRQHandler+0xc8c>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d02c      	beq.n	8006bb2 <HAL_DMA_IRQHandler+0xb12>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a74      	ldr	r2, [pc, #464]	; (8006d30 <HAL_DMA_IRQHandler+0xc90>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d027      	beq.n	8006bb2 <HAL_DMA_IRQHandler+0xb12>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a73      	ldr	r2, [pc, #460]	; (8006d34 <HAL_DMA_IRQHandler+0xc94>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d022      	beq.n	8006bb2 <HAL_DMA_IRQHandler+0xb12>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a71      	ldr	r2, [pc, #452]	; (8006d38 <HAL_DMA_IRQHandler+0xc98>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d01d      	beq.n	8006bb2 <HAL_DMA_IRQHandler+0xb12>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a70      	ldr	r2, [pc, #448]	; (8006d3c <HAL_DMA_IRQHandler+0xc9c>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d018      	beq.n	8006bb2 <HAL_DMA_IRQHandler+0xb12>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a6e      	ldr	r2, [pc, #440]	; (8006d40 <HAL_DMA_IRQHandler+0xca0>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d013      	beq.n	8006bb2 <HAL_DMA_IRQHandler+0xb12>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a6d      	ldr	r2, [pc, #436]	; (8006d44 <HAL_DMA_IRQHandler+0xca4>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d00e      	beq.n	8006bb2 <HAL_DMA_IRQHandler+0xb12>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a6b      	ldr	r2, [pc, #428]	; (8006d48 <HAL_DMA_IRQHandler+0xca8>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d009      	beq.n	8006bb2 <HAL_DMA_IRQHandler+0xb12>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a6a      	ldr	r2, [pc, #424]	; (8006d4c <HAL_DMA_IRQHandler+0xcac>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d004      	beq.n	8006bb2 <HAL_DMA_IRQHandler+0xb12>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a68      	ldr	r2, [pc, #416]	; (8006d50 <HAL_DMA_IRQHandler+0xcb0>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d108      	bne.n	8006bc4 <HAL_DMA_IRQHandler+0xb24>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f022 0208 	bic.w	r2, r2, #8
 8006bc0:	601a      	str	r2, [r3, #0]
 8006bc2:	e007      	b.n	8006bd4 <HAL_DMA_IRQHandler+0xb34>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f022 0204 	bic.w	r2, r2, #4
 8006bd2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	f000 8165 	beq.w	8006ea8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006be6:	e15f      	b.n	8006ea8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bec:	f003 031f 	and.w	r3, r3, #31
 8006bf0:	2202      	movs	r2, #2
 8006bf2:	409a      	lsls	r2, r3
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	f000 80c5 	beq.w	8006d88 <HAL_DMA_IRQHandler+0xce8>
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	f003 0302 	and.w	r3, r3, #2
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	f000 80bf 	beq.w	8006d88 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c0e:	f003 031f 	and.w	r3, r3, #31
 8006c12:	2202      	movs	r2, #2
 8006c14:	409a      	lsls	r2, r3
 8006c16:	69fb      	ldr	r3, [r7, #28]
 8006c18:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d018      	beq.n	8006c56 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d109      	bne.n	8006c42 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	f000 813a 	beq.w	8006eac <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c40:	e134      	b.n	8006eac <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	f000 8130 	beq.w	8006eac <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c54:	e12a      	b.n	8006eac <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	f003 0320 	and.w	r3, r3, #32
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	f040 8089 	bne.w	8006d74 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a2b      	ldr	r2, [pc, #172]	; (8006d14 <HAL_DMA_IRQHandler+0xc74>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d04a      	beq.n	8006d02 <HAL_DMA_IRQHandler+0xc62>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a29      	ldr	r2, [pc, #164]	; (8006d18 <HAL_DMA_IRQHandler+0xc78>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d045      	beq.n	8006d02 <HAL_DMA_IRQHandler+0xc62>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a28      	ldr	r2, [pc, #160]	; (8006d1c <HAL_DMA_IRQHandler+0xc7c>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d040      	beq.n	8006d02 <HAL_DMA_IRQHandler+0xc62>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a26      	ldr	r2, [pc, #152]	; (8006d20 <HAL_DMA_IRQHandler+0xc80>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d03b      	beq.n	8006d02 <HAL_DMA_IRQHandler+0xc62>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a25      	ldr	r2, [pc, #148]	; (8006d24 <HAL_DMA_IRQHandler+0xc84>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d036      	beq.n	8006d02 <HAL_DMA_IRQHandler+0xc62>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a23      	ldr	r2, [pc, #140]	; (8006d28 <HAL_DMA_IRQHandler+0xc88>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d031      	beq.n	8006d02 <HAL_DMA_IRQHandler+0xc62>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a22      	ldr	r2, [pc, #136]	; (8006d2c <HAL_DMA_IRQHandler+0xc8c>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d02c      	beq.n	8006d02 <HAL_DMA_IRQHandler+0xc62>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a20      	ldr	r2, [pc, #128]	; (8006d30 <HAL_DMA_IRQHandler+0xc90>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d027      	beq.n	8006d02 <HAL_DMA_IRQHandler+0xc62>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a1f      	ldr	r2, [pc, #124]	; (8006d34 <HAL_DMA_IRQHandler+0xc94>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d022      	beq.n	8006d02 <HAL_DMA_IRQHandler+0xc62>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a1d      	ldr	r2, [pc, #116]	; (8006d38 <HAL_DMA_IRQHandler+0xc98>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d01d      	beq.n	8006d02 <HAL_DMA_IRQHandler+0xc62>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a1c      	ldr	r2, [pc, #112]	; (8006d3c <HAL_DMA_IRQHandler+0xc9c>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d018      	beq.n	8006d02 <HAL_DMA_IRQHandler+0xc62>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a1a      	ldr	r2, [pc, #104]	; (8006d40 <HAL_DMA_IRQHandler+0xca0>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d013      	beq.n	8006d02 <HAL_DMA_IRQHandler+0xc62>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a19      	ldr	r2, [pc, #100]	; (8006d44 <HAL_DMA_IRQHandler+0xca4>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d00e      	beq.n	8006d02 <HAL_DMA_IRQHandler+0xc62>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a17      	ldr	r2, [pc, #92]	; (8006d48 <HAL_DMA_IRQHandler+0xca8>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d009      	beq.n	8006d02 <HAL_DMA_IRQHandler+0xc62>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a16      	ldr	r2, [pc, #88]	; (8006d4c <HAL_DMA_IRQHandler+0xcac>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d004      	beq.n	8006d02 <HAL_DMA_IRQHandler+0xc62>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a14      	ldr	r2, [pc, #80]	; (8006d50 <HAL_DMA_IRQHandler+0xcb0>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d128      	bne.n	8006d54 <HAL_DMA_IRQHandler+0xcb4>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f022 0214 	bic.w	r2, r2, #20
 8006d10:	601a      	str	r2, [r3, #0]
 8006d12:	e027      	b.n	8006d64 <HAL_DMA_IRQHandler+0xcc4>
 8006d14:	40020010 	.word	0x40020010
 8006d18:	40020028 	.word	0x40020028
 8006d1c:	40020040 	.word	0x40020040
 8006d20:	40020058 	.word	0x40020058
 8006d24:	40020070 	.word	0x40020070
 8006d28:	40020088 	.word	0x40020088
 8006d2c:	400200a0 	.word	0x400200a0
 8006d30:	400200b8 	.word	0x400200b8
 8006d34:	40020410 	.word	0x40020410
 8006d38:	40020428 	.word	0x40020428
 8006d3c:	40020440 	.word	0x40020440
 8006d40:	40020458 	.word	0x40020458
 8006d44:	40020470 	.word	0x40020470
 8006d48:	40020488 	.word	0x40020488
 8006d4c:	400204a0 	.word	0x400204a0
 8006d50:	400204b8 	.word	0x400204b8
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f022 020a 	bic.w	r2, r2, #10
 8006d62:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	f000 8097 	beq.w	8006eac <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d86:	e091      	b.n	8006eac <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d8c:	f003 031f 	and.w	r3, r3, #31
 8006d90:	2208      	movs	r2, #8
 8006d92:	409a      	lsls	r2, r3
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	4013      	ands	r3, r2
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f000 8088 	beq.w	8006eae <HAL_DMA_IRQHandler+0xe0e>
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	f003 0308 	and.w	r3, r3, #8
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	f000 8082 	beq.w	8006eae <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a41      	ldr	r2, [pc, #260]	; (8006eb4 <HAL_DMA_IRQHandler+0xe14>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d04a      	beq.n	8006e4a <HAL_DMA_IRQHandler+0xdaa>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a3f      	ldr	r2, [pc, #252]	; (8006eb8 <HAL_DMA_IRQHandler+0xe18>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d045      	beq.n	8006e4a <HAL_DMA_IRQHandler+0xdaa>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a3e      	ldr	r2, [pc, #248]	; (8006ebc <HAL_DMA_IRQHandler+0xe1c>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d040      	beq.n	8006e4a <HAL_DMA_IRQHandler+0xdaa>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a3c      	ldr	r2, [pc, #240]	; (8006ec0 <HAL_DMA_IRQHandler+0xe20>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d03b      	beq.n	8006e4a <HAL_DMA_IRQHandler+0xdaa>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a3b      	ldr	r2, [pc, #236]	; (8006ec4 <HAL_DMA_IRQHandler+0xe24>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d036      	beq.n	8006e4a <HAL_DMA_IRQHandler+0xdaa>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a39      	ldr	r2, [pc, #228]	; (8006ec8 <HAL_DMA_IRQHandler+0xe28>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d031      	beq.n	8006e4a <HAL_DMA_IRQHandler+0xdaa>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a38      	ldr	r2, [pc, #224]	; (8006ecc <HAL_DMA_IRQHandler+0xe2c>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d02c      	beq.n	8006e4a <HAL_DMA_IRQHandler+0xdaa>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a36      	ldr	r2, [pc, #216]	; (8006ed0 <HAL_DMA_IRQHandler+0xe30>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d027      	beq.n	8006e4a <HAL_DMA_IRQHandler+0xdaa>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a35      	ldr	r2, [pc, #212]	; (8006ed4 <HAL_DMA_IRQHandler+0xe34>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d022      	beq.n	8006e4a <HAL_DMA_IRQHandler+0xdaa>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a33      	ldr	r2, [pc, #204]	; (8006ed8 <HAL_DMA_IRQHandler+0xe38>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d01d      	beq.n	8006e4a <HAL_DMA_IRQHandler+0xdaa>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a32      	ldr	r2, [pc, #200]	; (8006edc <HAL_DMA_IRQHandler+0xe3c>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d018      	beq.n	8006e4a <HAL_DMA_IRQHandler+0xdaa>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a30      	ldr	r2, [pc, #192]	; (8006ee0 <HAL_DMA_IRQHandler+0xe40>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d013      	beq.n	8006e4a <HAL_DMA_IRQHandler+0xdaa>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a2f      	ldr	r2, [pc, #188]	; (8006ee4 <HAL_DMA_IRQHandler+0xe44>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d00e      	beq.n	8006e4a <HAL_DMA_IRQHandler+0xdaa>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a2d      	ldr	r2, [pc, #180]	; (8006ee8 <HAL_DMA_IRQHandler+0xe48>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d009      	beq.n	8006e4a <HAL_DMA_IRQHandler+0xdaa>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a2c      	ldr	r2, [pc, #176]	; (8006eec <HAL_DMA_IRQHandler+0xe4c>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d004      	beq.n	8006e4a <HAL_DMA_IRQHandler+0xdaa>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a2a      	ldr	r2, [pc, #168]	; (8006ef0 <HAL_DMA_IRQHandler+0xe50>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d108      	bne.n	8006e5c <HAL_DMA_IRQHandler+0xdbc>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f022 021c 	bic.w	r2, r2, #28
 8006e58:	601a      	str	r2, [r3, #0]
 8006e5a:	e007      	b.n	8006e6c <HAL_DMA_IRQHandler+0xdcc>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f022 020e 	bic.w	r2, r2, #14
 8006e6a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e70:	f003 031f 	and.w	r3, r3, #31
 8006e74:	2201      	movs	r2, #1
 8006e76:	409a      	lsls	r2, r3
 8006e78:	69fb      	ldr	r3, [r7, #28]
 8006e7a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2201      	movs	r2, #1
 8006e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d009      	beq.n	8006eae <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	4798      	blx	r3
 8006ea2:	e004      	b.n	8006eae <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006ea4:	bf00      	nop
 8006ea6:	e002      	b.n	8006eae <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ea8:	bf00      	nop
 8006eaa:	e000      	b.n	8006eae <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006eac:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006eae:	3728      	adds	r7, #40	; 0x28
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}
 8006eb4:	40020010 	.word	0x40020010
 8006eb8:	40020028 	.word	0x40020028
 8006ebc:	40020040 	.word	0x40020040
 8006ec0:	40020058 	.word	0x40020058
 8006ec4:	40020070 	.word	0x40020070
 8006ec8:	40020088 	.word	0x40020088
 8006ecc:	400200a0 	.word	0x400200a0
 8006ed0:	400200b8 	.word	0x400200b8
 8006ed4:	40020410 	.word	0x40020410
 8006ed8:	40020428 	.word	0x40020428
 8006edc:	40020440 	.word	0x40020440
 8006ee0:	40020458 	.word	0x40020458
 8006ee4:	40020470 	.word	0x40020470
 8006ee8:	40020488 	.word	0x40020488
 8006eec:	400204a0 	.word	0x400204a0
 8006ef0:	400204b8 	.word	0x400204b8

08006ef4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b087      	sub	sp, #28
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	607a      	str	r2, [r7, #4]
 8006f00:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f06:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f0c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a7f      	ldr	r2, [pc, #508]	; (8007110 <DMA_SetConfig+0x21c>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d072      	beq.n	8006ffe <DMA_SetConfig+0x10a>
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a7d      	ldr	r2, [pc, #500]	; (8007114 <DMA_SetConfig+0x220>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d06d      	beq.n	8006ffe <DMA_SetConfig+0x10a>
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a7c      	ldr	r2, [pc, #496]	; (8007118 <DMA_SetConfig+0x224>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d068      	beq.n	8006ffe <DMA_SetConfig+0x10a>
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a7a      	ldr	r2, [pc, #488]	; (800711c <DMA_SetConfig+0x228>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d063      	beq.n	8006ffe <DMA_SetConfig+0x10a>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a79      	ldr	r2, [pc, #484]	; (8007120 <DMA_SetConfig+0x22c>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d05e      	beq.n	8006ffe <DMA_SetConfig+0x10a>
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a77      	ldr	r2, [pc, #476]	; (8007124 <DMA_SetConfig+0x230>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d059      	beq.n	8006ffe <DMA_SetConfig+0x10a>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a76      	ldr	r2, [pc, #472]	; (8007128 <DMA_SetConfig+0x234>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d054      	beq.n	8006ffe <DMA_SetConfig+0x10a>
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a74      	ldr	r2, [pc, #464]	; (800712c <DMA_SetConfig+0x238>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d04f      	beq.n	8006ffe <DMA_SetConfig+0x10a>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a73      	ldr	r2, [pc, #460]	; (8007130 <DMA_SetConfig+0x23c>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d04a      	beq.n	8006ffe <DMA_SetConfig+0x10a>
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a71      	ldr	r2, [pc, #452]	; (8007134 <DMA_SetConfig+0x240>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d045      	beq.n	8006ffe <DMA_SetConfig+0x10a>
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a70      	ldr	r2, [pc, #448]	; (8007138 <DMA_SetConfig+0x244>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d040      	beq.n	8006ffe <DMA_SetConfig+0x10a>
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a6e      	ldr	r2, [pc, #440]	; (800713c <DMA_SetConfig+0x248>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d03b      	beq.n	8006ffe <DMA_SetConfig+0x10a>
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a6d      	ldr	r2, [pc, #436]	; (8007140 <DMA_SetConfig+0x24c>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d036      	beq.n	8006ffe <DMA_SetConfig+0x10a>
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a6b      	ldr	r2, [pc, #428]	; (8007144 <DMA_SetConfig+0x250>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d031      	beq.n	8006ffe <DMA_SetConfig+0x10a>
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a6a      	ldr	r2, [pc, #424]	; (8007148 <DMA_SetConfig+0x254>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d02c      	beq.n	8006ffe <DMA_SetConfig+0x10a>
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a68      	ldr	r2, [pc, #416]	; (800714c <DMA_SetConfig+0x258>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d027      	beq.n	8006ffe <DMA_SetConfig+0x10a>
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a67      	ldr	r2, [pc, #412]	; (8007150 <DMA_SetConfig+0x25c>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d022      	beq.n	8006ffe <DMA_SetConfig+0x10a>
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a65      	ldr	r2, [pc, #404]	; (8007154 <DMA_SetConfig+0x260>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d01d      	beq.n	8006ffe <DMA_SetConfig+0x10a>
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a64      	ldr	r2, [pc, #400]	; (8007158 <DMA_SetConfig+0x264>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d018      	beq.n	8006ffe <DMA_SetConfig+0x10a>
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a62      	ldr	r2, [pc, #392]	; (800715c <DMA_SetConfig+0x268>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d013      	beq.n	8006ffe <DMA_SetConfig+0x10a>
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a61      	ldr	r2, [pc, #388]	; (8007160 <DMA_SetConfig+0x26c>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d00e      	beq.n	8006ffe <DMA_SetConfig+0x10a>
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a5f      	ldr	r2, [pc, #380]	; (8007164 <DMA_SetConfig+0x270>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d009      	beq.n	8006ffe <DMA_SetConfig+0x10a>
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a5e      	ldr	r2, [pc, #376]	; (8007168 <DMA_SetConfig+0x274>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d004      	beq.n	8006ffe <DMA_SetConfig+0x10a>
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a5c      	ldr	r2, [pc, #368]	; (800716c <DMA_SetConfig+0x278>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d101      	bne.n	8007002 <DMA_SetConfig+0x10e>
 8006ffe:	2301      	movs	r3, #1
 8007000:	e000      	b.n	8007004 <DMA_SetConfig+0x110>
 8007002:	2300      	movs	r3, #0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d00d      	beq.n	8007024 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007010:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007016:	2b00      	cmp	r3, #0
 8007018:	d004      	beq.n	8007024 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800701e:	68fa      	ldr	r2, [r7, #12]
 8007020:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007022:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a39      	ldr	r2, [pc, #228]	; (8007110 <DMA_SetConfig+0x21c>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d04a      	beq.n	80070c4 <DMA_SetConfig+0x1d0>
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a38      	ldr	r2, [pc, #224]	; (8007114 <DMA_SetConfig+0x220>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d045      	beq.n	80070c4 <DMA_SetConfig+0x1d0>
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a36      	ldr	r2, [pc, #216]	; (8007118 <DMA_SetConfig+0x224>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d040      	beq.n	80070c4 <DMA_SetConfig+0x1d0>
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a35      	ldr	r2, [pc, #212]	; (800711c <DMA_SetConfig+0x228>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d03b      	beq.n	80070c4 <DMA_SetConfig+0x1d0>
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a33      	ldr	r2, [pc, #204]	; (8007120 <DMA_SetConfig+0x22c>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d036      	beq.n	80070c4 <DMA_SetConfig+0x1d0>
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a32      	ldr	r2, [pc, #200]	; (8007124 <DMA_SetConfig+0x230>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d031      	beq.n	80070c4 <DMA_SetConfig+0x1d0>
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a30      	ldr	r2, [pc, #192]	; (8007128 <DMA_SetConfig+0x234>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d02c      	beq.n	80070c4 <DMA_SetConfig+0x1d0>
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a2f      	ldr	r2, [pc, #188]	; (800712c <DMA_SetConfig+0x238>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d027      	beq.n	80070c4 <DMA_SetConfig+0x1d0>
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a2d      	ldr	r2, [pc, #180]	; (8007130 <DMA_SetConfig+0x23c>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d022      	beq.n	80070c4 <DMA_SetConfig+0x1d0>
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a2c      	ldr	r2, [pc, #176]	; (8007134 <DMA_SetConfig+0x240>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d01d      	beq.n	80070c4 <DMA_SetConfig+0x1d0>
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a2a      	ldr	r2, [pc, #168]	; (8007138 <DMA_SetConfig+0x244>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d018      	beq.n	80070c4 <DMA_SetConfig+0x1d0>
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a29      	ldr	r2, [pc, #164]	; (800713c <DMA_SetConfig+0x248>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d013      	beq.n	80070c4 <DMA_SetConfig+0x1d0>
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a27      	ldr	r2, [pc, #156]	; (8007140 <DMA_SetConfig+0x24c>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d00e      	beq.n	80070c4 <DMA_SetConfig+0x1d0>
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a26      	ldr	r2, [pc, #152]	; (8007144 <DMA_SetConfig+0x250>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d009      	beq.n	80070c4 <DMA_SetConfig+0x1d0>
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a24      	ldr	r2, [pc, #144]	; (8007148 <DMA_SetConfig+0x254>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d004      	beq.n	80070c4 <DMA_SetConfig+0x1d0>
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a23      	ldr	r2, [pc, #140]	; (800714c <DMA_SetConfig+0x258>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d101      	bne.n	80070c8 <DMA_SetConfig+0x1d4>
 80070c4:	2301      	movs	r3, #1
 80070c6:	e000      	b.n	80070ca <DMA_SetConfig+0x1d6>
 80070c8:	2300      	movs	r3, #0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d059      	beq.n	8007182 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070d2:	f003 031f 	and.w	r3, r3, #31
 80070d6:	223f      	movs	r2, #63	; 0x3f
 80070d8:	409a      	lsls	r2, r3
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80070ec:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	683a      	ldr	r2, [r7, #0]
 80070f4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	2b40      	cmp	r3, #64	; 0x40
 80070fc:	d138      	bne.n	8007170 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	68ba      	ldr	r2, [r7, #8]
 800710c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800710e:	e086      	b.n	800721e <DMA_SetConfig+0x32a>
 8007110:	40020010 	.word	0x40020010
 8007114:	40020028 	.word	0x40020028
 8007118:	40020040 	.word	0x40020040
 800711c:	40020058 	.word	0x40020058
 8007120:	40020070 	.word	0x40020070
 8007124:	40020088 	.word	0x40020088
 8007128:	400200a0 	.word	0x400200a0
 800712c:	400200b8 	.word	0x400200b8
 8007130:	40020410 	.word	0x40020410
 8007134:	40020428 	.word	0x40020428
 8007138:	40020440 	.word	0x40020440
 800713c:	40020458 	.word	0x40020458
 8007140:	40020470 	.word	0x40020470
 8007144:	40020488 	.word	0x40020488
 8007148:	400204a0 	.word	0x400204a0
 800714c:	400204b8 	.word	0x400204b8
 8007150:	58025408 	.word	0x58025408
 8007154:	5802541c 	.word	0x5802541c
 8007158:	58025430 	.word	0x58025430
 800715c:	58025444 	.word	0x58025444
 8007160:	58025458 	.word	0x58025458
 8007164:	5802546c 	.word	0x5802546c
 8007168:	58025480 	.word	0x58025480
 800716c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	68ba      	ldr	r2, [r7, #8]
 8007176:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	60da      	str	r2, [r3, #12]
}
 8007180:	e04d      	b.n	800721e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a29      	ldr	r2, [pc, #164]	; (800722c <DMA_SetConfig+0x338>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d022      	beq.n	80071d2 <DMA_SetConfig+0x2de>
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a27      	ldr	r2, [pc, #156]	; (8007230 <DMA_SetConfig+0x33c>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d01d      	beq.n	80071d2 <DMA_SetConfig+0x2de>
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a26      	ldr	r2, [pc, #152]	; (8007234 <DMA_SetConfig+0x340>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d018      	beq.n	80071d2 <DMA_SetConfig+0x2de>
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a24      	ldr	r2, [pc, #144]	; (8007238 <DMA_SetConfig+0x344>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d013      	beq.n	80071d2 <DMA_SetConfig+0x2de>
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a23      	ldr	r2, [pc, #140]	; (800723c <DMA_SetConfig+0x348>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d00e      	beq.n	80071d2 <DMA_SetConfig+0x2de>
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a21      	ldr	r2, [pc, #132]	; (8007240 <DMA_SetConfig+0x34c>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d009      	beq.n	80071d2 <DMA_SetConfig+0x2de>
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a20      	ldr	r2, [pc, #128]	; (8007244 <DMA_SetConfig+0x350>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d004      	beq.n	80071d2 <DMA_SetConfig+0x2de>
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a1e      	ldr	r2, [pc, #120]	; (8007248 <DMA_SetConfig+0x354>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d101      	bne.n	80071d6 <DMA_SetConfig+0x2e2>
 80071d2:	2301      	movs	r3, #1
 80071d4:	e000      	b.n	80071d8 <DMA_SetConfig+0x2e4>
 80071d6:	2300      	movs	r3, #0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d020      	beq.n	800721e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071e0:	f003 031f 	and.w	r3, r3, #31
 80071e4:	2201      	movs	r2, #1
 80071e6:	409a      	lsls	r2, r3
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	683a      	ldr	r2, [r7, #0]
 80071f2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	2b40      	cmp	r3, #64	; 0x40
 80071fa:	d108      	bne.n	800720e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	68ba      	ldr	r2, [r7, #8]
 800720a:	60da      	str	r2, [r3, #12]
}
 800720c:	e007      	b.n	800721e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	68ba      	ldr	r2, [r7, #8]
 8007214:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	60da      	str	r2, [r3, #12]
}
 800721e:	bf00      	nop
 8007220:	371c      	adds	r7, #28
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr
 800722a:	bf00      	nop
 800722c:	58025408 	.word	0x58025408
 8007230:	5802541c 	.word	0x5802541c
 8007234:	58025430 	.word	0x58025430
 8007238:	58025444 	.word	0x58025444
 800723c:	58025458 	.word	0x58025458
 8007240:	5802546c 	.word	0x5802546c
 8007244:	58025480 	.word	0x58025480
 8007248:	58025494 	.word	0x58025494

0800724c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800724c:	b480      	push	{r7}
 800724e:	b085      	sub	sp, #20
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a42      	ldr	r2, [pc, #264]	; (8007364 <DMA_CalcBaseAndBitshift+0x118>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d04a      	beq.n	80072f4 <DMA_CalcBaseAndBitshift+0xa8>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a41      	ldr	r2, [pc, #260]	; (8007368 <DMA_CalcBaseAndBitshift+0x11c>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d045      	beq.n	80072f4 <DMA_CalcBaseAndBitshift+0xa8>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a3f      	ldr	r2, [pc, #252]	; (800736c <DMA_CalcBaseAndBitshift+0x120>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d040      	beq.n	80072f4 <DMA_CalcBaseAndBitshift+0xa8>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a3e      	ldr	r2, [pc, #248]	; (8007370 <DMA_CalcBaseAndBitshift+0x124>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d03b      	beq.n	80072f4 <DMA_CalcBaseAndBitshift+0xa8>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a3c      	ldr	r2, [pc, #240]	; (8007374 <DMA_CalcBaseAndBitshift+0x128>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d036      	beq.n	80072f4 <DMA_CalcBaseAndBitshift+0xa8>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a3b      	ldr	r2, [pc, #236]	; (8007378 <DMA_CalcBaseAndBitshift+0x12c>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d031      	beq.n	80072f4 <DMA_CalcBaseAndBitshift+0xa8>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a39      	ldr	r2, [pc, #228]	; (800737c <DMA_CalcBaseAndBitshift+0x130>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d02c      	beq.n	80072f4 <DMA_CalcBaseAndBitshift+0xa8>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a38      	ldr	r2, [pc, #224]	; (8007380 <DMA_CalcBaseAndBitshift+0x134>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d027      	beq.n	80072f4 <DMA_CalcBaseAndBitshift+0xa8>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a36      	ldr	r2, [pc, #216]	; (8007384 <DMA_CalcBaseAndBitshift+0x138>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d022      	beq.n	80072f4 <DMA_CalcBaseAndBitshift+0xa8>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a35      	ldr	r2, [pc, #212]	; (8007388 <DMA_CalcBaseAndBitshift+0x13c>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d01d      	beq.n	80072f4 <DMA_CalcBaseAndBitshift+0xa8>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a33      	ldr	r2, [pc, #204]	; (800738c <DMA_CalcBaseAndBitshift+0x140>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d018      	beq.n	80072f4 <DMA_CalcBaseAndBitshift+0xa8>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a32      	ldr	r2, [pc, #200]	; (8007390 <DMA_CalcBaseAndBitshift+0x144>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d013      	beq.n	80072f4 <DMA_CalcBaseAndBitshift+0xa8>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a30      	ldr	r2, [pc, #192]	; (8007394 <DMA_CalcBaseAndBitshift+0x148>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d00e      	beq.n	80072f4 <DMA_CalcBaseAndBitshift+0xa8>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a2f      	ldr	r2, [pc, #188]	; (8007398 <DMA_CalcBaseAndBitshift+0x14c>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d009      	beq.n	80072f4 <DMA_CalcBaseAndBitshift+0xa8>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a2d      	ldr	r2, [pc, #180]	; (800739c <DMA_CalcBaseAndBitshift+0x150>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d004      	beq.n	80072f4 <DMA_CalcBaseAndBitshift+0xa8>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a2c      	ldr	r2, [pc, #176]	; (80073a0 <DMA_CalcBaseAndBitshift+0x154>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d101      	bne.n	80072f8 <DMA_CalcBaseAndBitshift+0xac>
 80072f4:	2301      	movs	r3, #1
 80072f6:	e000      	b.n	80072fa <DMA_CalcBaseAndBitshift+0xae>
 80072f8:	2300      	movs	r3, #0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d024      	beq.n	8007348 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	b2db      	uxtb	r3, r3
 8007304:	3b10      	subs	r3, #16
 8007306:	4a27      	ldr	r2, [pc, #156]	; (80073a4 <DMA_CalcBaseAndBitshift+0x158>)
 8007308:	fba2 2303 	umull	r2, r3, r2, r3
 800730c:	091b      	lsrs	r3, r3, #4
 800730e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f003 0307 	and.w	r3, r3, #7
 8007316:	4a24      	ldr	r2, [pc, #144]	; (80073a8 <DMA_CalcBaseAndBitshift+0x15c>)
 8007318:	5cd3      	ldrb	r3, [r2, r3]
 800731a:	461a      	mov	r2, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2b03      	cmp	r3, #3
 8007324:	d908      	bls.n	8007338 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	461a      	mov	r2, r3
 800732c:	4b1f      	ldr	r3, [pc, #124]	; (80073ac <DMA_CalcBaseAndBitshift+0x160>)
 800732e:	4013      	ands	r3, r2
 8007330:	1d1a      	adds	r2, r3, #4
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	659a      	str	r2, [r3, #88]	; 0x58
 8007336:	e00d      	b.n	8007354 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	461a      	mov	r2, r3
 800733e:	4b1b      	ldr	r3, [pc, #108]	; (80073ac <DMA_CalcBaseAndBitshift+0x160>)
 8007340:	4013      	ands	r3, r2
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	6593      	str	r3, [r2, #88]	; 0x58
 8007346:	e005      	b.n	8007354 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007358:	4618      	mov	r0, r3
 800735a:	3714      	adds	r7, #20
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr
 8007364:	40020010 	.word	0x40020010
 8007368:	40020028 	.word	0x40020028
 800736c:	40020040 	.word	0x40020040
 8007370:	40020058 	.word	0x40020058
 8007374:	40020070 	.word	0x40020070
 8007378:	40020088 	.word	0x40020088
 800737c:	400200a0 	.word	0x400200a0
 8007380:	400200b8 	.word	0x400200b8
 8007384:	40020410 	.word	0x40020410
 8007388:	40020428 	.word	0x40020428
 800738c:	40020440 	.word	0x40020440
 8007390:	40020458 	.word	0x40020458
 8007394:	40020470 	.word	0x40020470
 8007398:	40020488 	.word	0x40020488
 800739c:	400204a0 	.word	0x400204a0
 80073a0:	400204b8 	.word	0x400204b8
 80073a4:	aaaaaaab 	.word	0xaaaaaaab
 80073a8:	0800e6d4 	.word	0x0800e6d4
 80073ac:	fffffc00 	.word	0xfffffc00

080073b0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b085      	sub	sp, #20
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073b8:	2300      	movs	r3, #0
 80073ba:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	699b      	ldr	r3, [r3, #24]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d120      	bne.n	8007406 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073c8:	2b03      	cmp	r3, #3
 80073ca:	d858      	bhi.n	800747e <DMA_CheckFifoParam+0xce>
 80073cc:	a201      	add	r2, pc, #4	; (adr r2, 80073d4 <DMA_CheckFifoParam+0x24>)
 80073ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d2:	bf00      	nop
 80073d4:	080073e5 	.word	0x080073e5
 80073d8:	080073f7 	.word	0x080073f7
 80073dc:	080073e5 	.word	0x080073e5
 80073e0:	0800747f 	.word	0x0800747f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d048      	beq.n	8007482 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80073f4:	e045      	b.n	8007482 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80073fe:	d142      	bne.n	8007486 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007400:	2301      	movs	r3, #1
 8007402:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007404:	e03f      	b.n	8007486 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	699b      	ldr	r3, [r3, #24]
 800740a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800740e:	d123      	bne.n	8007458 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007414:	2b03      	cmp	r3, #3
 8007416:	d838      	bhi.n	800748a <DMA_CheckFifoParam+0xda>
 8007418:	a201      	add	r2, pc, #4	; (adr r2, 8007420 <DMA_CheckFifoParam+0x70>)
 800741a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800741e:	bf00      	nop
 8007420:	08007431 	.word	0x08007431
 8007424:	08007437 	.word	0x08007437
 8007428:	08007431 	.word	0x08007431
 800742c:	08007449 	.word	0x08007449
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007430:	2301      	movs	r3, #1
 8007432:	73fb      	strb	r3, [r7, #15]
        break;
 8007434:	e030      	b.n	8007498 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800743a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800743e:	2b00      	cmp	r3, #0
 8007440:	d025      	beq.n	800748e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007446:	e022      	b.n	800748e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800744c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007450:	d11f      	bne.n	8007492 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007456:	e01c      	b.n	8007492 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800745c:	2b02      	cmp	r3, #2
 800745e:	d902      	bls.n	8007466 <DMA_CheckFifoParam+0xb6>
 8007460:	2b03      	cmp	r3, #3
 8007462:	d003      	beq.n	800746c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007464:	e018      	b.n	8007498 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	73fb      	strb	r3, [r7, #15]
        break;
 800746a:	e015      	b.n	8007498 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007470:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007474:	2b00      	cmp	r3, #0
 8007476:	d00e      	beq.n	8007496 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007478:	2301      	movs	r3, #1
 800747a:	73fb      	strb	r3, [r7, #15]
    break;
 800747c:	e00b      	b.n	8007496 <DMA_CheckFifoParam+0xe6>
        break;
 800747e:	bf00      	nop
 8007480:	e00a      	b.n	8007498 <DMA_CheckFifoParam+0xe8>
        break;
 8007482:	bf00      	nop
 8007484:	e008      	b.n	8007498 <DMA_CheckFifoParam+0xe8>
        break;
 8007486:	bf00      	nop
 8007488:	e006      	b.n	8007498 <DMA_CheckFifoParam+0xe8>
        break;
 800748a:	bf00      	nop
 800748c:	e004      	b.n	8007498 <DMA_CheckFifoParam+0xe8>
        break;
 800748e:	bf00      	nop
 8007490:	e002      	b.n	8007498 <DMA_CheckFifoParam+0xe8>
        break;
 8007492:	bf00      	nop
 8007494:	e000      	b.n	8007498 <DMA_CheckFifoParam+0xe8>
    break;
 8007496:	bf00      	nop
    }
  }

  return status;
 8007498:	7bfb      	ldrb	r3, [r7, #15]
}
 800749a:	4618      	mov	r0, r3
 800749c:	3714      	adds	r7, #20
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr
 80074a6:	bf00      	nop

080074a8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b085      	sub	sp, #20
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a38      	ldr	r2, [pc, #224]	; (800759c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d022      	beq.n	8007506 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a36      	ldr	r2, [pc, #216]	; (80075a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d01d      	beq.n	8007506 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a35      	ldr	r2, [pc, #212]	; (80075a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d018      	beq.n	8007506 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a33      	ldr	r2, [pc, #204]	; (80075a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d013      	beq.n	8007506 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a32      	ldr	r2, [pc, #200]	; (80075ac <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d00e      	beq.n	8007506 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a30      	ldr	r2, [pc, #192]	; (80075b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d009      	beq.n	8007506 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a2f      	ldr	r2, [pc, #188]	; (80075b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d004      	beq.n	8007506 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a2d      	ldr	r2, [pc, #180]	; (80075b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d101      	bne.n	800750a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007506:	2301      	movs	r3, #1
 8007508:	e000      	b.n	800750c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800750a:	2300      	movs	r3, #0
 800750c:	2b00      	cmp	r3, #0
 800750e:	d01a      	beq.n	8007546 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	b2db      	uxtb	r3, r3
 8007516:	3b08      	subs	r3, #8
 8007518:	4a28      	ldr	r2, [pc, #160]	; (80075bc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800751a:	fba2 2303 	umull	r2, r3, r2, r3
 800751e:	091b      	lsrs	r3, r3, #4
 8007520:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007522:	68fa      	ldr	r2, [r7, #12]
 8007524:	4b26      	ldr	r3, [pc, #152]	; (80075c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007526:	4413      	add	r3, r2
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	461a      	mov	r2, r3
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4a24      	ldr	r2, [pc, #144]	; (80075c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007534:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f003 031f 	and.w	r3, r3, #31
 800753c:	2201      	movs	r2, #1
 800753e:	409a      	lsls	r2, r3
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007544:	e024      	b.n	8007590 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	b2db      	uxtb	r3, r3
 800754c:	3b10      	subs	r3, #16
 800754e:	4a1e      	ldr	r2, [pc, #120]	; (80075c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007550:	fba2 2303 	umull	r2, r3, r2, r3
 8007554:	091b      	lsrs	r3, r3, #4
 8007556:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	4a1c      	ldr	r2, [pc, #112]	; (80075cc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d806      	bhi.n	800756e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	4a1b      	ldr	r2, [pc, #108]	; (80075d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d902      	bls.n	800756e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	3308      	adds	r3, #8
 800756c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800756e:	68fa      	ldr	r2, [r7, #12]
 8007570:	4b18      	ldr	r3, [pc, #96]	; (80075d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007572:	4413      	add	r3, r2
 8007574:	009b      	lsls	r3, r3, #2
 8007576:	461a      	mov	r2, r3
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	4a16      	ldr	r2, [pc, #88]	; (80075d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007580:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f003 031f 	and.w	r3, r3, #31
 8007588:	2201      	movs	r2, #1
 800758a:	409a      	lsls	r2, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007590:	bf00      	nop
 8007592:	3714      	adds	r7, #20
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr
 800759c:	58025408 	.word	0x58025408
 80075a0:	5802541c 	.word	0x5802541c
 80075a4:	58025430 	.word	0x58025430
 80075a8:	58025444 	.word	0x58025444
 80075ac:	58025458 	.word	0x58025458
 80075b0:	5802546c 	.word	0x5802546c
 80075b4:	58025480 	.word	0x58025480
 80075b8:	58025494 	.word	0x58025494
 80075bc:	cccccccd 	.word	0xcccccccd
 80075c0:	16009600 	.word	0x16009600
 80075c4:	58025880 	.word	0x58025880
 80075c8:	aaaaaaab 	.word	0xaaaaaaab
 80075cc:	400204b8 	.word	0x400204b8
 80075d0:	4002040f 	.word	0x4002040f
 80075d4:	10008200 	.word	0x10008200
 80075d8:	40020880 	.word	0x40020880

080075dc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80075dc:	b480      	push	{r7}
 80075de:	b085      	sub	sp, #20
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d04a      	beq.n	8007688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2b08      	cmp	r3, #8
 80075f6:	d847      	bhi.n	8007688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a25      	ldr	r2, [pc, #148]	; (8007694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d022      	beq.n	8007648 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a24      	ldr	r2, [pc, #144]	; (8007698 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d01d      	beq.n	8007648 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a22      	ldr	r2, [pc, #136]	; (800769c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d018      	beq.n	8007648 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a21      	ldr	r2, [pc, #132]	; (80076a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d013      	beq.n	8007648 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a1f      	ldr	r2, [pc, #124]	; (80076a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d00e      	beq.n	8007648 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a1e      	ldr	r2, [pc, #120]	; (80076a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d009      	beq.n	8007648 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a1c      	ldr	r2, [pc, #112]	; (80076ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d004      	beq.n	8007648 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a1b      	ldr	r2, [pc, #108]	; (80076b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d101      	bne.n	800764c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007648:	2301      	movs	r3, #1
 800764a:	e000      	b.n	800764e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800764c:	2300      	movs	r3, #0
 800764e:	2b00      	cmp	r3, #0
 8007650:	d00a      	beq.n	8007668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007652:	68fa      	ldr	r2, [r7, #12]
 8007654:	4b17      	ldr	r3, [pc, #92]	; (80076b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007656:	4413      	add	r3, r2
 8007658:	009b      	lsls	r3, r3, #2
 800765a:	461a      	mov	r2, r3
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	4a15      	ldr	r2, [pc, #84]	; (80076b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007664:	671a      	str	r2, [r3, #112]	; 0x70
 8007666:	e009      	b.n	800767c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007668:	68fa      	ldr	r2, [r7, #12]
 800766a:	4b14      	ldr	r3, [pc, #80]	; (80076bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800766c:	4413      	add	r3, r2
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	461a      	mov	r2, r3
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	4a11      	ldr	r2, [pc, #68]	; (80076c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800767a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	3b01      	subs	r3, #1
 8007680:	2201      	movs	r2, #1
 8007682:	409a      	lsls	r2, r3
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007688:	bf00      	nop
 800768a:	3714      	adds	r7, #20
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr
 8007694:	58025408 	.word	0x58025408
 8007698:	5802541c 	.word	0x5802541c
 800769c:	58025430 	.word	0x58025430
 80076a0:	58025444 	.word	0x58025444
 80076a4:	58025458 	.word	0x58025458
 80076a8:	5802546c 	.word	0x5802546c
 80076ac:	58025480 	.word	0x58025480
 80076b0:	58025494 	.word	0x58025494
 80076b4:	1600963f 	.word	0x1600963f
 80076b8:	58025940 	.word	0x58025940
 80076bc:	1000823f 	.word	0x1000823f
 80076c0:	40020940 	.word	0x40020940

080076c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b089      	sub	sp, #36	; 0x24
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80076ce:	2300      	movs	r3, #0
 80076d0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80076d2:	4b86      	ldr	r3, [pc, #536]	; (80078ec <HAL_GPIO_Init+0x228>)
 80076d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80076d6:	e18c      	b.n	80079f2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	2101      	movs	r1, #1
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	fa01 f303 	lsl.w	r3, r1, r3
 80076e4:	4013      	ands	r3, r2
 80076e6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	f000 817e 	beq.w	80079ec <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	f003 0303 	and.w	r3, r3, #3
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d005      	beq.n	8007708 <HAL_GPIO_Init+0x44>
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	f003 0303 	and.w	r3, r3, #3
 8007704:	2b02      	cmp	r3, #2
 8007706:	d130      	bne.n	800776a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800770e:	69fb      	ldr	r3, [r7, #28]
 8007710:	005b      	lsls	r3, r3, #1
 8007712:	2203      	movs	r2, #3
 8007714:	fa02 f303 	lsl.w	r3, r2, r3
 8007718:	43db      	mvns	r3, r3
 800771a:	69ba      	ldr	r2, [r7, #24]
 800771c:	4013      	ands	r3, r2
 800771e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	68da      	ldr	r2, [r3, #12]
 8007724:	69fb      	ldr	r3, [r7, #28]
 8007726:	005b      	lsls	r3, r3, #1
 8007728:	fa02 f303 	lsl.w	r3, r2, r3
 800772c:	69ba      	ldr	r2, [r7, #24]
 800772e:	4313      	orrs	r3, r2
 8007730:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	69ba      	ldr	r2, [r7, #24]
 8007736:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800773e:	2201      	movs	r2, #1
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	fa02 f303 	lsl.w	r3, r2, r3
 8007746:	43db      	mvns	r3, r3
 8007748:	69ba      	ldr	r2, [r7, #24]
 800774a:	4013      	ands	r3, r2
 800774c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	091b      	lsrs	r3, r3, #4
 8007754:	f003 0201 	and.w	r2, r3, #1
 8007758:	69fb      	ldr	r3, [r7, #28]
 800775a:	fa02 f303 	lsl.w	r3, r2, r3
 800775e:	69ba      	ldr	r2, [r7, #24]
 8007760:	4313      	orrs	r3, r2
 8007762:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	69ba      	ldr	r2, [r7, #24]
 8007768:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	f003 0303 	and.w	r3, r3, #3
 8007772:	2b03      	cmp	r3, #3
 8007774:	d017      	beq.n	80077a6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	68db      	ldr	r3, [r3, #12]
 800777a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800777c:	69fb      	ldr	r3, [r7, #28]
 800777e:	005b      	lsls	r3, r3, #1
 8007780:	2203      	movs	r2, #3
 8007782:	fa02 f303 	lsl.w	r3, r2, r3
 8007786:	43db      	mvns	r3, r3
 8007788:	69ba      	ldr	r2, [r7, #24]
 800778a:	4013      	ands	r3, r2
 800778c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	689a      	ldr	r2, [r3, #8]
 8007792:	69fb      	ldr	r3, [r7, #28]
 8007794:	005b      	lsls	r3, r3, #1
 8007796:	fa02 f303 	lsl.w	r3, r2, r3
 800779a:	69ba      	ldr	r2, [r7, #24]
 800779c:	4313      	orrs	r3, r2
 800779e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	69ba      	ldr	r2, [r7, #24]
 80077a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	f003 0303 	and.w	r3, r3, #3
 80077ae:	2b02      	cmp	r3, #2
 80077b0:	d123      	bne.n	80077fa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	08da      	lsrs	r2, r3, #3
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	3208      	adds	r2, #8
 80077ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	f003 0307 	and.w	r3, r3, #7
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	220f      	movs	r2, #15
 80077ca:	fa02 f303 	lsl.w	r3, r2, r3
 80077ce:	43db      	mvns	r3, r3
 80077d0:	69ba      	ldr	r2, [r7, #24]
 80077d2:	4013      	ands	r3, r2
 80077d4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	691a      	ldr	r2, [r3, #16]
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	f003 0307 	and.w	r3, r3, #7
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	fa02 f303 	lsl.w	r3, r2, r3
 80077e6:	69ba      	ldr	r2, [r7, #24]
 80077e8:	4313      	orrs	r3, r2
 80077ea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	08da      	lsrs	r2, r3, #3
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	3208      	adds	r2, #8
 80077f4:	69b9      	ldr	r1, [r7, #24]
 80077f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007800:	69fb      	ldr	r3, [r7, #28]
 8007802:	005b      	lsls	r3, r3, #1
 8007804:	2203      	movs	r2, #3
 8007806:	fa02 f303 	lsl.w	r3, r2, r3
 800780a:	43db      	mvns	r3, r3
 800780c:	69ba      	ldr	r2, [r7, #24]
 800780e:	4013      	ands	r3, r2
 8007810:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	f003 0203 	and.w	r2, r3, #3
 800781a:	69fb      	ldr	r3, [r7, #28]
 800781c:	005b      	lsls	r3, r3, #1
 800781e:	fa02 f303 	lsl.w	r3, r2, r3
 8007822:	69ba      	ldr	r2, [r7, #24]
 8007824:	4313      	orrs	r3, r2
 8007826:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	69ba      	ldr	r2, [r7, #24]
 800782c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007836:	2b00      	cmp	r3, #0
 8007838:	f000 80d8 	beq.w	80079ec <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800783c:	4b2c      	ldr	r3, [pc, #176]	; (80078f0 <HAL_GPIO_Init+0x22c>)
 800783e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007842:	4a2b      	ldr	r2, [pc, #172]	; (80078f0 <HAL_GPIO_Init+0x22c>)
 8007844:	f043 0302 	orr.w	r3, r3, #2
 8007848:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800784c:	4b28      	ldr	r3, [pc, #160]	; (80078f0 <HAL_GPIO_Init+0x22c>)
 800784e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007852:	f003 0302 	and.w	r3, r3, #2
 8007856:	60fb      	str	r3, [r7, #12]
 8007858:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800785a:	4a26      	ldr	r2, [pc, #152]	; (80078f4 <HAL_GPIO_Init+0x230>)
 800785c:	69fb      	ldr	r3, [r7, #28]
 800785e:	089b      	lsrs	r3, r3, #2
 8007860:	3302      	adds	r3, #2
 8007862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007866:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	f003 0303 	and.w	r3, r3, #3
 800786e:	009b      	lsls	r3, r3, #2
 8007870:	220f      	movs	r2, #15
 8007872:	fa02 f303 	lsl.w	r3, r2, r3
 8007876:	43db      	mvns	r3, r3
 8007878:	69ba      	ldr	r2, [r7, #24]
 800787a:	4013      	ands	r3, r2
 800787c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	4a1d      	ldr	r2, [pc, #116]	; (80078f8 <HAL_GPIO_Init+0x234>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d04a      	beq.n	800791c <HAL_GPIO_Init+0x258>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	4a1c      	ldr	r2, [pc, #112]	; (80078fc <HAL_GPIO_Init+0x238>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d02b      	beq.n	80078e6 <HAL_GPIO_Init+0x222>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	4a1b      	ldr	r2, [pc, #108]	; (8007900 <HAL_GPIO_Init+0x23c>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d025      	beq.n	80078e2 <HAL_GPIO_Init+0x21e>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	4a1a      	ldr	r2, [pc, #104]	; (8007904 <HAL_GPIO_Init+0x240>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d01f      	beq.n	80078de <HAL_GPIO_Init+0x21a>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	4a19      	ldr	r2, [pc, #100]	; (8007908 <HAL_GPIO_Init+0x244>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d019      	beq.n	80078da <HAL_GPIO_Init+0x216>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	4a18      	ldr	r2, [pc, #96]	; (800790c <HAL_GPIO_Init+0x248>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d013      	beq.n	80078d6 <HAL_GPIO_Init+0x212>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4a17      	ldr	r2, [pc, #92]	; (8007910 <HAL_GPIO_Init+0x24c>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d00d      	beq.n	80078d2 <HAL_GPIO_Init+0x20e>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	4a16      	ldr	r2, [pc, #88]	; (8007914 <HAL_GPIO_Init+0x250>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d007      	beq.n	80078ce <HAL_GPIO_Init+0x20a>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	4a15      	ldr	r2, [pc, #84]	; (8007918 <HAL_GPIO_Init+0x254>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d101      	bne.n	80078ca <HAL_GPIO_Init+0x206>
 80078c6:	2309      	movs	r3, #9
 80078c8:	e029      	b.n	800791e <HAL_GPIO_Init+0x25a>
 80078ca:	230a      	movs	r3, #10
 80078cc:	e027      	b.n	800791e <HAL_GPIO_Init+0x25a>
 80078ce:	2307      	movs	r3, #7
 80078d0:	e025      	b.n	800791e <HAL_GPIO_Init+0x25a>
 80078d2:	2306      	movs	r3, #6
 80078d4:	e023      	b.n	800791e <HAL_GPIO_Init+0x25a>
 80078d6:	2305      	movs	r3, #5
 80078d8:	e021      	b.n	800791e <HAL_GPIO_Init+0x25a>
 80078da:	2304      	movs	r3, #4
 80078dc:	e01f      	b.n	800791e <HAL_GPIO_Init+0x25a>
 80078de:	2303      	movs	r3, #3
 80078e0:	e01d      	b.n	800791e <HAL_GPIO_Init+0x25a>
 80078e2:	2302      	movs	r3, #2
 80078e4:	e01b      	b.n	800791e <HAL_GPIO_Init+0x25a>
 80078e6:	2301      	movs	r3, #1
 80078e8:	e019      	b.n	800791e <HAL_GPIO_Init+0x25a>
 80078ea:	bf00      	nop
 80078ec:	58000080 	.word	0x58000080
 80078f0:	58024400 	.word	0x58024400
 80078f4:	58000400 	.word	0x58000400
 80078f8:	58020000 	.word	0x58020000
 80078fc:	58020400 	.word	0x58020400
 8007900:	58020800 	.word	0x58020800
 8007904:	58020c00 	.word	0x58020c00
 8007908:	58021000 	.word	0x58021000
 800790c:	58021400 	.word	0x58021400
 8007910:	58021800 	.word	0x58021800
 8007914:	58021c00 	.word	0x58021c00
 8007918:	58022400 	.word	0x58022400
 800791c:	2300      	movs	r3, #0
 800791e:	69fa      	ldr	r2, [r7, #28]
 8007920:	f002 0203 	and.w	r2, r2, #3
 8007924:	0092      	lsls	r2, r2, #2
 8007926:	4093      	lsls	r3, r2
 8007928:	69ba      	ldr	r2, [r7, #24]
 800792a:	4313      	orrs	r3, r2
 800792c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800792e:	4938      	ldr	r1, [pc, #224]	; (8007a10 <HAL_GPIO_Init+0x34c>)
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	089b      	lsrs	r3, r3, #2
 8007934:	3302      	adds	r3, #2
 8007936:	69ba      	ldr	r2, [r7, #24]
 8007938:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800793c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	43db      	mvns	r3, r3
 8007948:	69ba      	ldr	r2, [r7, #24]
 800794a:	4013      	ands	r3, r2
 800794c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007956:	2b00      	cmp	r3, #0
 8007958:	d003      	beq.n	8007962 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800795a:	69ba      	ldr	r2, [r7, #24]
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	4313      	orrs	r3, r2
 8007960:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007962:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007966:	69bb      	ldr	r3, [r7, #24]
 8007968:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800796a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	43db      	mvns	r3, r3
 8007976:	69ba      	ldr	r2, [r7, #24]
 8007978:	4013      	ands	r3, r2
 800797a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007984:	2b00      	cmp	r3, #0
 8007986:	d003      	beq.n	8007990 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007988:	69ba      	ldr	r2, [r7, #24]
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	4313      	orrs	r3, r2
 800798e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007990:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007994:	69bb      	ldr	r3, [r7, #24]
 8007996:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	43db      	mvns	r3, r3
 80079a2:	69ba      	ldr	r2, [r7, #24]
 80079a4:	4013      	ands	r3, r2
 80079a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d003      	beq.n	80079bc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80079b4:	69ba      	ldr	r2, [r7, #24]
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	4313      	orrs	r3, r2
 80079ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	69ba      	ldr	r2, [r7, #24]
 80079c0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	43db      	mvns	r3, r3
 80079cc:	69ba      	ldr	r2, [r7, #24]
 80079ce:	4013      	ands	r3, r2
 80079d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d003      	beq.n	80079e6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80079de:	69ba      	ldr	r2, [r7, #24]
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	69ba      	ldr	r2, [r7, #24]
 80079ea:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	3301      	adds	r3, #1
 80079f0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	69fb      	ldr	r3, [r7, #28]
 80079f8:	fa22 f303 	lsr.w	r3, r2, r3
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	f47f ae6b 	bne.w	80076d8 <HAL_GPIO_Init+0x14>
  }
}
 8007a02:	bf00      	nop
 8007a04:	bf00      	nop
 8007a06:	3724      	adds	r7, #36	; 0x24
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr
 8007a10:	58000400 	.word	0x58000400

08007a14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b083      	sub	sp, #12
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	807b      	strh	r3, [r7, #2]
 8007a20:	4613      	mov	r3, r2
 8007a22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007a24:	787b      	ldrb	r3, [r7, #1]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d003      	beq.n	8007a32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007a2a:	887a      	ldrh	r2, [r7, #2]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007a30:	e003      	b.n	8007a3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007a32:	887b      	ldrh	r3, [r7, #2]
 8007a34:	041a      	lsls	r2, r3, #16
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	619a      	str	r2, [r3, #24]
}
 8007a3a:	bf00      	nop
 8007a3c:	370c      	adds	r7, #12
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr
	...

08007a48 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007a50:	4b19      	ldr	r3, [pc, #100]	; (8007ab8 <HAL_PWREx_ConfigSupply+0x70>)
 8007a52:	68db      	ldr	r3, [r3, #12]
 8007a54:	f003 0304 	and.w	r3, r3, #4
 8007a58:	2b04      	cmp	r3, #4
 8007a5a:	d00a      	beq.n	8007a72 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007a5c:	4b16      	ldr	r3, [pc, #88]	; (8007ab8 <HAL_PWREx_ConfigSupply+0x70>)
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	f003 0307 	and.w	r3, r3, #7
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d001      	beq.n	8007a6e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e01f      	b.n	8007aae <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	e01d      	b.n	8007aae <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007a72:	4b11      	ldr	r3, [pc, #68]	; (8007ab8 <HAL_PWREx_ConfigSupply+0x70>)
 8007a74:	68db      	ldr	r3, [r3, #12]
 8007a76:	f023 0207 	bic.w	r2, r3, #7
 8007a7a:	490f      	ldr	r1, [pc, #60]	; (8007ab8 <HAL_PWREx_ConfigSupply+0x70>)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007a82:	f7fc fec9 	bl	8004818 <HAL_GetTick>
 8007a86:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007a88:	e009      	b.n	8007a9e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007a8a:	f7fc fec5 	bl	8004818 <HAL_GetTick>
 8007a8e:	4602      	mov	r2, r0
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	1ad3      	subs	r3, r2, r3
 8007a94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a98:	d901      	bls.n	8007a9e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e007      	b.n	8007aae <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007a9e:	4b06      	ldr	r3, [pc, #24]	; (8007ab8 <HAL_PWREx_ConfigSupply+0x70>)
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007aa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007aaa:	d1ee      	bne.n	8007a8a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007aac:	2300      	movs	r3, #0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3710      	adds	r7, #16
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop
 8007ab8:	58024800 	.word	0x58024800

08007abc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b08c      	sub	sp, #48	; 0x30
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d101      	bne.n	8007ace <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	e3c8      	b.n	8008260 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f003 0301 	and.w	r3, r3, #1
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	f000 8087 	beq.w	8007bea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007adc:	4b88      	ldr	r3, [pc, #544]	; (8007d00 <HAL_RCC_OscConfig+0x244>)
 8007ade:	691b      	ldr	r3, [r3, #16]
 8007ae0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007ae6:	4b86      	ldr	r3, [pc, #536]	; (8007d00 <HAL_RCC_OscConfig+0x244>)
 8007ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aea:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aee:	2b10      	cmp	r3, #16
 8007af0:	d007      	beq.n	8007b02 <HAL_RCC_OscConfig+0x46>
 8007af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af4:	2b18      	cmp	r3, #24
 8007af6:	d110      	bne.n	8007b1a <HAL_RCC_OscConfig+0x5e>
 8007af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007afa:	f003 0303 	and.w	r3, r3, #3
 8007afe:	2b02      	cmp	r3, #2
 8007b00:	d10b      	bne.n	8007b1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b02:	4b7f      	ldr	r3, [pc, #508]	; (8007d00 <HAL_RCC_OscConfig+0x244>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d06c      	beq.n	8007be8 <HAL_RCC_OscConfig+0x12c>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d168      	bne.n	8007be8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	e3a2      	b.n	8008260 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b22:	d106      	bne.n	8007b32 <HAL_RCC_OscConfig+0x76>
 8007b24:	4b76      	ldr	r3, [pc, #472]	; (8007d00 <HAL_RCC_OscConfig+0x244>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a75      	ldr	r2, [pc, #468]	; (8007d00 <HAL_RCC_OscConfig+0x244>)
 8007b2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b2e:	6013      	str	r3, [r2, #0]
 8007b30:	e02e      	b.n	8007b90 <HAL_RCC_OscConfig+0xd4>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d10c      	bne.n	8007b54 <HAL_RCC_OscConfig+0x98>
 8007b3a:	4b71      	ldr	r3, [pc, #452]	; (8007d00 <HAL_RCC_OscConfig+0x244>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a70      	ldr	r2, [pc, #448]	; (8007d00 <HAL_RCC_OscConfig+0x244>)
 8007b40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b44:	6013      	str	r3, [r2, #0]
 8007b46:	4b6e      	ldr	r3, [pc, #440]	; (8007d00 <HAL_RCC_OscConfig+0x244>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a6d      	ldr	r2, [pc, #436]	; (8007d00 <HAL_RCC_OscConfig+0x244>)
 8007b4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b50:	6013      	str	r3, [r2, #0]
 8007b52:	e01d      	b.n	8007b90 <HAL_RCC_OscConfig+0xd4>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007b5c:	d10c      	bne.n	8007b78 <HAL_RCC_OscConfig+0xbc>
 8007b5e:	4b68      	ldr	r3, [pc, #416]	; (8007d00 <HAL_RCC_OscConfig+0x244>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a67      	ldr	r2, [pc, #412]	; (8007d00 <HAL_RCC_OscConfig+0x244>)
 8007b64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007b68:	6013      	str	r3, [r2, #0]
 8007b6a:	4b65      	ldr	r3, [pc, #404]	; (8007d00 <HAL_RCC_OscConfig+0x244>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a64      	ldr	r2, [pc, #400]	; (8007d00 <HAL_RCC_OscConfig+0x244>)
 8007b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b74:	6013      	str	r3, [r2, #0]
 8007b76:	e00b      	b.n	8007b90 <HAL_RCC_OscConfig+0xd4>
 8007b78:	4b61      	ldr	r3, [pc, #388]	; (8007d00 <HAL_RCC_OscConfig+0x244>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a60      	ldr	r2, [pc, #384]	; (8007d00 <HAL_RCC_OscConfig+0x244>)
 8007b7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b82:	6013      	str	r3, [r2, #0]
 8007b84:	4b5e      	ldr	r3, [pc, #376]	; (8007d00 <HAL_RCC_OscConfig+0x244>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a5d      	ldr	r2, [pc, #372]	; (8007d00 <HAL_RCC_OscConfig+0x244>)
 8007b8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d013      	beq.n	8007bc0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b98:	f7fc fe3e 	bl	8004818 <HAL_GetTick>
 8007b9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007b9e:	e008      	b.n	8007bb2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ba0:	f7fc fe3a 	bl	8004818 <HAL_GetTick>
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba8:	1ad3      	subs	r3, r2, r3
 8007baa:	2b64      	cmp	r3, #100	; 0x64
 8007bac:	d901      	bls.n	8007bb2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007bae:	2303      	movs	r3, #3
 8007bb0:	e356      	b.n	8008260 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007bb2:	4b53      	ldr	r3, [pc, #332]	; (8007d00 <HAL_RCC_OscConfig+0x244>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d0f0      	beq.n	8007ba0 <HAL_RCC_OscConfig+0xe4>
 8007bbe:	e014      	b.n	8007bea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bc0:	f7fc fe2a 	bl	8004818 <HAL_GetTick>
 8007bc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007bc6:	e008      	b.n	8007bda <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007bc8:	f7fc fe26 	bl	8004818 <HAL_GetTick>
 8007bcc:	4602      	mov	r2, r0
 8007bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd0:	1ad3      	subs	r3, r2, r3
 8007bd2:	2b64      	cmp	r3, #100	; 0x64
 8007bd4:	d901      	bls.n	8007bda <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007bd6:	2303      	movs	r3, #3
 8007bd8:	e342      	b.n	8008260 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007bda:	4b49      	ldr	r3, [pc, #292]	; (8007d00 <HAL_RCC_OscConfig+0x244>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d1f0      	bne.n	8007bc8 <HAL_RCC_OscConfig+0x10c>
 8007be6:	e000      	b.n	8007bea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007be8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f003 0302 	and.w	r3, r3, #2
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	f000 808c 	beq.w	8007d10 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007bf8:	4b41      	ldr	r3, [pc, #260]	; (8007d00 <HAL_RCC_OscConfig+0x244>)
 8007bfa:	691b      	ldr	r3, [r3, #16]
 8007bfc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c00:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007c02:	4b3f      	ldr	r3, [pc, #252]	; (8007d00 <HAL_RCC_OscConfig+0x244>)
 8007c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c06:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007c08:	6a3b      	ldr	r3, [r7, #32]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d007      	beq.n	8007c1e <HAL_RCC_OscConfig+0x162>
 8007c0e:	6a3b      	ldr	r3, [r7, #32]
 8007c10:	2b18      	cmp	r3, #24
 8007c12:	d137      	bne.n	8007c84 <HAL_RCC_OscConfig+0x1c8>
 8007c14:	69fb      	ldr	r3, [r7, #28]
 8007c16:	f003 0303 	and.w	r3, r3, #3
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d132      	bne.n	8007c84 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007c1e:	4b38      	ldr	r3, [pc, #224]	; (8007d00 <HAL_RCC_OscConfig+0x244>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f003 0304 	and.w	r3, r3, #4
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d005      	beq.n	8007c36 <HAL_RCC_OscConfig+0x17a>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	68db      	ldr	r3, [r3, #12]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d101      	bne.n	8007c36 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007c32:	2301      	movs	r3, #1
 8007c34:	e314      	b.n	8008260 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007c36:	4b32      	ldr	r3, [pc, #200]	; (8007d00 <HAL_RCC_OscConfig+0x244>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f023 0219 	bic.w	r2, r3, #25
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	492f      	ldr	r1, [pc, #188]	; (8007d00 <HAL_RCC_OscConfig+0x244>)
 8007c44:	4313      	orrs	r3, r2
 8007c46:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c48:	f7fc fde6 	bl	8004818 <HAL_GetTick>
 8007c4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c4e:	e008      	b.n	8007c62 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c50:	f7fc fde2 	bl	8004818 <HAL_GetTick>
 8007c54:	4602      	mov	r2, r0
 8007c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c58:	1ad3      	subs	r3, r2, r3
 8007c5a:	2b02      	cmp	r3, #2
 8007c5c:	d901      	bls.n	8007c62 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8007c5e:	2303      	movs	r3, #3
 8007c60:	e2fe      	b.n	8008260 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c62:	4b27      	ldr	r3, [pc, #156]	; (8007d00 <HAL_RCC_OscConfig+0x244>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f003 0304 	and.w	r3, r3, #4
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d0f0      	beq.n	8007c50 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c6e:	4b24      	ldr	r3, [pc, #144]	; (8007d00 <HAL_RCC_OscConfig+0x244>)
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	691b      	ldr	r3, [r3, #16]
 8007c7a:	061b      	lsls	r3, r3, #24
 8007c7c:	4920      	ldr	r1, [pc, #128]	; (8007d00 <HAL_RCC_OscConfig+0x244>)
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007c82:	e045      	b.n	8007d10 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	68db      	ldr	r3, [r3, #12]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d026      	beq.n	8007cda <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007c8c:	4b1c      	ldr	r3, [pc, #112]	; (8007d00 <HAL_RCC_OscConfig+0x244>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f023 0219 	bic.w	r2, r3, #25
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	68db      	ldr	r3, [r3, #12]
 8007c98:	4919      	ldr	r1, [pc, #100]	; (8007d00 <HAL_RCC_OscConfig+0x244>)
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c9e:	f7fc fdbb 	bl	8004818 <HAL_GetTick>
 8007ca2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ca4:	e008      	b.n	8007cb8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ca6:	f7fc fdb7 	bl	8004818 <HAL_GetTick>
 8007caa:	4602      	mov	r2, r0
 8007cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cae:	1ad3      	subs	r3, r2, r3
 8007cb0:	2b02      	cmp	r3, #2
 8007cb2:	d901      	bls.n	8007cb8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007cb4:	2303      	movs	r3, #3
 8007cb6:	e2d3      	b.n	8008260 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007cb8:	4b11      	ldr	r3, [pc, #68]	; (8007d00 <HAL_RCC_OscConfig+0x244>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f003 0304 	and.w	r3, r3, #4
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d0f0      	beq.n	8007ca6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007cc4:	4b0e      	ldr	r3, [pc, #56]	; (8007d00 <HAL_RCC_OscConfig+0x244>)
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	691b      	ldr	r3, [r3, #16]
 8007cd0:	061b      	lsls	r3, r3, #24
 8007cd2:	490b      	ldr	r1, [pc, #44]	; (8007d00 <HAL_RCC_OscConfig+0x244>)
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	604b      	str	r3, [r1, #4]
 8007cd8:	e01a      	b.n	8007d10 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007cda:	4b09      	ldr	r3, [pc, #36]	; (8007d00 <HAL_RCC_OscConfig+0x244>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a08      	ldr	r2, [pc, #32]	; (8007d00 <HAL_RCC_OscConfig+0x244>)
 8007ce0:	f023 0301 	bic.w	r3, r3, #1
 8007ce4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ce6:	f7fc fd97 	bl	8004818 <HAL_GetTick>
 8007cea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007cec:	e00a      	b.n	8007d04 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007cee:	f7fc fd93 	bl	8004818 <HAL_GetTick>
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf6:	1ad3      	subs	r3, r2, r3
 8007cf8:	2b02      	cmp	r3, #2
 8007cfa:	d903      	bls.n	8007d04 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007cfc:	2303      	movs	r3, #3
 8007cfe:	e2af      	b.n	8008260 <HAL_RCC_OscConfig+0x7a4>
 8007d00:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007d04:	4b96      	ldr	r3, [pc, #600]	; (8007f60 <HAL_RCC_OscConfig+0x4a4>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f003 0304 	and.w	r3, r3, #4
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d1ee      	bne.n	8007cee <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f003 0310 	and.w	r3, r3, #16
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d06a      	beq.n	8007df2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d1c:	4b90      	ldr	r3, [pc, #576]	; (8007f60 <HAL_RCC_OscConfig+0x4a4>)
 8007d1e:	691b      	ldr	r3, [r3, #16]
 8007d20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d24:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007d26:	4b8e      	ldr	r3, [pc, #568]	; (8007f60 <HAL_RCC_OscConfig+0x4a4>)
 8007d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d2a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007d2c:	69bb      	ldr	r3, [r7, #24]
 8007d2e:	2b08      	cmp	r3, #8
 8007d30:	d007      	beq.n	8007d42 <HAL_RCC_OscConfig+0x286>
 8007d32:	69bb      	ldr	r3, [r7, #24]
 8007d34:	2b18      	cmp	r3, #24
 8007d36:	d11b      	bne.n	8007d70 <HAL_RCC_OscConfig+0x2b4>
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	f003 0303 	and.w	r3, r3, #3
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d116      	bne.n	8007d70 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007d42:	4b87      	ldr	r3, [pc, #540]	; (8007f60 <HAL_RCC_OscConfig+0x4a4>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d005      	beq.n	8007d5a <HAL_RCC_OscConfig+0x29e>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	69db      	ldr	r3, [r3, #28]
 8007d52:	2b80      	cmp	r3, #128	; 0x80
 8007d54:	d001      	beq.n	8007d5a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8007d56:	2301      	movs	r3, #1
 8007d58:	e282      	b.n	8008260 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007d5a:	4b81      	ldr	r3, [pc, #516]	; (8007f60 <HAL_RCC_OscConfig+0x4a4>)
 8007d5c:	68db      	ldr	r3, [r3, #12]
 8007d5e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6a1b      	ldr	r3, [r3, #32]
 8007d66:	061b      	lsls	r3, r3, #24
 8007d68:	497d      	ldr	r1, [pc, #500]	; (8007f60 <HAL_RCC_OscConfig+0x4a4>)
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007d6e:	e040      	b.n	8007df2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	69db      	ldr	r3, [r3, #28]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d023      	beq.n	8007dc0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007d78:	4b79      	ldr	r3, [pc, #484]	; (8007f60 <HAL_RCC_OscConfig+0x4a4>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a78      	ldr	r2, [pc, #480]	; (8007f60 <HAL_RCC_OscConfig+0x4a4>)
 8007d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d84:	f7fc fd48 	bl	8004818 <HAL_GetTick>
 8007d88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007d8a:	e008      	b.n	8007d9e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007d8c:	f7fc fd44 	bl	8004818 <HAL_GetTick>
 8007d90:	4602      	mov	r2, r0
 8007d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d94:	1ad3      	subs	r3, r2, r3
 8007d96:	2b02      	cmp	r3, #2
 8007d98:	d901      	bls.n	8007d9e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007d9a:	2303      	movs	r3, #3
 8007d9c:	e260      	b.n	8008260 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007d9e:	4b70      	ldr	r3, [pc, #448]	; (8007f60 <HAL_RCC_OscConfig+0x4a4>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d0f0      	beq.n	8007d8c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007daa:	4b6d      	ldr	r3, [pc, #436]	; (8007f60 <HAL_RCC_OscConfig+0x4a4>)
 8007dac:	68db      	ldr	r3, [r3, #12]
 8007dae:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6a1b      	ldr	r3, [r3, #32]
 8007db6:	061b      	lsls	r3, r3, #24
 8007db8:	4969      	ldr	r1, [pc, #420]	; (8007f60 <HAL_RCC_OscConfig+0x4a4>)
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	60cb      	str	r3, [r1, #12]
 8007dbe:	e018      	b.n	8007df2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007dc0:	4b67      	ldr	r3, [pc, #412]	; (8007f60 <HAL_RCC_OscConfig+0x4a4>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a66      	ldr	r2, [pc, #408]	; (8007f60 <HAL_RCC_OscConfig+0x4a4>)
 8007dc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007dca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dcc:	f7fc fd24 	bl	8004818 <HAL_GetTick>
 8007dd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007dd2:	e008      	b.n	8007de6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007dd4:	f7fc fd20 	bl	8004818 <HAL_GetTick>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ddc:	1ad3      	subs	r3, r2, r3
 8007dde:	2b02      	cmp	r3, #2
 8007de0:	d901      	bls.n	8007de6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8007de2:	2303      	movs	r3, #3
 8007de4:	e23c      	b.n	8008260 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007de6:	4b5e      	ldr	r3, [pc, #376]	; (8007f60 <HAL_RCC_OscConfig+0x4a4>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d1f0      	bne.n	8007dd4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f003 0308 	and.w	r3, r3, #8
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d036      	beq.n	8007e6c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	695b      	ldr	r3, [r3, #20]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d019      	beq.n	8007e3a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e06:	4b56      	ldr	r3, [pc, #344]	; (8007f60 <HAL_RCC_OscConfig+0x4a4>)
 8007e08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e0a:	4a55      	ldr	r2, [pc, #340]	; (8007f60 <HAL_RCC_OscConfig+0x4a4>)
 8007e0c:	f043 0301 	orr.w	r3, r3, #1
 8007e10:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e12:	f7fc fd01 	bl	8004818 <HAL_GetTick>
 8007e16:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007e18:	e008      	b.n	8007e2c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e1a:	f7fc fcfd 	bl	8004818 <HAL_GetTick>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e22:	1ad3      	subs	r3, r2, r3
 8007e24:	2b02      	cmp	r3, #2
 8007e26:	d901      	bls.n	8007e2c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8007e28:	2303      	movs	r3, #3
 8007e2a:	e219      	b.n	8008260 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007e2c:	4b4c      	ldr	r3, [pc, #304]	; (8007f60 <HAL_RCC_OscConfig+0x4a4>)
 8007e2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e30:	f003 0302 	and.w	r3, r3, #2
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d0f0      	beq.n	8007e1a <HAL_RCC_OscConfig+0x35e>
 8007e38:	e018      	b.n	8007e6c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007e3a:	4b49      	ldr	r3, [pc, #292]	; (8007f60 <HAL_RCC_OscConfig+0x4a4>)
 8007e3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e3e:	4a48      	ldr	r2, [pc, #288]	; (8007f60 <HAL_RCC_OscConfig+0x4a4>)
 8007e40:	f023 0301 	bic.w	r3, r3, #1
 8007e44:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e46:	f7fc fce7 	bl	8004818 <HAL_GetTick>
 8007e4a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007e4c:	e008      	b.n	8007e60 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e4e:	f7fc fce3 	bl	8004818 <HAL_GetTick>
 8007e52:	4602      	mov	r2, r0
 8007e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e56:	1ad3      	subs	r3, r2, r3
 8007e58:	2b02      	cmp	r3, #2
 8007e5a:	d901      	bls.n	8007e60 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8007e5c:	2303      	movs	r3, #3
 8007e5e:	e1ff      	b.n	8008260 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007e60:	4b3f      	ldr	r3, [pc, #252]	; (8007f60 <HAL_RCC_OscConfig+0x4a4>)
 8007e62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e64:	f003 0302 	and.w	r3, r3, #2
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d1f0      	bne.n	8007e4e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f003 0320 	and.w	r3, r3, #32
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d036      	beq.n	8007ee6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	699b      	ldr	r3, [r3, #24]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d019      	beq.n	8007eb4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007e80:	4b37      	ldr	r3, [pc, #220]	; (8007f60 <HAL_RCC_OscConfig+0x4a4>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a36      	ldr	r2, [pc, #216]	; (8007f60 <HAL_RCC_OscConfig+0x4a4>)
 8007e86:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007e8a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007e8c:	f7fc fcc4 	bl	8004818 <HAL_GetTick>
 8007e90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007e92:	e008      	b.n	8007ea6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007e94:	f7fc fcc0 	bl	8004818 <HAL_GetTick>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9c:	1ad3      	subs	r3, r2, r3
 8007e9e:	2b02      	cmp	r3, #2
 8007ea0:	d901      	bls.n	8007ea6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8007ea2:	2303      	movs	r3, #3
 8007ea4:	e1dc      	b.n	8008260 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007ea6:	4b2e      	ldr	r3, [pc, #184]	; (8007f60 <HAL_RCC_OscConfig+0x4a4>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d0f0      	beq.n	8007e94 <HAL_RCC_OscConfig+0x3d8>
 8007eb2:	e018      	b.n	8007ee6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007eb4:	4b2a      	ldr	r3, [pc, #168]	; (8007f60 <HAL_RCC_OscConfig+0x4a4>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a29      	ldr	r2, [pc, #164]	; (8007f60 <HAL_RCC_OscConfig+0x4a4>)
 8007eba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ebe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007ec0:	f7fc fcaa 	bl	8004818 <HAL_GetTick>
 8007ec4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007ec6:	e008      	b.n	8007eda <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007ec8:	f7fc fca6 	bl	8004818 <HAL_GetTick>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed0:	1ad3      	subs	r3, r2, r3
 8007ed2:	2b02      	cmp	r3, #2
 8007ed4:	d901      	bls.n	8007eda <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8007ed6:	2303      	movs	r3, #3
 8007ed8:	e1c2      	b.n	8008260 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007eda:	4b21      	ldr	r3, [pc, #132]	; (8007f60 <HAL_RCC_OscConfig+0x4a4>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d1f0      	bne.n	8007ec8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f003 0304 	and.w	r3, r3, #4
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	f000 8086 	beq.w	8008000 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007ef4:	4b1b      	ldr	r3, [pc, #108]	; (8007f64 <HAL_RCC_OscConfig+0x4a8>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a1a      	ldr	r2, [pc, #104]	; (8007f64 <HAL_RCC_OscConfig+0x4a8>)
 8007efa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007efe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007f00:	f7fc fc8a 	bl	8004818 <HAL_GetTick>
 8007f04:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007f06:	e008      	b.n	8007f1a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f08:	f7fc fc86 	bl	8004818 <HAL_GetTick>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f10:	1ad3      	subs	r3, r2, r3
 8007f12:	2b64      	cmp	r3, #100	; 0x64
 8007f14:	d901      	bls.n	8007f1a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8007f16:	2303      	movs	r3, #3
 8007f18:	e1a2      	b.n	8008260 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007f1a:	4b12      	ldr	r3, [pc, #72]	; (8007f64 <HAL_RCC_OscConfig+0x4a8>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d0f0      	beq.n	8007f08 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	d106      	bne.n	8007f3c <HAL_RCC_OscConfig+0x480>
 8007f2e:	4b0c      	ldr	r3, [pc, #48]	; (8007f60 <HAL_RCC_OscConfig+0x4a4>)
 8007f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f32:	4a0b      	ldr	r2, [pc, #44]	; (8007f60 <HAL_RCC_OscConfig+0x4a4>)
 8007f34:	f043 0301 	orr.w	r3, r3, #1
 8007f38:	6713      	str	r3, [r2, #112]	; 0x70
 8007f3a:	e032      	b.n	8007fa2 <HAL_RCC_OscConfig+0x4e6>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d111      	bne.n	8007f68 <HAL_RCC_OscConfig+0x4ac>
 8007f44:	4b06      	ldr	r3, [pc, #24]	; (8007f60 <HAL_RCC_OscConfig+0x4a4>)
 8007f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f48:	4a05      	ldr	r2, [pc, #20]	; (8007f60 <HAL_RCC_OscConfig+0x4a4>)
 8007f4a:	f023 0301 	bic.w	r3, r3, #1
 8007f4e:	6713      	str	r3, [r2, #112]	; 0x70
 8007f50:	4b03      	ldr	r3, [pc, #12]	; (8007f60 <HAL_RCC_OscConfig+0x4a4>)
 8007f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f54:	4a02      	ldr	r2, [pc, #8]	; (8007f60 <HAL_RCC_OscConfig+0x4a4>)
 8007f56:	f023 0304 	bic.w	r3, r3, #4
 8007f5a:	6713      	str	r3, [r2, #112]	; 0x70
 8007f5c:	e021      	b.n	8007fa2 <HAL_RCC_OscConfig+0x4e6>
 8007f5e:	bf00      	nop
 8007f60:	58024400 	.word	0x58024400
 8007f64:	58024800 	.word	0x58024800
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	2b05      	cmp	r3, #5
 8007f6e:	d10c      	bne.n	8007f8a <HAL_RCC_OscConfig+0x4ce>
 8007f70:	4b83      	ldr	r3, [pc, #524]	; (8008180 <HAL_RCC_OscConfig+0x6c4>)
 8007f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f74:	4a82      	ldr	r2, [pc, #520]	; (8008180 <HAL_RCC_OscConfig+0x6c4>)
 8007f76:	f043 0304 	orr.w	r3, r3, #4
 8007f7a:	6713      	str	r3, [r2, #112]	; 0x70
 8007f7c:	4b80      	ldr	r3, [pc, #512]	; (8008180 <HAL_RCC_OscConfig+0x6c4>)
 8007f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f80:	4a7f      	ldr	r2, [pc, #508]	; (8008180 <HAL_RCC_OscConfig+0x6c4>)
 8007f82:	f043 0301 	orr.w	r3, r3, #1
 8007f86:	6713      	str	r3, [r2, #112]	; 0x70
 8007f88:	e00b      	b.n	8007fa2 <HAL_RCC_OscConfig+0x4e6>
 8007f8a:	4b7d      	ldr	r3, [pc, #500]	; (8008180 <HAL_RCC_OscConfig+0x6c4>)
 8007f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f8e:	4a7c      	ldr	r2, [pc, #496]	; (8008180 <HAL_RCC_OscConfig+0x6c4>)
 8007f90:	f023 0301 	bic.w	r3, r3, #1
 8007f94:	6713      	str	r3, [r2, #112]	; 0x70
 8007f96:	4b7a      	ldr	r3, [pc, #488]	; (8008180 <HAL_RCC_OscConfig+0x6c4>)
 8007f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f9a:	4a79      	ldr	r2, [pc, #484]	; (8008180 <HAL_RCC_OscConfig+0x6c4>)
 8007f9c:	f023 0304 	bic.w	r3, r3, #4
 8007fa0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	689b      	ldr	r3, [r3, #8]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d015      	beq.n	8007fd6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007faa:	f7fc fc35 	bl	8004818 <HAL_GetTick>
 8007fae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007fb0:	e00a      	b.n	8007fc8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007fb2:	f7fc fc31 	bl	8004818 <HAL_GetTick>
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fba:	1ad3      	subs	r3, r2, r3
 8007fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d901      	bls.n	8007fc8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8007fc4:	2303      	movs	r3, #3
 8007fc6:	e14b      	b.n	8008260 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007fc8:	4b6d      	ldr	r3, [pc, #436]	; (8008180 <HAL_RCC_OscConfig+0x6c4>)
 8007fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fcc:	f003 0302 	and.w	r3, r3, #2
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d0ee      	beq.n	8007fb2 <HAL_RCC_OscConfig+0x4f6>
 8007fd4:	e014      	b.n	8008000 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fd6:	f7fc fc1f 	bl	8004818 <HAL_GetTick>
 8007fda:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007fdc:	e00a      	b.n	8007ff4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007fde:	f7fc fc1b 	bl	8004818 <HAL_GetTick>
 8007fe2:	4602      	mov	r2, r0
 8007fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe6:	1ad3      	subs	r3, r2, r3
 8007fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d901      	bls.n	8007ff4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8007ff0:	2303      	movs	r3, #3
 8007ff2:	e135      	b.n	8008260 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007ff4:	4b62      	ldr	r3, [pc, #392]	; (8008180 <HAL_RCC_OscConfig+0x6c4>)
 8007ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ff8:	f003 0302 	and.w	r3, r3, #2
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d1ee      	bne.n	8007fde <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008004:	2b00      	cmp	r3, #0
 8008006:	f000 812a 	beq.w	800825e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800800a:	4b5d      	ldr	r3, [pc, #372]	; (8008180 <HAL_RCC_OscConfig+0x6c4>)
 800800c:	691b      	ldr	r3, [r3, #16]
 800800e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008012:	2b18      	cmp	r3, #24
 8008014:	f000 80ba 	beq.w	800818c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800801c:	2b02      	cmp	r3, #2
 800801e:	f040 8095 	bne.w	800814c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008022:	4b57      	ldr	r3, [pc, #348]	; (8008180 <HAL_RCC_OscConfig+0x6c4>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a56      	ldr	r2, [pc, #344]	; (8008180 <HAL_RCC_OscConfig+0x6c4>)
 8008028:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800802c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800802e:	f7fc fbf3 	bl	8004818 <HAL_GetTick>
 8008032:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008034:	e008      	b.n	8008048 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008036:	f7fc fbef 	bl	8004818 <HAL_GetTick>
 800803a:	4602      	mov	r2, r0
 800803c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803e:	1ad3      	subs	r3, r2, r3
 8008040:	2b02      	cmp	r3, #2
 8008042:	d901      	bls.n	8008048 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8008044:	2303      	movs	r3, #3
 8008046:	e10b      	b.n	8008260 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008048:	4b4d      	ldr	r3, [pc, #308]	; (8008180 <HAL_RCC_OscConfig+0x6c4>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008050:	2b00      	cmp	r3, #0
 8008052:	d1f0      	bne.n	8008036 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008054:	4b4a      	ldr	r3, [pc, #296]	; (8008180 <HAL_RCC_OscConfig+0x6c4>)
 8008056:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008058:	4b4a      	ldr	r3, [pc, #296]	; (8008184 <HAL_RCC_OscConfig+0x6c8>)
 800805a:	4013      	ands	r3, r2
 800805c:	687a      	ldr	r2, [r7, #4]
 800805e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008064:	0112      	lsls	r2, r2, #4
 8008066:	430a      	orrs	r2, r1
 8008068:	4945      	ldr	r1, [pc, #276]	; (8008180 <HAL_RCC_OscConfig+0x6c4>)
 800806a:	4313      	orrs	r3, r2
 800806c:	628b      	str	r3, [r1, #40]	; 0x28
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008072:	3b01      	subs	r3, #1
 8008074:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800807c:	3b01      	subs	r3, #1
 800807e:	025b      	lsls	r3, r3, #9
 8008080:	b29b      	uxth	r3, r3
 8008082:	431a      	orrs	r2, r3
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008088:	3b01      	subs	r3, #1
 800808a:	041b      	lsls	r3, r3, #16
 800808c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008090:	431a      	orrs	r2, r3
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008096:	3b01      	subs	r3, #1
 8008098:	061b      	lsls	r3, r3, #24
 800809a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800809e:	4938      	ldr	r1, [pc, #224]	; (8008180 <HAL_RCC_OscConfig+0x6c4>)
 80080a0:	4313      	orrs	r3, r2
 80080a2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80080a4:	4b36      	ldr	r3, [pc, #216]	; (8008180 <HAL_RCC_OscConfig+0x6c4>)
 80080a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a8:	4a35      	ldr	r2, [pc, #212]	; (8008180 <HAL_RCC_OscConfig+0x6c4>)
 80080aa:	f023 0301 	bic.w	r3, r3, #1
 80080ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80080b0:	4b33      	ldr	r3, [pc, #204]	; (8008180 <HAL_RCC_OscConfig+0x6c4>)
 80080b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080b4:	4b34      	ldr	r3, [pc, #208]	; (8008188 <HAL_RCC_OscConfig+0x6cc>)
 80080b6:	4013      	ands	r3, r2
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80080bc:	00d2      	lsls	r2, r2, #3
 80080be:	4930      	ldr	r1, [pc, #192]	; (8008180 <HAL_RCC_OscConfig+0x6c4>)
 80080c0:	4313      	orrs	r3, r2
 80080c2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80080c4:	4b2e      	ldr	r3, [pc, #184]	; (8008180 <HAL_RCC_OscConfig+0x6c4>)
 80080c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080c8:	f023 020c 	bic.w	r2, r3, #12
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d0:	492b      	ldr	r1, [pc, #172]	; (8008180 <HAL_RCC_OscConfig+0x6c4>)
 80080d2:	4313      	orrs	r3, r2
 80080d4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80080d6:	4b2a      	ldr	r3, [pc, #168]	; (8008180 <HAL_RCC_OscConfig+0x6c4>)
 80080d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080da:	f023 0202 	bic.w	r2, r3, #2
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080e2:	4927      	ldr	r1, [pc, #156]	; (8008180 <HAL_RCC_OscConfig+0x6c4>)
 80080e4:	4313      	orrs	r3, r2
 80080e6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80080e8:	4b25      	ldr	r3, [pc, #148]	; (8008180 <HAL_RCC_OscConfig+0x6c4>)
 80080ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ec:	4a24      	ldr	r2, [pc, #144]	; (8008180 <HAL_RCC_OscConfig+0x6c4>)
 80080ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080f4:	4b22      	ldr	r3, [pc, #136]	; (8008180 <HAL_RCC_OscConfig+0x6c4>)
 80080f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f8:	4a21      	ldr	r2, [pc, #132]	; (8008180 <HAL_RCC_OscConfig+0x6c4>)
 80080fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008100:	4b1f      	ldr	r3, [pc, #124]	; (8008180 <HAL_RCC_OscConfig+0x6c4>)
 8008102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008104:	4a1e      	ldr	r2, [pc, #120]	; (8008180 <HAL_RCC_OscConfig+0x6c4>)
 8008106:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800810a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800810c:	4b1c      	ldr	r3, [pc, #112]	; (8008180 <HAL_RCC_OscConfig+0x6c4>)
 800810e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008110:	4a1b      	ldr	r2, [pc, #108]	; (8008180 <HAL_RCC_OscConfig+0x6c4>)
 8008112:	f043 0301 	orr.w	r3, r3, #1
 8008116:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008118:	4b19      	ldr	r3, [pc, #100]	; (8008180 <HAL_RCC_OscConfig+0x6c4>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a18      	ldr	r2, [pc, #96]	; (8008180 <HAL_RCC_OscConfig+0x6c4>)
 800811e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008122:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008124:	f7fc fb78 	bl	8004818 <HAL_GetTick>
 8008128:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800812a:	e008      	b.n	800813e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800812c:	f7fc fb74 	bl	8004818 <HAL_GetTick>
 8008130:	4602      	mov	r2, r0
 8008132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008134:	1ad3      	subs	r3, r2, r3
 8008136:	2b02      	cmp	r3, #2
 8008138:	d901      	bls.n	800813e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800813a:	2303      	movs	r3, #3
 800813c:	e090      	b.n	8008260 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800813e:	4b10      	ldr	r3, [pc, #64]	; (8008180 <HAL_RCC_OscConfig+0x6c4>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008146:	2b00      	cmp	r3, #0
 8008148:	d0f0      	beq.n	800812c <HAL_RCC_OscConfig+0x670>
 800814a:	e088      	b.n	800825e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800814c:	4b0c      	ldr	r3, [pc, #48]	; (8008180 <HAL_RCC_OscConfig+0x6c4>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a0b      	ldr	r2, [pc, #44]	; (8008180 <HAL_RCC_OscConfig+0x6c4>)
 8008152:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008156:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008158:	f7fc fb5e 	bl	8004818 <HAL_GetTick>
 800815c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800815e:	e008      	b.n	8008172 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008160:	f7fc fb5a 	bl	8004818 <HAL_GetTick>
 8008164:	4602      	mov	r2, r0
 8008166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008168:	1ad3      	subs	r3, r2, r3
 800816a:	2b02      	cmp	r3, #2
 800816c:	d901      	bls.n	8008172 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800816e:	2303      	movs	r3, #3
 8008170:	e076      	b.n	8008260 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008172:	4b03      	ldr	r3, [pc, #12]	; (8008180 <HAL_RCC_OscConfig+0x6c4>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800817a:	2b00      	cmp	r3, #0
 800817c:	d1f0      	bne.n	8008160 <HAL_RCC_OscConfig+0x6a4>
 800817e:	e06e      	b.n	800825e <HAL_RCC_OscConfig+0x7a2>
 8008180:	58024400 	.word	0x58024400
 8008184:	fffffc0c 	.word	0xfffffc0c
 8008188:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800818c:	4b36      	ldr	r3, [pc, #216]	; (8008268 <HAL_RCC_OscConfig+0x7ac>)
 800818e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008190:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008192:	4b35      	ldr	r3, [pc, #212]	; (8008268 <HAL_RCC_OscConfig+0x7ac>)
 8008194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008196:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819c:	2b01      	cmp	r3, #1
 800819e:	d031      	beq.n	8008204 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	f003 0203 	and.w	r2, r3, #3
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d12a      	bne.n	8008204 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	091b      	lsrs	r3, r3, #4
 80081b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d122      	bne.n	8008204 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081c8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d11a      	bne.n	8008204 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	0a5b      	lsrs	r3, r3, #9
 80081d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081da:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80081dc:	429a      	cmp	r2, r3
 80081de:	d111      	bne.n	8008204 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	0c1b      	lsrs	r3, r3, #16
 80081e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80081ee:	429a      	cmp	r2, r3
 80081f0:	d108      	bne.n	8008204 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	0e1b      	lsrs	r3, r3, #24
 80081f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081fe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008200:	429a      	cmp	r2, r3
 8008202:	d001      	beq.n	8008208 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8008204:	2301      	movs	r3, #1
 8008206:	e02b      	b.n	8008260 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008208:	4b17      	ldr	r3, [pc, #92]	; (8008268 <HAL_RCC_OscConfig+0x7ac>)
 800820a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800820c:	08db      	lsrs	r3, r3, #3
 800820e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008212:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008218:	693a      	ldr	r2, [r7, #16]
 800821a:	429a      	cmp	r2, r3
 800821c:	d01f      	beq.n	800825e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800821e:	4b12      	ldr	r3, [pc, #72]	; (8008268 <HAL_RCC_OscConfig+0x7ac>)
 8008220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008222:	4a11      	ldr	r2, [pc, #68]	; (8008268 <HAL_RCC_OscConfig+0x7ac>)
 8008224:	f023 0301 	bic.w	r3, r3, #1
 8008228:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800822a:	f7fc faf5 	bl	8004818 <HAL_GetTick>
 800822e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008230:	bf00      	nop
 8008232:	f7fc faf1 	bl	8004818 <HAL_GetTick>
 8008236:	4602      	mov	r2, r0
 8008238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823a:	4293      	cmp	r3, r2
 800823c:	d0f9      	beq.n	8008232 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800823e:	4b0a      	ldr	r3, [pc, #40]	; (8008268 <HAL_RCC_OscConfig+0x7ac>)
 8008240:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008242:	4b0a      	ldr	r3, [pc, #40]	; (800826c <HAL_RCC_OscConfig+0x7b0>)
 8008244:	4013      	ands	r3, r2
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800824a:	00d2      	lsls	r2, r2, #3
 800824c:	4906      	ldr	r1, [pc, #24]	; (8008268 <HAL_RCC_OscConfig+0x7ac>)
 800824e:	4313      	orrs	r3, r2
 8008250:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008252:	4b05      	ldr	r3, [pc, #20]	; (8008268 <HAL_RCC_OscConfig+0x7ac>)
 8008254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008256:	4a04      	ldr	r2, [pc, #16]	; (8008268 <HAL_RCC_OscConfig+0x7ac>)
 8008258:	f043 0301 	orr.w	r3, r3, #1
 800825c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800825e:	2300      	movs	r3, #0
}
 8008260:	4618      	mov	r0, r3
 8008262:	3730      	adds	r7, #48	; 0x30
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}
 8008268:	58024400 	.word	0x58024400
 800826c:	ffff0007 	.word	0xffff0007

08008270 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b086      	sub	sp, #24
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d101      	bne.n	8008284 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008280:	2301      	movs	r3, #1
 8008282:	e19c      	b.n	80085be <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008284:	4b8a      	ldr	r3, [pc, #552]	; (80084b0 <HAL_RCC_ClockConfig+0x240>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f003 030f 	and.w	r3, r3, #15
 800828c:	683a      	ldr	r2, [r7, #0]
 800828e:	429a      	cmp	r2, r3
 8008290:	d910      	bls.n	80082b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008292:	4b87      	ldr	r3, [pc, #540]	; (80084b0 <HAL_RCC_ClockConfig+0x240>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f023 020f 	bic.w	r2, r3, #15
 800829a:	4985      	ldr	r1, [pc, #532]	; (80084b0 <HAL_RCC_ClockConfig+0x240>)
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	4313      	orrs	r3, r2
 80082a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80082a2:	4b83      	ldr	r3, [pc, #524]	; (80084b0 <HAL_RCC_ClockConfig+0x240>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f003 030f 	and.w	r3, r3, #15
 80082aa:	683a      	ldr	r2, [r7, #0]
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d001      	beq.n	80082b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80082b0:	2301      	movs	r3, #1
 80082b2:	e184      	b.n	80085be <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f003 0304 	and.w	r3, r3, #4
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d010      	beq.n	80082e2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	691a      	ldr	r2, [r3, #16]
 80082c4:	4b7b      	ldr	r3, [pc, #492]	; (80084b4 <HAL_RCC_ClockConfig+0x244>)
 80082c6:	699b      	ldr	r3, [r3, #24]
 80082c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d908      	bls.n	80082e2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80082d0:	4b78      	ldr	r3, [pc, #480]	; (80084b4 <HAL_RCC_ClockConfig+0x244>)
 80082d2:	699b      	ldr	r3, [r3, #24]
 80082d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	691b      	ldr	r3, [r3, #16]
 80082dc:	4975      	ldr	r1, [pc, #468]	; (80084b4 <HAL_RCC_ClockConfig+0x244>)
 80082de:	4313      	orrs	r3, r2
 80082e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f003 0308 	and.w	r3, r3, #8
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d010      	beq.n	8008310 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	695a      	ldr	r2, [r3, #20]
 80082f2:	4b70      	ldr	r3, [pc, #448]	; (80084b4 <HAL_RCC_ClockConfig+0x244>)
 80082f4:	69db      	ldr	r3, [r3, #28]
 80082f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d908      	bls.n	8008310 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80082fe:	4b6d      	ldr	r3, [pc, #436]	; (80084b4 <HAL_RCC_ClockConfig+0x244>)
 8008300:	69db      	ldr	r3, [r3, #28]
 8008302:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	695b      	ldr	r3, [r3, #20]
 800830a:	496a      	ldr	r1, [pc, #424]	; (80084b4 <HAL_RCC_ClockConfig+0x244>)
 800830c:	4313      	orrs	r3, r2
 800830e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f003 0310 	and.w	r3, r3, #16
 8008318:	2b00      	cmp	r3, #0
 800831a:	d010      	beq.n	800833e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	699a      	ldr	r2, [r3, #24]
 8008320:	4b64      	ldr	r3, [pc, #400]	; (80084b4 <HAL_RCC_ClockConfig+0x244>)
 8008322:	69db      	ldr	r3, [r3, #28]
 8008324:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008328:	429a      	cmp	r2, r3
 800832a:	d908      	bls.n	800833e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800832c:	4b61      	ldr	r3, [pc, #388]	; (80084b4 <HAL_RCC_ClockConfig+0x244>)
 800832e:	69db      	ldr	r3, [r3, #28]
 8008330:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	699b      	ldr	r3, [r3, #24]
 8008338:	495e      	ldr	r1, [pc, #376]	; (80084b4 <HAL_RCC_ClockConfig+0x244>)
 800833a:	4313      	orrs	r3, r2
 800833c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f003 0320 	and.w	r3, r3, #32
 8008346:	2b00      	cmp	r3, #0
 8008348:	d010      	beq.n	800836c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	69da      	ldr	r2, [r3, #28]
 800834e:	4b59      	ldr	r3, [pc, #356]	; (80084b4 <HAL_RCC_ClockConfig+0x244>)
 8008350:	6a1b      	ldr	r3, [r3, #32]
 8008352:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008356:	429a      	cmp	r2, r3
 8008358:	d908      	bls.n	800836c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800835a:	4b56      	ldr	r3, [pc, #344]	; (80084b4 <HAL_RCC_ClockConfig+0x244>)
 800835c:	6a1b      	ldr	r3, [r3, #32]
 800835e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	69db      	ldr	r3, [r3, #28]
 8008366:	4953      	ldr	r1, [pc, #332]	; (80084b4 <HAL_RCC_ClockConfig+0x244>)
 8008368:	4313      	orrs	r3, r2
 800836a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f003 0302 	and.w	r3, r3, #2
 8008374:	2b00      	cmp	r3, #0
 8008376:	d010      	beq.n	800839a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	68da      	ldr	r2, [r3, #12]
 800837c:	4b4d      	ldr	r3, [pc, #308]	; (80084b4 <HAL_RCC_ClockConfig+0x244>)
 800837e:	699b      	ldr	r3, [r3, #24]
 8008380:	f003 030f 	and.w	r3, r3, #15
 8008384:	429a      	cmp	r2, r3
 8008386:	d908      	bls.n	800839a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008388:	4b4a      	ldr	r3, [pc, #296]	; (80084b4 <HAL_RCC_ClockConfig+0x244>)
 800838a:	699b      	ldr	r3, [r3, #24]
 800838c:	f023 020f 	bic.w	r2, r3, #15
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	68db      	ldr	r3, [r3, #12]
 8008394:	4947      	ldr	r1, [pc, #284]	; (80084b4 <HAL_RCC_ClockConfig+0x244>)
 8008396:	4313      	orrs	r3, r2
 8008398:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f003 0301 	and.w	r3, r3, #1
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d055      	beq.n	8008452 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80083a6:	4b43      	ldr	r3, [pc, #268]	; (80084b4 <HAL_RCC_ClockConfig+0x244>)
 80083a8:	699b      	ldr	r3, [r3, #24]
 80083aa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	4940      	ldr	r1, [pc, #256]	; (80084b4 <HAL_RCC_ClockConfig+0x244>)
 80083b4:	4313      	orrs	r3, r2
 80083b6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	2b02      	cmp	r3, #2
 80083be:	d107      	bne.n	80083d0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80083c0:	4b3c      	ldr	r3, [pc, #240]	; (80084b4 <HAL_RCC_ClockConfig+0x244>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d121      	bne.n	8008410 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80083cc:	2301      	movs	r3, #1
 80083ce:	e0f6      	b.n	80085be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	2b03      	cmp	r3, #3
 80083d6:	d107      	bne.n	80083e8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80083d8:	4b36      	ldr	r3, [pc, #216]	; (80084b4 <HAL_RCC_ClockConfig+0x244>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d115      	bne.n	8008410 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80083e4:	2301      	movs	r3, #1
 80083e6:	e0ea      	b.n	80085be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d107      	bne.n	8008400 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80083f0:	4b30      	ldr	r3, [pc, #192]	; (80084b4 <HAL_RCC_ClockConfig+0x244>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d109      	bne.n	8008410 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80083fc:	2301      	movs	r3, #1
 80083fe:	e0de      	b.n	80085be <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008400:	4b2c      	ldr	r3, [pc, #176]	; (80084b4 <HAL_RCC_ClockConfig+0x244>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f003 0304 	and.w	r3, r3, #4
 8008408:	2b00      	cmp	r3, #0
 800840a:	d101      	bne.n	8008410 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800840c:	2301      	movs	r3, #1
 800840e:	e0d6      	b.n	80085be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008410:	4b28      	ldr	r3, [pc, #160]	; (80084b4 <HAL_RCC_ClockConfig+0x244>)
 8008412:	691b      	ldr	r3, [r3, #16]
 8008414:	f023 0207 	bic.w	r2, r3, #7
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	4925      	ldr	r1, [pc, #148]	; (80084b4 <HAL_RCC_ClockConfig+0x244>)
 800841e:	4313      	orrs	r3, r2
 8008420:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008422:	f7fc f9f9 	bl	8004818 <HAL_GetTick>
 8008426:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008428:	e00a      	b.n	8008440 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800842a:	f7fc f9f5 	bl	8004818 <HAL_GetTick>
 800842e:	4602      	mov	r2, r0
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	1ad3      	subs	r3, r2, r3
 8008434:	f241 3288 	movw	r2, #5000	; 0x1388
 8008438:	4293      	cmp	r3, r2
 800843a:	d901      	bls.n	8008440 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800843c:	2303      	movs	r3, #3
 800843e:	e0be      	b.n	80085be <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008440:	4b1c      	ldr	r3, [pc, #112]	; (80084b4 <HAL_RCC_ClockConfig+0x244>)
 8008442:	691b      	ldr	r3, [r3, #16]
 8008444:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	00db      	lsls	r3, r3, #3
 800844e:	429a      	cmp	r2, r3
 8008450:	d1eb      	bne.n	800842a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f003 0302 	and.w	r3, r3, #2
 800845a:	2b00      	cmp	r3, #0
 800845c:	d010      	beq.n	8008480 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	68da      	ldr	r2, [r3, #12]
 8008462:	4b14      	ldr	r3, [pc, #80]	; (80084b4 <HAL_RCC_ClockConfig+0x244>)
 8008464:	699b      	ldr	r3, [r3, #24]
 8008466:	f003 030f 	and.w	r3, r3, #15
 800846a:	429a      	cmp	r2, r3
 800846c:	d208      	bcs.n	8008480 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800846e:	4b11      	ldr	r3, [pc, #68]	; (80084b4 <HAL_RCC_ClockConfig+0x244>)
 8008470:	699b      	ldr	r3, [r3, #24]
 8008472:	f023 020f 	bic.w	r2, r3, #15
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	68db      	ldr	r3, [r3, #12]
 800847a:	490e      	ldr	r1, [pc, #56]	; (80084b4 <HAL_RCC_ClockConfig+0x244>)
 800847c:	4313      	orrs	r3, r2
 800847e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008480:	4b0b      	ldr	r3, [pc, #44]	; (80084b0 <HAL_RCC_ClockConfig+0x240>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f003 030f 	and.w	r3, r3, #15
 8008488:	683a      	ldr	r2, [r7, #0]
 800848a:	429a      	cmp	r2, r3
 800848c:	d214      	bcs.n	80084b8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800848e:	4b08      	ldr	r3, [pc, #32]	; (80084b0 <HAL_RCC_ClockConfig+0x240>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f023 020f 	bic.w	r2, r3, #15
 8008496:	4906      	ldr	r1, [pc, #24]	; (80084b0 <HAL_RCC_ClockConfig+0x240>)
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	4313      	orrs	r3, r2
 800849c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800849e:	4b04      	ldr	r3, [pc, #16]	; (80084b0 <HAL_RCC_ClockConfig+0x240>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f003 030f 	and.w	r3, r3, #15
 80084a6:	683a      	ldr	r2, [r7, #0]
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d005      	beq.n	80084b8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80084ac:	2301      	movs	r3, #1
 80084ae:	e086      	b.n	80085be <HAL_RCC_ClockConfig+0x34e>
 80084b0:	52002000 	.word	0x52002000
 80084b4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f003 0304 	and.w	r3, r3, #4
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d010      	beq.n	80084e6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	691a      	ldr	r2, [r3, #16]
 80084c8:	4b3f      	ldr	r3, [pc, #252]	; (80085c8 <HAL_RCC_ClockConfig+0x358>)
 80084ca:	699b      	ldr	r3, [r3, #24]
 80084cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d208      	bcs.n	80084e6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80084d4:	4b3c      	ldr	r3, [pc, #240]	; (80085c8 <HAL_RCC_ClockConfig+0x358>)
 80084d6:	699b      	ldr	r3, [r3, #24]
 80084d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	691b      	ldr	r3, [r3, #16]
 80084e0:	4939      	ldr	r1, [pc, #228]	; (80085c8 <HAL_RCC_ClockConfig+0x358>)
 80084e2:	4313      	orrs	r3, r2
 80084e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f003 0308 	and.w	r3, r3, #8
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d010      	beq.n	8008514 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	695a      	ldr	r2, [r3, #20]
 80084f6:	4b34      	ldr	r3, [pc, #208]	; (80085c8 <HAL_RCC_ClockConfig+0x358>)
 80084f8:	69db      	ldr	r3, [r3, #28]
 80084fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80084fe:	429a      	cmp	r2, r3
 8008500:	d208      	bcs.n	8008514 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008502:	4b31      	ldr	r3, [pc, #196]	; (80085c8 <HAL_RCC_ClockConfig+0x358>)
 8008504:	69db      	ldr	r3, [r3, #28]
 8008506:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	695b      	ldr	r3, [r3, #20]
 800850e:	492e      	ldr	r1, [pc, #184]	; (80085c8 <HAL_RCC_ClockConfig+0x358>)
 8008510:	4313      	orrs	r3, r2
 8008512:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f003 0310 	and.w	r3, r3, #16
 800851c:	2b00      	cmp	r3, #0
 800851e:	d010      	beq.n	8008542 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	699a      	ldr	r2, [r3, #24]
 8008524:	4b28      	ldr	r3, [pc, #160]	; (80085c8 <HAL_RCC_ClockConfig+0x358>)
 8008526:	69db      	ldr	r3, [r3, #28]
 8008528:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800852c:	429a      	cmp	r2, r3
 800852e:	d208      	bcs.n	8008542 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008530:	4b25      	ldr	r3, [pc, #148]	; (80085c8 <HAL_RCC_ClockConfig+0x358>)
 8008532:	69db      	ldr	r3, [r3, #28]
 8008534:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	699b      	ldr	r3, [r3, #24]
 800853c:	4922      	ldr	r1, [pc, #136]	; (80085c8 <HAL_RCC_ClockConfig+0x358>)
 800853e:	4313      	orrs	r3, r2
 8008540:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f003 0320 	and.w	r3, r3, #32
 800854a:	2b00      	cmp	r3, #0
 800854c:	d010      	beq.n	8008570 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	69da      	ldr	r2, [r3, #28]
 8008552:	4b1d      	ldr	r3, [pc, #116]	; (80085c8 <HAL_RCC_ClockConfig+0x358>)
 8008554:	6a1b      	ldr	r3, [r3, #32]
 8008556:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800855a:	429a      	cmp	r2, r3
 800855c:	d208      	bcs.n	8008570 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800855e:	4b1a      	ldr	r3, [pc, #104]	; (80085c8 <HAL_RCC_ClockConfig+0x358>)
 8008560:	6a1b      	ldr	r3, [r3, #32]
 8008562:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	69db      	ldr	r3, [r3, #28]
 800856a:	4917      	ldr	r1, [pc, #92]	; (80085c8 <HAL_RCC_ClockConfig+0x358>)
 800856c:	4313      	orrs	r3, r2
 800856e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008570:	f000 f834 	bl	80085dc <HAL_RCC_GetSysClockFreq>
 8008574:	4602      	mov	r2, r0
 8008576:	4b14      	ldr	r3, [pc, #80]	; (80085c8 <HAL_RCC_ClockConfig+0x358>)
 8008578:	699b      	ldr	r3, [r3, #24]
 800857a:	0a1b      	lsrs	r3, r3, #8
 800857c:	f003 030f 	and.w	r3, r3, #15
 8008580:	4912      	ldr	r1, [pc, #72]	; (80085cc <HAL_RCC_ClockConfig+0x35c>)
 8008582:	5ccb      	ldrb	r3, [r1, r3]
 8008584:	f003 031f 	and.w	r3, r3, #31
 8008588:	fa22 f303 	lsr.w	r3, r2, r3
 800858c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800858e:	4b0e      	ldr	r3, [pc, #56]	; (80085c8 <HAL_RCC_ClockConfig+0x358>)
 8008590:	699b      	ldr	r3, [r3, #24]
 8008592:	f003 030f 	and.w	r3, r3, #15
 8008596:	4a0d      	ldr	r2, [pc, #52]	; (80085cc <HAL_RCC_ClockConfig+0x35c>)
 8008598:	5cd3      	ldrb	r3, [r2, r3]
 800859a:	f003 031f 	and.w	r3, r3, #31
 800859e:	693a      	ldr	r2, [r7, #16]
 80085a0:	fa22 f303 	lsr.w	r3, r2, r3
 80085a4:	4a0a      	ldr	r2, [pc, #40]	; (80085d0 <HAL_RCC_ClockConfig+0x360>)
 80085a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80085a8:	4a0a      	ldr	r2, [pc, #40]	; (80085d4 <HAL_RCC_ClockConfig+0x364>)
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80085ae:	4b0a      	ldr	r3, [pc, #40]	; (80085d8 <HAL_RCC_ClockConfig+0x368>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4618      	mov	r0, r3
 80085b4:	f7fc f8e6 	bl	8004784 <HAL_InitTick>
 80085b8:	4603      	mov	r3, r0
 80085ba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80085bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3718      	adds	r7, #24
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
 80085c6:	bf00      	nop
 80085c8:	58024400 	.word	0x58024400
 80085cc:	0800e6c4 	.word	0x0800e6c4
 80085d0:	24000004 	.word	0x24000004
 80085d4:	24000000 	.word	0x24000000
 80085d8:	24000008 	.word	0x24000008

080085dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80085dc:	b480      	push	{r7}
 80085de:	b089      	sub	sp, #36	; 0x24
 80085e0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80085e2:	4bb3      	ldr	r3, [pc, #716]	; (80088b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085e4:	691b      	ldr	r3, [r3, #16]
 80085e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80085ea:	2b18      	cmp	r3, #24
 80085ec:	f200 8155 	bhi.w	800889a <HAL_RCC_GetSysClockFreq+0x2be>
 80085f0:	a201      	add	r2, pc, #4	; (adr r2, 80085f8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80085f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085f6:	bf00      	nop
 80085f8:	0800865d 	.word	0x0800865d
 80085fc:	0800889b 	.word	0x0800889b
 8008600:	0800889b 	.word	0x0800889b
 8008604:	0800889b 	.word	0x0800889b
 8008608:	0800889b 	.word	0x0800889b
 800860c:	0800889b 	.word	0x0800889b
 8008610:	0800889b 	.word	0x0800889b
 8008614:	0800889b 	.word	0x0800889b
 8008618:	08008683 	.word	0x08008683
 800861c:	0800889b 	.word	0x0800889b
 8008620:	0800889b 	.word	0x0800889b
 8008624:	0800889b 	.word	0x0800889b
 8008628:	0800889b 	.word	0x0800889b
 800862c:	0800889b 	.word	0x0800889b
 8008630:	0800889b 	.word	0x0800889b
 8008634:	0800889b 	.word	0x0800889b
 8008638:	08008689 	.word	0x08008689
 800863c:	0800889b 	.word	0x0800889b
 8008640:	0800889b 	.word	0x0800889b
 8008644:	0800889b 	.word	0x0800889b
 8008648:	0800889b 	.word	0x0800889b
 800864c:	0800889b 	.word	0x0800889b
 8008650:	0800889b 	.word	0x0800889b
 8008654:	0800889b 	.word	0x0800889b
 8008658:	0800868f 	.word	0x0800868f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800865c:	4b94      	ldr	r3, [pc, #592]	; (80088b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f003 0320 	and.w	r3, r3, #32
 8008664:	2b00      	cmp	r3, #0
 8008666:	d009      	beq.n	800867c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008668:	4b91      	ldr	r3, [pc, #580]	; (80088b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	08db      	lsrs	r3, r3, #3
 800866e:	f003 0303 	and.w	r3, r3, #3
 8008672:	4a90      	ldr	r2, [pc, #576]	; (80088b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008674:	fa22 f303 	lsr.w	r3, r2, r3
 8008678:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800867a:	e111      	b.n	80088a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800867c:	4b8d      	ldr	r3, [pc, #564]	; (80088b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800867e:	61bb      	str	r3, [r7, #24]
      break;
 8008680:	e10e      	b.n	80088a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008682:	4b8d      	ldr	r3, [pc, #564]	; (80088b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008684:	61bb      	str	r3, [r7, #24]
      break;
 8008686:	e10b      	b.n	80088a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008688:	4b8c      	ldr	r3, [pc, #560]	; (80088bc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800868a:	61bb      	str	r3, [r7, #24]
      break;
 800868c:	e108      	b.n	80088a0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800868e:	4b88      	ldr	r3, [pc, #544]	; (80088b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008692:	f003 0303 	and.w	r3, r3, #3
 8008696:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008698:	4b85      	ldr	r3, [pc, #532]	; (80088b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800869a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800869c:	091b      	lsrs	r3, r3, #4
 800869e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80086a2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80086a4:	4b82      	ldr	r3, [pc, #520]	; (80088b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a8:	f003 0301 	and.w	r3, r3, #1
 80086ac:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80086ae:	4b80      	ldr	r3, [pc, #512]	; (80088b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086b2:	08db      	lsrs	r3, r3, #3
 80086b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80086b8:	68fa      	ldr	r2, [r7, #12]
 80086ba:	fb02 f303 	mul.w	r3, r2, r3
 80086be:	ee07 3a90 	vmov	s15, r3
 80086c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086c6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	f000 80e1 	beq.w	8008894 <HAL_RCC_GetSysClockFreq+0x2b8>
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	2b02      	cmp	r3, #2
 80086d6:	f000 8083 	beq.w	80087e0 <HAL_RCC_GetSysClockFreq+0x204>
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	2b02      	cmp	r3, #2
 80086de:	f200 80a1 	bhi.w	8008824 <HAL_RCC_GetSysClockFreq+0x248>
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d003      	beq.n	80086f0 <HAL_RCC_GetSysClockFreq+0x114>
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	2b01      	cmp	r3, #1
 80086ec:	d056      	beq.n	800879c <HAL_RCC_GetSysClockFreq+0x1c0>
 80086ee:	e099      	b.n	8008824 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086f0:	4b6f      	ldr	r3, [pc, #444]	; (80088b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f003 0320 	and.w	r3, r3, #32
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d02d      	beq.n	8008758 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086fc:	4b6c      	ldr	r3, [pc, #432]	; (80088b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	08db      	lsrs	r3, r3, #3
 8008702:	f003 0303 	and.w	r3, r3, #3
 8008706:	4a6b      	ldr	r2, [pc, #428]	; (80088b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008708:	fa22 f303 	lsr.w	r3, r2, r3
 800870c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	ee07 3a90 	vmov	s15, r3
 8008714:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	ee07 3a90 	vmov	s15, r3
 800871e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008722:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008726:	4b62      	ldr	r3, [pc, #392]	; (80088b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800872a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800872e:	ee07 3a90 	vmov	s15, r3
 8008732:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008736:	ed97 6a02 	vldr	s12, [r7, #8]
 800873a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80088c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800873e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008742:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008746:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800874a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800874e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008752:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008756:	e087      	b.n	8008868 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	ee07 3a90 	vmov	s15, r3
 800875e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008762:	eddf 6a58 	vldr	s13, [pc, #352]	; 80088c4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008766:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800876a:	4b51      	ldr	r3, [pc, #324]	; (80088b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800876c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800876e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008772:	ee07 3a90 	vmov	s15, r3
 8008776:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800877a:	ed97 6a02 	vldr	s12, [r7, #8]
 800877e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80088c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008782:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008786:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800878a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800878e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008796:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800879a:	e065      	b.n	8008868 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	ee07 3a90 	vmov	s15, r3
 80087a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087a6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80088c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80087aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087ae:	4b40      	ldr	r3, [pc, #256]	; (80088b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087b6:	ee07 3a90 	vmov	s15, r3
 80087ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087be:	ed97 6a02 	vldr	s12, [r7, #8]
 80087c2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80088c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80087c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80087de:	e043      	b.n	8008868 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	ee07 3a90 	vmov	s15, r3
 80087e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087ea:	eddf 6a38 	vldr	s13, [pc, #224]	; 80088cc <HAL_RCC_GetSysClockFreq+0x2f0>
 80087ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087f2:	4b2f      	ldr	r3, [pc, #188]	; (80088b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087fa:	ee07 3a90 	vmov	s15, r3
 80087fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008802:	ed97 6a02 	vldr	s12, [r7, #8]
 8008806:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80088c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800880a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800880e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008812:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008816:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800881a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800881e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008822:	e021      	b.n	8008868 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	ee07 3a90 	vmov	s15, r3
 800882a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800882e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80088c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008836:	4b1e      	ldr	r3, [pc, #120]	; (80088b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800883a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800883e:	ee07 3a90 	vmov	s15, r3
 8008842:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008846:	ed97 6a02 	vldr	s12, [r7, #8]
 800884a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80088c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800884e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008852:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008856:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800885a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800885e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008862:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008866:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008868:	4b11      	ldr	r3, [pc, #68]	; (80088b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800886a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800886c:	0a5b      	lsrs	r3, r3, #9
 800886e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008872:	3301      	adds	r3, #1
 8008874:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	ee07 3a90 	vmov	s15, r3
 800887c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008880:	edd7 6a07 	vldr	s13, [r7, #28]
 8008884:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008888:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800888c:	ee17 3a90 	vmov	r3, s15
 8008890:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008892:	e005      	b.n	80088a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008894:	2300      	movs	r3, #0
 8008896:	61bb      	str	r3, [r7, #24]
      break;
 8008898:	e002      	b.n	80088a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800889a:	4b07      	ldr	r3, [pc, #28]	; (80088b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800889c:	61bb      	str	r3, [r7, #24]
      break;
 800889e:	bf00      	nop
  }

  return sysclockfreq;
 80088a0:	69bb      	ldr	r3, [r7, #24]
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3724      	adds	r7, #36	; 0x24
 80088a6:	46bd      	mov	sp, r7
 80088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ac:	4770      	bx	lr
 80088ae:	bf00      	nop
 80088b0:	58024400 	.word	0x58024400
 80088b4:	03d09000 	.word	0x03d09000
 80088b8:	003d0900 	.word	0x003d0900
 80088bc:	017d7840 	.word	0x017d7840
 80088c0:	46000000 	.word	0x46000000
 80088c4:	4c742400 	.word	0x4c742400
 80088c8:	4a742400 	.word	0x4a742400
 80088cc:	4bbebc20 	.word	0x4bbebc20

080088d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b082      	sub	sp, #8
 80088d4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80088d6:	f7ff fe81 	bl	80085dc <HAL_RCC_GetSysClockFreq>
 80088da:	4602      	mov	r2, r0
 80088dc:	4b10      	ldr	r3, [pc, #64]	; (8008920 <HAL_RCC_GetHCLKFreq+0x50>)
 80088de:	699b      	ldr	r3, [r3, #24]
 80088e0:	0a1b      	lsrs	r3, r3, #8
 80088e2:	f003 030f 	and.w	r3, r3, #15
 80088e6:	490f      	ldr	r1, [pc, #60]	; (8008924 <HAL_RCC_GetHCLKFreq+0x54>)
 80088e8:	5ccb      	ldrb	r3, [r1, r3]
 80088ea:	f003 031f 	and.w	r3, r3, #31
 80088ee:	fa22 f303 	lsr.w	r3, r2, r3
 80088f2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80088f4:	4b0a      	ldr	r3, [pc, #40]	; (8008920 <HAL_RCC_GetHCLKFreq+0x50>)
 80088f6:	699b      	ldr	r3, [r3, #24]
 80088f8:	f003 030f 	and.w	r3, r3, #15
 80088fc:	4a09      	ldr	r2, [pc, #36]	; (8008924 <HAL_RCC_GetHCLKFreq+0x54>)
 80088fe:	5cd3      	ldrb	r3, [r2, r3]
 8008900:	f003 031f 	and.w	r3, r3, #31
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	fa22 f303 	lsr.w	r3, r2, r3
 800890a:	4a07      	ldr	r2, [pc, #28]	; (8008928 <HAL_RCC_GetHCLKFreq+0x58>)
 800890c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800890e:	4a07      	ldr	r2, [pc, #28]	; (800892c <HAL_RCC_GetHCLKFreq+0x5c>)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008914:	4b04      	ldr	r3, [pc, #16]	; (8008928 <HAL_RCC_GetHCLKFreq+0x58>)
 8008916:	681b      	ldr	r3, [r3, #0]
}
 8008918:	4618      	mov	r0, r3
 800891a:	3708      	adds	r7, #8
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}
 8008920:	58024400 	.word	0x58024400
 8008924:	0800e6c4 	.word	0x0800e6c4
 8008928:	24000004 	.word	0x24000004
 800892c:	24000000 	.word	0x24000000

08008930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008934:	f7ff ffcc 	bl	80088d0 <HAL_RCC_GetHCLKFreq>
 8008938:	4602      	mov	r2, r0
 800893a:	4b06      	ldr	r3, [pc, #24]	; (8008954 <HAL_RCC_GetPCLK1Freq+0x24>)
 800893c:	69db      	ldr	r3, [r3, #28]
 800893e:	091b      	lsrs	r3, r3, #4
 8008940:	f003 0307 	and.w	r3, r3, #7
 8008944:	4904      	ldr	r1, [pc, #16]	; (8008958 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008946:	5ccb      	ldrb	r3, [r1, r3]
 8008948:	f003 031f 	and.w	r3, r3, #31
 800894c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008950:	4618      	mov	r0, r3
 8008952:	bd80      	pop	{r7, pc}
 8008954:	58024400 	.word	0x58024400
 8008958:	0800e6c4 	.word	0x0800e6c4

0800895c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008960:	f7ff ffb6 	bl	80088d0 <HAL_RCC_GetHCLKFreq>
 8008964:	4602      	mov	r2, r0
 8008966:	4b06      	ldr	r3, [pc, #24]	; (8008980 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008968:	69db      	ldr	r3, [r3, #28]
 800896a:	0a1b      	lsrs	r3, r3, #8
 800896c:	f003 0307 	and.w	r3, r3, #7
 8008970:	4904      	ldr	r1, [pc, #16]	; (8008984 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008972:	5ccb      	ldrb	r3, [r1, r3]
 8008974:	f003 031f 	and.w	r3, r3, #31
 8008978:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800897c:	4618      	mov	r0, r3
 800897e:	bd80      	pop	{r7, pc}
 8008980:	58024400 	.word	0x58024400
 8008984:	0800e6c4 	.word	0x0800e6c4

08008988 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008988:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800898c:	b0c6      	sub	sp, #280	; 0x118
 800898e:	af00      	add	r7, sp, #0
 8008990:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008994:	2300      	movs	r3, #0
 8008996:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800899a:	2300      	movs	r3, #0
 800899c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80089a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80089ac:	2500      	movs	r5, #0
 80089ae:	ea54 0305 	orrs.w	r3, r4, r5
 80089b2:	d049      	beq.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80089b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80089be:	d02f      	beq.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80089c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80089c4:	d828      	bhi.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80089c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80089ca:	d01a      	beq.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80089cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80089d0:	d822      	bhi.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d003      	beq.n	80089de <HAL_RCCEx_PeriphCLKConfig+0x56>
 80089d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089da:	d007      	beq.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80089dc:	e01c      	b.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089de:	4bab      	ldr	r3, [pc, #684]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80089e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e2:	4aaa      	ldr	r2, [pc, #680]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80089e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80089ea:	e01a      	b.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80089ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089f0:	3308      	adds	r3, #8
 80089f2:	2102      	movs	r1, #2
 80089f4:	4618      	mov	r0, r3
 80089f6:	f001 fc25 	bl	800a244 <RCCEx_PLL2_Config>
 80089fa:	4603      	mov	r3, r0
 80089fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008a00:	e00f      	b.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a06:	3328      	adds	r3, #40	; 0x28
 8008a08:	2102      	movs	r1, #2
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f001 fccc 	bl	800a3a8 <RCCEx_PLL3_Config>
 8008a10:	4603      	mov	r3, r0
 8008a12:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008a16:	e004      	b.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a18:	2301      	movs	r3, #1
 8008a1a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008a1e:	e000      	b.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008a20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a22:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d10a      	bne.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008a2a:	4b98      	ldr	r3, [pc, #608]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008a2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a2e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a38:	4a94      	ldr	r2, [pc, #592]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008a3a:	430b      	orrs	r3, r1
 8008a3c:	6513      	str	r3, [r2, #80]	; 0x50
 8008a3e:	e003      	b.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a40:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008a44:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008a48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a50:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8008a54:	f04f 0900 	mov.w	r9, #0
 8008a58:	ea58 0309 	orrs.w	r3, r8, r9
 8008a5c:	d047      	beq.n	8008aee <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008a5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a64:	2b04      	cmp	r3, #4
 8008a66:	d82a      	bhi.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008a68:	a201      	add	r2, pc, #4	; (adr r2, 8008a70 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a6e:	bf00      	nop
 8008a70:	08008a85 	.word	0x08008a85
 8008a74:	08008a93 	.word	0x08008a93
 8008a78:	08008aa9 	.word	0x08008aa9
 8008a7c:	08008ac7 	.word	0x08008ac7
 8008a80:	08008ac7 	.word	0x08008ac7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a84:	4b81      	ldr	r3, [pc, #516]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a88:	4a80      	ldr	r2, [pc, #512]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008a8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008a90:	e01a      	b.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a96:	3308      	adds	r3, #8
 8008a98:	2100      	movs	r1, #0
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f001 fbd2 	bl	800a244 <RCCEx_PLL2_Config>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008aa6:	e00f      	b.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008aac:	3328      	adds	r3, #40	; 0x28
 8008aae:	2100      	movs	r1, #0
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f001 fc79 	bl	800a3a8 <RCCEx_PLL3_Config>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008abc:	e004      	b.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008ac4:	e000      	b.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008ac6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ac8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d10a      	bne.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008ad0:	4b6e      	ldr	r3, [pc, #440]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008ad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ad4:	f023 0107 	bic.w	r1, r3, #7
 8008ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ade:	4a6b      	ldr	r2, [pc, #428]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008ae0:	430b      	orrs	r3, r1
 8008ae2:	6513      	str	r3, [r2, #80]	; 0x50
 8008ae4:	e003      	b.n	8008aee <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ae6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008aea:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008aee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af6:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8008afa:	f04f 0b00 	mov.w	fp, #0
 8008afe:	ea5a 030b 	orrs.w	r3, sl, fp
 8008b02:	d05b      	beq.n	8008bbc <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b08:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008b0c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008b10:	d03b      	beq.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8008b12:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008b16:	d834      	bhi.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008b18:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008b1c:	d037      	beq.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008b1e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008b22:	d82e      	bhi.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008b24:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008b28:	d033      	beq.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8008b2a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008b2e:	d828      	bhi.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008b30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b34:	d01a      	beq.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8008b36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b3a:	d822      	bhi.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d003      	beq.n	8008b48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8008b40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b44:	d007      	beq.n	8008b56 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8008b46:	e01c      	b.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b48:	4b50      	ldr	r3, [pc, #320]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b4c:	4a4f      	ldr	r2, [pc, #316]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008b4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008b54:	e01e      	b.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b5a:	3308      	adds	r3, #8
 8008b5c:	2100      	movs	r1, #0
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f001 fb70 	bl	800a244 <RCCEx_PLL2_Config>
 8008b64:	4603      	mov	r3, r0
 8008b66:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008b6a:	e013      	b.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008b6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b70:	3328      	adds	r3, #40	; 0x28
 8008b72:	2100      	movs	r1, #0
 8008b74:	4618      	mov	r0, r3
 8008b76:	f001 fc17 	bl	800a3a8 <RCCEx_PLL3_Config>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008b80:	e008      	b.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008b82:	2301      	movs	r3, #1
 8008b84:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008b88:	e004      	b.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008b8a:	bf00      	nop
 8008b8c:	e002      	b.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008b8e:	bf00      	nop
 8008b90:	e000      	b.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008b92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b94:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d10b      	bne.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008b9c:	4b3b      	ldr	r3, [pc, #236]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ba0:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8008ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ba8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008bac:	4a37      	ldr	r2, [pc, #220]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008bae:	430b      	orrs	r3, r1
 8008bb0:	6593      	str	r3, [r2, #88]	; 0x58
 8008bb2:	e003      	b.n	8008bbc <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bb4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008bb8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008bbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc4:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8008bc8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008bcc:	2300      	movs	r3, #0
 8008bce:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008bd2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8008bd6:	460b      	mov	r3, r1
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	d05d      	beq.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008bdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008be0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008be4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008be8:	d03b      	beq.n	8008c62 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8008bea:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008bee:	d834      	bhi.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008bf0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008bf4:	d037      	beq.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8008bf6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008bfa:	d82e      	bhi.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008bfc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008c00:	d033      	beq.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8008c02:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008c06:	d828      	bhi.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008c08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c0c:	d01a      	beq.n	8008c44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8008c0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c12:	d822      	bhi.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d003      	beq.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008c18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008c1c:	d007      	beq.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008c1e:	e01c      	b.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c20:	4b1a      	ldr	r3, [pc, #104]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c24:	4a19      	ldr	r2, [pc, #100]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008c26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008c2c:	e01e      	b.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c32:	3308      	adds	r3, #8
 8008c34:	2100      	movs	r1, #0
 8008c36:	4618      	mov	r0, r3
 8008c38:	f001 fb04 	bl	800a244 <RCCEx_PLL2_Config>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008c42:	e013      	b.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008c44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c48:	3328      	adds	r3, #40	; 0x28
 8008c4a:	2100      	movs	r1, #0
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f001 fbab 	bl	800a3a8 <RCCEx_PLL3_Config>
 8008c52:	4603      	mov	r3, r0
 8008c54:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008c58:	e008      	b.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008c60:	e004      	b.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008c62:	bf00      	nop
 8008c64:	e002      	b.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008c66:	bf00      	nop
 8008c68:	e000      	b.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008c6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c6c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d10d      	bne.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008c74:	4b05      	ldr	r3, [pc, #20]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c78:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8008c7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c80:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008c84:	4a01      	ldr	r2, [pc, #4]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008c86:	430b      	orrs	r3, r1
 8008c88:	6593      	str	r3, [r2, #88]	; 0x58
 8008c8a:	e005      	b.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8008c8c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c90:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008c94:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8008ca4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008ca8:	2300      	movs	r3, #0
 8008caa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008cae:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8008cb2:	460b      	mov	r3, r1
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	d03a      	beq.n	8008d2e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8008cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cbe:	2b30      	cmp	r3, #48	; 0x30
 8008cc0:	d01f      	beq.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8008cc2:	2b30      	cmp	r3, #48	; 0x30
 8008cc4:	d819      	bhi.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0x372>
 8008cc6:	2b20      	cmp	r3, #32
 8008cc8:	d00c      	beq.n	8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8008cca:	2b20      	cmp	r3, #32
 8008ccc:	d815      	bhi.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0x372>
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d019      	beq.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008cd2:	2b10      	cmp	r3, #16
 8008cd4:	d111      	bne.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cd6:	4baa      	ldr	r3, [pc, #680]	; (8008f80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cda:	4aa9      	ldr	r2, [pc, #676]	; (8008f80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ce0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008ce2:	e011      	b.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008ce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ce8:	3308      	adds	r3, #8
 8008cea:	2102      	movs	r1, #2
 8008cec:	4618      	mov	r0, r3
 8008cee:	f001 faa9 	bl	800a244 <RCCEx_PLL2_Config>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008cf8:	e006      	b.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008d00:	e002      	b.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8008d02:	bf00      	nop
 8008d04:	e000      	b.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8008d06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d10a      	bne.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008d10:	4b9b      	ldr	r3, [pc, #620]	; (8008f80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d14:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8008d18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d1e:	4a98      	ldr	r2, [pc, #608]	; (8008f80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008d20:	430b      	orrs	r3, r1
 8008d22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008d24:	e003      	b.n	8008d2e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d26:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008d2a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d36:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8008d3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008d3e:	2300      	movs	r3, #0
 8008d40:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008d44:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8008d48:	460b      	mov	r3, r1
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	d051      	beq.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008d4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d58:	d035      	beq.n	8008dc6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8008d5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d5e:	d82e      	bhi.n	8008dbe <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008d60:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008d64:	d031      	beq.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0x442>
 8008d66:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008d6a:	d828      	bhi.n	8008dbe <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008d6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d70:	d01a      	beq.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8008d72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d76:	d822      	bhi.n	8008dbe <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d003      	beq.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8008d7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d80:	d007      	beq.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8008d82:	e01c      	b.n	8008dbe <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d84:	4b7e      	ldr	r3, [pc, #504]	; (8008f80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d88:	4a7d      	ldr	r2, [pc, #500]	; (8008f80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008d8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008d90:	e01c      	b.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d96:	3308      	adds	r3, #8
 8008d98:	2100      	movs	r1, #0
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f001 fa52 	bl	800a244 <RCCEx_PLL2_Config>
 8008da0:	4603      	mov	r3, r0
 8008da2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008da6:	e011      	b.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dac:	3328      	adds	r3, #40	; 0x28
 8008dae:	2100      	movs	r1, #0
 8008db0:	4618      	mov	r0, r3
 8008db2:	f001 faf9 	bl	800a3a8 <RCCEx_PLL3_Config>
 8008db6:	4603      	mov	r3, r0
 8008db8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008dbc:	e006      	b.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008dc4:	e002      	b.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8008dc6:	bf00      	nop
 8008dc8:	e000      	b.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8008dca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008dcc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d10a      	bne.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008dd4:	4b6a      	ldr	r3, [pc, #424]	; (8008f80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008dd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dd8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8008ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008de2:	4a67      	ldr	r2, [pc, #412]	; (8008f80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008de4:	430b      	orrs	r3, r1
 8008de6:	6513      	str	r3, [r2, #80]	; 0x50
 8008de8:	e003      	b.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008dee:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dfa:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8008dfe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008e02:	2300      	movs	r3, #0
 8008e04:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008e08:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	d053      	beq.n	8008eba <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008e12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e1c:	d033      	beq.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8008e1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e22:	d82c      	bhi.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008e24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008e28:	d02f      	beq.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0x502>
 8008e2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008e2e:	d826      	bhi.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008e30:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008e34:	d02b      	beq.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8008e36:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008e3a:	d820      	bhi.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008e3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e40:	d012      	beq.n	8008e68 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8008e42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e46:	d81a      	bhi.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d022      	beq.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8008e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e50:	d115      	bne.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e56:	3308      	adds	r3, #8
 8008e58:	2101      	movs	r1, #1
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f001 f9f2 	bl	800a244 <RCCEx_PLL2_Config>
 8008e60:	4603      	mov	r3, r0
 8008e62:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008e66:	e015      	b.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e6c:	3328      	adds	r3, #40	; 0x28
 8008e6e:	2101      	movs	r1, #1
 8008e70:	4618      	mov	r0, r3
 8008e72:	f001 fa99 	bl	800a3a8 <RCCEx_PLL3_Config>
 8008e76:	4603      	mov	r3, r0
 8008e78:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008e7c:	e00a      	b.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008e84:	e006      	b.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008e86:	bf00      	nop
 8008e88:	e004      	b.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008e8a:	bf00      	nop
 8008e8c:	e002      	b.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008e8e:	bf00      	nop
 8008e90:	e000      	b.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008e92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e94:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d10a      	bne.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008e9c:	4b38      	ldr	r3, [pc, #224]	; (8008f80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ea0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8008ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008eaa:	4a35      	ldr	r2, [pc, #212]	; (8008f80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008eac:	430b      	orrs	r3, r1
 8008eae:	6513      	str	r3, [r2, #80]	; 0x50
 8008eb0:	e003      	b.n	8008eba <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008eb2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008eb6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec2:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8008ec6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008eca:	2300      	movs	r3, #0
 8008ecc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008ed0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008ed4:	460b      	mov	r3, r1
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	d058      	beq.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008eda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ede:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008ee2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ee6:	d033      	beq.n	8008f50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8008ee8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008eec:	d82c      	bhi.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ef2:	d02f      	beq.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8008ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ef8:	d826      	bhi.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008efa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008efe:	d02b      	beq.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8008f00:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008f04:	d820      	bhi.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008f06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f0a:	d012      	beq.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8008f0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f10:	d81a      	bhi.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d022      	beq.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008f16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f1a:	d115      	bne.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f20:	3308      	adds	r3, #8
 8008f22:	2101      	movs	r1, #1
 8008f24:	4618      	mov	r0, r3
 8008f26:	f001 f98d 	bl	800a244 <RCCEx_PLL2_Config>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008f30:	e015      	b.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f36:	3328      	adds	r3, #40	; 0x28
 8008f38:	2101      	movs	r1, #1
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f001 fa34 	bl	800a3a8 <RCCEx_PLL3_Config>
 8008f40:	4603      	mov	r3, r0
 8008f42:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008f46:	e00a      	b.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008f48:	2301      	movs	r3, #1
 8008f4a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008f4e:	e006      	b.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008f50:	bf00      	nop
 8008f52:	e004      	b.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008f54:	bf00      	nop
 8008f56:	e002      	b.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008f58:	bf00      	nop
 8008f5a:	e000      	b.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008f5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f5e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d10e      	bne.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008f66:	4b06      	ldr	r3, [pc, #24]	; (8008f80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f6a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8008f6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f72:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008f76:	4a02      	ldr	r2, [pc, #8]	; (8008f80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008f78:	430b      	orrs	r3, r1
 8008f7a:	6593      	str	r3, [r2, #88]	; 0x58
 8008f7c:	e006      	b.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8008f7e:	bf00      	nop
 8008f80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f84:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008f88:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f94:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8008f98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008fa2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8008fa6:	460b      	mov	r3, r1
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	d037      	beq.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fb6:	d00e      	beq.n	8008fd6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8008fb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fbc:	d816      	bhi.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0x664>
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d018      	beq.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8008fc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008fc6:	d111      	bne.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fc8:	4bc4      	ldr	r3, [pc, #784]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fcc:	4ac3      	ldr	r2, [pc, #780]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008fce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008fd4:	e00f      	b.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008fd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fda:	3308      	adds	r3, #8
 8008fdc:	2101      	movs	r1, #1
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f001 f930 	bl	800a244 <RCCEx_PLL2_Config>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008fea:	e004      	b.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008fec:	2301      	movs	r3, #1
 8008fee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008ff2:	e000      	b.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8008ff4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ff6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d10a      	bne.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008ffe:	4bb7      	ldr	r3, [pc, #732]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009002:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009006:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800900a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800900c:	4ab3      	ldr	r2, [pc, #716]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800900e:	430b      	orrs	r3, r1
 8009010:	6513      	str	r3, [r2, #80]	; 0x50
 8009012:	e003      	b.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009014:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009018:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800901c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009024:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8009028:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800902c:	2300      	movs	r3, #0
 800902e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009032:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8009036:	460b      	mov	r3, r1
 8009038:	4313      	orrs	r3, r2
 800903a:	d039      	beq.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800903c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009042:	2b03      	cmp	r3, #3
 8009044:	d81c      	bhi.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8009046:	a201      	add	r2, pc, #4	; (adr r2, 800904c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8009048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800904c:	08009089 	.word	0x08009089
 8009050:	0800905d 	.word	0x0800905d
 8009054:	0800906b 	.word	0x0800906b
 8009058:	08009089 	.word	0x08009089
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800905c:	4b9f      	ldr	r3, [pc, #636]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800905e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009060:	4a9e      	ldr	r2, [pc, #632]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009062:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009066:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009068:	e00f      	b.n	800908a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800906a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800906e:	3308      	adds	r3, #8
 8009070:	2102      	movs	r1, #2
 8009072:	4618      	mov	r0, r3
 8009074:	f001 f8e6 	bl	800a244 <RCCEx_PLL2_Config>
 8009078:	4603      	mov	r3, r0
 800907a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800907e:	e004      	b.n	800908a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009080:	2301      	movs	r3, #1
 8009082:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009086:	e000      	b.n	800908a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8009088:	bf00      	nop
    }

    if (ret == HAL_OK)
 800908a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800908e:	2b00      	cmp	r3, #0
 8009090:	d10a      	bne.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009092:	4b92      	ldr	r3, [pc, #584]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009096:	f023 0103 	bic.w	r1, r3, #3
 800909a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800909e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090a0:	4a8e      	ldr	r2, [pc, #568]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80090a2:	430b      	orrs	r3, r1
 80090a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80090a6:	e003      	b.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80090ac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80090b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80090bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80090c0:	2300      	movs	r3, #0
 80090c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80090c6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80090ca:	460b      	mov	r3, r1
 80090cc:	4313      	orrs	r3, r2
 80090ce:	f000 8099 	beq.w	8009204 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80090d2:	4b83      	ldr	r3, [pc, #524]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4a82      	ldr	r2, [pc, #520]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80090d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80090de:	f7fb fb9b 	bl	8004818 <HAL_GetTick>
 80090e2:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80090e6:	e00b      	b.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80090e8:	f7fb fb96 	bl	8004818 <HAL_GetTick>
 80090ec:	4602      	mov	r2, r0
 80090ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80090f2:	1ad3      	subs	r3, r2, r3
 80090f4:	2b64      	cmp	r3, #100	; 0x64
 80090f6:	d903      	bls.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80090f8:	2303      	movs	r3, #3
 80090fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80090fe:	e005      	b.n	800910c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009100:	4b77      	ldr	r3, [pc, #476]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009108:	2b00      	cmp	r3, #0
 800910a:	d0ed      	beq.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800910c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009110:	2b00      	cmp	r3, #0
 8009112:	d173      	bne.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009114:	4b71      	ldr	r3, [pc, #452]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009116:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009118:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800911c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009120:	4053      	eors	r3, r2
 8009122:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009126:	2b00      	cmp	r3, #0
 8009128:	d015      	beq.n	8009156 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800912a:	4b6c      	ldr	r3, [pc, #432]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800912c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800912e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009132:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009136:	4b69      	ldr	r3, [pc, #420]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800913a:	4a68      	ldr	r2, [pc, #416]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800913c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009140:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009142:	4b66      	ldr	r3, [pc, #408]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009146:	4a65      	ldr	r2, [pc, #404]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009148:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800914c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800914e:	4a63      	ldr	r2, [pc, #396]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009150:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009154:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009156:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800915a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800915e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009162:	d118      	bne.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009164:	f7fb fb58 	bl	8004818 <HAL_GetTick>
 8009168:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800916c:	e00d      	b.n	800918a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800916e:	f7fb fb53 	bl	8004818 <HAL_GetTick>
 8009172:	4602      	mov	r2, r0
 8009174:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009178:	1ad2      	subs	r2, r2, r3
 800917a:	f241 3388 	movw	r3, #5000	; 0x1388
 800917e:	429a      	cmp	r2, r3
 8009180:	d903      	bls.n	800918a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8009182:	2303      	movs	r3, #3
 8009184:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8009188:	e005      	b.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800918a:	4b54      	ldr	r3, [pc, #336]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800918c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800918e:	f003 0302 	and.w	r3, r3, #2
 8009192:	2b00      	cmp	r3, #0
 8009194:	d0eb      	beq.n	800916e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8009196:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800919a:	2b00      	cmp	r3, #0
 800919c:	d129      	bne.n	80091f2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800919e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80091a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80091ae:	d10e      	bne.n	80091ce <HAL_RCCEx_PeriphCLKConfig+0x846>
 80091b0:	4b4a      	ldr	r3, [pc, #296]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80091b2:	691b      	ldr	r3, [r3, #16]
 80091b4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80091b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80091c0:	091a      	lsrs	r2, r3, #4
 80091c2:	4b48      	ldr	r3, [pc, #288]	; (80092e4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80091c4:	4013      	ands	r3, r2
 80091c6:	4a45      	ldr	r2, [pc, #276]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80091c8:	430b      	orrs	r3, r1
 80091ca:	6113      	str	r3, [r2, #16]
 80091cc:	e005      	b.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x852>
 80091ce:	4b43      	ldr	r3, [pc, #268]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80091d0:	691b      	ldr	r3, [r3, #16]
 80091d2:	4a42      	ldr	r2, [pc, #264]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80091d4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80091d8:	6113      	str	r3, [r2, #16]
 80091da:	4b40      	ldr	r3, [pc, #256]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80091dc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80091de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80091e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091ea:	4a3c      	ldr	r2, [pc, #240]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80091ec:	430b      	orrs	r3, r1
 80091ee:	6713      	str	r3, [r2, #112]	; 0x70
 80091f0:	e008      	b.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80091f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80091f6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 80091fa:	e003      	b.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009200:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009204:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800920c:	f002 0301 	and.w	r3, r2, #1
 8009210:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009214:	2300      	movs	r3, #0
 8009216:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800921a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800921e:	460b      	mov	r3, r1
 8009220:	4313      	orrs	r3, r2
 8009222:	f000 808f 	beq.w	8009344 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009226:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800922a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800922c:	2b28      	cmp	r3, #40	; 0x28
 800922e:	d871      	bhi.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8009230:	a201      	add	r2, pc, #4	; (adr r2, 8009238 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8009232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009236:	bf00      	nop
 8009238:	0800931d 	.word	0x0800931d
 800923c:	08009315 	.word	0x08009315
 8009240:	08009315 	.word	0x08009315
 8009244:	08009315 	.word	0x08009315
 8009248:	08009315 	.word	0x08009315
 800924c:	08009315 	.word	0x08009315
 8009250:	08009315 	.word	0x08009315
 8009254:	08009315 	.word	0x08009315
 8009258:	080092e9 	.word	0x080092e9
 800925c:	08009315 	.word	0x08009315
 8009260:	08009315 	.word	0x08009315
 8009264:	08009315 	.word	0x08009315
 8009268:	08009315 	.word	0x08009315
 800926c:	08009315 	.word	0x08009315
 8009270:	08009315 	.word	0x08009315
 8009274:	08009315 	.word	0x08009315
 8009278:	080092ff 	.word	0x080092ff
 800927c:	08009315 	.word	0x08009315
 8009280:	08009315 	.word	0x08009315
 8009284:	08009315 	.word	0x08009315
 8009288:	08009315 	.word	0x08009315
 800928c:	08009315 	.word	0x08009315
 8009290:	08009315 	.word	0x08009315
 8009294:	08009315 	.word	0x08009315
 8009298:	0800931d 	.word	0x0800931d
 800929c:	08009315 	.word	0x08009315
 80092a0:	08009315 	.word	0x08009315
 80092a4:	08009315 	.word	0x08009315
 80092a8:	08009315 	.word	0x08009315
 80092ac:	08009315 	.word	0x08009315
 80092b0:	08009315 	.word	0x08009315
 80092b4:	08009315 	.word	0x08009315
 80092b8:	0800931d 	.word	0x0800931d
 80092bc:	08009315 	.word	0x08009315
 80092c0:	08009315 	.word	0x08009315
 80092c4:	08009315 	.word	0x08009315
 80092c8:	08009315 	.word	0x08009315
 80092cc:	08009315 	.word	0x08009315
 80092d0:	08009315 	.word	0x08009315
 80092d4:	08009315 	.word	0x08009315
 80092d8:	0800931d 	.word	0x0800931d
 80092dc:	58024400 	.word	0x58024400
 80092e0:	58024800 	.word	0x58024800
 80092e4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80092e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092ec:	3308      	adds	r3, #8
 80092ee:	2101      	movs	r1, #1
 80092f0:	4618      	mov	r0, r3
 80092f2:	f000 ffa7 	bl	800a244 <RCCEx_PLL2_Config>
 80092f6:	4603      	mov	r3, r0
 80092f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80092fc:	e00f      	b.n	800931e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80092fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009302:	3328      	adds	r3, #40	; 0x28
 8009304:	2101      	movs	r1, #1
 8009306:	4618      	mov	r0, r3
 8009308:	f001 f84e 	bl	800a3a8 <RCCEx_PLL3_Config>
 800930c:	4603      	mov	r3, r0
 800930e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009312:	e004      	b.n	800931e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009314:	2301      	movs	r3, #1
 8009316:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800931a:	e000      	b.n	800931e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800931c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800931e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009322:	2b00      	cmp	r3, #0
 8009324:	d10a      	bne.n	800933c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009326:	4bbf      	ldr	r3, [pc, #764]	; (8009624 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800932a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800932e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009332:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009334:	4abb      	ldr	r2, [pc, #748]	; (8009624 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009336:	430b      	orrs	r3, r1
 8009338:	6553      	str	r3, [r2, #84]	; 0x54
 800933a:	e003      	b.n	8009344 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800933c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009340:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009344:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800934c:	f002 0302 	and.w	r3, r2, #2
 8009350:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009354:	2300      	movs	r3, #0
 8009356:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800935a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800935e:	460b      	mov	r3, r1
 8009360:	4313      	orrs	r3, r2
 8009362:	d041      	beq.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009364:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009368:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800936a:	2b05      	cmp	r3, #5
 800936c:	d824      	bhi.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800936e:	a201      	add	r2, pc, #4	; (adr r2, 8009374 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8009370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009374:	080093c1 	.word	0x080093c1
 8009378:	0800938d 	.word	0x0800938d
 800937c:	080093a3 	.word	0x080093a3
 8009380:	080093c1 	.word	0x080093c1
 8009384:	080093c1 	.word	0x080093c1
 8009388:	080093c1 	.word	0x080093c1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800938c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009390:	3308      	adds	r3, #8
 8009392:	2101      	movs	r1, #1
 8009394:	4618      	mov	r0, r3
 8009396:	f000 ff55 	bl	800a244 <RCCEx_PLL2_Config>
 800939a:	4603      	mov	r3, r0
 800939c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80093a0:	e00f      	b.n	80093c2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80093a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093a6:	3328      	adds	r3, #40	; 0x28
 80093a8:	2101      	movs	r1, #1
 80093aa:	4618      	mov	r0, r3
 80093ac:	f000 fffc 	bl	800a3a8 <RCCEx_PLL3_Config>
 80093b0:	4603      	mov	r3, r0
 80093b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80093b6:	e004      	b.n	80093c2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80093b8:	2301      	movs	r3, #1
 80093ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80093be:	e000      	b.n	80093c2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80093c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093c2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d10a      	bne.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80093ca:	4b96      	ldr	r3, [pc, #600]	; (8009624 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80093cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093ce:	f023 0107 	bic.w	r1, r3, #7
 80093d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093d8:	4a92      	ldr	r2, [pc, #584]	; (8009624 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80093da:	430b      	orrs	r3, r1
 80093dc:	6553      	str	r3, [r2, #84]	; 0x54
 80093de:	e003      	b.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80093e4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80093e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f0:	f002 0304 	and.w	r3, r2, #4
 80093f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80093f8:	2300      	movs	r3, #0
 80093fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80093fe:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009402:	460b      	mov	r3, r1
 8009404:	4313      	orrs	r3, r2
 8009406:	d044      	beq.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009408:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800940c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009410:	2b05      	cmp	r3, #5
 8009412:	d825      	bhi.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8009414:	a201      	add	r2, pc, #4	; (adr r2, 800941c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8009416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800941a:	bf00      	nop
 800941c:	08009469 	.word	0x08009469
 8009420:	08009435 	.word	0x08009435
 8009424:	0800944b 	.word	0x0800944b
 8009428:	08009469 	.word	0x08009469
 800942c:	08009469 	.word	0x08009469
 8009430:	08009469 	.word	0x08009469
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009434:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009438:	3308      	adds	r3, #8
 800943a:	2101      	movs	r1, #1
 800943c:	4618      	mov	r0, r3
 800943e:	f000 ff01 	bl	800a244 <RCCEx_PLL2_Config>
 8009442:	4603      	mov	r3, r0
 8009444:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009448:	e00f      	b.n	800946a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800944a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800944e:	3328      	adds	r3, #40	; 0x28
 8009450:	2101      	movs	r1, #1
 8009452:	4618      	mov	r0, r3
 8009454:	f000 ffa8 	bl	800a3a8 <RCCEx_PLL3_Config>
 8009458:	4603      	mov	r3, r0
 800945a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800945e:	e004      	b.n	800946a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009460:	2301      	movs	r3, #1
 8009462:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009466:	e000      	b.n	800946a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8009468:	bf00      	nop
    }

    if (ret == HAL_OK)
 800946a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800946e:	2b00      	cmp	r3, #0
 8009470:	d10b      	bne.n	800948a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009472:	4b6c      	ldr	r3, [pc, #432]	; (8009624 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009476:	f023 0107 	bic.w	r1, r3, #7
 800947a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800947e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009482:	4a68      	ldr	r2, [pc, #416]	; (8009624 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009484:	430b      	orrs	r3, r1
 8009486:	6593      	str	r3, [r2, #88]	; 0x58
 8009488:	e003      	b.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800948a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800948e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009492:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800949a:	f002 0320 	and.w	r3, r2, #32
 800949e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80094a2:	2300      	movs	r3, #0
 80094a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80094a8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80094ac:	460b      	mov	r3, r1
 80094ae:	4313      	orrs	r3, r2
 80094b0:	d055      	beq.n	800955e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80094b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80094be:	d033      	beq.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80094c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80094c4:	d82c      	bhi.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80094c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094ca:	d02f      	beq.n	800952c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80094cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094d0:	d826      	bhi.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80094d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80094d6:	d02b      	beq.n	8009530 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80094d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80094dc:	d820      	bhi.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80094de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094e2:	d012      	beq.n	800950a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80094e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094e8:	d81a      	bhi.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d022      	beq.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80094ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80094f2:	d115      	bne.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80094f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094f8:	3308      	adds	r3, #8
 80094fa:	2100      	movs	r1, #0
 80094fc:	4618      	mov	r0, r3
 80094fe:	f000 fea1 	bl	800a244 <RCCEx_PLL2_Config>
 8009502:	4603      	mov	r3, r0
 8009504:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009508:	e015      	b.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800950a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800950e:	3328      	adds	r3, #40	; 0x28
 8009510:	2102      	movs	r1, #2
 8009512:	4618      	mov	r0, r3
 8009514:	f000 ff48 	bl	800a3a8 <RCCEx_PLL3_Config>
 8009518:	4603      	mov	r3, r0
 800951a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800951e:	e00a      	b.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009520:	2301      	movs	r3, #1
 8009522:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009526:	e006      	b.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009528:	bf00      	nop
 800952a:	e004      	b.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800952c:	bf00      	nop
 800952e:	e002      	b.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009530:	bf00      	nop
 8009532:	e000      	b.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009534:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009536:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800953a:	2b00      	cmp	r3, #0
 800953c:	d10b      	bne.n	8009556 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800953e:	4b39      	ldr	r3, [pc, #228]	; (8009624 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009542:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009546:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800954a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800954e:	4a35      	ldr	r2, [pc, #212]	; (8009624 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009550:	430b      	orrs	r3, r1
 8009552:	6553      	str	r3, [r2, #84]	; 0x54
 8009554:	e003      	b.n	800955e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009556:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800955a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800955e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009566:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800956a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800956e:	2300      	movs	r3, #0
 8009570:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009574:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8009578:	460b      	mov	r3, r1
 800957a:	4313      	orrs	r3, r2
 800957c:	d058      	beq.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800957e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009582:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009586:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800958a:	d033      	beq.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800958c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009590:	d82c      	bhi.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009592:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009596:	d02f      	beq.n	80095f8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8009598:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800959c:	d826      	bhi.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800959e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80095a2:	d02b      	beq.n	80095fc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80095a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80095a8:	d820      	bhi.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80095aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80095ae:	d012      	beq.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80095b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80095b4:	d81a      	bhi.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d022      	beq.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80095ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095be:	d115      	bne.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80095c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095c4:	3308      	adds	r3, #8
 80095c6:	2100      	movs	r1, #0
 80095c8:	4618      	mov	r0, r3
 80095ca:	f000 fe3b 	bl	800a244 <RCCEx_PLL2_Config>
 80095ce:	4603      	mov	r3, r0
 80095d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80095d4:	e015      	b.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80095d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095da:	3328      	adds	r3, #40	; 0x28
 80095dc:	2102      	movs	r1, #2
 80095de:	4618      	mov	r0, r3
 80095e0:	f000 fee2 	bl	800a3a8 <RCCEx_PLL3_Config>
 80095e4:	4603      	mov	r3, r0
 80095e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80095ea:	e00a      	b.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095ec:	2301      	movs	r3, #1
 80095ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80095f2:	e006      	b.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80095f4:	bf00      	nop
 80095f6:	e004      	b.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80095f8:	bf00      	nop
 80095fa:	e002      	b.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80095fc:	bf00      	nop
 80095fe:	e000      	b.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009600:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009602:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009606:	2b00      	cmp	r3, #0
 8009608:	d10e      	bne.n	8009628 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800960a:	4b06      	ldr	r3, [pc, #24]	; (8009624 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800960c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800960e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8009612:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009616:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800961a:	4a02      	ldr	r2, [pc, #8]	; (8009624 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800961c:	430b      	orrs	r3, r1
 800961e:	6593      	str	r3, [r2, #88]	; 0x58
 8009620:	e006      	b.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8009622:	bf00      	nop
 8009624:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009628:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800962c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009630:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009638:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800963c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009640:	2300      	movs	r3, #0
 8009642:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009646:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800964a:	460b      	mov	r3, r1
 800964c:	4313      	orrs	r3, r2
 800964e:	d055      	beq.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009650:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009654:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009658:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800965c:	d033      	beq.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800965e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009662:	d82c      	bhi.n	80096be <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009664:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009668:	d02f      	beq.n	80096ca <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800966a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800966e:	d826      	bhi.n	80096be <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009670:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009674:	d02b      	beq.n	80096ce <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8009676:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800967a:	d820      	bhi.n	80096be <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800967c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009680:	d012      	beq.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8009682:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009686:	d81a      	bhi.n	80096be <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009688:	2b00      	cmp	r3, #0
 800968a:	d022      	beq.n	80096d2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800968c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009690:	d115      	bne.n	80096be <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009692:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009696:	3308      	adds	r3, #8
 8009698:	2100      	movs	r1, #0
 800969a:	4618      	mov	r0, r3
 800969c:	f000 fdd2 	bl	800a244 <RCCEx_PLL2_Config>
 80096a0:	4603      	mov	r3, r0
 80096a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80096a6:	e015      	b.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80096a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096ac:	3328      	adds	r3, #40	; 0x28
 80096ae:	2102      	movs	r1, #2
 80096b0:	4618      	mov	r0, r3
 80096b2:	f000 fe79 	bl	800a3a8 <RCCEx_PLL3_Config>
 80096b6:	4603      	mov	r3, r0
 80096b8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80096bc:	e00a      	b.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80096be:	2301      	movs	r3, #1
 80096c0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80096c4:	e006      	b.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80096c6:	bf00      	nop
 80096c8:	e004      	b.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80096ca:	bf00      	nop
 80096cc:	e002      	b.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80096ce:	bf00      	nop
 80096d0:	e000      	b.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80096d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d10b      	bne.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80096dc:	4ba0      	ldr	r3, [pc, #640]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80096de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096e0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80096e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80096ec:	4a9c      	ldr	r2, [pc, #624]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80096ee:	430b      	orrs	r3, r1
 80096f0:	6593      	str	r3, [r2, #88]	; 0x58
 80096f2:	e003      	b.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80096f8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80096fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009704:	f002 0308 	and.w	r3, r2, #8
 8009708:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800970c:	2300      	movs	r3, #0
 800970e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009712:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8009716:	460b      	mov	r3, r1
 8009718:	4313      	orrs	r3, r2
 800971a:	d01e      	beq.n	800975a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800971c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009720:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009724:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009728:	d10c      	bne.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800972a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800972e:	3328      	adds	r3, #40	; 0x28
 8009730:	2102      	movs	r1, #2
 8009732:	4618      	mov	r0, r3
 8009734:	f000 fe38 	bl	800a3a8 <RCCEx_PLL3_Config>
 8009738:	4603      	mov	r3, r0
 800973a:	2b00      	cmp	r3, #0
 800973c:	d002      	beq.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800973e:	2301      	movs	r3, #1
 8009740:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8009744:	4b86      	ldr	r3, [pc, #536]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009748:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800974c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009750:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009754:	4a82      	ldr	r2, [pc, #520]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009756:	430b      	orrs	r3, r1
 8009758:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800975a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800975e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009762:	f002 0310 	and.w	r3, r2, #16
 8009766:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800976a:	2300      	movs	r3, #0
 800976c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009770:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8009774:	460b      	mov	r3, r1
 8009776:	4313      	orrs	r3, r2
 8009778:	d01e      	beq.n	80097b8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800977a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800977e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009782:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009786:	d10c      	bne.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009788:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800978c:	3328      	adds	r3, #40	; 0x28
 800978e:	2102      	movs	r1, #2
 8009790:	4618      	mov	r0, r3
 8009792:	f000 fe09 	bl	800a3a8 <RCCEx_PLL3_Config>
 8009796:	4603      	mov	r3, r0
 8009798:	2b00      	cmp	r3, #0
 800979a:	d002      	beq.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800979c:	2301      	movs	r3, #1
 800979e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80097a2:	4b6f      	ldr	r3, [pc, #444]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80097a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80097aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80097b2:	4a6b      	ldr	r2, [pc, #428]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80097b4:	430b      	orrs	r3, r1
 80097b6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80097b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80097c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80097c6:	2300      	movs	r3, #0
 80097c8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80097ca:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80097ce:	460b      	mov	r3, r1
 80097d0:	4313      	orrs	r3, r2
 80097d2:	d03e      	beq.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80097d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80097dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80097e0:	d022      	beq.n	8009828 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80097e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80097e6:	d81b      	bhi.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d003      	beq.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80097ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097f0:	d00b      	beq.n	800980a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80097f2:	e015      	b.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80097f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097f8:	3308      	adds	r3, #8
 80097fa:	2100      	movs	r1, #0
 80097fc:	4618      	mov	r0, r3
 80097fe:	f000 fd21 	bl	800a244 <RCCEx_PLL2_Config>
 8009802:	4603      	mov	r3, r0
 8009804:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009808:	e00f      	b.n	800982a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800980a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800980e:	3328      	adds	r3, #40	; 0x28
 8009810:	2102      	movs	r1, #2
 8009812:	4618      	mov	r0, r3
 8009814:	f000 fdc8 	bl	800a3a8 <RCCEx_PLL3_Config>
 8009818:	4603      	mov	r3, r0
 800981a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800981e:	e004      	b.n	800982a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009820:	2301      	movs	r3, #1
 8009822:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009826:	e000      	b.n	800982a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8009828:	bf00      	nop
    }

    if (ret == HAL_OK)
 800982a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800982e:	2b00      	cmp	r3, #0
 8009830:	d10b      	bne.n	800984a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009832:	4b4b      	ldr	r3, [pc, #300]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009836:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800983a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800983e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009842:	4a47      	ldr	r2, [pc, #284]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009844:	430b      	orrs	r3, r1
 8009846:	6593      	str	r3, [r2, #88]	; 0x58
 8009848:	e003      	b.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800984a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800984e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009852:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800985e:	673b      	str	r3, [r7, #112]	; 0x70
 8009860:	2300      	movs	r3, #0
 8009862:	677b      	str	r3, [r7, #116]	; 0x74
 8009864:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8009868:	460b      	mov	r3, r1
 800986a:	4313      	orrs	r3, r2
 800986c:	d03b      	beq.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800986e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009872:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009876:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800987a:	d01f      	beq.n	80098bc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800987c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009880:	d818      	bhi.n	80098b4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8009882:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009886:	d003      	beq.n	8009890 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8009888:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800988c:	d007      	beq.n	800989e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800988e:	e011      	b.n	80098b4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009890:	4b33      	ldr	r3, [pc, #204]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009894:	4a32      	ldr	r2, [pc, #200]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009896:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800989a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800989c:	e00f      	b.n	80098be <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800989e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098a2:	3328      	adds	r3, #40	; 0x28
 80098a4:	2101      	movs	r1, #1
 80098a6:	4618      	mov	r0, r3
 80098a8:	f000 fd7e 	bl	800a3a8 <RCCEx_PLL3_Config>
 80098ac:	4603      	mov	r3, r0
 80098ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80098b2:	e004      	b.n	80098be <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098b4:	2301      	movs	r3, #1
 80098b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80098ba:	e000      	b.n	80098be <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80098bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098be:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d10b      	bne.n	80098de <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80098c6:	4b26      	ldr	r3, [pc, #152]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80098c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098ca:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80098ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80098d6:	4a22      	ldr	r2, [pc, #136]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80098d8:	430b      	orrs	r3, r1
 80098da:	6553      	str	r3, [r2, #84]	; 0x54
 80098dc:	e003      	b.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098de:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80098e2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80098e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ee:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80098f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80098f4:	2300      	movs	r3, #0
 80098f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80098f8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80098fc:	460b      	mov	r3, r1
 80098fe:	4313      	orrs	r3, r2
 8009900:	d034      	beq.n	800996c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009902:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009908:	2b00      	cmp	r3, #0
 800990a:	d003      	beq.n	8009914 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800990c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009910:	d007      	beq.n	8009922 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8009912:	e011      	b.n	8009938 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009914:	4b12      	ldr	r3, [pc, #72]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009918:	4a11      	ldr	r2, [pc, #68]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800991a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800991e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009920:	e00e      	b.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009922:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009926:	3308      	adds	r3, #8
 8009928:	2102      	movs	r1, #2
 800992a:	4618      	mov	r0, r3
 800992c:	f000 fc8a 	bl	800a244 <RCCEx_PLL2_Config>
 8009930:	4603      	mov	r3, r0
 8009932:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009936:	e003      	b.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8009938:	2301      	movs	r3, #1
 800993a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800993e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009940:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009944:	2b00      	cmp	r3, #0
 8009946:	d10d      	bne.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009948:	4b05      	ldr	r3, [pc, #20]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800994a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800994c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009950:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009956:	4a02      	ldr	r2, [pc, #8]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009958:	430b      	orrs	r3, r1
 800995a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800995c:	e006      	b.n	800996c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800995e:	bf00      	nop
 8009960:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009964:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009968:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800996c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009974:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8009978:	663b      	str	r3, [r7, #96]	; 0x60
 800997a:	2300      	movs	r3, #0
 800997c:	667b      	str	r3, [r7, #100]	; 0x64
 800997e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8009982:	460b      	mov	r3, r1
 8009984:	4313      	orrs	r3, r2
 8009986:	d00c      	beq.n	80099a2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009988:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800998c:	3328      	adds	r3, #40	; 0x28
 800998e:	2102      	movs	r1, #2
 8009990:	4618      	mov	r0, r3
 8009992:	f000 fd09 	bl	800a3a8 <RCCEx_PLL3_Config>
 8009996:	4603      	mov	r3, r0
 8009998:	2b00      	cmp	r3, #0
 800999a:	d002      	beq.n	80099a2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800999c:	2301      	movs	r3, #1
 800999e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80099a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099aa:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80099ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80099b0:	2300      	movs	r3, #0
 80099b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80099b4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80099b8:	460b      	mov	r3, r1
 80099ba:	4313      	orrs	r3, r2
 80099bc:	d036      	beq.n	8009a2c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80099be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80099c8:	d018      	beq.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80099ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80099ce:	d811      	bhi.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80099d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099d4:	d014      	beq.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80099d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099da:	d80b      	bhi.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d011      	beq.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80099e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099e4:	d106      	bne.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099e6:	4bb7      	ldr	r3, [pc, #732]	; (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80099e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ea:	4ab6      	ldr	r2, [pc, #728]	; (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80099ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80099f2:	e008      	b.n	8009a06 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80099f4:	2301      	movs	r3, #1
 80099f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80099fa:	e004      	b.n	8009a06 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80099fc:	bf00      	nop
 80099fe:	e002      	b.n	8009a06 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009a00:	bf00      	nop
 8009a02:	e000      	b.n	8009a06 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009a04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a06:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d10a      	bne.n	8009a24 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009a0e:	4bad      	ldr	r3, [pc, #692]	; (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a12:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009a16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a1c:	4aa9      	ldr	r2, [pc, #676]	; (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009a1e:	430b      	orrs	r3, r1
 8009a20:	6553      	str	r3, [r2, #84]	; 0x54
 8009a22:	e003      	b.n	8009a2c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a24:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009a28:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009a2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a34:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8009a38:	653b      	str	r3, [r7, #80]	; 0x50
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	657b      	str	r3, [r7, #84]	; 0x54
 8009a3e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8009a42:	460b      	mov	r3, r1
 8009a44:	4313      	orrs	r3, r2
 8009a46:	d009      	beq.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009a48:	4b9e      	ldr	r3, [pc, #632]	; (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009a4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a4c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009a50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a56:	4a9b      	ldr	r2, [pc, #620]	; (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009a58:	430b      	orrs	r3, r1
 8009a5a:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009a5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a64:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8009a68:	64bb      	str	r3, [r7, #72]	; 0x48
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a6e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8009a72:	460b      	mov	r3, r1
 8009a74:	4313      	orrs	r3, r2
 8009a76:	d009      	beq.n	8009a8c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009a78:	4b92      	ldr	r3, [pc, #584]	; (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a7c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8009a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a86:	4a8f      	ldr	r2, [pc, #572]	; (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009a88:	430b      	orrs	r3, r1
 8009a8a:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a94:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8009a98:	643b      	str	r3, [r7, #64]	; 0x40
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	647b      	str	r3, [r7, #68]	; 0x44
 8009a9e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8009aa2:	460b      	mov	r3, r1
 8009aa4:	4313      	orrs	r3, r2
 8009aa6:	d00e      	beq.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009aa8:	4b86      	ldr	r3, [pc, #536]	; (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009aaa:	691b      	ldr	r3, [r3, #16]
 8009aac:	4a85      	ldr	r2, [pc, #532]	; (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009aae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009ab2:	6113      	str	r3, [r2, #16]
 8009ab4:	4b83      	ldr	r3, [pc, #524]	; (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009ab6:	6919      	ldr	r1, [r3, #16]
 8009ab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009abc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009ac0:	4a80      	ldr	r2, [pc, #512]	; (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009ac2:	430b      	orrs	r3, r1
 8009ac4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009ac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ace:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8009ad2:	63bb      	str	r3, [r7, #56]	; 0x38
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ad8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8009adc:	460b      	mov	r3, r1
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	d009      	beq.n	8009af6 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009ae2:	4b78      	ldr	r3, [pc, #480]	; (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ae6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009aea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009af0:	4a74      	ldr	r2, [pc, #464]	; (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009af2:	430b      	orrs	r3, r1
 8009af4:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009af6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009afe:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8009b02:	633b      	str	r3, [r7, #48]	; 0x30
 8009b04:	2300      	movs	r3, #0
 8009b06:	637b      	str	r3, [r7, #52]	; 0x34
 8009b08:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8009b0c:	460b      	mov	r3, r1
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	d00a      	beq.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009b12:	4b6c      	ldr	r3, [pc, #432]	; (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b16:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8009b1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b22:	4a68      	ldr	r2, [pc, #416]	; (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009b24:	430b      	orrs	r3, r1
 8009b26:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b30:	2100      	movs	r1, #0
 8009b32:	62b9      	str	r1, [r7, #40]	; 0x28
 8009b34:	f003 0301 	and.w	r3, r3, #1
 8009b38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b3a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8009b3e:	460b      	mov	r3, r1
 8009b40:	4313      	orrs	r3, r2
 8009b42:	d011      	beq.n	8009b68 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b48:	3308      	adds	r3, #8
 8009b4a:	2100      	movs	r1, #0
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f000 fb79 	bl	800a244 <RCCEx_PLL2_Config>
 8009b52:	4603      	mov	r3, r0
 8009b54:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8009b58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d003      	beq.n	8009b68 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009b64:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b70:	2100      	movs	r1, #0
 8009b72:	6239      	str	r1, [r7, #32]
 8009b74:	f003 0302 	and.w	r3, r3, #2
 8009b78:	627b      	str	r3, [r7, #36]	; 0x24
 8009b7a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009b7e:	460b      	mov	r3, r1
 8009b80:	4313      	orrs	r3, r2
 8009b82:	d011      	beq.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b88:	3308      	adds	r3, #8
 8009b8a:	2101      	movs	r1, #1
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f000 fb59 	bl	800a244 <RCCEx_PLL2_Config>
 8009b92:	4603      	mov	r3, r0
 8009b94:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8009b98:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d003      	beq.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ba0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009ba4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb0:	2100      	movs	r1, #0
 8009bb2:	61b9      	str	r1, [r7, #24]
 8009bb4:	f003 0304 	and.w	r3, r3, #4
 8009bb8:	61fb      	str	r3, [r7, #28]
 8009bba:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009bbe:	460b      	mov	r3, r1
 8009bc0:	4313      	orrs	r3, r2
 8009bc2:	d011      	beq.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bc8:	3308      	adds	r3, #8
 8009bca:	2102      	movs	r1, #2
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f000 fb39 	bl	800a244 <RCCEx_PLL2_Config>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8009bd8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d003      	beq.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009be0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009be4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009be8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf0:	2100      	movs	r1, #0
 8009bf2:	6139      	str	r1, [r7, #16]
 8009bf4:	f003 0308 	and.w	r3, r3, #8
 8009bf8:	617b      	str	r3, [r7, #20]
 8009bfa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009bfe:	460b      	mov	r3, r1
 8009c00:	4313      	orrs	r3, r2
 8009c02:	d011      	beq.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c08:	3328      	adds	r3, #40	; 0x28
 8009c0a:	2100      	movs	r1, #0
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f000 fbcb 	bl	800a3a8 <RCCEx_PLL3_Config>
 8009c12:	4603      	mov	r3, r0
 8009c14:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8009c18:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d003      	beq.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009c24:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c30:	2100      	movs	r1, #0
 8009c32:	60b9      	str	r1, [r7, #8]
 8009c34:	f003 0310 	and.w	r3, r3, #16
 8009c38:	60fb      	str	r3, [r7, #12]
 8009c3a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009c3e:	460b      	mov	r3, r1
 8009c40:	4313      	orrs	r3, r2
 8009c42:	d011      	beq.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009c44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c48:	3328      	adds	r3, #40	; 0x28
 8009c4a:	2101      	movs	r1, #1
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	f000 fbab 	bl	800a3a8 <RCCEx_PLL3_Config>
 8009c52:	4603      	mov	r3, r0
 8009c54:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8009c58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d003      	beq.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009c64:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c70:	2100      	movs	r1, #0
 8009c72:	6039      	str	r1, [r7, #0]
 8009c74:	f003 0320 	and.w	r3, r3, #32
 8009c78:	607b      	str	r3, [r7, #4]
 8009c7a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009c7e:	460b      	mov	r3, r1
 8009c80:	4313      	orrs	r3, r2
 8009c82:	d011      	beq.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c88:	3328      	adds	r3, #40	; 0x28
 8009c8a:	2102      	movs	r1, #2
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f000 fb8b 	bl	800a3a8 <RCCEx_PLL3_Config>
 8009c92:	4603      	mov	r3, r0
 8009c94:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8009c98:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d003      	beq.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ca0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009ca4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8009ca8:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d101      	bne.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	e000      	b.n	8009cb6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8009cb4:	2301      	movs	r3, #1
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009cc2:	bf00      	nop
 8009cc4:	58024400 	.word	0x58024400

08009cc8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009ccc:	f7fe fe00 	bl	80088d0 <HAL_RCC_GetHCLKFreq>
 8009cd0:	4602      	mov	r2, r0
 8009cd2:	4b06      	ldr	r3, [pc, #24]	; (8009cec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009cd4:	6a1b      	ldr	r3, [r3, #32]
 8009cd6:	091b      	lsrs	r3, r3, #4
 8009cd8:	f003 0307 	and.w	r3, r3, #7
 8009cdc:	4904      	ldr	r1, [pc, #16]	; (8009cf0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009cde:	5ccb      	ldrb	r3, [r1, r3]
 8009ce0:	f003 031f 	and.w	r3, r3, #31
 8009ce4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	bd80      	pop	{r7, pc}
 8009cec:	58024400 	.word	0x58024400
 8009cf0:	0800e6c4 	.word	0x0800e6c4

08009cf4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b089      	sub	sp, #36	; 0x24
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009cfc:	4ba1      	ldr	r3, [pc, #644]	; (8009f84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d00:	f003 0303 	and.w	r3, r3, #3
 8009d04:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009d06:	4b9f      	ldr	r3, [pc, #636]	; (8009f84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d0a:	0b1b      	lsrs	r3, r3, #12
 8009d0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d10:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009d12:	4b9c      	ldr	r3, [pc, #624]	; (8009f84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d16:	091b      	lsrs	r3, r3, #4
 8009d18:	f003 0301 	and.w	r3, r3, #1
 8009d1c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009d1e:	4b99      	ldr	r3, [pc, #612]	; (8009f84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d22:	08db      	lsrs	r3, r3, #3
 8009d24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009d28:	693a      	ldr	r2, [r7, #16]
 8009d2a:	fb02 f303 	mul.w	r3, r2, r3
 8009d2e:	ee07 3a90 	vmov	s15, r3
 8009d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d36:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	f000 8111 	beq.w	8009f64 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009d42:	69bb      	ldr	r3, [r7, #24]
 8009d44:	2b02      	cmp	r3, #2
 8009d46:	f000 8083 	beq.w	8009e50 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009d4a:	69bb      	ldr	r3, [r7, #24]
 8009d4c:	2b02      	cmp	r3, #2
 8009d4e:	f200 80a1 	bhi.w	8009e94 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009d52:	69bb      	ldr	r3, [r7, #24]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d003      	beq.n	8009d60 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009d58:	69bb      	ldr	r3, [r7, #24]
 8009d5a:	2b01      	cmp	r3, #1
 8009d5c:	d056      	beq.n	8009e0c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009d5e:	e099      	b.n	8009e94 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d60:	4b88      	ldr	r3, [pc, #544]	; (8009f84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f003 0320 	and.w	r3, r3, #32
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d02d      	beq.n	8009dc8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009d6c:	4b85      	ldr	r3, [pc, #532]	; (8009f84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	08db      	lsrs	r3, r3, #3
 8009d72:	f003 0303 	and.w	r3, r3, #3
 8009d76:	4a84      	ldr	r2, [pc, #528]	; (8009f88 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009d78:	fa22 f303 	lsr.w	r3, r2, r3
 8009d7c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	ee07 3a90 	vmov	s15, r3
 8009d84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	ee07 3a90 	vmov	s15, r3
 8009d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d96:	4b7b      	ldr	r3, [pc, #492]	; (8009f84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d9e:	ee07 3a90 	vmov	s15, r3
 8009da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009da6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009daa:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009f8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009dae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009db6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dc2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009dc6:	e087      	b.n	8009ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	ee07 3a90 	vmov	s15, r3
 8009dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dd2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009f90 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dda:	4b6a      	ldr	r3, [pc, #424]	; (8009f84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009de2:	ee07 3a90 	vmov	s15, r3
 8009de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dea:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dee:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009f8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009df2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e0a:	e065      	b.n	8009ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	ee07 3a90 	vmov	s15, r3
 8009e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e16:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009f94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009e1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e1e:	4b59      	ldr	r3, [pc, #356]	; (8009f84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e26:	ee07 3a90 	vmov	s15, r3
 8009e2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e32:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009f8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009e36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e4e:	e043      	b.n	8009ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	ee07 3a90 	vmov	s15, r3
 8009e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e5a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009f98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009e5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e62:	4b48      	ldr	r3, [pc, #288]	; (8009f84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e6a:	ee07 3a90 	vmov	s15, r3
 8009e6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e72:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e76:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009f8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009e7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e92:	e021      	b.n	8009ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	ee07 3a90 	vmov	s15, r3
 8009e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e9e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009f94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009ea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ea6:	4b37      	ldr	r3, [pc, #220]	; (8009f84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009eae:	ee07 3a90 	vmov	s15, r3
 8009eb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009eb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009eba:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009f8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009ebe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ec6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009eca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ed2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ed6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009ed8:	4b2a      	ldr	r3, [pc, #168]	; (8009f84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009edc:	0a5b      	lsrs	r3, r3, #9
 8009ede:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ee2:	ee07 3a90 	vmov	s15, r3
 8009ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009eee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ef2:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ef6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009efa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009efe:	ee17 2a90 	vmov	r2, s15
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009f06:	4b1f      	ldr	r3, [pc, #124]	; (8009f84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f0a:	0c1b      	lsrs	r3, r3, #16
 8009f0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f10:	ee07 3a90 	vmov	s15, r3
 8009f14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f20:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f2c:	ee17 2a90 	vmov	r2, s15
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009f34:	4b13      	ldr	r3, [pc, #76]	; (8009f84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f38:	0e1b      	lsrs	r3, r3, #24
 8009f3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f3e:	ee07 3a90 	vmov	s15, r3
 8009f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f5a:	ee17 2a90 	vmov	r2, s15
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009f62:	e008      	b.n	8009f76 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2200      	movs	r2, #0
 8009f68:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2200      	movs	r2, #0
 8009f74:	609a      	str	r2, [r3, #8]
}
 8009f76:	bf00      	nop
 8009f78:	3724      	adds	r7, #36	; 0x24
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f80:	4770      	bx	lr
 8009f82:	bf00      	nop
 8009f84:	58024400 	.word	0x58024400
 8009f88:	03d09000 	.word	0x03d09000
 8009f8c:	46000000 	.word	0x46000000
 8009f90:	4c742400 	.word	0x4c742400
 8009f94:	4a742400 	.word	0x4a742400
 8009f98:	4bbebc20 	.word	0x4bbebc20

08009f9c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b089      	sub	sp, #36	; 0x24
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009fa4:	4ba1      	ldr	r3, [pc, #644]	; (800a22c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fa8:	f003 0303 	and.w	r3, r3, #3
 8009fac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009fae:	4b9f      	ldr	r3, [pc, #636]	; (800a22c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fb2:	0d1b      	lsrs	r3, r3, #20
 8009fb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009fb8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009fba:	4b9c      	ldr	r3, [pc, #624]	; (800a22c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fbe:	0a1b      	lsrs	r3, r3, #8
 8009fc0:	f003 0301 	and.w	r3, r3, #1
 8009fc4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009fc6:	4b99      	ldr	r3, [pc, #612]	; (800a22c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fca:	08db      	lsrs	r3, r3, #3
 8009fcc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009fd0:	693a      	ldr	r2, [r7, #16]
 8009fd2:	fb02 f303 	mul.w	r3, r2, r3
 8009fd6:	ee07 3a90 	vmov	s15, r3
 8009fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fde:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	f000 8111 	beq.w	800a20c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009fea:	69bb      	ldr	r3, [r7, #24]
 8009fec:	2b02      	cmp	r3, #2
 8009fee:	f000 8083 	beq.w	800a0f8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009ff2:	69bb      	ldr	r3, [r7, #24]
 8009ff4:	2b02      	cmp	r3, #2
 8009ff6:	f200 80a1 	bhi.w	800a13c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009ffa:	69bb      	ldr	r3, [r7, #24]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d003      	beq.n	800a008 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a000:	69bb      	ldr	r3, [r7, #24]
 800a002:	2b01      	cmp	r3, #1
 800a004:	d056      	beq.n	800a0b4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a006:	e099      	b.n	800a13c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a008:	4b88      	ldr	r3, [pc, #544]	; (800a22c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f003 0320 	and.w	r3, r3, #32
 800a010:	2b00      	cmp	r3, #0
 800a012:	d02d      	beq.n	800a070 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a014:	4b85      	ldr	r3, [pc, #532]	; (800a22c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	08db      	lsrs	r3, r3, #3
 800a01a:	f003 0303 	and.w	r3, r3, #3
 800a01e:	4a84      	ldr	r2, [pc, #528]	; (800a230 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a020:	fa22 f303 	lsr.w	r3, r2, r3
 800a024:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	ee07 3a90 	vmov	s15, r3
 800a02c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	ee07 3a90 	vmov	s15, r3
 800a036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a03a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a03e:	4b7b      	ldr	r3, [pc, #492]	; (800a22c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a046:	ee07 3a90 	vmov	s15, r3
 800a04a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a04e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a052:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a234 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a056:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a05a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a05e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a062:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a06a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a06e:	e087      	b.n	800a180 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a070:	697b      	ldr	r3, [r7, #20]
 800a072:	ee07 3a90 	vmov	s15, r3
 800a076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a07a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a238 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a07e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a082:	4b6a      	ldr	r3, [pc, #424]	; (800a22c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a08a:	ee07 3a90 	vmov	s15, r3
 800a08e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a092:	ed97 6a03 	vldr	s12, [r7, #12]
 800a096:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a234 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a09a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a09e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0b2:	e065      	b.n	800a180 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	ee07 3a90 	vmov	s15, r3
 800a0ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0be:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a23c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a0c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0c6:	4b59      	ldr	r3, [pc, #356]	; (800a22c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0ce:	ee07 3a90 	vmov	s15, r3
 800a0d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0da:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a234 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a0de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0f6:	e043      	b.n	800a180 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a0f8:	697b      	ldr	r3, [r7, #20]
 800a0fa:	ee07 3a90 	vmov	s15, r3
 800a0fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a102:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a240 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a106:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a10a:	4b48      	ldr	r3, [pc, #288]	; (800a22c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a10c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a10e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a112:	ee07 3a90 	vmov	s15, r3
 800a116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a11a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a11e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a234 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a122:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a126:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a12a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a12e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a132:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a136:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a13a:	e021      	b.n	800a180 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	ee07 3a90 	vmov	s15, r3
 800a142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a146:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a23c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a14a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a14e:	4b37      	ldr	r3, [pc, #220]	; (800a22c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a156:	ee07 3a90 	vmov	s15, r3
 800a15a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a15e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a162:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a234 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a16a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a16e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a17a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a17e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a180:	4b2a      	ldr	r3, [pc, #168]	; (800a22c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a184:	0a5b      	lsrs	r3, r3, #9
 800a186:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a18a:	ee07 3a90 	vmov	s15, r3
 800a18e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a192:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a196:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a19a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a19e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1a6:	ee17 2a90 	vmov	r2, s15
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a1ae:	4b1f      	ldr	r3, [pc, #124]	; (800a22c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1b2:	0c1b      	lsrs	r3, r3, #16
 800a1b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1b8:	ee07 3a90 	vmov	s15, r3
 800a1bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a1c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a1c8:	edd7 6a07 	vldr	s13, [r7, #28]
 800a1cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1d4:	ee17 2a90 	vmov	r2, s15
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a1dc:	4b13      	ldr	r3, [pc, #76]	; (800a22c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1e0:	0e1b      	lsrs	r3, r3, #24
 800a1e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1e6:	ee07 3a90 	vmov	s15, r3
 800a1ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a1f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a1f6:	edd7 6a07 	vldr	s13, [r7, #28]
 800a1fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a202:	ee17 2a90 	vmov	r2, s15
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a20a:	e008      	b.n	800a21e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2200      	movs	r2, #0
 800a210:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2200      	movs	r2, #0
 800a216:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2200      	movs	r2, #0
 800a21c:	609a      	str	r2, [r3, #8]
}
 800a21e:	bf00      	nop
 800a220:	3724      	adds	r7, #36	; 0x24
 800a222:	46bd      	mov	sp, r7
 800a224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a228:	4770      	bx	lr
 800a22a:	bf00      	nop
 800a22c:	58024400 	.word	0x58024400
 800a230:	03d09000 	.word	0x03d09000
 800a234:	46000000 	.word	0x46000000
 800a238:	4c742400 	.word	0x4c742400
 800a23c:	4a742400 	.word	0x4a742400
 800a240:	4bbebc20 	.word	0x4bbebc20

0800a244 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b084      	sub	sp, #16
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a24e:	2300      	movs	r3, #0
 800a250:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a252:	4b53      	ldr	r3, [pc, #332]	; (800a3a0 <RCCEx_PLL2_Config+0x15c>)
 800a254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a256:	f003 0303 	and.w	r3, r3, #3
 800a25a:	2b03      	cmp	r3, #3
 800a25c:	d101      	bne.n	800a262 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a25e:	2301      	movs	r3, #1
 800a260:	e099      	b.n	800a396 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a262:	4b4f      	ldr	r3, [pc, #316]	; (800a3a0 <RCCEx_PLL2_Config+0x15c>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	4a4e      	ldr	r2, [pc, #312]	; (800a3a0 <RCCEx_PLL2_Config+0x15c>)
 800a268:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a26c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a26e:	f7fa fad3 	bl	8004818 <HAL_GetTick>
 800a272:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a274:	e008      	b.n	800a288 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a276:	f7fa facf 	bl	8004818 <HAL_GetTick>
 800a27a:	4602      	mov	r2, r0
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	1ad3      	subs	r3, r2, r3
 800a280:	2b02      	cmp	r3, #2
 800a282:	d901      	bls.n	800a288 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a284:	2303      	movs	r3, #3
 800a286:	e086      	b.n	800a396 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a288:	4b45      	ldr	r3, [pc, #276]	; (800a3a0 <RCCEx_PLL2_Config+0x15c>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a290:	2b00      	cmp	r3, #0
 800a292:	d1f0      	bne.n	800a276 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a294:	4b42      	ldr	r3, [pc, #264]	; (800a3a0 <RCCEx_PLL2_Config+0x15c>)
 800a296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a298:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	031b      	lsls	r3, r3, #12
 800a2a2:	493f      	ldr	r1, [pc, #252]	; (800a3a0 <RCCEx_PLL2_Config+0x15c>)
 800a2a4:	4313      	orrs	r3, r2
 800a2a6:	628b      	str	r3, [r1, #40]	; 0x28
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	685b      	ldr	r3, [r3, #4]
 800a2ac:	3b01      	subs	r3, #1
 800a2ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	689b      	ldr	r3, [r3, #8]
 800a2b6:	3b01      	subs	r3, #1
 800a2b8:	025b      	lsls	r3, r3, #9
 800a2ba:	b29b      	uxth	r3, r3
 800a2bc:	431a      	orrs	r2, r3
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	68db      	ldr	r3, [r3, #12]
 800a2c2:	3b01      	subs	r3, #1
 800a2c4:	041b      	lsls	r3, r3, #16
 800a2c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a2ca:	431a      	orrs	r2, r3
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	691b      	ldr	r3, [r3, #16]
 800a2d0:	3b01      	subs	r3, #1
 800a2d2:	061b      	lsls	r3, r3, #24
 800a2d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a2d8:	4931      	ldr	r1, [pc, #196]	; (800a3a0 <RCCEx_PLL2_Config+0x15c>)
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a2de:	4b30      	ldr	r3, [pc, #192]	; (800a3a0 <RCCEx_PLL2_Config+0x15c>)
 800a2e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	695b      	ldr	r3, [r3, #20]
 800a2ea:	492d      	ldr	r1, [pc, #180]	; (800a3a0 <RCCEx_PLL2_Config+0x15c>)
 800a2ec:	4313      	orrs	r3, r2
 800a2ee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a2f0:	4b2b      	ldr	r3, [pc, #172]	; (800a3a0 <RCCEx_PLL2_Config+0x15c>)
 800a2f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2f4:	f023 0220 	bic.w	r2, r3, #32
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	699b      	ldr	r3, [r3, #24]
 800a2fc:	4928      	ldr	r1, [pc, #160]	; (800a3a0 <RCCEx_PLL2_Config+0x15c>)
 800a2fe:	4313      	orrs	r3, r2
 800a300:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a302:	4b27      	ldr	r3, [pc, #156]	; (800a3a0 <RCCEx_PLL2_Config+0x15c>)
 800a304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a306:	4a26      	ldr	r2, [pc, #152]	; (800a3a0 <RCCEx_PLL2_Config+0x15c>)
 800a308:	f023 0310 	bic.w	r3, r3, #16
 800a30c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a30e:	4b24      	ldr	r3, [pc, #144]	; (800a3a0 <RCCEx_PLL2_Config+0x15c>)
 800a310:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a312:	4b24      	ldr	r3, [pc, #144]	; (800a3a4 <RCCEx_PLL2_Config+0x160>)
 800a314:	4013      	ands	r3, r2
 800a316:	687a      	ldr	r2, [r7, #4]
 800a318:	69d2      	ldr	r2, [r2, #28]
 800a31a:	00d2      	lsls	r2, r2, #3
 800a31c:	4920      	ldr	r1, [pc, #128]	; (800a3a0 <RCCEx_PLL2_Config+0x15c>)
 800a31e:	4313      	orrs	r3, r2
 800a320:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a322:	4b1f      	ldr	r3, [pc, #124]	; (800a3a0 <RCCEx_PLL2_Config+0x15c>)
 800a324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a326:	4a1e      	ldr	r2, [pc, #120]	; (800a3a0 <RCCEx_PLL2_Config+0x15c>)
 800a328:	f043 0310 	orr.w	r3, r3, #16
 800a32c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d106      	bne.n	800a342 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a334:	4b1a      	ldr	r3, [pc, #104]	; (800a3a0 <RCCEx_PLL2_Config+0x15c>)
 800a336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a338:	4a19      	ldr	r2, [pc, #100]	; (800a3a0 <RCCEx_PLL2_Config+0x15c>)
 800a33a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a33e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a340:	e00f      	b.n	800a362 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	2b01      	cmp	r3, #1
 800a346:	d106      	bne.n	800a356 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a348:	4b15      	ldr	r3, [pc, #84]	; (800a3a0 <RCCEx_PLL2_Config+0x15c>)
 800a34a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a34c:	4a14      	ldr	r2, [pc, #80]	; (800a3a0 <RCCEx_PLL2_Config+0x15c>)
 800a34e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a352:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a354:	e005      	b.n	800a362 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a356:	4b12      	ldr	r3, [pc, #72]	; (800a3a0 <RCCEx_PLL2_Config+0x15c>)
 800a358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a35a:	4a11      	ldr	r2, [pc, #68]	; (800a3a0 <RCCEx_PLL2_Config+0x15c>)
 800a35c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a360:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a362:	4b0f      	ldr	r3, [pc, #60]	; (800a3a0 <RCCEx_PLL2_Config+0x15c>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	4a0e      	ldr	r2, [pc, #56]	; (800a3a0 <RCCEx_PLL2_Config+0x15c>)
 800a368:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a36c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a36e:	f7fa fa53 	bl	8004818 <HAL_GetTick>
 800a372:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a374:	e008      	b.n	800a388 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a376:	f7fa fa4f 	bl	8004818 <HAL_GetTick>
 800a37a:	4602      	mov	r2, r0
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	1ad3      	subs	r3, r2, r3
 800a380:	2b02      	cmp	r3, #2
 800a382:	d901      	bls.n	800a388 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a384:	2303      	movs	r3, #3
 800a386:	e006      	b.n	800a396 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a388:	4b05      	ldr	r3, [pc, #20]	; (800a3a0 <RCCEx_PLL2_Config+0x15c>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a390:	2b00      	cmp	r3, #0
 800a392:	d0f0      	beq.n	800a376 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a394:	7bfb      	ldrb	r3, [r7, #15]
}
 800a396:	4618      	mov	r0, r3
 800a398:	3710      	adds	r7, #16
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}
 800a39e:	bf00      	nop
 800a3a0:	58024400 	.word	0x58024400
 800a3a4:	ffff0007 	.word	0xffff0007

0800a3a8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b084      	sub	sp, #16
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a3b6:	4b53      	ldr	r3, [pc, #332]	; (800a504 <RCCEx_PLL3_Config+0x15c>)
 800a3b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3ba:	f003 0303 	and.w	r3, r3, #3
 800a3be:	2b03      	cmp	r3, #3
 800a3c0:	d101      	bne.n	800a3c6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	e099      	b.n	800a4fa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a3c6:	4b4f      	ldr	r3, [pc, #316]	; (800a504 <RCCEx_PLL3_Config+0x15c>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	4a4e      	ldr	r2, [pc, #312]	; (800a504 <RCCEx_PLL3_Config+0x15c>)
 800a3cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a3d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a3d2:	f7fa fa21 	bl	8004818 <HAL_GetTick>
 800a3d6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a3d8:	e008      	b.n	800a3ec <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a3da:	f7fa fa1d 	bl	8004818 <HAL_GetTick>
 800a3de:	4602      	mov	r2, r0
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	1ad3      	subs	r3, r2, r3
 800a3e4:	2b02      	cmp	r3, #2
 800a3e6:	d901      	bls.n	800a3ec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a3e8:	2303      	movs	r3, #3
 800a3ea:	e086      	b.n	800a4fa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a3ec:	4b45      	ldr	r3, [pc, #276]	; (800a504 <RCCEx_PLL3_Config+0x15c>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d1f0      	bne.n	800a3da <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a3f8:	4b42      	ldr	r3, [pc, #264]	; (800a504 <RCCEx_PLL3_Config+0x15c>)
 800a3fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3fc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	051b      	lsls	r3, r3, #20
 800a406:	493f      	ldr	r1, [pc, #252]	; (800a504 <RCCEx_PLL3_Config+0x15c>)
 800a408:	4313      	orrs	r3, r2
 800a40a:	628b      	str	r3, [r1, #40]	; 0x28
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	685b      	ldr	r3, [r3, #4]
 800a410:	3b01      	subs	r3, #1
 800a412:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	689b      	ldr	r3, [r3, #8]
 800a41a:	3b01      	subs	r3, #1
 800a41c:	025b      	lsls	r3, r3, #9
 800a41e:	b29b      	uxth	r3, r3
 800a420:	431a      	orrs	r2, r3
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	68db      	ldr	r3, [r3, #12]
 800a426:	3b01      	subs	r3, #1
 800a428:	041b      	lsls	r3, r3, #16
 800a42a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a42e:	431a      	orrs	r2, r3
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	691b      	ldr	r3, [r3, #16]
 800a434:	3b01      	subs	r3, #1
 800a436:	061b      	lsls	r3, r3, #24
 800a438:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a43c:	4931      	ldr	r1, [pc, #196]	; (800a504 <RCCEx_PLL3_Config+0x15c>)
 800a43e:	4313      	orrs	r3, r2
 800a440:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a442:	4b30      	ldr	r3, [pc, #192]	; (800a504 <RCCEx_PLL3_Config+0x15c>)
 800a444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a446:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	695b      	ldr	r3, [r3, #20]
 800a44e:	492d      	ldr	r1, [pc, #180]	; (800a504 <RCCEx_PLL3_Config+0x15c>)
 800a450:	4313      	orrs	r3, r2
 800a452:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a454:	4b2b      	ldr	r3, [pc, #172]	; (800a504 <RCCEx_PLL3_Config+0x15c>)
 800a456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a458:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	699b      	ldr	r3, [r3, #24]
 800a460:	4928      	ldr	r1, [pc, #160]	; (800a504 <RCCEx_PLL3_Config+0x15c>)
 800a462:	4313      	orrs	r3, r2
 800a464:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a466:	4b27      	ldr	r3, [pc, #156]	; (800a504 <RCCEx_PLL3_Config+0x15c>)
 800a468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a46a:	4a26      	ldr	r2, [pc, #152]	; (800a504 <RCCEx_PLL3_Config+0x15c>)
 800a46c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a470:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a472:	4b24      	ldr	r3, [pc, #144]	; (800a504 <RCCEx_PLL3_Config+0x15c>)
 800a474:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a476:	4b24      	ldr	r3, [pc, #144]	; (800a508 <RCCEx_PLL3_Config+0x160>)
 800a478:	4013      	ands	r3, r2
 800a47a:	687a      	ldr	r2, [r7, #4]
 800a47c:	69d2      	ldr	r2, [r2, #28]
 800a47e:	00d2      	lsls	r2, r2, #3
 800a480:	4920      	ldr	r1, [pc, #128]	; (800a504 <RCCEx_PLL3_Config+0x15c>)
 800a482:	4313      	orrs	r3, r2
 800a484:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a486:	4b1f      	ldr	r3, [pc, #124]	; (800a504 <RCCEx_PLL3_Config+0x15c>)
 800a488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a48a:	4a1e      	ldr	r2, [pc, #120]	; (800a504 <RCCEx_PLL3_Config+0x15c>)
 800a48c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a490:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d106      	bne.n	800a4a6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a498:	4b1a      	ldr	r3, [pc, #104]	; (800a504 <RCCEx_PLL3_Config+0x15c>)
 800a49a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a49c:	4a19      	ldr	r2, [pc, #100]	; (800a504 <RCCEx_PLL3_Config+0x15c>)
 800a49e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a4a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a4a4:	e00f      	b.n	800a4c6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	2b01      	cmp	r3, #1
 800a4aa:	d106      	bne.n	800a4ba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a4ac:	4b15      	ldr	r3, [pc, #84]	; (800a504 <RCCEx_PLL3_Config+0x15c>)
 800a4ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4b0:	4a14      	ldr	r2, [pc, #80]	; (800a504 <RCCEx_PLL3_Config+0x15c>)
 800a4b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a4b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a4b8:	e005      	b.n	800a4c6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a4ba:	4b12      	ldr	r3, [pc, #72]	; (800a504 <RCCEx_PLL3_Config+0x15c>)
 800a4bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4be:	4a11      	ldr	r2, [pc, #68]	; (800a504 <RCCEx_PLL3_Config+0x15c>)
 800a4c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a4c4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a4c6:	4b0f      	ldr	r3, [pc, #60]	; (800a504 <RCCEx_PLL3_Config+0x15c>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	4a0e      	ldr	r2, [pc, #56]	; (800a504 <RCCEx_PLL3_Config+0x15c>)
 800a4cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a4d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a4d2:	f7fa f9a1 	bl	8004818 <HAL_GetTick>
 800a4d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a4d8:	e008      	b.n	800a4ec <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a4da:	f7fa f99d 	bl	8004818 <HAL_GetTick>
 800a4de:	4602      	mov	r2, r0
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	1ad3      	subs	r3, r2, r3
 800a4e4:	2b02      	cmp	r3, #2
 800a4e6:	d901      	bls.n	800a4ec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a4e8:	2303      	movs	r3, #3
 800a4ea:	e006      	b.n	800a4fa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a4ec:	4b05      	ldr	r3, [pc, #20]	; (800a504 <RCCEx_PLL3_Config+0x15c>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d0f0      	beq.n	800a4da <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a4f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	3710      	adds	r7, #16
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}
 800a502:	bf00      	nop
 800a504:	58024400 	.word	0x58024400
 800a508:	ffff0007 	.word	0xffff0007

0800a50c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b082      	sub	sp, #8
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d101      	bne.n	800a51e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a51a:	2301      	movs	r3, #1
 800a51c:	e049      	b.n	800a5b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a524:	b2db      	uxtb	r3, r3
 800a526:	2b00      	cmp	r3, #0
 800a528:	d106      	bne.n	800a538 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2200      	movs	r2, #0
 800a52e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f7f9 fe3c 	bl	80041b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2202      	movs	r2, #2
 800a53c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681a      	ldr	r2, [r3, #0]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	3304      	adds	r3, #4
 800a548:	4619      	mov	r1, r3
 800a54a:	4610      	mov	r0, r2
 800a54c:	f000 feb8 	bl	800b2c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2201      	movs	r2, #1
 800a554:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2201      	movs	r2, #1
 800a55c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2201      	movs	r2, #1
 800a564:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2201      	movs	r2, #1
 800a56c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2201      	movs	r2, #1
 800a574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2201      	movs	r2, #1
 800a57c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2201      	movs	r2, #1
 800a584:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2201      	movs	r2, #1
 800a58c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2201      	movs	r2, #1
 800a594:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2201      	movs	r2, #1
 800a59c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a5b0:	2300      	movs	r3, #0
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3708      	adds	r7, #8
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}
	...

0800a5bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a5bc:	b480      	push	{r7}
 800a5be:	b085      	sub	sp, #20
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5ca:	b2db      	uxtb	r3, r3
 800a5cc:	2b01      	cmp	r3, #1
 800a5ce:	d001      	beq.n	800a5d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	e05e      	b.n	800a692 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2202      	movs	r2, #2
 800a5d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	68da      	ldr	r2, [r3, #12]
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f042 0201 	orr.w	r2, r2, #1
 800a5ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	4a2b      	ldr	r2, [pc, #172]	; (800a6a0 <HAL_TIM_Base_Start_IT+0xe4>)
 800a5f2:	4293      	cmp	r3, r2
 800a5f4:	d02c      	beq.n	800a650 <HAL_TIM_Base_Start_IT+0x94>
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5fe:	d027      	beq.n	800a650 <HAL_TIM_Base_Start_IT+0x94>
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	4a27      	ldr	r2, [pc, #156]	; (800a6a4 <HAL_TIM_Base_Start_IT+0xe8>)
 800a606:	4293      	cmp	r3, r2
 800a608:	d022      	beq.n	800a650 <HAL_TIM_Base_Start_IT+0x94>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	4a26      	ldr	r2, [pc, #152]	; (800a6a8 <HAL_TIM_Base_Start_IT+0xec>)
 800a610:	4293      	cmp	r3, r2
 800a612:	d01d      	beq.n	800a650 <HAL_TIM_Base_Start_IT+0x94>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	4a24      	ldr	r2, [pc, #144]	; (800a6ac <HAL_TIM_Base_Start_IT+0xf0>)
 800a61a:	4293      	cmp	r3, r2
 800a61c:	d018      	beq.n	800a650 <HAL_TIM_Base_Start_IT+0x94>
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	4a23      	ldr	r2, [pc, #140]	; (800a6b0 <HAL_TIM_Base_Start_IT+0xf4>)
 800a624:	4293      	cmp	r3, r2
 800a626:	d013      	beq.n	800a650 <HAL_TIM_Base_Start_IT+0x94>
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	4a21      	ldr	r2, [pc, #132]	; (800a6b4 <HAL_TIM_Base_Start_IT+0xf8>)
 800a62e:	4293      	cmp	r3, r2
 800a630:	d00e      	beq.n	800a650 <HAL_TIM_Base_Start_IT+0x94>
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	4a20      	ldr	r2, [pc, #128]	; (800a6b8 <HAL_TIM_Base_Start_IT+0xfc>)
 800a638:	4293      	cmp	r3, r2
 800a63a:	d009      	beq.n	800a650 <HAL_TIM_Base_Start_IT+0x94>
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	4a1e      	ldr	r2, [pc, #120]	; (800a6bc <HAL_TIM_Base_Start_IT+0x100>)
 800a642:	4293      	cmp	r3, r2
 800a644:	d004      	beq.n	800a650 <HAL_TIM_Base_Start_IT+0x94>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	4a1d      	ldr	r2, [pc, #116]	; (800a6c0 <HAL_TIM_Base_Start_IT+0x104>)
 800a64c:	4293      	cmp	r3, r2
 800a64e:	d115      	bne.n	800a67c <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	689a      	ldr	r2, [r3, #8]
 800a656:	4b1b      	ldr	r3, [pc, #108]	; (800a6c4 <HAL_TIM_Base_Start_IT+0x108>)
 800a658:	4013      	ands	r3, r2
 800a65a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	2b06      	cmp	r3, #6
 800a660:	d015      	beq.n	800a68e <HAL_TIM_Base_Start_IT+0xd2>
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a668:	d011      	beq.n	800a68e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	681a      	ldr	r2, [r3, #0]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f042 0201 	orr.w	r2, r2, #1
 800a678:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a67a:	e008      	b.n	800a68e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	681a      	ldr	r2, [r3, #0]
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f042 0201 	orr.w	r2, r2, #1
 800a68a:	601a      	str	r2, [r3, #0]
 800a68c:	e000      	b.n	800a690 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a68e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a690:	2300      	movs	r3, #0
}
 800a692:	4618      	mov	r0, r3
 800a694:	3714      	adds	r7, #20
 800a696:	46bd      	mov	sp, r7
 800a698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69c:	4770      	bx	lr
 800a69e:	bf00      	nop
 800a6a0:	40010000 	.word	0x40010000
 800a6a4:	40000400 	.word	0x40000400
 800a6a8:	40000800 	.word	0x40000800
 800a6ac:	40000c00 	.word	0x40000c00
 800a6b0:	40010400 	.word	0x40010400
 800a6b4:	40001800 	.word	0x40001800
 800a6b8:	40014000 	.word	0x40014000
 800a6bc:	4000e000 	.word	0x4000e000
 800a6c0:	4000e400 	.word	0x4000e400
 800a6c4:	00010007 	.word	0x00010007

0800a6c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b082      	sub	sp, #8
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d101      	bne.n	800a6da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	e049      	b.n	800a76e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6e0:	b2db      	uxtb	r3, r3
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d106      	bne.n	800a6f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f7f9 fd26 	bl	8004140 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2202      	movs	r2, #2
 800a6f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681a      	ldr	r2, [r3, #0]
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	3304      	adds	r3, #4
 800a704:	4619      	mov	r1, r3
 800a706:	4610      	mov	r0, r2
 800a708:	f000 fdda 	bl	800b2c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2201      	movs	r2, #1
 800a710:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2201      	movs	r2, #1
 800a718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2201      	movs	r2, #1
 800a720:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2201      	movs	r2, #1
 800a728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2201      	movs	r2, #1
 800a730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2201      	movs	r2, #1
 800a738:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2201      	movs	r2, #1
 800a740:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2201      	movs	r2, #1
 800a748:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2201      	movs	r2, #1
 800a750:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2201      	movs	r2, #1
 800a758:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2201      	movs	r2, #1
 800a760:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2201      	movs	r2, #1
 800a768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a76c:	2300      	movs	r3, #0
}
 800a76e:	4618      	mov	r0, r3
 800a770:	3708      	adds	r7, #8
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}
	...

0800a778 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b084      	sub	sp, #16
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
 800a780:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d109      	bne.n	800a79c <HAL_TIM_PWM_Start+0x24>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a78e:	b2db      	uxtb	r3, r3
 800a790:	2b01      	cmp	r3, #1
 800a792:	bf14      	ite	ne
 800a794:	2301      	movne	r3, #1
 800a796:	2300      	moveq	r3, #0
 800a798:	b2db      	uxtb	r3, r3
 800a79a:	e03c      	b.n	800a816 <HAL_TIM_PWM_Start+0x9e>
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	2b04      	cmp	r3, #4
 800a7a0:	d109      	bne.n	800a7b6 <HAL_TIM_PWM_Start+0x3e>
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a7a8:	b2db      	uxtb	r3, r3
 800a7aa:	2b01      	cmp	r3, #1
 800a7ac:	bf14      	ite	ne
 800a7ae:	2301      	movne	r3, #1
 800a7b0:	2300      	moveq	r3, #0
 800a7b2:	b2db      	uxtb	r3, r3
 800a7b4:	e02f      	b.n	800a816 <HAL_TIM_PWM_Start+0x9e>
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	2b08      	cmp	r3, #8
 800a7ba:	d109      	bne.n	800a7d0 <HAL_TIM_PWM_Start+0x58>
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a7c2:	b2db      	uxtb	r3, r3
 800a7c4:	2b01      	cmp	r3, #1
 800a7c6:	bf14      	ite	ne
 800a7c8:	2301      	movne	r3, #1
 800a7ca:	2300      	moveq	r3, #0
 800a7cc:	b2db      	uxtb	r3, r3
 800a7ce:	e022      	b.n	800a816 <HAL_TIM_PWM_Start+0x9e>
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	2b0c      	cmp	r3, #12
 800a7d4:	d109      	bne.n	800a7ea <HAL_TIM_PWM_Start+0x72>
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a7dc:	b2db      	uxtb	r3, r3
 800a7de:	2b01      	cmp	r3, #1
 800a7e0:	bf14      	ite	ne
 800a7e2:	2301      	movne	r3, #1
 800a7e4:	2300      	moveq	r3, #0
 800a7e6:	b2db      	uxtb	r3, r3
 800a7e8:	e015      	b.n	800a816 <HAL_TIM_PWM_Start+0x9e>
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	2b10      	cmp	r3, #16
 800a7ee:	d109      	bne.n	800a804 <HAL_TIM_PWM_Start+0x8c>
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a7f6:	b2db      	uxtb	r3, r3
 800a7f8:	2b01      	cmp	r3, #1
 800a7fa:	bf14      	ite	ne
 800a7fc:	2301      	movne	r3, #1
 800a7fe:	2300      	moveq	r3, #0
 800a800:	b2db      	uxtb	r3, r3
 800a802:	e008      	b.n	800a816 <HAL_TIM_PWM_Start+0x9e>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a80a:	b2db      	uxtb	r3, r3
 800a80c:	2b01      	cmp	r3, #1
 800a80e:	bf14      	ite	ne
 800a810:	2301      	movne	r3, #1
 800a812:	2300      	moveq	r3, #0
 800a814:	b2db      	uxtb	r3, r3
 800a816:	2b00      	cmp	r3, #0
 800a818:	d001      	beq.n	800a81e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a81a:	2301      	movs	r3, #1
 800a81c:	e0ab      	b.n	800a976 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d104      	bne.n	800a82e <HAL_TIM_PWM_Start+0xb6>
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2202      	movs	r2, #2
 800a828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a82c:	e023      	b.n	800a876 <HAL_TIM_PWM_Start+0xfe>
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	2b04      	cmp	r3, #4
 800a832:	d104      	bne.n	800a83e <HAL_TIM_PWM_Start+0xc6>
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2202      	movs	r2, #2
 800a838:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a83c:	e01b      	b.n	800a876 <HAL_TIM_PWM_Start+0xfe>
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	2b08      	cmp	r3, #8
 800a842:	d104      	bne.n	800a84e <HAL_TIM_PWM_Start+0xd6>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2202      	movs	r2, #2
 800a848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a84c:	e013      	b.n	800a876 <HAL_TIM_PWM_Start+0xfe>
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	2b0c      	cmp	r3, #12
 800a852:	d104      	bne.n	800a85e <HAL_TIM_PWM_Start+0xe6>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2202      	movs	r2, #2
 800a858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a85c:	e00b      	b.n	800a876 <HAL_TIM_PWM_Start+0xfe>
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	2b10      	cmp	r3, #16
 800a862:	d104      	bne.n	800a86e <HAL_TIM_PWM_Start+0xf6>
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2202      	movs	r2, #2
 800a868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a86c:	e003      	b.n	800a876 <HAL_TIM_PWM_Start+0xfe>
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2202      	movs	r2, #2
 800a872:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	2201      	movs	r2, #1
 800a87c:	6839      	ldr	r1, [r7, #0]
 800a87e:	4618      	mov	r0, r3
 800a880:	f001 f938 	bl	800baf4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	4a3d      	ldr	r2, [pc, #244]	; (800a980 <HAL_TIM_PWM_Start+0x208>)
 800a88a:	4293      	cmp	r3, r2
 800a88c:	d013      	beq.n	800a8b6 <HAL_TIM_PWM_Start+0x13e>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	4a3c      	ldr	r2, [pc, #240]	; (800a984 <HAL_TIM_PWM_Start+0x20c>)
 800a894:	4293      	cmp	r3, r2
 800a896:	d00e      	beq.n	800a8b6 <HAL_TIM_PWM_Start+0x13e>
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	4a3a      	ldr	r2, [pc, #232]	; (800a988 <HAL_TIM_PWM_Start+0x210>)
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	d009      	beq.n	800a8b6 <HAL_TIM_PWM_Start+0x13e>
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	4a39      	ldr	r2, [pc, #228]	; (800a98c <HAL_TIM_PWM_Start+0x214>)
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	d004      	beq.n	800a8b6 <HAL_TIM_PWM_Start+0x13e>
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	4a37      	ldr	r2, [pc, #220]	; (800a990 <HAL_TIM_PWM_Start+0x218>)
 800a8b2:	4293      	cmp	r3, r2
 800a8b4:	d101      	bne.n	800a8ba <HAL_TIM_PWM_Start+0x142>
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	e000      	b.n	800a8bc <HAL_TIM_PWM_Start+0x144>
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d007      	beq.n	800a8d0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a8ce:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4a2a      	ldr	r2, [pc, #168]	; (800a980 <HAL_TIM_PWM_Start+0x208>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d02c      	beq.n	800a934 <HAL_TIM_PWM_Start+0x1bc>
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8e2:	d027      	beq.n	800a934 <HAL_TIM_PWM_Start+0x1bc>
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	4a2a      	ldr	r2, [pc, #168]	; (800a994 <HAL_TIM_PWM_Start+0x21c>)
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d022      	beq.n	800a934 <HAL_TIM_PWM_Start+0x1bc>
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	4a29      	ldr	r2, [pc, #164]	; (800a998 <HAL_TIM_PWM_Start+0x220>)
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	d01d      	beq.n	800a934 <HAL_TIM_PWM_Start+0x1bc>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	4a27      	ldr	r2, [pc, #156]	; (800a99c <HAL_TIM_PWM_Start+0x224>)
 800a8fe:	4293      	cmp	r3, r2
 800a900:	d018      	beq.n	800a934 <HAL_TIM_PWM_Start+0x1bc>
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	4a1f      	ldr	r2, [pc, #124]	; (800a984 <HAL_TIM_PWM_Start+0x20c>)
 800a908:	4293      	cmp	r3, r2
 800a90a:	d013      	beq.n	800a934 <HAL_TIM_PWM_Start+0x1bc>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	4a23      	ldr	r2, [pc, #140]	; (800a9a0 <HAL_TIM_PWM_Start+0x228>)
 800a912:	4293      	cmp	r3, r2
 800a914:	d00e      	beq.n	800a934 <HAL_TIM_PWM_Start+0x1bc>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	4a1b      	ldr	r2, [pc, #108]	; (800a988 <HAL_TIM_PWM_Start+0x210>)
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d009      	beq.n	800a934 <HAL_TIM_PWM_Start+0x1bc>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	4a1f      	ldr	r2, [pc, #124]	; (800a9a4 <HAL_TIM_PWM_Start+0x22c>)
 800a926:	4293      	cmp	r3, r2
 800a928:	d004      	beq.n	800a934 <HAL_TIM_PWM_Start+0x1bc>
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	4a1e      	ldr	r2, [pc, #120]	; (800a9a8 <HAL_TIM_PWM_Start+0x230>)
 800a930:	4293      	cmp	r3, r2
 800a932:	d115      	bne.n	800a960 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	689a      	ldr	r2, [r3, #8]
 800a93a:	4b1c      	ldr	r3, [pc, #112]	; (800a9ac <HAL_TIM_PWM_Start+0x234>)
 800a93c:	4013      	ands	r3, r2
 800a93e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	2b06      	cmp	r3, #6
 800a944:	d015      	beq.n	800a972 <HAL_TIM_PWM_Start+0x1fa>
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a94c:	d011      	beq.n	800a972 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	681a      	ldr	r2, [r3, #0]
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f042 0201 	orr.w	r2, r2, #1
 800a95c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a95e:	e008      	b.n	800a972 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	681a      	ldr	r2, [r3, #0]
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f042 0201 	orr.w	r2, r2, #1
 800a96e:	601a      	str	r2, [r3, #0]
 800a970:	e000      	b.n	800a974 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a972:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a974:	2300      	movs	r3, #0
}
 800a976:	4618      	mov	r0, r3
 800a978:	3710      	adds	r7, #16
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}
 800a97e:	bf00      	nop
 800a980:	40010000 	.word	0x40010000
 800a984:	40010400 	.word	0x40010400
 800a988:	40014000 	.word	0x40014000
 800a98c:	40014400 	.word	0x40014400
 800a990:	40014800 	.word	0x40014800
 800a994:	40000400 	.word	0x40000400
 800a998:	40000800 	.word	0x40000800
 800a99c:	40000c00 	.word	0x40000c00
 800a9a0:	40001800 	.word	0x40001800
 800a9a4:	4000e000 	.word	0x4000e000
 800a9a8:	4000e400 	.word	0x4000e400
 800a9ac:	00010007 	.word	0x00010007

0800a9b0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b086      	sub	sp, #24
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
 800a9b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d101      	bne.n	800a9c4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	e08f      	b.n	800aae4 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9ca:	b2db      	uxtb	r3, r3
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d106      	bne.n	800a9de <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f7f9 faf5 	bl	8003fc8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2202      	movs	r2, #2
 800a9e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	6899      	ldr	r1, [r3, #8]
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681a      	ldr	r2, [r3, #0]
 800a9f0:	4b3e      	ldr	r3, [pc, #248]	; (800aaec <HAL_TIM_Encoder_Init+0x13c>)
 800a9f2:	400b      	ands	r3, r1
 800a9f4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681a      	ldr	r2, [r3, #0]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	3304      	adds	r3, #4
 800a9fe:	4619      	mov	r1, r3
 800aa00:	4610      	mov	r0, r2
 800aa02:	f000 fc5d 	bl	800b2c0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	689b      	ldr	r3, [r3, #8]
 800aa0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	699b      	ldr	r3, [r3, #24]
 800aa14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	6a1b      	ldr	r3, [r3, #32]
 800aa1c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	697a      	ldr	r2, [r7, #20]
 800aa24:	4313      	orrs	r3, r2
 800aa26:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800aa28:	693a      	ldr	r2, [r7, #16]
 800aa2a:	4b31      	ldr	r3, [pc, #196]	; (800aaf0 <HAL_TIM_Encoder_Init+0x140>)
 800aa2c:	4013      	ands	r3, r2
 800aa2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	689a      	ldr	r2, [r3, #8]
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	699b      	ldr	r3, [r3, #24]
 800aa38:	021b      	lsls	r3, r3, #8
 800aa3a:	4313      	orrs	r3, r2
 800aa3c:	693a      	ldr	r2, [r7, #16]
 800aa3e:	4313      	orrs	r3, r2
 800aa40:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800aa42:	693a      	ldr	r2, [r7, #16]
 800aa44:	4b2b      	ldr	r3, [pc, #172]	; (800aaf4 <HAL_TIM_Encoder_Init+0x144>)
 800aa46:	4013      	ands	r3, r2
 800aa48:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800aa4a:	693a      	ldr	r2, [r7, #16]
 800aa4c:	4b2a      	ldr	r3, [pc, #168]	; (800aaf8 <HAL_TIM_Encoder_Init+0x148>)
 800aa4e:	4013      	ands	r3, r2
 800aa50:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	68da      	ldr	r2, [r3, #12]
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	69db      	ldr	r3, [r3, #28]
 800aa5a:	021b      	lsls	r3, r3, #8
 800aa5c:	4313      	orrs	r3, r2
 800aa5e:	693a      	ldr	r2, [r7, #16]
 800aa60:	4313      	orrs	r3, r2
 800aa62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	691b      	ldr	r3, [r3, #16]
 800aa68:	011a      	lsls	r2, r3, #4
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	6a1b      	ldr	r3, [r3, #32]
 800aa6e:	031b      	lsls	r3, r3, #12
 800aa70:	4313      	orrs	r3, r2
 800aa72:	693a      	ldr	r2, [r7, #16]
 800aa74:	4313      	orrs	r3, r2
 800aa76:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800aa7e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800aa86:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	685a      	ldr	r2, [r3, #4]
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	695b      	ldr	r3, [r3, #20]
 800aa90:	011b      	lsls	r3, r3, #4
 800aa92:	4313      	orrs	r3, r2
 800aa94:	68fa      	ldr	r2, [r7, #12]
 800aa96:	4313      	orrs	r3, r2
 800aa98:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	697a      	ldr	r2, [r7, #20]
 800aaa0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	693a      	ldr	r2, [r7, #16]
 800aaa8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	68fa      	ldr	r2, [r7, #12]
 800aab0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2201      	movs	r2, #1
 800aab6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2201      	movs	r2, #1
 800aabe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2201      	movs	r2, #1
 800aac6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2201      	movs	r2, #1
 800aace:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2201      	movs	r2, #1
 800aad6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2201      	movs	r2, #1
 800aade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aae2:	2300      	movs	r3, #0
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	3718      	adds	r7, #24
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd80      	pop	{r7, pc}
 800aaec:	fffebff8 	.word	0xfffebff8
 800aaf0:	fffffcfc 	.word	0xfffffcfc
 800aaf4:	fffff3f3 	.word	0xfffff3f3
 800aaf8:	ffff0f0f 	.word	0xffff0f0f

0800aafc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b084      	sub	sp, #16
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
 800ab04:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ab0c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ab14:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab1c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab24:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d110      	bne.n	800ab4e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ab2c:	7bfb      	ldrb	r3, [r7, #15]
 800ab2e:	2b01      	cmp	r3, #1
 800ab30:	d102      	bne.n	800ab38 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800ab32:	7b7b      	ldrb	r3, [r7, #13]
 800ab34:	2b01      	cmp	r3, #1
 800ab36:	d001      	beq.n	800ab3c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800ab38:	2301      	movs	r3, #1
 800ab3a:	e069      	b.n	800ac10 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2202      	movs	r2, #2
 800ab40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2202      	movs	r2, #2
 800ab48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab4c:	e031      	b.n	800abb2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	2b04      	cmp	r3, #4
 800ab52:	d110      	bne.n	800ab76 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800ab54:	7bbb      	ldrb	r3, [r7, #14]
 800ab56:	2b01      	cmp	r3, #1
 800ab58:	d102      	bne.n	800ab60 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800ab5a:	7b3b      	ldrb	r3, [r7, #12]
 800ab5c:	2b01      	cmp	r3, #1
 800ab5e:	d001      	beq.n	800ab64 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800ab60:	2301      	movs	r3, #1
 800ab62:	e055      	b.n	800ac10 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2202      	movs	r2, #2
 800ab68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2202      	movs	r2, #2
 800ab70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab74:	e01d      	b.n	800abb2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ab76:	7bfb      	ldrb	r3, [r7, #15]
 800ab78:	2b01      	cmp	r3, #1
 800ab7a:	d108      	bne.n	800ab8e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800ab7c:	7bbb      	ldrb	r3, [r7, #14]
 800ab7e:	2b01      	cmp	r3, #1
 800ab80:	d105      	bne.n	800ab8e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ab82:	7b7b      	ldrb	r3, [r7, #13]
 800ab84:	2b01      	cmp	r3, #1
 800ab86:	d102      	bne.n	800ab8e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800ab88:	7b3b      	ldrb	r3, [r7, #12]
 800ab8a:	2b01      	cmp	r3, #1
 800ab8c:	d001      	beq.n	800ab92 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800ab8e:	2301      	movs	r3, #1
 800ab90:	e03e      	b.n	800ac10 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2202      	movs	r2, #2
 800ab96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2202      	movs	r2, #2
 800ab9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2202      	movs	r2, #2
 800aba6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2202      	movs	r2, #2
 800abae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d003      	beq.n	800abc0 <HAL_TIM_Encoder_Start+0xc4>
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	2b04      	cmp	r3, #4
 800abbc:	d008      	beq.n	800abd0 <HAL_TIM_Encoder_Start+0xd4>
 800abbe:	e00f      	b.n	800abe0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	2201      	movs	r2, #1
 800abc6:	2100      	movs	r1, #0
 800abc8:	4618      	mov	r0, r3
 800abca:	f000 ff93 	bl	800baf4 <TIM_CCxChannelCmd>
      break;
 800abce:	e016      	b.n	800abfe <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	2201      	movs	r2, #1
 800abd6:	2104      	movs	r1, #4
 800abd8:	4618      	mov	r0, r3
 800abda:	f000 ff8b 	bl	800baf4 <TIM_CCxChannelCmd>
      break;
 800abde:	e00e      	b.n	800abfe <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	2201      	movs	r2, #1
 800abe6:	2100      	movs	r1, #0
 800abe8:	4618      	mov	r0, r3
 800abea:	f000 ff83 	bl	800baf4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	2201      	movs	r2, #1
 800abf4:	2104      	movs	r1, #4
 800abf6:	4618      	mov	r0, r3
 800abf8:	f000 ff7c 	bl	800baf4 <TIM_CCxChannelCmd>
      break;
 800abfc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	681a      	ldr	r2, [r3, #0]
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f042 0201 	orr.w	r2, r2, #1
 800ac0c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ac0e:	2300      	movs	r3, #0
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	3710      	adds	r7, #16
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}

0800ac18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b082      	sub	sp, #8
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	691b      	ldr	r3, [r3, #16]
 800ac26:	f003 0302 	and.w	r3, r3, #2
 800ac2a:	2b02      	cmp	r3, #2
 800ac2c:	d122      	bne.n	800ac74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	68db      	ldr	r3, [r3, #12]
 800ac34:	f003 0302 	and.w	r3, r3, #2
 800ac38:	2b02      	cmp	r3, #2
 800ac3a:	d11b      	bne.n	800ac74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f06f 0202 	mvn.w	r2, #2
 800ac44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2201      	movs	r2, #1
 800ac4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	699b      	ldr	r3, [r3, #24]
 800ac52:	f003 0303 	and.w	r3, r3, #3
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d003      	beq.n	800ac62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f000 fb12 	bl	800b284 <HAL_TIM_IC_CaptureCallback>
 800ac60:	e005      	b.n	800ac6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f000 fb04 	bl	800b270 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f000 fb15 	bl	800b298 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2200      	movs	r2, #0
 800ac72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	691b      	ldr	r3, [r3, #16]
 800ac7a:	f003 0304 	and.w	r3, r3, #4
 800ac7e:	2b04      	cmp	r3, #4
 800ac80:	d122      	bne.n	800acc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	68db      	ldr	r3, [r3, #12]
 800ac88:	f003 0304 	and.w	r3, r3, #4
 800ac8c:	2b04      	cmp	r3, #4
 800ac8e:	d11b      	bne.n	800acc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f06f 0204 	mvn.w	r2, #4
 800ac98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2202      	movs	r2, #2
 800ac9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	699b      	ldr	r3, [r3, #24]
 800aca6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d003      	beq.n	800acb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f000 fae8 	bl	800b284 <HAL_TIM_IC_CaptureCallback>
 800acb4:	e005      	b.n	800acc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f000 fada 	bl	800b270 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	f000 faeb 	bl	800b298 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2200      	movs	r2, #0
 800acc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	691b      	ldr	r3, [r3, #16]
 800acce:	f003 0308 	and.w	r3, r3, #8
 800acd2:	2b08      	cmp	r3, #8
 800acd4:	d122      	bne.n	800ad1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	68db      	ldr	r3, [r3, #12]
 800acdc:	f003 0308 	and.w	r3, r3, #8
 800ace0:	2b08      	cmp	r3, #8
 800ace2:	d11b      	bne.n	800ad1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f06f 0208 	mvn.w	r2, #8
 800acec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2204      	movs	r2, #4
 800acf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	69db      	ldr	r3, [r3, #28]
 800acfa:	f003 0303 	and.w	r3, r3, #3
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d003      	beq.n	800ad0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f000 fabe 	bl	800b284 <HAL_TIM_IC_CaptureCallback>
 800ad08:	e005      	b.n	800ad16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f000 fab0 	bl	800b270 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f000 fac1 	bl	800b298 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2200      	movs	r2, #0
 800ad1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	691b      	ldr	r3, [r3, #16]
 800ad22:	f003 0310 	and.w	r3, r3, #16
 800ad26:	2b10      	cmp	r3, #16
 800ad28:	d122      	bne.n	800ad70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	68db      	ldr	r3, [r3, #12]
 800ad30:	f003 0310 	and.w	r3, r3, #16
 800ad34:	2b10      	cmp	r3, #16
 800ad36:	d11b      	bne.n	800ad70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f06f 0210 	mvn.w	r2, #16
 800ad40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2208      	movs	r2, #8
 800ad46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	69db      	ldr	r3, [r3, #28]
 800ad4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d003      	beq.n	800ad5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f000 fa94 	bl	800b284 <HAL_TIM_IC_CaptureCallback>
 800ad5c:	e005      	b.n	800ad6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f000 fa86 	bl	800b270 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f000 fa97 	bl	800b298 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	691b      	ldr	r3, [r3, #16]
 800ad76:	f003 0301 	and.w	r3, r3, #1
 800ad7a:	2b01      	cmp	r3, #1
 800ad7c:	d10e      	bne.n	800ad9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	68db      	ldr	r3, [r3, #12]
 800ad84:	f003 0301 	and.w	r3, r3, #1
 800ad88:	2b01      	cmp	r3, #1
 800ad8a:	d107      	bne.n	800ad9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f06f 0201 	mvn.w	r2, #1
 800ad94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f7f6 f86e 	bl	8000e78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	691b      	ldr	r3, [r3, #16]
 800ada2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ada6:	2b80      	cmp	r3, #128	; 0x80
 800ada8:	d10e      	bne.n	800adc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	68db      	ldr	r3, [r3, #12]
 800adb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adb4:	2b80      	cmp	r3, #128	; 0x80
 800adb6:	d107      	bne.n	800adc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800adc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f001 f802 	bl	800bdcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	691b      	ldr	r3, [r3, #16]
 800adce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800add2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800add6:	d10e      	bne.n	800adf6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	68db      	ldr	r3, [r3, #12]
 800adde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ade2:	2b80      	cmp	r3, #128	; 0x80
 800ade4:	d107      	bne.n	800adf6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800adee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f000 fff5 	bl	800bde0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	691b      	ldr	r3, [r3, #16]
 800adfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae00:	2b40      	cmp	r3, #64	; 0x40
 800ae02:	d10e      	bne.n	800ae22 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	68db      	ldr	r3, [r3, #12]
 800ae0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae0e:	2b40      	cmp	r3, #64	; 0x40
 800ae10:	d107      	bne.n	800ae22 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ae1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	f000 fa45 	bl	800b2ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	691b      	ldr	r3, [r3, #16]
 800ae28:	f003 0320 	and.w	r3, r3, #32
 800ae2c:	2b20      	cmp	r3, #32
 800ae2e:	d10e      	bne.n	800ae4e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	68db      	ldr	r3, [r3, #12]
 800ae36:	f003 0320 	and.w	r3, r3, #32
 800ae3a:	2b20      	cmp	r3, #32
 800ae3c:	d107      	bne.n	800ae4e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	f06f 0220 	mvn.w	r2, #32
 800ae46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ae48:	6878      	ldr	r0, [r7, #4]
 800ae4a:	f000 ffb5 	bl	800bdb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ae4e:	bf00      	nop
 800ae50:	3708      	adds	r7, #8
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}
	...

0800ae58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b086      	sub	sp, #24
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	60f8      	str	r0, [r7, #12]
 800ae60:	60b9      	str	r1, [r7, #8]
 800ae62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ae64:	2300      	movs	r3, #0
 800ae66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae6e:	2b01      	cmp	r3, #1
 800ae70:	d101      	bne.n	800ae76 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ae72:	2302      	movs	r3, #2
 800ae74:	e0ff      	b.n	800b076 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2201      	movs	r2, #1
 800ae7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2b14      	cmp	r3, #20
 800ae82:	f200 80f0 	bhi.w	800b066 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ae86:	a201      	add	r2, pc, #4	; (adr r2, 800ae8c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ae88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae8c:	0800aee1 	.word	0x0800aee1
 800ae90:	0800b067 	.word	0x0800b067
 800ae94:	0800b067 	.word	0x0800b067
 800ae98:	0800b067 	.word	0x0800b067
 800ae9c:	0800af21 	.word	0x0800af21
 800aea0:	0800b067 	.word	0x0800b067
 800aea4:	0800b067 	.word	0x0800b067
 800aea8:	0800b067 	.word	0x0800b067
 800aeac:	0800af63 	.word	0x0800af63
 800aeb0:	0800b067 	.word	0x0800b067
 800aeb4:	0800b067 	.word	0x0800b067
 800aeb8:	0800b067 	.word	0x0800b067
 800aebc:	0800afa3 	.word	0x0800afa3
 800aec0:	0800b067 	.word	0x0800b067
 800aec4:	0800b067 	.word	0x0800b067
 800aec8:	0800b067 	.word	0x0800b067
 800aecc:	0800afe5 	.word	0x0800afe5
 800aed0:	0800b067 	.word	0x0800b067
 800aed4:	0800b067 	.word	0x0800b067
 800aed8:	0800b067 	.word	0x0800b067
 800aedc:	0800b025 	.word	0x0800b025
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	68b9      	ldr	r1, [r7, #8]
 800aee6:	4618      	mov	r0, r3
 800aee8:	f000 fa90 	bl	800b40c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	699a      	ldr	r2, [r3, #24]
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	f042 0208 	orr.w	r2, r2, #8
 800aefa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	699a      	ldr	r2, [r3, #24]
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f022 0204 	bic.w	r2, r2, #4
 800af0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	6999      	ldr	r1, [r3, #24]
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	691a      	ldr	r2, [r3, #16]
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	430a      	orrs	r2, r1
 800af1c:	619a      	str	r2, [r3, #24]
      break;
 800af1e:	e0a5      	b.n	800b06c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	68b9      	ldr	r1, [r7, #8]
 800af26:	4618      	mov	r0, r3
 800af28:	f000 fb00 	bl	800b52c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	699a      	ldr	r2, [r3, #24]
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800af3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	699a      	ldr	r2, [r3, #24]
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800af4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	6999      	ldr	r1, [r3, #24]
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	691b      	ldr	r3, [r3, #16]
 800af56:	021a      	lsls	r2, r3, #8
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	430a      	orrs	r2, r1
 800af5e:	619a      	str	r2, [r3, #24]
      break;
 800af60:	e084      	b.n	800b06c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	68b9      	ldr	r1, [r7, #8]
 800af68:	4618      	mov	r0, r3
 800af6a:	f000 fb69 	bl	800b640 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	69da      	ldr	r2, [r3, #28]
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	f042 0208 	orr.w	r2, r2, #8
 800af7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	69da      	ldr	r2, [r3, #28]
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f022 0204 	bic.w	r2, r2, #4
 800af8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	69d9      	ldr	r1, [r3, #28]
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	691a      	ldr	r2, [r3, #16]
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	430a      	orrs	r2, r1
 800af9e:	61da      	str	r2, [r3, #28]
      break;
 800afa0:	e064      	b.n	800b06c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	68b9      	ldr	r1, [r7, #8]
 800afa8:	4618      	mov	r0, r3
 800afaa:	f000 fbd1 	bl	800b750 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	69da      	ldr	r2, [r3, #28]
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800afbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	69da      	ldr	r2, [r3, #28]
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800afcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	69d9      	ldr	r1, [r3, #28]
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	691b      	ldr	r3, [r3, #16]
 800afd8:	021a      	lsls	r2, r3, #8
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	430a      	orrs	r2, r1
 800afe0:	61da      	str	r2, [r3, #28]
      break;
 800afe2:	e043      	b.n	800b06c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	68b9      	ldr	r1, [r7, #8]
 800afea:	4618      	mov	r0, r3
 800afec:	f000 fc1a 	bl	800b824 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f042 0208 	orr.w	r2, r2, #8
 800affe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	f022 0204 	bic.w	r2, r2, #4
 800b00e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	691a      	ldr	r2, [r3, #16]
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	430a      	orrs	r2, r1
 800b020:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b022:	e023      	b.n	800b06c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	68b9      	ldr	r1, [r7, #8]
 800b02a:	4618      	mov	r0, r3
 800b02c:	f000 fc5e 	bl	800b8ec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b03e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b04e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	691b      	ldr	r3, [r3, #16]
 800b05a:	021a      	lsls	r2, r3, #8
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	430a      	orrs	r2, r1
 800b062:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b064:	e002      	b.n	800b06c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b066:	2301      	movs	r3, #1
 800b068:	75fb      	strb	r3, [r7, #23]
      break;
 800b06a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	2200      	movs	r2, #0
 800b070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b074:	7dfb      	ldrb	r3, [r7, #23]
}
 800b076:	4618      	mov	r0, r3
 800b078:	3718      	adds	r7, #24
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}
 800b07e:	bf00      	nop

0800b080 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b084      	sub	sp, #16
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
 800b088:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b08a:	2300      	movs	r3, #0
 800b08c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b094:	2b01      	cmp	r3, #1
 800b096:	d101      	bne.n	800b09c <HAL_TIM_ConfigClockSource+0x1c>
 800b098:	2302      	movs	r3, #2
 800b09a:	e0dc      	b.n	800b256 <HAL_TIM_ConfigClockSource+0x1d6>
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2201      	movs	r2, #1
 800b0a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2202      	movs	r2, #2
 800b0a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	689b      	ldr	r3, [r3, #8]
 800b0b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b0b4:	68ba      	ldr	r2, [r7, #8]
 800b0b6:	4b6a      	ldr	r3, [pc, #424]	; (800b260 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b0b8:	4013      	ands	r3, r2
 800b0ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b0c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	68ba      	ldr	r2, [r7, #8]
 800b0ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	4a64      	ldr	r2, [pc, #400]	; (800b264 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b0d2:	4293      	cmp	r3, r2
 800b0d4:	f000 80a9 	beq.w	800b22a <HAL_TIM_ConfigClockSource+0x1aa>
 800b0d8:	4a62      	ldr	r2, [pc, #392]	; (800b264 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	f200 80ae 	bhi.w	800b23c <HAL_TIM_ConfigClockSource+0x1bc>
 800b0e0:	4a61      	ldr	r2, [pc, #388]	; (800b268 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b0e2:	4293      	cmp	r3, r2
 800b0e4:	f000 80a1 	beq.w	800b22a <HAL_TIM_ConfigClockSource+0x1aa>
 800b0e8:	4a5f      	ldr	r2, [pc, #380]	; (800b268 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b0ea:	4293      	cmp	r3, r2
 800b0ec:	f200 80a6 	bhi.w	800b23c <HAL_TIM_ConfigClockSource+0x1bc>
 800b0f0:	4a5e      	ldr	r2, [pc, #376]	; (800b26c <HAL_TIM_ConfigClockSource+0x1ec>)
 800b0f2:	4293      	cmp	r3, r2
 800b0f4:	f000 8099 	beq.w	800b22a <HAL_TIM_ConfigClockSource+0x1aa>
 800b0f8:	4a5c      	ldr	r2, [pc, #368]	; (800b26c <HAL_TIM_ConfigClockSource+0x1ec>)
 800b0fa:	4293      	cmp	r3, r2
 800b0fc:	f200 809e 	bhi.w	800b23c <HAL_TIM_ConfigClockSource+0x1bc>
 800b100:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b104:	f000 8091 	beq.w	800b22a <HAL_TIM_ConfigClockSource+0x1aa>
 800b108:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b10c:	f200 8096 	bhi.w	800b23c <HAL_TIM_ConfigClockSource+0x1bc>
 800b110:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b114:	f000 8089 	beq.w	800b22a <HAL_TIM_ConfigClockSource+0x1aa>
 800b118:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b11c:	f200 808e 	bhi.w	800b23c <HAL_TIM_ConfigClockSource+0x1bc>
 800b120:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b124:	d03e      	beq.n	800b1a4 <HAL_TIM_ConfigClockSource+0x124>
 800b126:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b12a:	f200 8087 	bhi.w	800b23c <HAL_TIM_ConfigClockSource+0x1bc>
 800b12e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b132:	f000 8086 	beq.w	800b242 <HAL_TIM_ConfigClockSource+0x1c2>
 800b136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b13a:	d87f      	bhi.n	800b23c <HAL_TIM_ConfigClockSource+0x1bc>
 800b13c:	2b70      	cmp	r3, #112	; 0x70
 800b13e:	d01a      	beq.n	800b176 <HAL_TIM_ConfigClockSource+0xf6>
 800b140:	2b70      	cmp	r3, #112	; 0x70
 800b142:	d87b      	bhi.n	800b23c <HAL_TIM_ConfigClockSource+0x1bc>
 800b144:	2b60      	cmp	r3, #96	; 0x60
 800b146:	d050      	beq.n	800b1ea <HAL_TIM_ConfigClockSource+0x16a>
 800b148:	2b60      	cmp	r3, #96	; 0x60
 800b14a:	d877      	bhi.n	800b23c <HAL_TIM_ConfigClockSource+0x1bc>
 800b14c:	2b50      	cmp	r3, #80	; 0x50
 800b14e:	d03c      	beq.n	800b1ca <HAL_TIM_ConfigClockSource+0x14a>
 800b150:	2b50      	cmp	r3, #80	; 0x50
 800b152:	d873      	bhi.n	800b23c <HAL_TIM_ConfigClockSource+0x1bc>
 800b154:	2b40      	cmp	r3, #64	; 0x40
 800b156:	d058      	beq.n	800b20a <HAL_TIM_ConfigClockSource+0x18a>
 800b158:	2b40      	cmp	r3, #64	; 0x40
 800b15a:	d86f      	bhi.n	800b23c <HAL_TIM_ConfigClockSource+0x1bc>
 800b15c:	2b30      	cmp	r3, #48	; 0x30
 800b15e:	d064      	beq.n	800b22a <HAL_TIM_ConfigClockSource+0x1aa>
 800b160:	2b30      	cmp	r3, #48	; 0x30
 800b162:	d86b      	bhi.n	800b23c <HAL_TIM_ConfigClockSource+0x1bc>
 800b164:	2b20      	cmp	r3, #32
 800b166:	d060      	beq.n	800b22a <HAL_TIM_ConfigClockSource+0x1aa>
 800b168:	2b20      	cmp	r3, #32
 800b16a:	d867      	bhi.n	800b23c <HAL_TIM_ConfigClockSource+0x1bc>
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d05c      	beq.n	800b22a <HAL_TIM_ConfigClockSource+0x1aa>
 800b170:	2b10      	cmp	r3, #16
 800b172:	d05a      	beq.n	800b22a <HAL_TIM_ConfigClockSource+0x1aa>
 800b174:	e062      	b.n	800b23c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6818      	ldr	r0, [r3, #0]
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	6899      	ldr	r1, [r3, #8]
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	685a      	ldr	r2, [r3, #4]
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	68db      	ldr	r3, [r3, #12]
 800b186:	f000 fc95 	bl	800bab4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	689b      	ldr	r3, [r3, #8]
 800b190:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b198:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	68ba      	ldr	r2, [r7, #8]
 800b1a0:	609a      	str	r2, [r3, #8]
      break;
 800b1a2:	e04f      	b.n	800b244 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	6818      	ldr	r0, [r3, #0]
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	6899      	ldr	r1, [r3, #8]
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	685a      	ldr	r2, [r3, #4]
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	68db      	ldr	r3, [r3, #12]
 800b1b4:	f000 fc7e 	bl	800bab4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	689a      	ldr	r2, [r3, #8]
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b1c6:	609a      	str	r2, [r3, #8]
      break;
 800b1c8:	e03c      	b.n	800b244 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6818      	ldr	r0, [r3, #0]
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	6859      	ldr	r1, [r3, #4]
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	68db      	ldr	r3, [r3, #12]
 800b1d6:	461a      	mov	r2, r3
 800b1d8:	f000 fbee 	bl	800b9b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	2150      	movs	r1, #80	; 0x50
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f000 fc48 	bl	800ba78 <TIM_ITRx_SetConfig>
      break;
 800b1e8:	e02c      	b.n	800b244 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6818      	ldr	r0, [r3, #0]
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	6859      	ldr	r1, [r3, #4]
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	68db      	ldr	r3, [r3, #12]
 800b1f6:	461a      	mov	r2, r3
 800b1f8:	f000 fc0d 	bl	800ba16 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	2160      	movs	r1, #96	; 0x60
 800b202:	4618      	mov	r0, r3
 800b204:	f000 fc38 	bl	800ba78 <TIM_ITRx_SetConfig>
      break;
 800b208:	e01c      	b.n	800b244 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6818      	ldr	r0, [r3, #0]
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	6859      	ldr	r1, [r3, #4]
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	68db      	ldr	r3, [r3, #12]
 800b216:	461a      	mov	r2, r3
 800b218:	f000 fbce 	bl	800b9b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	2140      	movs	r1, #64	; 0x40
 800b222:	4618      	mov	r0, r3
 800b224:	f000 fc28 	bl	800ba78 <TIM_ITRx_SetConfig>
      break;
 800b228:	e00c      	b.n	800b244 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681a      	ldr	r2, [r3, #0]
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	4619      	mov	r1, r3
 800b234:	4610      	mov	r0, r2
 800b236:	f000 fc1f 	bl	800ba78 <TIM_ITRx_SetConfig>
      break;
 800b23a:	e003      	b.n	800b244 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b23c:	2301      	movs	r3, #1
 800b23e:	73fb      	strb	r3, [r7, #15]
      break;
 800b240:	e000      	b.n	800b244 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b242:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2201      	movs	r2, #1
 800b248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2200      	movs	r2, #0
 800b250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b254:	7bfb      	ldrb	r3, [r7, #15]
}
 800b256:	4618      	mov	r0, r3
 800b258:	3710      	adds	r7, #16
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bd80      	pop	{r7, pc}
 800b25e:	bf00      	nop
 800b260:	ffceff88 	.word	0xffceff88
 800b264:	00100040 	.word	0x00100040
 800b268:	00100030 	.word	0x00100030
 800b26c:	00100020 	.word	0x00100020

0800b270 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b270:	b480      	push	{r7}
 800b272:	b083      	sub	sp, #12
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b278:	bf00      	nop
 800b27a:	370c      	adds	r7, #12
 800b27c:	46bd      	mov	sp, r7
 800b27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b282:	4770      	bx	lr

0800b284 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b284:	b480      	push	{r7}
 800b286:	b083      	sub	sp, #12
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b28c:	bf00      	nop
 800b28e:	370c      	adds	r7, #12
 800b290:	46bd      	mov	sp, r7
 800b292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b296:	4770      	bx	lr

0800b298 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b298:	b480      	push	{r7}
 800b29a:	b083      	sub	sp, #12
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b2a0:	bf00      	nop
 800b2a2:	370c      	adds	r7, #12
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2aa:	4770      	bx	lr

0800b2ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b2ac:	b480      	push	{r7}
 800b2ae:	b083      	sub	sp, #12
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b2b4:	bf00      	nop
 800b2b6:	370c      	adds	r7, #12
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2be:	4770      	bx	lr

0800b2c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b2c0:	b480      	push	{r7}
 800b2c2:	b085      	sub	sp, #20
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
 800b2c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	4a44      	ldr	r2, [pc, #272]	; (800b3e4 <TIM_Base_SetConfig+0x124>)
 800b2d4:	4293      	cmp	r3, r2
 800b2d6:	d013      	beq.n	800b300 <TIM_Base_SetConfig+0x40>
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2de:	d00f      	beq.n	800b300 <TIM_Base_SetConfig+0x40>
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	4a41      	ldr	r2, [pc, #260]	; (800b3e8 <TIM_Base_SetConfig+0x128>)
 800b2e4:	4293      	cmp	r3, r2
 800b2e6:	d00b      	beq.n	800b300 <TIM_Base_SetConfig+0x40>
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	4a40      	ldr	r2, [pc, #256]	; (800b3ec <TIM_Base_SetConfig+0x12c>)
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	d007      	beq.n	800b300 <TIM_Base_SetConfig+0x40>
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	4a3f      	ldr	r2, [pc, #252]	; (800b3f0 <TIM_Base_SetConfig+0x130>)
 800b2f4:	4293      	cmp	r3, r2
 800b2f6:	d003      	beq.n	800b300 <TIM_Base_SetConfig+0x40>
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	4a3e      	ldr	r2, [pc, #248]	; (800b3f4 <TIM_Base_SetConfig+0x134>)
 800b2fc:	4293      	cmp	r3, r2
 800b2fe:	d108      	bne.n	800b312 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b306:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	685b      	ldr	r3, [r3, #4]
 800b30c:	68fa      	ldr	r2, [r7, #12]
 800b30e:	4313      	orrs	r3, r2
 800b310:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	4a33      	ldr	r2, [pc, #204]	; (800b3e4 <TIM_Base_SetConfig+0x124>)
 800b316:	4293      	cmp	r3, r2
 800b318:	d027      	beq.n	800b36a <TIM_Base_SetConfig+0xaa>
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b320:	d023      	beq.n	800b36a <TIM_Base_SetConfig+0xaa>
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	4a30      	ldr	r2, [pc, #192]	; (800b3e8 <TIM_Base_SetConfig+0x128>)
 800b326:	4293      	cmp	r3, r2
 800b328:	d01f      	beq.n	800b36a <TIM_Base_SetConfig+0xaa>
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	4a2f      	ldr	r2, [pc, #188]	; (800b3ec <TIM_Base_SetConfig+0x12c>)
 800b32e:	4293      	cmp	r3, r2
 800b330:	d01b      	beq.n	800b36a <TIM_Base_SetConfig+0xaa>
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	4a2e      	ldr	r2, [pc, #184]	; (800b3f0 <TIM_Base_SetConfig+0x130>)
 800b336:	4293      	cmp	r3, r2
 800b338:	d017      	beq.n	800b36a <TIM_Base_SetConfig+0xaa>
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	4a2d      	ldr	r2, [pc, #180]	; (800b3f4 <TIM_Base_SetConfig+0x134>)
 800b33e:	4293      	cmp	r3, r2
 800b340:	d013      	beq.n	800b36a <TIM_Base_SetConfig+0xaa>
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	4a2c      	ldr	r2, [pc, #176]	; (800b3f8 <TIM_Base_SetConfig+0x138>)
 800b346:	4293      	cmp	r3, r2
 800b348:	d00f      	beq.n	800b36a <TIM_Base_SetConfig+0xaa>
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	4a2b      	ldr	r2, [pc, #172]	; (800b3fc <TIM_Base_SetConfig+0x13c>)
 800b34e:	4293      	cmp	r3, r2
 800b350:	d00b      	beq.n	800b36a <TIM_Base_SetConfig+0xaa>
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	4a2a      	ldr	r2, [pc, #168]	; (800b400 <TIM_Base_SetConfig+0x140>)
 800b356:	4293      	cmp	r3, r2
 800b358:	d007      	beq.n	800b36a <TIM_Base_SetConfig+0xaa>
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	4a29      	ldr	r2, [pc, #164]	; (800b404 <TIM_Base_SetConfig+0x144>)
 800b35e:	4293      	cmp	r3, r2
 800b360:	d003      	beq.n	800b36a <TIM_Base_SetConfig+0xaa>
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	4a28      	ldr	r2, [pc, #160]	; (800b408 <TIM_Base_SetConfig+0x148>)
 800b366:	4293      	cmp	r3, r2
 800b368:	d108      	bne.n	800b37c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b370:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	68db      	ldr	r3, [r3, #12]
 800b376:	68fa      	ldr	r2, [r7, #12]
 800b378:	4313      	orrs	r3, r2
 800b37a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	695b      	ldr	r3, [r3, #20]
 800b386:	4313      	orrs	r3, r2
 800b388:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	68fa      	ldr	r2, [r7, #12]
 800b38e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	689a      	ldr	r2, [r3, #8]
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	681a      	ldr	r2, [r3, #0]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	4a10      	ldr	r2, [pc, #64]	; (800b3e4 <TIM_Base_SetConfig+0x124>)
 800b3a4:	4293      	cmp	r3, r2
 800b3a6:	d00f      	beq.n	800b3c8 <TIM_Base_SetConfig+0x108>
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	4a12      	ldr	r2, [pc, #72]	; (800b3f4 <TIM_Base_SetConfig+0x134>)
 800b3ac:	4293      	cmp	r3, r2
 800b3ae:	d00b      	beq.n	800b3c8 <TIM_Base_SetConfig+0x108>
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	4a11      	ldr	r2, [pc, #68]	; (800b3f8 <TIM_Base_SetConfig+0x138>)
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d007      	beq.n	800b3c8 <TIM_Base_SetConfig+0x108>
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	4a10      	ldr	r2, [pc, #64]	; (800b3fc <TIM_Base_SetConfig+0x13c>)
 800b3bc:	4293      	cmp	r3, r2
 800b3be:	d003      	beq.n	800b3c8 <TIM_Base_SetConfig+0x108>
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	4a0f      	ldr	r2, [pc, #60]	; (800b400 <TIM_Base_SetConfig+0x140>)
 800b3c4:	4293      	cmp	r3, r2
 800b3c6:	d103      	bne.n	800b3d0 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	691a      	ldr	r2, [r3, #16]
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2201      	movs	r2, #1
 800b3d4:	615a      	str	r2, [r3, #20]
}
 800b3d6:	bf00      	nop
 800b3d8:	3714      	adds	r7, #20
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e0:	4770      	bx	lr
 800b3e2:	bf00      	nop
 800b3e4:	40010000 	.word	0x40010000
 800b3e8:	40000400 	.word	0x40000400
 800b3ec:	40000800 	.word	0x40000800
 800b3f0:	40000c00 	.word	0x40000c00
 800b3f4:	40010400 	.word	0x40010400
 800b3f8:	40014000 	.word	0x40014000
 800b3fc:	40014400 	.word	0x40014400
 800b400:	40014800 	.word	0x40014800
 800b404:	4000e000 	.word	0x4000e000
 800b408:	4000e400 	.word	0x4000e400

0800b40c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b40c:	b480      	push	{r7}
 800b40e:	b087      	sub	sp, #28
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	6a1b      	ldr	r3, [r3, #32]
 800b41a:	f023 0201 	bic.w	r2, r3, #1
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	6a1b      	ldr	r3, [r3, #32]
 800b426:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	685b      	ldr	r3, [r3, #4]
 800b42c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	699b      	ldr	r3, [r3, #24]
 800b432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b434:	68fa      	ldr	r2, [r7, #12]
 800b436:	4b37      	ldr	r3, [pc, #220]	; (800b514 <TIM_OC1_SetConfig+0x108>)
 800b438:	4013      	ands	r3, r2
 800b43a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	f023 0303 	bic.w	r3, r3, #3
 800b442:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	68fa      	ldr	r2, [r7, #12]
 800b44a:	4313      	orrs	r3, r2
 800b44c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	f023 0302 	bic.w	r3, r3, #2
 800b454:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	689b      	ldr	r3, [r3, #8]
 800b45a:	697a      	ldr	r2, [r7, #20]
 800b45c:	4313      	orrs	r3, r2
 800b45e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	4a2d      	ldr	r2, [pc, #180]	; (800b518 <TIM_OC1_SetConfig+0x10c>)
 800b464:	4293      	cmp	r3, r2
 800b466:	d00f      	beq.n	800b488 <TIM_OC1_SetConfig+0x7c>
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	4a2c      	ldr	r2, [pc, #176]	; (800b51c <TIM_OC1_SetConfig+0x110>)
 800b46c:	4293      	cmp	r3, r2
 800b46e:	d00b      	beq.n	800b488 <TIM_OC1_SetConfig+0x7c>
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	4a2b      	ldr	r2, [pc, #172]	; (800b520 <TIM_OC1_SetConfig+0x114>)
 800b474:	4293      	cmp	r3, r2
 800b476:	d007      	beq.n	800b488 <TIM_OC1_SetConfig+0x7c>
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	4a2a      	ldr	r2, [pc, #168]	; (800b524 <TIM_OC1_SetConfig+0x118>)
 800b47c:	4293      	cmp	r3, r2
 800b47e:	d003      	beq.n	800b488 <TIM_OC1_SetConfig+0x7c>
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	4a29      	ldr	r2, [pc, #164]	; (800b528 <TIM_OC1_SetConfig+0x11c>)
 800b484:	4293      	cmp	r3, r2
 800b486:	d10c      	bne.n	800b4a2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b488:	697b      	ldr	r3, [r7, #20]
 800b48a:	f023 0308 	bic.w	r3, r3, #8
 800b48e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	68db      	ldr	r3, [r3, #12]
 800b494:	697a      	ldr	r2, [r7, #20]
 800b496:	4313      	orrs	r3, r2
 800b498:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b49a:	697b      	ldr	r3, [r7, #20]
 800b49c:	f023 0304 	bic.w	r3, r3, #4
 800b4a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	4a1c      	ldr	r2, [pc, #112]	; (800b518 <TIM_OC1_SetConfig+0x10c>)
 800b4a6:	4293      	cmp	r3, r2
 800b4a8:	d00f      	beq.n	800b4ca <TIM_OC1_SetConfig+0xbe>
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	4a1b      	ldr	r2, [pc, #108]	; (800b51c <TIM_OC1_SetConfig+0x110>)
 800b4ae:	4293      	cmp	r3, r2
 800b4b0:	d00b      	beq.n	800b4ca <TIM_OC1_SetConfig+0xbe>
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	4a1a      	ldr	r2, [pc, #104]	; (800b520 <TIM_OC1_SetConfig+0x114>)
 800b4b6:	4293      	cmp	r3, r2
 800b4b8:	d007      	beq.n	800b4ca <TIM_OC1_SetConfig+0xbe>
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	4a19      	ldr	r2, [pc, #100]	; (800b524 <TIM_OC1_SetConfig+0x118>)
 800b4be:	4293      	cmp	r3, r2
 800b4c0:	d003      	beq.n	800b4ca <TIM_OC1_SetConfig+0xbe>
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	4a18      	ldr	r2, [pc, #96]	; (800b528 <TIM_OC1_SetConfig+0x11c>)
 800b4c6:	4293      	cmp	r3, r2
 800b4c8:	d111      	bne.n	800b4ee <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b4ca:	693b      	ldr	r3, [r7, #16]
 800b4cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b4d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b4d2:	693b      	ldr	r3, [r7, #16]
 800b4d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b4d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	695b      	ldr	r3, [r3, #20]
 800b4de:	693a      	ldr	r2, [r7, #16]
 800b4e0:	4313      	orrs	r3, r2
 800b4e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	699b      	ldr	r3, [r3, #24]
 800b4e8:	693a      	ldr	r2, [r7, #16]
 800b4ea:	4313      	orrs	r3, r2
 800b4ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	693a      	ldr	r2, [r7, #16]
 800b4f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	68fa      	ldr	r2, [r7, #12]
 800b4f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	685a      	ldr	r2, [r3, #4]
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	697a      	ldr	r2, [r7, #20]
 800b506:	621a      	str	r2, [r3, #32]
}
 800b508:	bf00      	nop
 800b50a:	371c      	adds	r7, #28
 800b50c:	46bd      	mov	sp, r7
 800b50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b512:	4770      	bx	lr
 800b514:	fffeff8f 	.word	0xfffeff8f
 800b518:	40010000 	.word	0x40010000
 800b51c:	40010400 	.word	0x40010400
 800b520:	40014000 	.word	0x40014000
 800b524:	40014400 	.word	0x40014400
 800b528:	40014800 	.word	0x40014800

0800b52c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b52c:	b480      	push	{r7}
 800b52e:	b087      	sub	sp, #28
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
 800b534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6a1b      	ldr	r3, [r3, #32]
 800b53a:	f023 0210 	bic.w	r2, r3, #16
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6a1b      	ldr	r3, [r3, #32]
 800b546:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	685b      	ldr	r3, [r3, #4]
 800b54c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	699b      	ldr	r3, [r3, #24]
 800b552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b554:	68fa      	ldr	r2, [r7, #12]
 800b556:	4b34      	ldr	r3, [pc, #208]	; (800b628 <TIM_OC2_SetConfig+0xfc>)
 800b558:	4013      	ands	r3, r2
 800b55a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b562:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	021b      	lsls	r3, r3, #8
 800b56a:	68fa      	ldr	r2, [r7, #12]
 800b56c:	4313      	orrs	r3, r2
 800b56e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b570:	697b      	ldr	r3, [r7, #20]
 800b572:	f023 0320 	bic.w	r3, r3, #32
 800b576:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	689b      	ldr	r3, [r3, #8]
 800b57c:	011b      	lsls	r3, r3, #4
 800b57e:	697a      	ldr	r2, [r7, #20]
 800b580:	4313      	orrs	r3, r2
 800b582:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	4a29      	ldr	r2, [pc, #164]	; (800b62c <TIM_OC2_SetConfig+0x100>)
 800b588:	4293      	cmp	r3, r2
 800b58a:	d003      	beq.n	800b594 <TIM_OC2_SetConfig+0x68>
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	4a28      	ldr	r2, [pc, #160]	; (800b630 <TIM_OC2_SetConfig+0x104>)
 800b590:	4293      	cmp	r3, r2
 800b592:	d10d      	bne.n	800b5b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b594:	697b      	ldr	r3, [r7, #20]
 800b596:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b59a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	68db      	ldr	r3, [r3, #12]
 800b5a0:	011b      	lsls	r3, r3, #4
 800b5a2:	697a      	ldr	r2, [r7, #20]
 800b5a4:	4313      	orrs	r3, r2
 800b5a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b5a8:	697b      	ldr	r3, [r7, #20]
 800b5aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b5ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	4a1e      	ldr	r2, [pc, #120]	; (800b62c <TIM_OC2_SetConfig+0x100>)
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	d00f      	beq.n	800b5d8 <TIM_OC2_SetConfig+0xac>
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	4a1d      	ldr	r2, [pc, #116]	; (800b630 <TIM_OC2_SetConfig+0x104>)
 800b5bc:	4293      	cmp	r3, r2
 800b5be:	d00b      	beq.n	800b5d8 <TIM_OC2_SetConfig+0xac>
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	4a1c      	ldr	r2, [pc, #112]	; (800b634 <TIM_OC2_SetConfig+0x108>)
 800b5c4:	4293      	cmp	r3, r2
 800b5c6:	d007      	beq.n	800b5d8 <TIM_OC2_SetConfig+0xac>
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	4a1b      	ldr	r2, [pc, #108]	; (800b638 <TIM_OC2_SetConfig+0x10c>)
 800b5cc:	4293      	cmp	r3, r2
 800b5ce:	d003      	beq.n	800b5d8 <TIM_OC2_SetConfig+0xac>
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	4a1a      	ldr	r2, [pc, #104]	; (800b63c <TIM_OC2_SetConfig+0x110>)
 800b5d4:	4293      	cmp	r3, r2
 800b5d6:	d113      	bne.n	800b600 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b5d8:	693b      	ldr	r3, [r7, #16]
 800b5da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b5de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b5e0:	693b      	ldr	r3, [r7, #16]
 800b5e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b5e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	695b      	ldr	r3, [r3, #20]
 800b5ec:	009b      	lsls	r3, r3, #2
 800b5ee:	693a      	ldr	r2, [r7, #16]
 800b5f0:	4313      	orrs	r3, r2
 800b5f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	699b      	ldr	r3, [r3, #24]
 800b5f8:	009b      	lsls	r3, r3, #2
 800b5fa:	693a      	ldr	r2, [r7, #16]
 800b5fc:	4313      	orrs	r3, r2
 800b5fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	693a      	ldr	r2, [r7, #16]
 800b604:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	68fa      	ldr	r2, [r7, #12]
 800b60a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	685a      	ldr	r2, [r3, #4]
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	697a      	ldr	r2, [r7, #20]
 800b618:	621a      	str	r2, [r3, #32]
}
 800b61a:	bf00      	nop
 800b61c:	371c      	adds	r7, #28
 800b61e:	46bd      	mov	sp, r7
 800b620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b624:	4770      	bx	lr
 800b626:	bf00      	nop
 800b628:	feff8fff 	.word	0xfeff8fff
 800b62c:	40010000 	.word	0x40010000
 800b630:	40010400 	.word	0x40010400
 800b634:	40014000 	.word	0x40014000
 800b638:	40014400 	.word	0x40014400
 800b63c:	40014800 	.word	0x40014800

0800b640 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b640:	b480      	push	{r7}
 800b642:	b087      	sub	sp, #28
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
 800b648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	6a1b      	ldr	r3, [r3, #32]
 800b64e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	6a1b      	ldr	r3, [r3, #32]
 800b65a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	685b      	ldr	r3, [r3, #4]
 800b660:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	69db      	ldr	r3, [r3, #28]
 800b666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b668:	68fa      	ldr	r2, [r7, #12]
 800b66a:	4b33      	ldr	r3, [pc, #204]	; (800b738 <TIM_OC3_SetConfig+0xf8>)
 800b66c:	4013      	ands	r3, r2
 800b66e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	f023 0303 	bic.w	r3, r3, #3
 800b676:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	68fa      	ldr	r2, [r7, #12]
 800b67e:	4313      	orrs	r3, r2
 800b680:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b682:	697b      	ldr	r3, [r7, #20]
 800b684:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b688:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	689b      	ldr	r3, [r3, #8]
 800b68e:	021b      	lsls	r3, r3, #8
 800b690:	697a      	ldr	r2, [r7, #20]
 800b692:	4313      	orrs	r3, r2
 800b694:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	4a28      	ldr	r2, [pc, #160]	; (800b73c <TIM_OC3_SetConfig+0xfc>)
 800b69a:	4293      	cmp	r3, r2
 800b69c:	d003      	beq.n	800b6a6 <TIM_OC3_SetConfig+0x66>
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	4a27      	ldr	r2, [pc, #156]	; (800b740 <TIM_OC3_SetConfig+0x100>)
 800b6a2:	4293      	cmp	r3, r2
 800b6a4:	d10d      	bne.n	800b6c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b6a6:	697b      	ldr	r3, [r7, #20]
 800b6a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b6ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	68db      	ldr	r3, [r3, #12]
 800b6b2:	021b      	lsls	r3, r3, #8
 800b6b4:	697a      	ldr	r2, [r7, #20]
 800b6b6:	4313      	orrs	r3, r2
 800b6b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b6ba:	697b      	ldr	r3, [r7, #20]
 800b6bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b6c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	4a1d      	ldr	r2, [pc, #116]	; (800b73c <TIM_OC3_SetConfig+0xfc>)
 800b6c6:	4293      	cmp	r3, r2
 800b6c8:	d00f      	beq.n	800b6ea <TIM_OC3_SetConfig+0xaa>
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	4a1c      	ldr	r2, [pc, #112]	; (800b740 <TIM_OC3_SetConfig+0x100>)
 800b6ce:	4293      	cmp	r3, r2
 800b6d0:	d00b      	beq.n	800b6ea <TIM_OC3_SetConfig+0xaa>
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	4a1b      	ldr	r2, [pc, #108]	; (800b744 <TIM_OC3_SetConfig+0x104>)
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	d007      	beq.n	800b6ea <TIM_OC3_SetConfig+0xaa>
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	4a1a      	ldr	r2, [pc, #104]	; (800b748 <TIM_OC3_SetConfig+0x108>)
 800b6de:	4293      	cmp	r3, r2
 800b6e0:	d003      	beq.n	800b6ea <TIM_OC3_SetConfig+0xaa>
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	4a19      	ldr	r2, [pc, #100]	; (800b74c <TIM_OC3_SetConfig+0x10c>)
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	d113      	bne.n	800b712 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b6ea:	693b      	ldr	r3, [r7, #16]
 800b6ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b6f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b6f2:	693b      	ldr	r3, [r7, #16]
 800b6f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b6f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	695b      	ldr	r3, [r3, #20]
 800b6fe:	011b      	lsls	r3, r3, #4
 800b700:	693a      	ldr	r2, [r7, #16]
 800b702:	4313      	orrs	r3, r2
 800b704:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	699b      	ldr	r3, [r3, #24]
 800b70a:	011b      	lsls	r3, r3, #4
 800b70c:	693a      	ldr	r2, [r7, #16]
 800b70e:	4313      	orrs	r3, r2
 800b710:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	693a      	ldr	r2, [r7, #16]
 800b716:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	68fa      	ldr	r2, [r7, #12]
 800b71c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	685a      	ldr	r2, [r3, #4]
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	697a      	ldr	r2, [r7, #20]
 800b72a:	621a      	str	r2, [r3, #32]
}
 800b72c:	bf00      	nop
 800b72e:	371c      	adds	r7, #28
 800b730:	46bd      	mov	sp, r7
 800b732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b736:	4770      	bx	lr
 800b738:	fffeff8f 	.word	0xfffeff8f
 800b73c:	40010000 	.word	0x40010000
 800b740:	40010400 	.word	0x40010400
 800b744:	40014000 	.word	0x40014000
 800b748:	40014400 	.word	0x40014400
 800b74c:	40014800 	.word	0x40014800

0800b750 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b750:	b480      	push	{r7}
 800b752:	b087      	sub	sp, #28
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
 800b758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6a1b      	ldr	r3, [r3, #32]
 800b75e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	6a1b      	ldr	r3, [r3, #32]
 800b76a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	685b      	ldr	r3, [r3, #4]
 800b770:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	69db      	ldr	r3, [r3, #28]
 800b776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b778:	68fa      	ldr	r2, [r7, #12]
 800b77a:	4b24      	ldr	r3, [pc, #144]	; (800b80c <TIM_OC4_SetConfig+0xbc>)
 800b77c:	4013      	ands	r3, r2
 800b77e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b786:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	021b      	lsls	r3, r3, #8
 800b78e:	68fa      	ldr	r2, [r7, #12]
 800b790:	4313      	orrs	r3, r2
 800b792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b794:	693b      	ldr	r3, [r7, #16]
 800b796:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b79a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	689b      	ldr	r3, [r3, #8]
 800b7a0:	031b      	lsls	r3, r3, #12
 800b7a2:	693a      	ldr	r2, [r7, #16]
 800b7a4:	4313      	orrs	r3, r2
 800b7a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	4a19      	ldr	r2, [pc, #100]	; (800b810 <TIM_OC4_SetConfig+0xc0>)
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	d00f      	beq.n	800b7d0 <TIM_OC4_SetConfig+0x80>
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	4a18      	ldr	r2, [pc, #96]	; (800b814 <TIM_OC4_SetConfig+0xc4>)
 800b7b4:	4293      	cmp	r3, r2
 800b7b6:	d00b      	beq.n	800b7d0 <TIM_OC4_SetConfig+0x80>
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	4a17      	ldr	r2, [pc, #92]	; (800b818 <TIM_OC4_SetConfig+0xc8>)
 800b7bc:	4293      	cmp	r3, r2
 800b7be:	d007      	beq.n	800b7d0 <TIM_OC4_SetConfig+0x80>
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	4a16      	ldr	r2, [pc, #88]	; (800b81c <TIM_OC4_SetConfig+0xcc>)
 800b7c4:	4293      	cmp	r3, r2
 800b7c6:	d003      	beq.n	800b7d0 <TIM_OC4_SetConfig+0x80>
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	4a15      	ldr	r2, [pc, #84]	; (800b820 <TIM_OC4_SetConfig+0xd0>)
 800b7cc:	4293      	cmp	r3, r2
 800b7ce:	d109      	bne.n	800b7e4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b7d0:	697b      	ldr	r3, [r7, #20]
 800b7d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b7d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	695b      	ldr	r3, [r3, #20]
 800b7dc:	019b      	lsls	r3, r3, #6
 800b7de:	697a      	ldr	r2, [r7, #20]
 800b7e0:	4313      	orrs	r3, r2
 800b7e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	697a      	ldr	r2, [r7, #20]
 800b7e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	68fa      	ldr	r2, [r7, #12]
 800b7ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	685a      	ldr	r2, [r3, #4]
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	693a      	ldr	r2, [r7, #16]
 800b7fc:	621a      	str	r2, [r3, #32]
}
 800b7fe:	bf00      	nop
 800b800:	371c      	adds	r7, #28
 800b802:	46bd      	mov	sp, r7
 800b804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b808:	4770      	bx	lr
 800b80a:	bf00      	nop
 800b80c:	feff8fff 	.word	0xfeff8fff
 800b810:	40010000 	.word	0x40010000
 800b814:	40010400 	.word	0x40010400
 800b818:	40014000 	.word	0x40014000
 800b81c:	40014400 	.word	0x40014400
 800b820:	40014800 	.word	0x40014800

0800b824 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b824:	b480      	push	{r7}
 800b826:	b087      	sub	sp, #28
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
 800b82c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	6a1b      	ldr	r3, [r3, #32]
 800b832:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6a1b      	ldr	r3, [r3, #32]
 800b83e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	685b      	ldr	r3, [r3, #4]
 800b844:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b84a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b84c:	68fa      	ldr	r2, [r7, #12]
 800b84e:	4b21      	ldr	r3, [pc, #132]	; (800b8d4 <TIM_OC5_SetConfig+0xb0>)
 800b850:	4013      	ands	r3, r2
 800b852:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	68fa      	ldr	r2, [r7, #12]
 800b85a:	4313      	orrs	r3, r2
 800b85c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b85e:	693b      	ldr	r3, [r7, #16]
 800b860:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b864:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	689b      	ldr	r3, [r3, #8]
 800b86a:	041b      	lsls	r3, r3, #16
 800b86c:	693a      	ldr	r2, [r7, #16]
 800b86e:	4313      	orrs	r3, r2
 800b870:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	4a18      	ldr	r2, [pc, #96]	; (800b8d8 <TIM_OC5_SetConfig+0xb4>)
 800b876:	4293      	cmp	r3, r2
 800b878:	d00f      	beq.n	800b89a <TIM_OC5_SetConfig+0x76>
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	4a17      	ldr	r2, [pc, #92]	; (800b8dc <TIM_OC5_SetConfig+0xb8>)
 800b87e:	4293      	cmp	r3, r2
 800b880:	d00b      	beq.n	800b89a <TIM_OC5_SetConfig+0x76>
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	4a16      	ldr	r2, [pc, #88]	; (800b8e0 <TIM_OC5_SetConfig+0xbc>)
 800b886:	4293      	cmp	r3, r2
 800b888:	d007      	beq.n	800b89a <TIM_OC5_SetConfig+0x76>
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	4a15      	ldr	r2, [pc, #84]	; (800b8e4 <TIM_OC5_SetConfig+0xc0>)
 800b88e:	4293      	cmp	r3, r2
 800b890:	d003      	beq.n	800b89a <TIM_OC5_SetConfig+0x76>
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	4a14      	ldr	r2, [pc, #80]	; (800b8e8 <TIM_OC5_SetConfig+0xc4>)
 800b896:	4293      	cmp	r3, r2
 800b898:	d109      	bne.n	800b8ae <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b8a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	695b      	ldr	r3, [r3, #20]
 800b8a6:	021b      	lsls	r3, r3, #8
 800b8a8:	697a      	ldr	r2, [r7, #20]
 800b8aa:	4313      	orrs	r3, r2
 800b8ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	697a      	ldr	r2, [r7, #20]
 800b8b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	68fa      	ldr	r2, [r7, #12]
 800b8b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	685a      	ldr	r2, [r3, #4]
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	693a      	ldr	r2, [r7, #16]
 800b8c6:	621a      	str	r2, [r3, #32]
}
 800b8c8:	bf00      	nop
 800b8ca:	371c      	adds	r7, #28
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d2:	4770      	bx	lr
 800b8d4:	fffeff8f 	.word	0xfffeff8f
 800b8d8:	40010000 	.word	0x40010000
 800b8dc:	40010400 	.word	0x40010400
 800b8e0:	40014000 	.word	0x40014000
 800b8e4:	40014400 	.word	0x40014400
 800b8e8:	40014800 	.word	0x40014800

0800b8ec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b8ec:	b480      	push	{r7}
 800b8ee:	b087      	sub	sp, #28
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
 800b8f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	6a1b      	ldr	r3, [r3, #32]
 800b8fa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	6a1b      	ldr	r3, [r3, #32]
 800b906:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	685b      	ldr	r3, [r3, #4]
 800b90c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b914:	68fa      	ldr	r2, [r7, #12]
 800b916:	4b22      	ldr	r3, [pc, #136]	; (800b9a0 <TIM_OC6_SetConfig+0xb4>)
 800b918:	4013      	ands	r3, r2
 800b91a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	021b      	lsls	r3, r3, #8
 800b922:	68fa      	ldr	r2, [r7, #12]
 800b924:	4313      	orrs	r3, r2
 800b926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b928:	693b      	ldr	r3, [r7, #16]
 800b92a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b92e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	689b      	ldr	r3, [r3, #8]
 800b934:	051b      	lsls	r3, r3, #20
 800b936:	693a      	ldr	r2, [r7, #16]
 800b938:	4313      	orrs	r3, r2
 800b93a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	4a19      	ldr	r2, [pc, #100]	; (800b9a4 <TIM_OC6_SetConfig+0xb8>)
 800b940:	4293      	cmp	r3, r2
 800b942:	d00f      	beq.n	800b964 <TIM_OC6_SetConfig+0x78>
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	4a18      	ldr	r2, [pc, #96]	; (800b9a8 <TIM_OC6_SetConfig+0xbc>)
 800b948:	4293      	cmp	r3, r2
 800b94a:	d00b      	beq.n	800b964 <TIM_OC6_SetConfig+0x78>
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	4a17      	ldr	r2, [pc, #92]	; (800b9ac <TIM_OC6_SetConfig+0xc0>)
 800b950:	4293      	cmp	r3, r2
 800b952:	d007      	beq.n	800b964 <TIM_OC6_SetConfig+0x78>
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	4a16      	ldr	r2, [pc, #88]	; (800b9b0 <TIM_OC6_SetConfig+0xc4>)
 800b958:	4293      	cmp	r3, r2
 800b95a:	d003      	beq.n	800b964 <TIM_OC6_SetConfig+0x78>
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	4a15      	ldr	r2, [pc, #84]	; (800b9b4 <TIM_OC6_SetConfig+0xc8>)
 800b960:	4293      	cmp	r3, r2
 800b962:	d109      	bne.n	800b978 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b964:	697b      	ldr	r3, [r7, #20]
 800b966:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b96a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	695b      	ldr	r3, [r3, #20]
 800b970:	029b      	lsls	r3, r3, #10
 800b972:	697a      	ldr	r2, [r7, #20]
 800b974:	4313      	orrs	r3, r2
 800b976:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	697a      	ldr	r2, [r7, #20]
 800b97c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	68fa      	ldr	r2, [r7, #12]
 800b982:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	685a      	ldr	r2, [r3, #4]
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	693a      	ldr	r2, [r7, #16]
 800b990:	621a      	str	r2, [r3, #32]
}
 800b992:	bf00      	nop
 800b994:	371c      	adds	r7, #28
 800b996:	46bd      	mov	sp, r7
 800b998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99c:	4770      	bx	lr
 800b99e:	bf00      	nop
 800b9a0:	feff8fff 	.word	0xfeff8fff
 800b9a4:	40010000 	.word	0x40010000
 800b9a8:	40010400 	.word	0x40010400
 800b9ac:	40014000 	.word	0x40014000
 800b9b0:	40014400 	.word	0x40014400
 800b9b4:	40014800 	.word	0x40014800

0800b9b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b087      	sub	sp, #28
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	60f8      	str	r0, [r7, #12]
 800b9c0:	60b9      	str	r1, [r7, #8]
 800b9c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	6a1b      	ldr	r3, [r3, #32]
 800b9c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	6a1b      	ldr	r3, [r3, #32]
 800b9ce:	f023 0201 	bic.w	r2, r3, #1
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	699b      	ldr	r3, [r3, #24]
 800b9da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b9dc:	693b      	ldr	r3, [r7, #16]
 800b9de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b9e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	011b      	lsls	r3, r3, #4
 800b9e8:	693a      	ldr	r2, [r7, #16]
 800b9ea:	4313      	orrs	r3, r2
 800b9ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b9ee:	697b      	ldr	r3, [r7, #20]
 800b9f0:	f023 030a 	bic.w	r3, r3, #10
 800b9f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b9f6:	697a      	ldr	r2, [r7, #20]
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	4313      	orrs	r3, r2
 800b9fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	693a      	ldr	r2, [r7, #16]
 800ba02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	697a      	ldr	r2, [r7, #20]
 800ba08:	621a      	str	r2, [r3, #32]
}
 800ba0a:	bf00      	nop
 800ba0c:	371c      	adds	r7, #28
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba14:	4770      	bx	lr

0800ba16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ba16:	b480      	push	{r7}
 800ba18:	b087      	sub	sp, #28
 800ba1a:	af00      	add	r7, sp, #0
 800ba1c:	60f8      	str	r0, [r7, #12]
 800ba1e:	60b9      	str	r1, [r7, #8]
 800ba20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	6a1b      	ldr	r3, [r3, #32]
 800ba26:	f023 0210 	bic.w	r2, r3, #16
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	699b      	ldr	r3, [r3, #24]
 800ba32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	6a1b      	ldr	r3, [r3, #32]
 800ba38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ba3a:	697b      	ldr	r3, [r7, #20]
 800ba3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ba40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	031b      	lsls	r3, r3, #12
 800ba46:	697a      	ldr	r2, [r7, #20]
 800ba48:	4313      	orrs	r3, r2
 800ba4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ba4c:	693b      	ldr	r3, [r7, #16]
 800ba4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ba52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	011b      	lsls	r3, r3, #4
 800ba58:	693a      	ldr	r2, [r7, #16]
 800ba5a:	4313      	orrs	r3, r2
 800ba5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	697a      	ldr	r2, [r7, #20]
 800ba62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	693a      	ldr	r2, [r7, #16]
 800ba68:	621a      	str	r2, [r3, #32]
}
 800ba6a:	bf00      	nop
 800ba6c:	371c      	adds	r7, #28
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba74:	4770      	bx	lr
	...

0800ba78 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ba78:	b480      	push	{r7}
 800ba7a:	b085      	sub	sp, #20
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
 800ba80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	689b      	ldr	r3, [r3, #8]
 800ba86:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ba88:	68fa      	ldr	r2, [r7, #12]
 800ba8a:	4b09      	ldr	r3, [pc, #36]	; (800bab0 <TIM_ITRx_SetConfig+0x38>)
 800ba8c:	4013      	ands	r3, r2
 800ba8e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ba90:	683a      	ldr	r2, [r7, #0]
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	4313      	orrs	r3, r2
 800ba96:	f043 0307 	orr.w	r3, r3, #7
 800ba9a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	68fa      	ldr	r2, [r7, #12]
 800baa0:	609a      	str	r2, [r3, #8]
}
 800baa2:	bf00      	nop
 800baa4:	3714      	adds	r7, #20
 800baa6:	46bd      	mov	sp, r7
 800baa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baac:	4770      	bx	lr
 800baae:	bf00      	nop
 800bab0:	ffcfff8f 	.word	0xffcfff8f

0800bab4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bab4:	b480      	push	{r7}
 800bab6:	b087      	sub	sp, #28
 800bab8:	af00      	add	r7, sp, #0
 800baba:	60f8      	str	r0, [r7, #12]
 800babc:	60b9      	str	r1, [r7, #8]
 800babe:	607a      	str	r2, [r7, #4]
 800bac0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	689b      	ldr	r3, [r3, #8]
 800bac6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bac8:	697b      	ldr	r3, [r7, #20]
 800baca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bace:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	021a      	lsls	r2, r3, #8
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	431a      	orrs	r2, r3
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	4313      	orrs	r3, r2
 800badc:	697a      	ldr	r2, [r7, #20]
 800bade:	4313      	orrs	r3, r2
 800bae0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	697a      	ldr	r2, [r7, #20]
 800bae6:	609a      	str	r2, [r3, #8]
}
 800bae8:	bf00      	nop
 800baea:	371c      	adds	r7, #28
 800baec:	46bd      	mov	sp, r7
 800baee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf2:	4770      	bx	lr

0800baf4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800baf4:	b480      	push	{r7}
 800baf6:	b087      	sub	sp, #28
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	60f8      	str	r0, [r7, #12]
 800bafc:	60b9      	str	r1, [r7, #8]
 800bafe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	f003 031f 	and.w	r3, r3, #31
 800bb06:	2201      	movs	r2, #1
 800bb08:	fa02 f303 	lsl.w	r3, r2, r3
 800bb0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	6a1a      	ldr	r2, [r3, #32]
 800bb12:	697b      	ldr	r3, [r7, #20]
 800bb14:	43db      	mvns	r3, r3
 800bb16:	401a      	ands	r2, r3
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	6a1a      	ldr	r2, [r3, #32]
 800bb20:	68bb      	ldr	r3, [r7, #8]
 800bb22:	f003 031f 	and.w	r3, r3, #31
 800bb26:	6879      	ldr	r1, [r7, #4]
 800bb28:	fa01 f303 	lsl.w	r3, r1, r3
 800bb2c:	431a      	orrs	r2, r3
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	621a      	str	r2, [r3, #32]
}
 800bb32:	bf00      	nop
 800bb34:	371c      	adds	r7, #28
 800bb36:	46bd      	mov	sp, r7
 800bb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3c:	4770      	bx	lr
	...

0800bb40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bb40:	b480      	push	{r7}
 800bb42:	b085      	sub	sp, #20
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
 800bb48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb50:	2b01      	cmp	r3, #1
 800bb52:	d101      	bne.n	800bb58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bb54:	2302      	movs	r3, #2
 800bb56:	e077      	b.n	800bc48 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2201      	movs	r2, #1
 800bb5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2202      	movs	r2, #2
 800bb64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	685b      	ldr	r3, [r3, #4]
 800bb6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	689b      	ldr	r3, [r3, #8]
 800bb76:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	4a35      	ldr	r2, [pc, #212]	; (800bc54 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bb7e:	4293      	cmp	r3, r2
 800bb80:	d004      	beq.n	800bb8c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	4a34      	ldr	r2, [pc, #208]	; (800bc58 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bb88:	4293      	cmp	r3, r2
 800bb8a:	d108      	bne.n	800bb9e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bb92:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	685b      	ldr	r3, [r3, #4]
 800bb98:	68fa      	ldr	r2, [r7, #12]
 800bb9a:	4313      	orrs	r3, r2
 800bb9c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bba4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	68fa      	ldr	r2, [r7, #12]
 800bbac:	4313      	orrs	r3, r2
 800bbae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	68fa      	ldr	r2, [r7, #12]
 800bbb6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	4a25      	ldr	r2, [pc, #148]	; (800bc54 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bbbe:	4293      	cmp	r3, r2
 800bbc0:	d02c      	beq.n	800bc1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bbca:	d027      	beq.n	800bc1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	4a22      	ldr	r2, [pc, #136]	; (800bc5c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800bbd2:	4293      	cmp	r3, r2
 800bbd4:	d022      	beq.n	800bc1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	4a21      	ldr	r2, [pc, #132]	; (800bc60 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800bbdc:	4293      	cmp	r3, r2
 800bbde:	d01d      	beq.n	800bc1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	4a1f      	ldr	r2, [pc, #124]	; (800bc64 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800bbe6:	4293      	cmp	r3, r2
 800bbe8:	d018      	beq.n	800bc1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	4a1a      	ldr	r2, [pc, #104]	; (800bc58 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bbf0:	4293      	cmp	r3, r2
 800bbf2:	d013      	beq.n	800bc1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	4a1b      	ldr	r2, [pc, #108]	; (800bc68 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800bbfa:	4293      	cmp	r3, r2
 800bbfc:	d00e      	beq.n	800bc1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	4a1a      	ldr	r2, [pc, #104]	; (800bc6c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800bc04:	4293      	cmp	r3, r2
 800bc06:	d009      	beq.n	800bc1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	4a18      	ldr	r2, [pc, #96]	; (800bc70 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800bc0e:	4293      	cmp	r3, r2
 800bc10:	d004      	beq.n	800bc1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	4a17      	ldr	r2, [pc, #92]	; (800bc74 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800bc18:	4293      	cmp	r3, r2
 800bc1a:	d10c      	bne.n	800bc36 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bc22:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	689b      	ldr	r3, [r3, #8]
 800bc28:	68ba      	ldr	r2, [r7, #8]
 800bc2a:	4313      	orrs	r3, r2
 800bc2c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	68ba      	ldr	r2, [r7, #8]
 800bc34:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	2201      	movs	r2, #1
 800bc3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	2200      	movs	r2, #0
 800bc42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bc46:	2300      	movs	r3, #0
}
 800bc48:	4618      	mov	r0, r3
 800bc4a:	3714      	adds	r7, #20
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc52:	4770      	bx	lr
 800bc54:	40010000 	.word	0x40010000
 800bc58:	40010400 	.word	0x40010400
 800bc5c:	40000400 	.word	0x40000400
 800bc60:	40000800 	.word	0x40000800
 800bc64:	40000c00 	.word	0x40000c00
 800bc68:	40001800 	.word	0x40001800
 800bc6c:	40014000 	.word	0x40014000
 800bc70:	4000e000 	.word	0x4000e000
 800bc74:	4000e400 	.word	0x4000e400

0800bc78 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bc78:	b480      	push	{r7}
 800bc7a:	b085      	sub	sp, #20
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
 800bc80:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bc82:	2300      	movs	r3, #0
 800bc84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc8c:	2b01      	cmp	r3, #1
 800bc8e:	d101      	bne.n	800bc94 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bc90:	2302      	movs	r3, #2
 800bc92:	e087      	b.n	800bda4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2201      	movs	r2, #1
 800bc98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	68db      	ldr	r3, [r3, #12]
 800bca6:	4313      	orrs	r3, r2
 800bca8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	689b      	ldr	r3, [r3, #8]
 800bcb4:	4313      	orrs	r3, r2
 800bcb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	685b      	ldr	r3, [r3, #4]
 800bcc2:	4313      	orrs	r3, r2
 800bcc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	4313      	orrs	r3, r2
 800bcd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	691b      	ldr	r3, [r3, #16]
 800bcde:	4313      	orrs	r3, r2
 800bce0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	695b      	ldr	r3, [r3, #20]
 800bcec:	4313      	orrs	r3, r2
 800bcee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcfa:	4313      	orrs	r3, r2
 800bcfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	699b      	ldr	r3, [r3, #24]
 800bd08:	041b      	lsls	r3, r3, #16
 800bd0a:	4313      	orrs	r3, r2
 800bd0c:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	4a27      	ldr	r2, [pc, #156]	; (800bdb0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800bd14:	4293      	cmp	r3, r2
 800bd16:	d004      	beq.n	800bd22 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	4a25      	ldr	r2, [pc, #148]	; (800bdb4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800bd1e:	4293      	cmp	r3, r2
 800bd20:	d106      	bne.n	800bd30 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	69db      	ldr	r3, [r3, #28]
 800bd2c:	4313      	orrs	r3, r2
 800bd2e:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	4a1e      	ldr	r2, [pc, #120]	; (800bdb0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800bd36:	4293      	cmp	r3, r2
 800bd38:	d004      	beq.n	800bd44 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	4a1d      	ldr	r2, [pc, #116]	; (800bdb4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800bd40:	4293      	cmp	r3, r2
 800bd42:	d126      	bne.n	800bd92 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd4e:	051b      	lsls	r3, r3, #20
 800bd50:	4313      	orrs	r3, r2
 800bd52:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	6a1b      	ldr	r3, [r3, #32]
 800bd5e:	4313      	orrs	r3, r2
 800bd60:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd6c:	4313      	orrs	r3, r2
 800bd6e:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	4a0e      	ldr	r2, [pc, #56]	; (800bdb0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800bd76:	4293      	cmp	r3, r2
 800bd78:	d004      	beq.n	800bd84 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	4a0d      	ldr	r2, [pc, #52]	; (800bdb4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800bd80:	4293      	cmp	r3, r2
 800bd82:	d106      	bne.n	800bd92 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd8e:	4313      	orrs	r3, r2
 800bd90:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	68fa      	ldr	r2, [r7, #12]
 800bd98:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bda2:	2300      	movs	r3, #0
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	3714      	adds	r7, #20
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdae:	4770      	bx	lr
 800bdb0:	40010000 	.word	0x40010000
 800bdb4:	40010400 	.word	0x40010400

0800bdb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bdb8:	b480      	push	{r7}
 800bdba:	b083      	sub	sp, #12
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bdc0:	bf00      	nop
 800bdc2:	370c      	adds	r7, #12
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdca:	4770      	bx	lr

0800bdcc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bdcc:	b480      	push	{r7}
 800bdce:	b083      	sub	sp, #12
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bdd4:	bf00      	nop
 800bdd6:	370c      	adds	r7, #12
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdde:	4770      	bx	lr

0800bde0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bde0:	b480      	push	{r7}
 800bde2:	b083      	sub	sp, #12
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bde8:	bf00      	nop
 800bdea:	370c      	adds	r7, #12
 800bdec:	46bd      	mov	sp, r7
 800bdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf2:	4770      	bx	lr

0800bdf4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b082      	sub	sp, #8
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d101      	bne.n	800be06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800be02:	2301      	movs	r3, #1
 800be04:	e042      	b.n	800be8c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d106      	bne.n	800be1e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2200      	movs	r2, #0
 800be14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	f7f8 fa53 	bl	80042c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2224      	movs	r2, #36	; 0x24
 800be22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	681a      	ldr	r2, [r3, #0]
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	f022 0201 	bic.w	r2, r2, #1
 800be34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f000 fce6 	bl	800c808 <UART_SetConfig>
 800be3c:	4603      	mov	r3, r0
 800be3e:	2b01      	cmp	r3, #1
 800be40:	d101      	bne.n	800be46 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800be42:	2301      	movs	r3, #1
 800be44:	e022      	b.n	800be8c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d002      	beq.n	800be54 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f001 fb46 	bl	800d4e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	685a      	ldr	r2, [r3, #4]
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800be62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	689a      	ldr	r2, [r3, #8]
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800be72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	681a      	ldr	r2, [r3, #0]
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	f042 0201 	orr.w	r2, r2, #1
 800be82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800be84:	6878      	ldr	r0, [r7, #4]
 800be86:	f001 fbcd 	bl	800d624 <UART_CheckIdleState>
 800be8a:	4603      	mov	r3, r0
}
 800be8c:	4618      	mov	r0, r3
 800be8e:	3708      	adds	r7, #8
 800be90:	46bd      	mov	sp, r7
 800be92:	bd80      	pop	{r7, pc}

0800be94 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b08a      	sub	sp, #40	; 0x28
 800be98:	af00      	add	r7, sp, #0
 800be9a:	60f8      	str	r0, [r7, #12]
 800be9c:	60b9      	str	r1, [r7, #8]
 800be9e:	4613      	mov	r3, r2
 800bea0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bea8:	2b20      	cmp	r3, #32
 800beaa:	d167      	bne.n	800bf7c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800beac:	68bb      	ldr	r3, [r7, #8]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d002      	beq.n	800beb8 <HAL_UART_Transmit_DMA+0x24>
 800beb2:	88fb      	ldrh	r3, [r7, #6]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d101      	bne.n	800bebc <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800beb8:	2301      	movs	r3, #1
 800beba:	e060      	b.n	800bf7e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	68ba      	ldr	r2, [r7, #8]
 800bec0:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	88fa      	ldrh	r2, [r7, #6]
 800bec6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	88fa      	ldrh	r2, [r7, #6]
 800bece:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	2200      	movs	r2, #0
 800bed6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	2221      	movs	r2, #33	; 0x21
 800bede:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d028      	beq.n	800bf3c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800beee:	4a26      	ldr	r2, [pc, #152]	; (800bf88 <HAL_UART_Transmit_DMA+0xf4>)
 800bef0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bef6:	4a25      	ldr	r2, [pc, #148]	; (800bf8c <HAL_UART_Transmit_DMA+0xf8>)
 800bef8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800befe:	4a24      	ldr	r2, [pc, #144]	; (800bf90 <HAL_UART_Transmit_DMA+0xfc>)
 800bf00:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf06:	2200      	movs	r2, #0
 800bf08:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf12:	4619      	mov	r1, r3
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	3328      	adds	r3, #40	; 0x28
 800bf1a:	461a      	mov	r2, r3
 800bf1c:	88fb      	ldrh	r3, [r7, #6]
 800bf1e:	f7f9 f8f1 	bl	8005104 <HAL_DMA_Start_IT>
 800bf22:	4603      	mov	r3, r0
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d009      	beq.n	800bf3c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	2210      	movs	r2, #16
 800bf2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	2220      	movs	r2, #32
 800bf34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800bf38:	2301      	movs	r3, #1
 800bf3a:	e020      	b.n	800bf7e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	2240      	movs	r2, #64	; 0x40
 800bf42:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	3308      	adds	r3, #8
 800bf4a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf4c:	697b      	ldr	r3, [r7, #20]
 800bf4e:	e853 3f00 	ldrex	r3, [r3]
 800bf52:	613b      	str	r3, [r7, #16]
   return(result);
 800bf54:	693b      	ldr	r3, [r7, #16]
 800bf56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf5a:	627b      	str	r3, [r7, #36]	; 0x24
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	3308      	adds	r3, #8
 800bf62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf64:	623a      	str	r2, [r7, #32]
 800bf66:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf68:	69f9      	ldr	r1, [r7, #28]
 800bf6a:	6a3a      	ldr	r2, [r7, #32]
 800bf6c:	e841 2300 	strex	r3, r2, [r1]
 800bf70:	61bb      	str	r3, [r7, #24]
   return(result);
 800bf72:	69bb      	ldr	r3, [r7, #24]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d1e5      	bne.n	800bf44 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800bf78:	2300      	movs	r3, #0
 800bf7a:	e000      	b.n	800bf7e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800bf7c:	2302      	movs	r3, #2
  }
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	3728      	adds	r7, #40	; 0x28
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}
 800bf86:	bf00      	nop
 800bf88:	0800dae5 	.word	0x0800dae5
 800bf8c:	0800db7b 	.word	0x0800db7b
 800bf90:	0800dcfd 	.word	0x0800dcfd

0800bf94 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b08a      	sub	sp, #40	; 0x28
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	60f8      	str	r0, [r7, #12]
 800bf9c:	60b9      	str	r1, [r7, #8]
 800bf9e:	4613      	mov	r3, r2
 800bfa0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bfa8:	2b20      	cmp	r3, #32
 800bfaa:	d137      	bne.n	800c01c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d002      	beq.n	800bfb8 <HAL_UART_Receive_DMA+0x24>
 800bfb2:	88fb      	ldrh	r3, [r7, #6]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d101      	bne.n	800bfbc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800bfb8:	2301      	movs	r3, #1
 800bfba:	e030      	b.n	800c01e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	4a18      	ldr	r2, [pc, #96]	; (800c028 <HAL_UART_Receive_DMA+0x94>)
 800bfc8:	4293      	cmp	r3, r2
 800bfca:	d01f      	beq.n	800c00c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	685b      	ldr	r3, [r3, #4]
 800bfd2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d018      	beq.n	800c00c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfe0:	697b      	ldr	r3, [r7, #20]
 800bfe2:	e853 3f00 	ldrex	r3, [r3]
 800bfe6:	613b      	str	r3, [r7, #16]
   return(result);
 800bfe8:	693b      	ldr	r3, [r7, #16]
 800bfea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bfee:	627b      	str	r3, [r7, #36]	; 0x24
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	461a      	mov	r2, r3
 800bff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bff8:	623b      	str	r3, [r7, #32]
 800bffa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bffc:	69f9      	ldr	r1, [r7, #28]
 800bffe:	6a3a      	ldr	r2, [r7, #32]
 800c000:	e841 2300 	strex	r3, r2, [r1]
 800c004:	61bb      	str	r3, [r7, #24]
   return(result);
 800c006:	69bb      	ldr	r3, [r7, #24]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d1e6      	bne.n	800bfda <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c00c:	88fb      	ldrh	r3, [r7, #6]
 800c00e:	461a      	mov	r2, r3
 800c010:	68b9      	ldr	r1, [r7, #8]
 800c012:	68f8      	ldr	r0, [r7, #12]
 800c014:	f001 fc18 	bl	800d848 <UART_Start_Receive_DMA>
 800c018:	4603      	mov	r3, r0
 800c01a:	e000      	b.n	800c01e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c01c:	2302      	movs	r3, #2
  }
}
 800c01e:	4618      	mov	r0, r3
 800c020:	3728      	adds	r7, #40	; 0x28
 800c022:	46bd      	mov	sp, r7
 800c024:	bd80      	pop	{r7, pc}
 800c026:	bf00      	nop
 800c028:	58000c00 	.word	0x58000c00

0800c02c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b0ba      	sub	sp, #232	; 0xe8
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	69db      	ldr	r3, [r3, #28]
 800c03a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	689b      	ldr	r3, [r3, #8]
 800c04e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c052:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c056:	f640 030f 	movw	r3, #2063	; 0x80f
 800c05a:	4013      	ands	r3, r2
 800c05c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c060:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c064:	2b00      	cmp	r3, #0
 800c066:	d11b      	bne.n	800c0a0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c06c:	f003 0320 	and.w	r3, r3, #32
 800c070:	2b00      	cmp	r3, #0
 800c072:	d015      	beq.n	800c0a0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c078:	f003 0320 	and.w	r3, r3, #32
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d105      	bne.n	800c08c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c080:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d009      	beq.n	800c0a0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c090:	2b00      	cmp	r3, #0
 800c092:	f000 8377 	beq.w	800c784 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c09a:	6878      	ldr	r0, [r7, #4]
 800c09c:	4798      	blx	r3
      }
      return;
 800c09e:	e371      	b.n	800c784 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c0a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	f000 8123 	beq.w	800c2f0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c0aa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c0ae:	4b8d      	ldr	r3, [pc, #564]	; (800c2e4 <HAL_UART_IRQHandler+0x2b8>)
 800c0b0:	4013      	ands	r3, r2
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d106      	bne.n	800c0c4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c0b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c0ba:	4b8b      	ldr	r3, [pc, #556]	; (800c2e8 <HAL_UART_IRQHandler+0x2bc>)
 800c0bc:	4013      	ands	r3, r2
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	f000 8116 	beq.w	800c2f0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c0c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0c8:	f003 0301 	and.w	r3, r3, #1
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d011      	beq.n	800c0f4 <HAL_UART_IRQHandler+0xc8>
 800c0d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d00b      	beq.n	800c0f4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	2201      	movs	r2, #1
 800c0e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0ea:	f043 0201 	orr.w	r2, r3, #1
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c0f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0f8:	f003 0302 	and.w	r3, r3, #2
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d011      	beq.n	800c124 <HAL_UART_IRQHandler+0xf8>
 800c100:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c104:	f003 0301 	and.w	r3, r3, #1
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d00b      	beq.n	800c124 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	2202      	movs	r2, #2
 800c112:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c11a:	f043 0204 	orr.w	r2, r3, #4
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c128:	f003 0304 	and.w	r3, r3, #4
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d011      	beq.n	800c154 <HAL_UART_IRQHandler+0x128>
 800c130:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c134:	f003 0301 	and.w	r3, r3, #1
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d00b      	beq.n	800c154 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	2204      	movs	r2, #4
 800c142:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c14a:	f043 0202 	orr.w	r2, r3, #2
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c158:	f003 0308 	and.w	r3, r3, #8
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d017      	beq.n	800c190 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c164:	f003 0320 	and.w	r3, r3, #32
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d105      	bne.n	800c178 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c16c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c170:	4b5c      	ldr	r3, [pc, #368]	; (800c2e4 <HAL_UART_IRQHandler+0x2b8>)
 800c172:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c174:	2b00      	cmp	r3, #0
 800c176:	d00b      	beq.n	800c190 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	2208      	movs	r2, #8
 800c17e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c186:	f043 0208 	orr.w	r2, r3, #8
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c194:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d012      	beq.n	800c1c2 <HAL_UART_IRQHandler+0x196>
 800c19c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d00c      	beq.n	800c1c2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c1b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1b8:	f043 0220 	orr.w	r2, r3, #32
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	f000 82dd 	beq.w	800c788 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c1ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1d2:	f003 0320 	and.w	r3, r3, #32
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d013      	beq.n	800c202 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c1da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1de:	f003 0320 	and.w	r3, r3, #32
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d105      	bne.n	800c1f2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c1e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c1ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d007      	beq.n	800c202 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d003      	beq.n	800c202 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c1fe:	6878      	ldr	r0, [r7, #4]
 800c200:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c208:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	689b      	ldr	r3, [r3, #8]
 800c212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c216:	2b40      	cmp	r3, #64	; 0x40
 800c218:	d005      	beq.n	800c226 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c21a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c21e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c222:	2b00      	cmp	r3, #0
 800c224:	d054      	beq.n	800c2d0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f001 fbf6 	bl	800da18 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	689b      	ldr	r3, [r3, #8]
 800c232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c236:	2b40      	cmp	r3, #64	; 0x40
 800c238:	d146      	bne.n	800c2c8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	3308      	adds	r3, #8
 800c240:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c244:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c248:	e853 3f00 	ldrex	r3, [r3]
 800c24c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c250:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c254:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c258:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	3308      	adds	r3, #8
 800c262:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c266:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c26a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c26e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c272:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c276:	e841 2300 	strex	r3, r2, [r1]
 800c27a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c27e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c282:	2b00      	cmp	r3, #0
 800c284:	d1d9      	bne.n	800c23a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d017      	beq.n	800c2c0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c296:	4a15      	ldr	r2, [pc, #84]	; (800c2ec <HAL_UART_IRQHandler+0x2c0>)
 800c298:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	f7f9 fcb7 	bl	8005c14 <HAL_DMA_Abort_IT>
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d019      	beq.n	800c2e0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c2b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2b4:	687a      	ldr	r2, [r7, #4]
 800c2b6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800c2ba:	4610      	mov	r0, r2
 800c2bc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2be:	e00f      	b.n	800c2e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c2c0:	6878      	ldr	r0, [r7, #4]
 800c2c2:	f000 fa8b 	bl	800c7dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2c6:	e00b      	b.n	800c2e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c2c8:	6878      	ldr	r0, [r7, #4]
 800c2ca:	f000 fa87 	bl	800c7dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2ce:	e007      	b.n	800c2e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f000 fa83 	bl	800c7dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	2200      	movs	r2, #0
 800c2da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800c2de:	e253      	b.n	800c788 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2e0:	bf00      	nop
    return;
 800c2e2:	e251      	b.n	800c788 <HAL_UART_IRQHandler+0x75c>
 800c2e4:	10000001 	.word	0x10000001
 800c2e8:	04000120 	.word	0x04000120
 800c2ec:	0800dd7d 	.word	0x0800dd7d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2f4:	2b01      	cmp	r3, #1
 800c2f6:	f040 81e7 	bne.w	800c6c8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c2fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2fe:	f003 0310 	and.w	r3, r3, #16
 800c302:	2b00      	cmp	r3, #0
 800c304:	f000 81e0 	beq.w	800c6c8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c30c:	f003 0310 	and.w	r3, r3, #16
 800c310:	2b00      	cmp	r3, #0
 800c312:	f000 81d9 	beq.w	800c6c8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	2210      	movs	r2, #16
 800c31c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	689b      	ldr	r3, [r3, #8]
 800c324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c328:	2b40      	cmp	r3, #64	; 0x40
 800c32a:	f040 8151 	bne.w	800c5d0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	4a96      	ldr	r2, [pc, #600]	; (800c590 <HAL_UART_IRQHandler+0x564>)
 800c338:	4293      	cmp	r3, r2
 800c33a:	d068      	beq.n	800c40e <HAL_UART_IRQHandler+0x3e2>
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	4a93      	ldr	r2, [pc, #588]	; (800c594 <HAL_UART_IRQHandler+0x568>)
 800c346:	4293      	cmp	r3, r2
 800c348:	d061      	beq.n	800c40e <HAL_UART_IRQHandler+0x3e2>
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	4a91      	ldr	r2, [pc, #580]	; (800c598 <HAL_UART_IRQHandler+0x56c>)
 800c354:	4293      	cmp	r3, r2
 800c356:	d05a      	beq.n	800c40e <HAL_UART_IRQHandler+0x3e2>
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	4a8e      	ldr	r2, [pc, #568]	; (800c59c <HAL_UART_IRQHandler+0x570>)
 800c362:	4293      	cmp	r3, r2
 800c364:	d053      	beq.n	800c40e <HAL_UART_IRQHandler+0x3e2>
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	4a8c      	ldr	r2, [pc, #560]	; (800c5a0 <HAL_UART_IRQHandler+0x574>)
 800c370:	4293      	cmp	r3, r2
 800c372:	d04c      	beq.n	800c40e <HAL_UART_IRQHandler+0x3e2>
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	4a89      	ldr	r2, [pc, #548]	; (800c5a4 <HAL_UART_IRQHandler+0x578>)
 800c37e:	4293      	cmp	r3, r2
 800c380:	d045      	beq.n	800c40e <HAL_UART_IRQHandler+0x3e2>
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	4a87      	ldr	r2, [pc, #540]	; (800c5a8 <HAL_UART_IRQHandler+0x57c>)
 800c38c:	4293      	cmp	r3, r2
 800c38e:	d03e      	beq.n	800c40e <HAL_UART_IRQHandler+0x3e2>
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	4a84      	ldr	r2, [pc, #528]	; (800c5ac <HAL_UART_IRQHandler+0x580>)
 800c39a:	4293      	cmp	r3, r2
 800c39c:	d037      	beq.n	800c40e <HAL_UART_IRQHandler+0x3e2>
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	4a82      	ldr	r2, [pc, #520]	; (800c5b0 <HAL_UART_IRQHandler+0x584>)
 800c3a8:	4293      	cmp	r3, r2
 800c3aa:	d030      	beq.n	800c40e <HAL_UART_IRQHandler+0x3e2>
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	4a7f      	ldr	r2, [pc, #508]	; (800c5b4 <HAL_UART_IRQHandler+0x588>)
 800c3b6:	4293      	cmp	r3, r2
 800c3b8:	d029      	beq.n	800c40e <HAL_UART_IRQHandler+0x3e2>
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	4a7d      	ldr	r2, [pc, #500]	; (800c5b8 <HAL_UART_IRQHandler+0x58c>)
 800c3c4:	4293      	cmp	r3, r2
 800c3c6:	d022      	beq.n	800c40e <HAL_UART_IRQHandler+0x3e2>
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	4a7a      	ldr	r2, [pc, #488]	; (800c5bc <HAL_UART_IRQHandler+0x590>)
 800c3d2:	4293      	cmp	r3, r2
 800c3d4:	d01b      	beq.n	800c40e <HAL_UART_IRQHandler+0x3e2>
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	4a78      	ldr	r2, [pc, #480]	; (800c5c0 <HAL_UART_IRQHandler+0x594>)
 800c3e0:	4293      	cmp	r3, r2
 800c3e2:	d014      	beq.n	800c40e <HAL_UART_IRQHandler+0x3e2>
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	4a75      	ldr	r2, [pc, #468]	; (800c5c4 <HAL_UART_IRQHandler+0x598>)
 800c3ee:	4293      	cmp	r3, r2
 800c3f0:	d00d      	beq.n	800c40e <HAL_UART_IRQHandler+0x3e2>
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	4a73      	ldr	r2, [pc, #460]	; (800c5c8 <HAL_UART_IRQHandler+0x59c>)
 800c3fc:	4293      	cmp	r3, r2
 800c3fe:	d006      	beq.n	800c40e <HAL_UART_IRQHandler+0x3e2>
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	4a70      	ldr	r2, [pc, #448]	; (800c5cc <HAL_UART_IRQHandler+0x5a0>)
 800c40a:	4293      	cmp	r3, r2
 800c40c:	d106      	bne.n	800c41c <HAL_UART_IRQHandler+0x3f0>
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	685b      	ldr	r3, [r3, #4]
 800c418:	b29b      	uxth	r3, r3
 800c41a:	e005      	b.n	800c428 <HAL_UART_IRQHandler+0x3fc>
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	685b      	ldr	r3, [r3, #4]
 800c426:	b29b      	uxth	r3, r3
 800c428:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c42c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c430:	2b00      	cmp	r3, #0
 800c432:	f000 81ab 	beq.w	800c78c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c43c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c440:	429a      	cmp	r2, r3
 800c442:	f080 81a3 	bcs.w	800c78c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c44c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c456:	69db      	ldr	r3, [r3, #28]
 800c458:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c45c:	f000 8087 	beq.w	800c56e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c468:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c46c:	e853 3f00 	ldrex	r3, [r3]
 800c470:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c474:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c478:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c47c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	461a      	mov	r2, r3
 800c486:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c48a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c48e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c492:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c496:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c49a:	e841 2300 	strex	r3, r2, [r1]
 800c49e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c4a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d1da      	bne.n	800c460 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	3308      	adds	r3, #8
 800c4b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c4b4:	e853 3f00 	ldrex	r3, [r3]
 800c4b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c4ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c4bc:	f023 0301 	bic.w	r3, r3, #1
 800c4c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	3308      	adds	r3, #8
 800c4ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c4ce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c4d2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c4d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c4da:	e841 2300 	strex	r3, r2, [r1]
 800c4de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c4e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d1e1      	bne.n	800c4aa <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	3308      	adds	r3, #8
 800c4ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c4f0:	e853 3f00 	ldrex	r3, [r3]
 800c4f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c4f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c4f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c4fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	3308      	adds	r3, #8
 800c506:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c50a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c50c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c50e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c510:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c512:	e841 2300 	strex	r3, r2, [r1]
 800c516:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c518:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d1e3      	bne.n	800c4e6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	2220      	movs	r2, #32
 800c522:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	2200      	movs	r2, #0
 800c52a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c532:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c534:	e853 3f00 	ldrex	r3, [r3]
 800c538:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c53a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c53c:	f023 0310 	bic.w	r3, r3, #16
 800c540:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	461a      	mov	r2, r3
 800c54a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c54e:	65bb      	str	r3, [r7, #88]	; 0x58
 800c550:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c552:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c554:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c556:	e841 2300 	strex	r3, r2, [r1]
 800c55a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c55c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d1e4      	bne.n	800c52c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c568:	4618      	mov	r0, r3
 800c56a:	f7f9 f835 	bl	80055d8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2202      	movs	r2, #2
 800c572:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c580:	b29b      	uxth	r3, r3
 800c582:	1ad3      	subs	r3, r2, r3
 800c584:	b29b      	uxth	r3, r3
 800c586:	4619      	mov	r1, r3
 800c588:	6878      	ldr	r0, [r7, #4]
 800c58a:	f000 f931 	bl	800c7f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c58e:	e0fd      	b.n	800c78c <HAL_UART_IRQHandler+0x760>
 800c590:	40020010 	.word	0x40020010
 800c594:	40020028 	.word	0x40020028
 800c598:	40020040 	.word	0x40020040
 800c59c:	40020058 	.word	0x40020058
 800c5a0:	40020070 	.word	0x40020070
 800c5a4:	40020088 	.word	0x40020088
 800c5a8:	400200a0 	.word	0x400200a0
 800c5ac:	400200b8 	.word	0x400200b8
 800c5b0:	40020410 	.word	0x40020410
 800c5b4:	40020428 	.word	0x40020428
 800c5b8:	40020440 	.word	0x40020440
 800c5bc:	40020458 	.word	0x40020458
 800c5c0:	40020470 	.word	0x40020470
 800c5c4:	40020488 	.word	0x40020488
 800c5c8:	400204a0 	.word	0x400204a0
 800c5cc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c5dc:	b29b      	uxth	r3, r3
 800c5de:	1ad3      	subs	r3, r2, r3
 800c5e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c5ea:	b29b      	uxth	r3, r3
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	f000 80cf 	beq.w	800c790 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800c5f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	f000 80ca 	beq.w	800c790 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c604:	e853 3f00 	ldrex	r3, [r3]
 800c608:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c60a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c60c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c610:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	461a      	mov	r2, r3
 800c61a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c61e:	647b      	str	r3, [r7, #68]	; 0x44
 800c620:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c622:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c624:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c626:	e841 2300 	strex	r3, r2, [r1]
 800c62a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c62c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d1e4      	bne.n	800c5fc <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	3308      	adds	r3, #8
 800c638:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c63c:	e853 3f00 	ldrex	r3, [r3]
 800c640:	623b      	str	r3, [r7, #32]
   return(result);
 800c642:	6a3a      	ldr	r2, [r7, #32]
 800c644:	4b55      	ldr	r3, [pc, #340]	; (800c79c <HAL_UART_IRQHandler+0x770>)
 800c646:	4013      	ands	r3, r2
 800c648:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	3308      	adds	r3, #8
 800c652:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c656:	633a      	str	r2, [r7, #48]	; 0x30
 800c658:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c65a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c65c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c65e:	e841 2300 	strex	r3, r2, [r1]
 800c662:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c666:	2b00      	cmp	r3, #0
 800c668:	d1e3      	bne.n	800c632 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	2220      	movs	r2, #32
 800c66e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	2200      	movs	r2, #0
 800c676:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2200      	movs	r2, #0
 800c67c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c684:	693b      	ldr	r3, [r7, #16]
 800c686:	e853 3f00 	ldrex	r3, [r3]
 800c68a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	f023 0310 	bic.w	r3, r3, #16
 800c692:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	461a      	mov	r2, r3
 800c69c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c6a0:	61fb      	str	r3, [r7, #28]
 800c6a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6a4:	69b9      	ldr	r1, [r7, #24]
 800c6a6:	69fa      	ldr	r2, [r7, #28]
 800c6a8:	e841 2300 	strex	r3, r2, [r1]
 800c6ac:	617b      	str	r3, [r7, #20]
   return(result);
 800c6ae:	697b      	ldr	r3, [r7, #20]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d1e4      	bne.n	800c67e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2202      	movs	r2, #2
 800c6b8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c6ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c6be:	4619      	mov	r1, r3
 800c6c0:	6878      	ldr	r0, [r7, #4]
 800c6c2:	f000 f895 	bl	800c7f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c6c6:	e063      	b.n	800c790 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c6c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d00e      	beq.n	800c6f2 <HAL_UART_IRQHandler+0x6c6>
 800c6d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c6d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d008      	beq.n	800c6f2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c6e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c6ea:	6878      	ldr	r0, [r7, #4]
 800c6ec:	f001 fb87 	bl	800ddfe <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c6f0:	e051      	b.n	800c796 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c6f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d014      	beq.n	800c728 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c6fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c706:	2b00      	cmp	r3, #0
 800c708:	d105      	bne.n	800c716 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c70a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c70e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c712:	2b00      	cmp	r3, #0
 800c714:	d008      	beq.n	800c728 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d03a      	beq.n	800c794 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c722:	6878      	ldr	r0, [r7, #4]
 800c724:	4798      	blx	r3
    }
    return;
 800c726:	e035      	b.n	800c794 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c72c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c730:	2b00      	cmp	r3, #0
 800c732:	d009      	beq.n	800c748 <HAL_UART_IRQHandler+0x71c>
 800c734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d003      	beq.n	800c748 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	f001 fb31 	bl	800dda8 <UART_EndTransmit_IT>
    return;
 800c746:	e026      	b.n	800c796 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c74c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c750:	2b00      	cmp	r3, #0
 800c752:	d009      	beq.n	800c768 <HAL_UART_IRQHandler+0x73c>
 800c754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c758:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d003      	beq.n	800c768 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c760:	6878      	ldr	r0, [r7, #4]
 800c762:	f001 fb60 	bl	800de26 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c766:	e016      	b.n	800c796 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c76c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c770:	2b00      	cmp	r3, #0
 800c772:	d010      	beq.n	800c796 <HAL_UART_IRQHandler+0x76a>
 800c774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c778:	2b00      	cmp	r3, #0
 800c77a:	da0c      	bge.n	800c796 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c77c:	6878      	ldr	r0, [r7, #4]
 800c77e:	f001 fb48 	bl	800de12 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c782:	e008      	b.n	800c796 <HAL_UART_IRQHandler+0x76a>
      return;
 800c784:	bf00      	nop
 800c786:	e006      	b.n	800c796 <HAL_UART_IRQHandler+0x76a>
    return;
 800c788:	bf00      	nop
 800c78a:	e004      	b.n	800c796 <HAL_UART_IRQHandler+0x76a>
      return;
 800c78c:	bf00      	nop
 800c78e:	e002      	b.n	800c796 <HAL_UART_IRQHandler+0x76a>
      return;
 800c790:	bf00      	nop
 800c792:	e000      	b.n	800c796 <HAL_UART_IRQHandler+0x76a>
    return;
 800c794:	bf00      	nop
  }
}
 800c796:	37e8      	adds	r7, #232	; 0xe8
 800c798:	46bd      	mov	sp, r7
 800c79a:	bd80      	pop	{r7, pc}
 800c79c:	effffffe 	.word	0xeffffffe

0800c7a0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c7a0:	b480      	push	{r7}
 800c7a2:	b083      	sub	sp, #12
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c7a8:	bf00      	nop
 800c7aa:	370c      	adds	r7, #12
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b2:	4770      	bx	lr

0800c7b4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c7b4:	b480      	push	{r7}
 800c7b6:	b083      	sub	sp, #12
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800c7bc:	bf00      	nop
 800c7be:	370c      	adds	r7, #12
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c6:	4770      	bx	lr

0800c7c8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c7c8:	b480      	push	{r7}
 800c7ca:	b083      	sub	sp, #12
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c7d0:	bf00      	nop
 800c7d2:	370c      	adds	r7, #12
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7da:	4770      	bx	lr

0800c7dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c7dc:	b480      	push	{r7}
 800c7de:	b083      	sub	sp, #12
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c7e4:	bf00      	nop
 800c7e6:	370c      	adds	r7, #12
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ee:	4770      	bx	lr

0800c7f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c7f0:	b480      	push	{r7}
 800c7f2:	b083      	sub	sp, #12
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
 800c7f8:	460b      	mov	r3, r1
 800c7fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c7fc:	bf00      	nop
 800c7fe:	370c      	adds	r7, #12
 800c800:	46bd      	mov	sp, r7
 800c802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c806:	4770      	bx	lr

0800c808 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c808:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c80c:	b092      	sub	sp, #72	; 0x48
 800c80e:	af00      	add	r7, sp, #0
 800c810:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c812:	2300      	movs	r3, #0
 800c814:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c818:	697b      	ldr	r3, [r7, #20]
 800c81a:	689a      	ldr	r2, [r3, #8]
 800c81c:	697b      	ldr	r3, [r7, #20]
 800c81e:	691b      	ldr	r3, [r3, #16]
 800c820:	431a      	orrs	r2, r3
 800c822:	697b      	ldr	r3, [r7, #20]
 800c824:	695b      	ldr	r3, [r3, #20]
 800c826:	431a      	orrs	r2, r3
 800c828:	697b      	ldr	r3, [r7, #20]
 800c82a:	69db      	ldr	r3, [r3, #28]
 800c82c:	4313      	orrs	r3, r2
 800c82e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c830:	697b      	ldr	r3, [r7, #20]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	681a      	ldr	r2, [r3, #0]
 800c836:	4bbe      	ldr	r3, [pc, #760]	; (800cb30 <UART_SetConfig+0x328>)
 800c838:	4013      	ands	r3, r2
 800c83a:	697a      	ldr	r2, [r7, #20]
 800c83c:	6812      	ldr	r2, [r2, #0]
 800c83e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c840:	430b      	orrs	r3, r1
 800c842:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c844:	697b      	ldr	r3, [r7, #20]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	685b      	ldr	r3, [r3, #4]
 800c84a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c84e:	697b      	ldr	r3, [r7, #20]
 800c850:	68da      	ldr	r2, [r3, #12]
 800c852:	697b      	ldr	r3, [r7, #20]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	430a      	orrs	r2, r1
 800c858:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c85a:	697b      	ldr	r3, [r7, #20]
 800c85c:	699b      	ldr	r3, [r3, #24]
 800c85e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c860:	697b      	ldr	r3, [r7, #20]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	4ab3      	ldr	r2, [pc, #716]	; (800cb34 <UART_SetConfig+0x32c>)
 800c866:	4293      	cmp	r3, r2
 800c868:	d004      	beq.n	800c874 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c86a:	697b      	ldr	r3, [r7, #20]
 800c86c:	6a1b      	ldr	r3, [r3, #32]
 800c86e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c870:	4313      	orrs	r3, r2
 800c872:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c874:	697b      	ldr	r3, [r7, #20]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	689a      	ldr	r2, [r3, #8]
 800c87a:	4baf      	ldr	r3, [pc, #700]	; (800cb38 <UART_SetConfig+0x330>)
 800c87c:	4013      	ands	r3, r2
 800c87e:	697a      	ldr	r2, [r7, #20]
 800c880:	6812      	ldr	r2, [r2, #0]
 800c882:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c884:	430b      	orrs	r3, r1
 800c886:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c888:	697b      	ldr	r3, [r7, #20]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c88e:	f023 010f 	bic.w	r1, r3, #15
 800c892:	697b      	ldr	r3, [r7, #20]
 800c894:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c896:	697b      	ldr	r3, [r7, #20]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	430a      	orrs	r2, r1
 800c89c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c89e:	697b      	ldr	r3, [r7, #20]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	4aa6      	ldr	r2, [pc, #664]	; (800cb3c <UART_SetConfig+0x334>)
 800c8a4:	4293      	cmp	r3, r2
 800c8a6:	d177      	bne.n	800c998 <UART_SetConfig+0x190>
 800c8a8:	4ba5      	ldr	r3, [pc, #660]	; (800cb40 <UART_SetConfig+0x338>)
 800c8aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c8b0:	2b28      	cmp	r3, #40	; 0x28
 800c8b2:	d86d      	bhi.n	800c990 <UART_SetConfig+0x188>
 800c8b4:	a201      	add	r2, pc, #4	; (adr r2, 800c8bc <UART_SetConfig+0xb4>)
 800c8b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8ba:	bf00      	nop
 800c8bc:	0800c961 	.word	0x0800c961
 800c8c0:	0800c991 	.word	0x0800c991
 800c8c4:	0800c991 	.word	0x0800c991
 800c8c8:	0800c991 	.word	0x0800c991
 800c8cc:	0800c991 	.word	0x0800c991
 800c8d0:	0800c991 	.word	0x0800c991
 800c8d4:	0800c991 	.word	0x0800c991
 800c8d8:	0800c991 	.word	0x0800c991
 800c8dc:	0800c969 	.word	0x0800c969
 800c8e0:	0800c991 	.word	0x0800c991
 800c8e4:	0800c991 	.word	0x0800c991
 800c8e8:	0800c991 	.word	0x0800c991
 800c8ec:	0800c991 	.word	0x0800c991
 800c8f0:	0800c991 	.word	0x0800c991
 800c8f4:	0800c991 	.word	0x0800c991
 800c8f8:	0800c991 	.word	0x0800c991
 800c8fc:	0800c971 	.word	0x0800c971
 800c900:	0800c991 	.word	0x0800c991
 800c904:	0800c991 	.word	0x0800c991
 800c908:	0800c991 	.word	0x0800c991
 800c90c:	0800c991 	.word	0x0800c991
 800c910:	0800c991 	.word	0x0800c991
 800c914:	0800c991 	.word	0x0800c991
 800c918:	0800c991 	.word	0x0800c991
 800c91c:	0800c979 	.word	0x0800c979
 800c920:	0800c991 	.word	0x0800c991
 800c924:	0800c991 	.word	0x0800c991
 800c928:	0800c991 	.word	0x0800c991
 800c92c:	0800c991 	.word	0x0800c991
 800c930:	0800c991 	.word	0x0800c991
 800c934:	0800c991 	.word	0x0800c991
 800c938:	0800c991 	.word	0x0800c991
 800c93c:	0800c981 	.word	0x0800c981
 800c940:	0800c991 	.word	0x0800c991
 800c944:	0800c991 	.word	0x0800c991
 800c948:	0800c991 	.word	0x0800c991
 800c94c:	0800c991 	.word	0x0800c991
 800c950:	0800c991 	.word	0x0800c991
 800c954:	0800c991 	.word	0x0800c991
 800c958:	0800c991 	.word	0x0800c991
 800c95c:	0800c989 	.word	0x0800c989
 800c960:	2301      	movs	r3, #1
 800c962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c966:	e326      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800c968:	2304      	movs	r3, #4
 800c96a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c96e:	e322      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800c970:	2308      	movs	r3, #8
 800c972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c976:	e31e      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800c978:	2310      	movs	r3, #16
 800c97a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c97e:	e31a      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800c980:	2320      	movs	r3, #32
 800c982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c986:	e316      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800c988:	2340      	movs	r3, #64	; 0x40
 800c98a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c98e:	e312      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800c990:	2380      	movs	r3, #128	; 0x80
 800c992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c996:	e30e      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800c998:	697b      	ldr	r3, [r7, #20]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	4a69      	ldr	r2, [pc, #420]	; (800cb44 <UART_SetConfig+0x33c>)
 800c99e:	4293      	cmp	r3, r2
 800c9a0:	d130      	bne.n	800ca04 <UART_SetConfig+0x1fc>
 800c9a2:	4b67      	ldr	r3, [pc, #412]	; (800cb40 <UART_SetConfig+0x338>)
 800c9a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9a6:	f003 0307 	and.w	r3, r3, #7
 800c9aa:	2b05      	cmp	r3, #5
 800c9ac:	d826      	bhi.n	800c9fc <UART_SetConfig+0x1f4>
 800c9ae:	a201      	add	r2, pc, #4	; (adr r2, 800c9b4 <UART_SetConfig+0x1ac>)
 800c9b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9b4:	0800c9cd 	.word	0x0800c9cd
 800c9b8:	0800c9d5 	.word	0x0800c9d5
 800c9bc:	0800c9dd 	.word	0x0800c9dd
 800c9c0:	0800c9e5 	.word	0x0800c9e5
 800c9c4:	0800c9ed 	.word	0x0800c9ed
 800c9c8:	0800c9f5 	.word	0x0800c9f5
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9d2:	e2f0      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800c9d4:	2304      	movs	r3, #4
 800c9d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9da:	e2ec      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800c9dc:	2308      	movs	r3, #8
 800c9de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9e2:	e2e8      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800c9e4:	2310      	movs	r3, #16
 800c9e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9ea:	e2e4      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800c9ec:	2320      	movs	r3, #32
 800c9ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9f2:	e2e0      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800c9f4:	2340      	movs	r3, #64	; 0x40
 800c9f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9fa:	e2dc      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800c9fc:	2380      	movs	r3, #128	; 0x80
 800c9fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca02:	e2d8      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800ca04:	697b      	ldr	r3, [r7, #20]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	4a4f      	ldr	r2, [pc, #316]	; (800cb48 <UART_SetConfig+0x340>)
 800ca0a:	4293      	cmp	r3, r2
 800ca0c:	d130      	bne.n	800ca70 <UART_SetConfig+0x268>
 800ca0e:	4b4c      	ldr	r3, [pc, #304]	; (800cb40 <UART_SetConfig+0x338>)
 800ca10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca12:	f003 0307 	and.w	r3, r3, #7
 800ca16:	2b05      	cmp	r3, #5
 800ca18:	d826      	bhi.n	800ca68 <UART_SetConfig+0x260>
 800ca1a:	a201      	add	r2, pc, #4	; (adr r2, 800ca20 <UART_SetConfig+0x218>)
 800ca1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca20:	0800ca39 	.word	0x0800ca39
 800ca24:	0800ca41 	.word	0x0800ca41
 800ca28:	0800ca49 	.word	0x0800ca49
 800ca2c:	0800ca51 	.word	0x0800ca51
 800ca30:	0800ca59 	.word	0x0800ca59
 800ca34:	0800ca61 	.word	0x0800ca61
 800ca38:	2300      	movs	r3, #0
 800ca3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca3e:	e2ba      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800ca40:	2304      	movs	r3, #4
 800ca42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca46:	e2b6      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800ca48:	2308      	movs	r3, #8
 800ca4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca4e:	e2b2      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800ca50:	2310      	movs	r3, #16
 800ca52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca56:	e2ae      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800ca58:	2320      	movs	r3, #32
 800ca5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca5e:	e2aa      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800ca60:	2340      	movs	r3, #64	; 0x40
 800ca62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca66:	e2a6      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800ca68:	2380      	movs	r3, #128	; 0x80
 800ca6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca6e:	e2a2      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800ca70:	697b      	ldr	r3, [r7, #20]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	4a35      	ldr	r2, [pc, #212]	; (800cb4c <UART_SetConfig+0x344>)
 800ca76:	4293      	cmp	r3, r2
 800ca78:	d130      	bne.n	800cadc <UART_SetConfig+0x2d4>
 800ca7a:	4b31      	ldr	r3, [pc, #196]	; (800cb40 <UART_SetConfig+0x338>)
 800ca7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca7e:	f003 0307 	and.w	r3, r3, #7
 800ca82:	2b05      	cmp	r3, #5
 800ca84:	d826      	bhi.n	800cad4 <UART_SetConfig+0x2cc>
 800ca86:	a201      	add	r2, pc, #4	; (adr r2, 800ca8c <UART_SetConfig+0x284>)
 800ca88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca8c:	0800caa5 	.word	0x0800caa5
 800ca90:	0800caad 	.word	0x0800caad
 800ca94:	0800cab5 	.word	0x0800cab5
 800ca98:	0800cabd 	.word	0x0800cabd
 800ca9c:	0800cac5 	.word	0x0800cac5
 800caa0:	0800cacd 	.word	0x0800cacd
 800caa4:	2300      	movs	r3, #0
 800caa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800caaa:	e284      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800caac:	2304      	movs	r3, #4
 800caae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cab2:	e280      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800cab4:	2308      	movs	r3, #8
 800cab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800caba:	e27c      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800cabc:	2310      	movs	r3, #16
 800cabe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cac2:	e278      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800cac4:	2320      	movs	r3, #32
 800cac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800caca:	e274      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800cacc:	2340      	movs	r3, #64	; 0x40
 800cace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cad2:	e270      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800cad4:	2380      	movs	r3, #128	; 0x80
 800cad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cada:	e26c      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800cadc:	697b      	ldr	r3, [r7, #20]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	4a1b      	ldr	r2, [pc, #108]	; (800cb50 <UART_SetConfig+0x348>)
 800cae2:	4293      	cmp	r3, r2
 800cae4:	d142      	bne.n	800cb6c <UART_SetConfig+0x364>
 800cae6:	4b16      	ldr	r3, [pc, #88]	; (800cb40 <UART_SetConfig+0x338>)
 800cae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800caea:	f003 0307 	and.w	r3, r3, #7
 800caee:	2b05      	cmp	r3, #5
 800caf0:	d838      	bhi.n	800cb64 <UART_SetConfig+0x35c>
 800caf2:	a201      	add	r2, pc, #4	; (adr r2, 800caf8 <UART_SetConfig+0x2f0>)
 800caf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caf8:	0800cb11 	.word	0x0800cb11
 800cafc:	0800cb19 	.word	0x0800cb19
 800cb00:	0800cb21 	.word	0x0800cb21
 800cb04:	0800cb29 	.word	0x0800cb29
 800cb08:	0800cb55 	.word	0x0800cb55
 800cb0c:	0800cb5d 	.word	0x0800cb5d
 800cb10:	2300      	movs	r3, #0
 800cb12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb16:	e24e      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800cb18:	2304      	movs	r3, #4
 800cb1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb1e:	e24a      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800cb20:	2308      	movs	r3, #8
 800cb22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb26:	e246      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800cb28:	2310      	movs	r3, #16
 800cb2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb2e:	e242      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800cb30:	cfff69f3 	.word	0xcfff69f3
 800cb34:	58000c00 	.word	0x58000c00
 800cb38:	11fff4ff 	.word	0x11fff4ff
 800cb3c:	40011000 	.word	0x40011000
 800cb40:	58024400 	.word	0x58024400
 800cb44:	40004400 	.word	0x40004400
 800cb48:	40004800 	.word	0x40004800
 800cb4c:	40004c00 	.word	0x40004c00
 800cb50:	40005000 	.word	0x40005000
 800cb54:	2320      	movs	r3, #32
 800cb56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb5a:	e22c      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800cb5c:	2340      	movs	r3, #64	; 0x40
 800cb5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb62:	e228      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800cb64:	2380      	movs	r3, #128	; 0x80
 800cb66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb6a:	e224      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800cb6c:	697b      	ldr	r3, [r7, #20]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	4ab1      	ldr	r2, [pc, #708]	; (800ce38 <UART_SetConfig+0x630>)
 800cb72:	4293      	cmp	r3, r2
 800cb74:	d176      	bne.n	800cc64 <UART_SetConfig+0x45c>
 800cb76:	4bb1      	ldr	r3, [pc, #708]	; (800ce3c <UART_SetConfig+0x634>)
 800cb78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cb7e:	2b28      	cmp	r3, #40	; 0x28
 800cb80:	d86c      	bhi.n	800cc5c <UART_SetConfig+0x454>
 800cb82:	a201      	add	r2, pc, #4	; (adr r2, 800cb88 <UART_SetConfig+0x380>)
 800cb84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb88:	0800cc2d 	.word	0x0800cc2d
 800cb8c:	0800cc5d 	.word	0x0800cc5d
 800cb90:	0800cc5d 	.word	0x0800cc5d
 800cb94:	0800cc5d 	.word	0x0800cc5d
 800cb98:	0800cc5d 	.word	0x0800cc5d
 800cb9c:	0800cc5d 	.word	0x0800cc5d
 800cba0:	0800cc5d 	.word	0x0800cc5d
 800cba4:	0800cc5d 	.word	0x0800cc5d
 800cba8:	0800cc35 	.word	0x0800cc35
 800cbac:	0800cc5d 	.word	0x0800cc5d
 800cbb0:	0800cc5d 	.word	0x0800cc5d
 800cbb4:	0800cc5d 	.word	0x0800cc5d
 800cbb8:	0800cc5d 	.word	0x0800cc5d
 800cbbc:	0800cc5d 	.word	0x0800cc5d
 800cbc0:	0800cc5d 	.word	0x0800cc5d
 800cbc4:	0800cc5d 	.word	0x0800cc5d
 800cbc8:	0800cc3d 	.word	0x0800cc3d
 800cbcc:	0800cc5d 	.word	0x0800cc5d
 800cbd0:	0800cc5d 	.word	0x0800cc5d
 800cbd4:	0800cc5d 	.word	0x0800cc5d
 800cbd8:	0800cc5d 	.word	0x0800cc5d
 800cbdc:	0800cc5d 	.word	0x0800cc5d
 800cbe0:	0800cc5d 	.word	0x0800cc5d
 800cbe4:	0800cc5d 	.word	0x0800cc5d
 800cbe8:	0800cc45 	.word	0x0800cc45
 800cbec:	0800cc5d 	.word	0x0800cc5d
 800cbf0:	0800cc5d 	.word	0x0800cc5d
 800cbf4:	0800cc5d 	.word	0x0800cc5d
 800cbf8:	0800cc5d 	.word	0x0800cc5d
 800cbfc:	0800cc5d 	.word	0x0800cc5d
 800cc00:	0800cc5d 	.word	0x0800cc5d
 800cc04:	0800cc5d 	.word	0x0800cc5d
 800cc08:	0800cc4d 	.word	0x0800cc4d
 800cc0c:	0800cc5d 	.word	0x0800cc5d
 800cc10:	0800cc5d 	.word	0x0800cc5d
 800cc14:	0800cc5d 	.word	0x0800cc5d
 800cc18:	0800cc5d 	.word	0x0800cc5d
 800cc1c:	0800cc5d 	.word	0x0800cc5d
 800cc20:	0800cc5d 	.word	0x0800cc5d
 800cc24:	0800cc5d 	.word	0x0800cc5d
 800cc28:	0800cc55 	.word	0x0800cc55
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc32:	e1c0      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800cc34:	2304      	movs	r3, #4
 800cc36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc3a:	e1bc      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800cc3c:	2308      	movs	r3, #8
 800cc3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc42:	e1b8      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800cc44:	2310      	movs	r3, #16
 800cc46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc4a:	e1b4      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800cc4c:	2320      	movs	r3, #32
 800cc4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc52:	e1b0      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800cc54:	2340      	movs	r3, #64	; 0x40
 800cc56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc5a:	e1ac      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800cc5c:	2380      	movs	r3, #128	; 0x80
 800cc5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc62:	e1a8      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800cc64:	697b      	ldr	r3, [r7, #20]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	4a75      	ldr	r2, [pc, #468]	; (800ce40 <UART_SetConfig+0x638>)
 800cc6a:	4293      	cmp	r3, r2
 800cc6c:	d130      	bne.n	800ccd0 <UART_SetConfig+0x4c8>
 800cc6e:	4b73      	ldr	r3, [pc, #460]	; (800ce3c <UART_SetConfig+0x634>)
 800cc70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc72:	f003 0307 	and.w	r3, r3, #7
 800cc76:	2b05      	cmp	r3, #5
 800cc78:	d826      	bhi.n	800ccc8 <UART_SetConfig+0x4c0>
 800cc7a:	a201      	add	r2, pc, #4	; (adr r2, 800cc80 <UART_SetConfig+0x478>)
 800cc7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc80:	0800cc99 	.word	0x0800cc99
 800cc84:	0800cca1 	.word	0x0800cca1
 800cc88:	0800cca9 	.word	0x0800cca9
 800cc8c:	0800ccb1 	.word	0x0800ccb1
 800cc90:	0800ccb9 	.word	0x0800ccb9
 800cc94:	0800ccc1 	.word	0x0800ccc1
 800cc98:	2300      	movs	r3, #0
 800cc9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc9e:	e18a      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800cca0:	2304      	movs	r3, #4
 800cca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cca6:	e186      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800cca8:	2308      	movs	r3, #8
 800ccaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccae:	e182      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800ccb0:	2310      	movs	r3, #16
 800ccb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccb6:	e17e      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800ccb8:	2320      	movs	r3, #32
 800ccba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccbe:	e17a      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800ccc0:	2340      	movs	r3, #64	; 0x40
 800ccc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccc6:	e176      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800ccc8:	2380      	movs	r3, #128	; 0x80
 800ccca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccce:	e172      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800ccd0:	697b      	ldr	r3, [r7, #20]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	4a5b      	ldr	r2, [pc, #364]	; (800ce44 <UART_SetConfig+0x63c>)
 800ccd6:	4293      	cmp	r3, r2
 800ccd8:	d130      	bne.n	800cd3c <UART_SetConfig+0x534>
 800ccda:	4b58      	ldr	r3, [pc, #352]	; (800ce3c <UART_SetConfig+0x634>)
 800ccdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ccde:	f003 0307 	and.w	r3, r3, #7
 800cce2:	2b05      	cmp	r3, #5
 800cce4:	d826      	bhi.n	800cd34 <UART_SetConfig+0x52c>
 800cce6:	a201      	add	r2, pc, #4	; (adr r2, 800ccec <UART_SetConfig+0x4e4>)
 800cce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccec:	0800cd05 	.word	0x0800cd05
 800ccf0:	0800cd0d 	.word	0x0800cd0d
 800ccf4:	0800cd15 	.word	0x0800cd15
 800ccf8:	0800cd1d 	.word	0x0800cd1d
 800ccfc:	0800cd25 	.word	0x0800cd25
 800cd00:	0800cd2d 	.word	0x0800cd2d
 800cd04:	2300      	movs	r3, #0
 800cd06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd0a:	e154      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800cd0c:	2304      	movs	r3, #4
 800cd0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd12:	e150      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800cd14:	2308      	movs	r3, #8
 800cd16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd1a:	e14c      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800cd1c:	2310      	movs	r3, #16
 800cd1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd22:	e148      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800cd24:	2320      	movs	r3, #32
 800cd26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd2a:	e144      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800cd2c:	2340      	movs	r3, #64	; 0x40
 800cd2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd32:	e140      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800cd34:	2380      	movs	r3, #128	; 0x80
 800cd36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd3a:	e13c      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800cd3c:	697b      	ldr	r3, [r7, #20]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	4a41      	ldr	r2, [pc, #260]	; (800ce48 <UART_SetConfig+0x640>)
 800cd42:	4293      	cmp	r3, r2
 800cd44:	f040 8082 	bne.w	800ce4c <UART_SetConfig+0x644>
 800cd48:	4b3c      	ldr	r3, [pc, #240]	; (800ce3c <UART_SetConfig+0x634>)
 800cd4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cd50:	2b28      	cmp	r3, #40	; 0x28
 800cd52:	d86d      	bhi.n	800ce30 <UART_SetConfig+0x628>
 800cd54:	a201      	add	r2, pc, #4	; (adr r2, 800cd5c <UART_SetConfig+0x554>)
 800cd56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd5a:	bf00      	nop
 800cd5c:	0800ce01 	.word	0x0800ce01
 800cd60:	0800ce31 	.word	0x0800ce31
 800cd64:	0800ce31 	.word	0x0800ce31
 800cd68:	0800ce31 	.word	0x0800ce31
 800cd6c:	0800ce31 	.word	0x0800ce31
 800cd70:	0800ce31 	.word	0x0800ce31
 800cd74:	0800ce31 	.word	0x0800ce31
 800cd78:	0800ce31 	.word	0x0800ce31
 800cd7c:	0800ce09 	.word	0x0800ce09
 800cd80:	0800ce31 	.word	0x0800ce31
 800cd84:	0800ce31 	.word	0x0800ce31
 800cd88:	0800ce31 	.word	0x0800ce31
 800cd8c:	0800ce31 	.word	0x0800ce31
 800cd90:	0800ce31 	.word	0x0800ce31
 800cd94:	0800ce31 	.word	0x0800ce31
 800cd98:	0800ce31 	.word	0x0800ce31
 800cd9c:	0800ce11 	.word	0x0800ce11
 800cda0:	0800ce31 	.word	0x0800ce31
 800cda4:	0800ce31 	.word	0x0800ce31
 800cda8:	0800ce31 	.word	0x0800ce31
 800cdac:	0800ce31 	.word	0x0800ce31
 800cdb0:	0800ce31 	.word	0x0800ce31
 800cdb4:	0800ce31 	.word	0x0800ce31
 800cdb8:	0800ce31 	.word	0x0800ce31
 800cdbc:	0800ce19 	.word	0x0800ce19
 800cdc0:	0800ce31 	.word	0x0800ce31
 800cdc4:	0800ce31 	.word	0x0800ce31
 800cdc8:	0800ce31 	.word	0x0800ce31
 800cdcc:	0800ce31 	.word	0x0800ce31
 800cdd0:	0800ce31 	.word	0x0800ce31
 800cdd4:	0800ce31 	.word	0x0800ce31
 800cdd8:	0800ce31 	.word	0x0800ce31
 800cddc:	0800ce21 	.word	0x0800ce21
 800cde0:	0800ce31 	.word	0x0800ce31
 800cde4:	0800ce31 	.word	0x0800ce31
 800cde8:	0800ce31 	.word	0x0800ce31
 800cdec:	0800ce31 	.word	0x0800ce31
 800cdf0:	0800ce31 	.word	0x0800ce31
 800cdf4:	0800ce31 	.word	0x0800ce31
 800cdf8:	0800ce31 	.word	0x0800ce31
 800cdfc:	0800ce29 	.word	0x0800ce29
 800ce00:	2301      	movs	r3, #1
 800ce02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce06:	e0d6      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800ce08:	2304      	movs	r3, #4
 800ce0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce0e:	e0d2      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800ce10:	2308      	movs	r3, #8
 800ce12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce16:	e0ce      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800ce18:	2310      	movs	r3, #16
 800ce1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce1e:	e0ca      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800ce20:	2320      	movs	r3, #32
 800ce22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce26:	e0c6      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800ce28:	2340      	movs	r3, #64	; 0x40
 800ce2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce2e:	e0c2      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800ce30:	2380      	movs	r3, #128	; 0x80
 800ce32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce36:	e0be      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800ce38:	40011400 	.word	0x40011400
 800ce3c:	58024400 	.word	0x58024400
 800ce40:	40007800 	.word	0x40007800
 800ce44:	40007c00 	.word	0x40007c00
 800ce48:	40011800 	.word	0x40011800
 800ce4c:	697b      	ldr	r3, [r7, #20]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	4aad      	ldr	r2, [pc, #692]	; (800d108 <UART_SetConfig+0x900>)
 800ce52:	4293      	cmp	r3, r2
 800ce54:	d176      	bne.n	800cf44 <UART_SetConfig+0x73c>
 800ce56:	4bad      	ldr	r3, [pc, #692]	; (800d10c <UART_SetConfig+0x904>)
 800ce58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ce5e:	2b28      	cmp	r3, #40	; 0x28
 800ce60:	d86c      	bhi.n	800cf3c <UART_SetConfig+0x734>
 800ce62:	a201      	add	r2, pc, #4	; (adr r2, 800ce68 <UART_SetConfig+0x660>)
 800ce64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce68:	0800cf0d 	.word	0x0800cf0d
 800ce6c:	0800cf3d 	.word	0x0800cf3d
 800ce70:	0800cf3d 	.word	0x0800cf3d
 800ce74:	0800cf3d 	.word	0x0800cf3d
 800ce78:	0800cf3d 	.word	0x0800cf3d
 800ce7c:	0800cf3d 	.word	0x0800cf3d
 800ce80:	0800cf3d 	.word	0x0800cf3d
 800ce84:	0800cf3d 	.word	0x0800cf3d
 800ce88:	0800cf15 	.word	0x0800cf15
 800ce8c:	0800cf3d 	.word	0x0800cf3d
 800ce90:	0800cf3d 	.word	0x0800cf3d
 800ce94:	0800cf3d 	.word	0x0800cf3d
 800ce98:	0800cf3d 	.word	0x0800cf3d
 800ce9c:	0800cf3d 	.word	0x0800cf3d
 800cea0:	0800cf3d 	.word	0x0800cf3d
 800cea4:	0800cf3d 	.word	0x0800cf3d
 800cea8:	0800cf1d 	.word	0x0800cf1d
 800ceac:	0800cf3d 	.word	0x0800cf3d
 800ceb0:	0800cf3d 	.word	0x0800cf3d
 800ceb4:	0800cf3d 	.word	0x0800cf3d
 800ceb8:	0800cf3d 	.word	0x0800cf3d
 800cebc:	0800cf3d 	.word	0x0800cf3d
 800cec0:	0800cf3d 	.word	0x0800cf3d
 800cec4:	0800cf3d 	.word	0x0800cf3d
 800cec8:	0800cf25 	.word	0x0800cf25
 800cecc:	0800cf3d 	.word	0x0800cf3d
 800ced0:	0800cf3d 	.word	0x0800cf3d
 800ced4:	0800cf3d 	.word	0x0800cf3d
 800ced8:	0800cf3d 	.word	0x0800cf3d
 800cedc:	0800cf3d 	.word	0x0800cf3d
 800cee0:	0800cf3d 	.word	0x0800cf3d
 800cee4:	0800cf3d 	.word	0x0800cf3d
 800cee8:	0800cf2d 	.word	0x0800cf2d
 800ceec:	0800cf3d 	.word	0x0800cf3d
 800cef0:	0800cf3d 	.word	0x0800cf3d
 800cef4:	0800cf3d 	.word	0x0800cf3d
 800cef8:	0800cf3d 	.word	0x0800cf3d
 800cefc:	0800cf3d 	.word	0x0800cf3d
 800cf00:	0800cf3d 	.word	0x0800cf3d
 800cf04:	0800cf3d 	.word	0x0800cf3d
 800cf08:	0800cf35 	.word	0x0800cf35
 800cf0c:	2301      	movs	r3, #1
 800cf0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf12:	e050      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800cf14:	2304      	movs	r3, #4
 800cf16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf1a:	e04c      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800cf1c:	2308      	movs	r3, #8
 800cf1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf22:	e048      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800cf24:	2310      	movs	r3, #16
 800cf26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf2a:	e044      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800cf2c:	2320      	movs	r3, #32
 800cf2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf32:	e040      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800cf34:	2340      	movs	r3, #64	; 0x40
 800cf36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf3a:	e03c      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800cf3c:	2380      	movs	r3, #128	; 0x80
 800cf3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf42:	e038      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800cf44:	697b      	ldr	r3, [r7, #20]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	4a71      	ldr	r2, [pc, #452]	; (800d110 <UART_SetConfig+0x908>)
 800cf4a:	4293      	cmp	r3, r2
 800cf4c:	d130      	bne.n	800cfb0 <UART_SetConfig+0x7a8>
 800cf4e:	4b6f      	ldr	r3, [pc, #444]	; (800d10c <UART_SetConfig+0x904>)
 800cf50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf52:	f003 0307 	and.w	r3, r3, #7
 800cf56:	2b05      	cmp	r3, #5
 800cf58:	d826      	bhi.n	800cfa8 <UART_SetConfig+0x7a0>
 800cf5a:	a201      	add	r2, pc, #4	; (adr r2, 800cf60 <UART_SetConfig+0x758>)
 800cf5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf60:	0800cf79 	.word	0x0800cf79
 800cf64:	0800cf81 	.word	0x0800cf81
 800cf68:	0800cf89 	.word	0x0800cf89
 800cf6c:	0800cf91 	.word	0x0800cf91
 800cf70:	0800cf99 	.word	0x0800cf99
 800cf74:	0800cfa1 	.word	0x0800cfa1
 800cf78:	2302      	movs	r3, #2
 800cf7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf7e:	e01a      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800cf80:	2304      	movs	r3, #4
 800cf82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf86:	e016      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800cf88:	2308      	movs	r3, #8
 800cf8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf8e:	e012      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800cf90:	2310      	movs	r3, #16
 800cf92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf96:	e00e      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800cf98:	2320      	movs	r3, #32
 800cf9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf9e:	e00a      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800cfa0:	2340      	movs	r3, #64	; 0x40
 800cfa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfa6:	e006      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800cfa8:	2380      	movs	r3, #128	; 0x80
 800cfaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfae:	e002      	b.n	800cfb6 <UART_SetConfig+0x7ae>
 800cfb0:	2380      	movs	r3, #128	; 0x80
 800cfb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cfb6:	697b      	ldr	r3, [r7, #20]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	4a55      	ldr	r2, [pc, #340]	; (800d110 <UART_SetConfig+0x908>)
 800cfbc:	4293      	cmp	r3, r2
 800cfbe:	f040 80f8 	bne.w	800d1b2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cfc2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cfc6:	2b20      	cmp	r3, #32
 800cfc8:	dc46      	bgt.n	800d058 <UART_SetConfig+0x850>
 800cfca:	2b02      	cmp	r3, #2
 800cfcc:	db75      	blt.n	800d0ba <UART_SetConfig+0x8b2>
 800cfce:	3b02      	subs	r3, #2
 800cfd0:	2b1e      	cmp	r3, #30
 800cfd2:	d872      	bhi.n	800d0ba <UART_SetConfig+0x8b2>
 800cfd4:	a201      	add	r2, pc, #4	; (adr r2, 800cfdc <UART_SetConfig+0x7d4>)
 800cfd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfda:	bf00      	nop
 800cfdc:	0800d05f 	.word	0x0800d05f
 800cfe0:	0800d0bb 	.word	0x0800d0bb
 800cfe4:	0800d067 	.word	0x0800d067
 800cfe8:	0800d0bb 	.word	0x0800d0bb
 800cfec:	0800d0bb 	.word	0x0800d0bb
 800cff0:	0800d0bb 	.word	0x0800d0bb
 800cff4:	0800d077 	.word	0x0800d077
 800cff8:	0800d0bb 	.word	0x0800d0bb
 800cffc:	0800d0bb 	.word	0x0800d0bb
 800d000:	0800d0bb 	.word	0x0800d0bb
 800d004:	0800d0bb 	.word	0x0800d0bb
 800d008:	0800d0bb 	.word	0x0800d0bb
 800d00c:	0800d0bb 	.word	0x0800d0bb
 800d010:	0800d0bb 	.word	0x0800d0bb
 800d014:	0800d087 	.word	0x0800d087
 800d018:	0800d0bb 	.word	0x0800d0bb
 800d01c:	0800d0bb 	.word	0x0800d0bb
 800d020:	0800d0bb 	.word	0x0800d0bb
 800d024:	0800d0bb 	.word	0x0800d0bb
 800d028:	0800d0bb 	.word	0x0800d0bb
 800d02c:	0800d0bb 	.word	0x0800d0bb
 800d030:	0800d0bb 	.word	0x0800d0bb
 800d034:	0800d0bb 	.word	0x0800d0bb
 800d038:	0800d0bb 	.word	0x0800d0bb
 800d03c:	0800d0bb 	.word	0x0800d0bb
 800d040:	0800d0bb 	.word	0x0800d0bb
 800d044:	0800d0bb 	.word	0x0800d0bb
 800d048:	0800d0bb 	.word	0x0800d0bb
 800d04c:	0800d0bb 	.word	0x0800d0bb
 800d050:	0800d0bb 	.word	0x0800d0bb
 800d054:	0800d0ad 	.word	0x0800d0ad
 800d058:	2b40      	cmp	r3, #64	; 0x40
 800d05a:	d02a      	beq.n	800d0b2 <UART_SetConfig+0x8aa>
 800d05c:	e02d      	b.n	800d0ba <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d05e:	f7fc fe33 	bl	8009cc8 <HAL_RCCEx_GetD3PCLK1Freq>
 800d062:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d064:	e02f      	b.n	800d0c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d066:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d06a:	4618      	mov	r0, r3
 800d06c:	f7fc fe42 	bl	8009cf4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d072:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d074:	e027      	b.n	800d0c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d076:	f107 0318 	add.w	r3, r7, #24
 800d07a:	4618      	mov	r0, r3
 800d07c:	f7fc ff8e 	bl	8009f9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d080:	69fb      	ldr	r3, [r7, #28]
 800d082:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d084:	e01f      	b.n	800d0c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d086:	4b21      	ldr	r3, [pc, #132]	; (800d10c <UART_SetConfig+0x904>)
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	f003 0320 	and.w	r3, r3, #32
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d009      	beq.n	800d0a6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d092:	4b1e      	ldr	r3, [pc, #120]	; (800d10c <UART_SetConfig+0x904>)
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	08db      	lsrs	r3, r3, #3
 800d098:	f003 0303 	and.w	r3, r3, #3
 800d09c:	4a1d      	ldr	r2, [pc, #116]	; (800d114 <UART_SetConfig+0x90c>)
 800d09e:	fa22 f303 	lsr.w	r3, r2, r3
 800d0a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d0a4:	e00f      	b.n	800d0c6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d0a6:	4b1b      	ldr	r3, [pc, #108]	; (800d114 <UART_SetConfig+0x90c>)
 800d0a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0aa:	e00c      	b.n	800d0c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d0ac:	4b1a      	ldr	r3, [pc, #104]	; (800d118 <UART_SetConfig+0x910>)
 800d0ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0b0:	e009      	b.n	800d0c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d0b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d0b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0b8:	e005      	b.n	800d0c6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d0be:	2301      	movs	r3, #1
 800d0c0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d0c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d0c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	f000 81ee 	beq.w	800d4aa <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d0ce:	697b      	ldr	r3, [r7, #20]
 800d0d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0d2:	4a12      	ldr	r2, [pc, #72]	; (800d11c <UART_SetConfig+0x914>)
 800d0d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d0d8:	461a      	mov	r2, r3
 800d0da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0dc:	fbb3 f3f2 	udiv	r3, r3, r2
 800d0e0:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d0e2:	697b      	ldr	r3, [r7, #20]
 800d0e4:	685a      	ldr	r2, [r3, #4]
 800d0e6:	4613      	mov	r3, r2
 800d0e8:	005b      	lsls	r3, r3, #1
 800d0ea:	4413      	add	r3, r2
 800d0ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0ee:	429a      	cmp	r2, r3
 800d0f0:	d305      	bcc.n	800d0fe <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d0f2:	697b      	ldr	r3, [r7, #20]
 800d0f4:	685b      	ldr	r3, [r3, #4]
 800d0f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d0f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0fa:	429a      	cmp	r2, r3
 800d0fc:	d910      	bls.n	800d120 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800d0fe:	2301      	movs	r3, #1
 800d100:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d104:	e1d1      	b.n	800d4aa <UART_SetConfig+0xca2>
 800d106:	bf00      	nop
 800d108:	40011c00 	.word	0x40011c00
 800d10c:	58024400 	.word	0x58024400
 800d110:	58000c00 	.word	0x58000c00
 800d114:	03d09000 	.word	0x03d09000
 800d118:	003d0900 	.word	0x003d0900
 800d11c:	0800e6dc 	.word	0x0800e6dc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d122:	2200      	movs	r2, #0
 800d124:	60bb      	str	r3, [r7, #8]
 800d126:	60fa      	str	r2, [r7, #12]
 800d128:	697b      	ldr	r3, [r7, #20]
 800d12a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d12c:	4ac0      	ldr	r2, [pc, #768]	; (800d430 <UART_SetConfig+0xc28>)
 800d12e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d132:	b29b      	uxth	r3, r3
 800d134:	2200      	movs	r2, #0
 800d136:	603b      	str	r3, [r7, #0]
 800d138:	607a      	str	r2, [r7, #4]
 800d13a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d13e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d142:	f7f3 f8ed 	bl	8000320 <__aeabi_uldivmod>
 800d146:	4602      	mov	r2, r0
 800d148:	460b      	mov	r3, r1
 800d14a:	4610      	mov	r0, r2
 800d14c:	4619      	mov	r1, r3
 800d14e:	f04f 0200 	mov.w	r2, #0
 800d152:	f04f 0300 	mov.w	r3, #0
 800d156:	020b      	lsls	r3, r1, #8
 800d158:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d15c:	0202      	lsls	r2, r0, #8
 800d15e:	6979      	ldr	r1, [r7, #20]
 800d160:	6849      	ldr	r1, [r1, #4]
 800d162:	0849      	lsrs	r1, r1, #1
 800d164:	2000      	movs	r0, #0
 800d166:	460c      	mov	r4, r1
 800d168:	4605      	mov	r5, r0
 800d16a:	eb12 0804 	adds.w	r8, r2, r4
 800d16e:	eb43 0905 	adc.w	r9, r3, r5
 800d172:	697b      	ldr	r3, [r7, #20]
 800d174:	685b      	ldr	r3, [r3, #4]
 800d176:	2200      	movs	r2, #0
 800d178:	469a      	mov	sl, r3
 800d17a:	4693      	mov	fp, r2
 800d17c:	4652      	mov	r2, sl
 800d17e:	465b      	mov	r3, fp
 800d180:	4640      	mov	r0, r8
 800d182:	4649      	mov	r1, r9
 800d184:	f7f3 f8cc 	bl	8000320 <__aeabi_uldivmod>
 800d188:	4602      	mov	r2, r0
 800d18a:	460b      	mov	r3, r1
 800d18c:	4613      	mov	r3, r2
 800d18e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d192:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d196:	d308      	bcc.n	800d1aa <UART_SetConfig+0x9a2>
 800d198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d19a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d19e:	d204      	bcs.n	800d1aa <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800d1a0:	697b      	ldr	r3, [r7, #20]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d1a6:	60da      	str	r2, [r3, #12]
 800d1a8:	e17f      	b.n	800d4aa <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800d1aa:	2301      	movs	r3, #1
 800d1ac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d1b0:	e17b      	b.n	800d4aa <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d1b2:	697b      	ldr	r3, [r7, #20]
 800d1b4:	69db      	ldr	r3, [r3, #28]
 800d1b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d1ba:	f040 80bd 	bne.w	800d338 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800d1be:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d1c2:	2b20      	cmp	r3, #32
 800d1c4:	dc48      	bgt.n	800d258 <UART_SetConfig+0xa50>
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	db7b      	blt.n	800d2c2 <UART_SetConfig+0xaba>
 800d1ca:	2b20      	cmp	r3, #32
 800d1cc:	d879      	bhi.n	800d2c2 <UART_SetConfig+0xaba>
 800d1ce:	a201      	add	r2, pc, #4	; (adr r2, 800d1d4 <UART_SetConfig+0x9cc>)
 800d1d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1d4:	0800d25f 	.word	0x0800d25f
 800d1d8:	0800d267 	.word	0x0800d267
 800d1dc:	0800d2c3 	.word	0x0800d2c3
 800d1e0:	0800d2c3 	.word	0x0800d2c3
 800d1e4:	0800d26f 	.word	0x0800d26f
 800d1e8:	0800d2c3 	.word	0x0800d2c3
 800d1ec:	0800d2c3 	.word	0x0800d2c3
 800d1f0:	0800d2c3 	.word	0x0800d2c3
 800d1f4:	0800d27f 	.word	0x0800d27f
 800d1f8:	0800d2c3 	.word	0x0800d2c3
 800d1fc:	0800d2c3 	.word	0x0800d2c3
 800d200:	0800d2c3 	.word	0x0800d2c3
 800d204:	0800d2c3 	.word	0x0800d2c3
 800d208:	0800d2c3 	.word	0x0800d2c3
 800d20c:	0800d2c3 	.word	0x0800d2c3
 800d210:	0800d2c3 	.word	0x0800d2c3
 800d214:	0800d28f 	.word	0x0800d28f
 800d218:	0800d2c3 	.word	0x0800d2c3
 800d21c:	0800d2c3 	.word	0x0800d2c3
 800d220:	0800d2c3 	.word	0x0800d2c3
 800d224:	0800d2c3 	.word	0x0800d2c3
 800d228:	0800d2c3 	.word	0x0800d2c3
 800d22c:	0800d2c3 	.word	0x0800d2c3
 800d230:	0800d2c3 	.word	0x0800d2c3
 800d234:	0800d2c3 	.word	0x0800d2c3
 800d238:	0800d2c3 	.word	0x0800d2c3
 800d23c:	0800d2c3 	.word	0x0800d2c3
 800d240:	0800d2c3 	.word	0x0800d2c3
 800d244:	0800d2c3 	.word	0x0800d2c3
 800d248:	0800d2c3 	.word	0x0800d2c3
 800d24c:	0800d2c3 	.word	0x0800d2c3
 800d250:	0800d2c3 	.word	0x0800d2c3
 800d254:	0800d2b5 	.word	0x0800d2b5
 800d258:	2b40      	cmp	r3, #64	; 0x40
 800d25a:	d02e      	beq.n	800d2ba <UART_SetConfig+0xab2>
 800d25c:	e031      	b.n	800d2c2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d25e:	f7fb fb67 	bl	8008930 <HAL_RCC_GetPCLK1Freq>
 800d262:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d264:	e033      	b.n	800d2ce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d266:	f7fb fb79 	bl	800895c <HAL_RCC_GetPCLK2Freq>
 800d26a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d26c:	e02f      	b.n	800d2ce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d26e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d272:	4618      	mov	r0, r3
 800d274:	f7fc fd3e 	bl	8009cf4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d27a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d27c:	e027      	b.n	800d2ce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d27e:	f107 0318 	add.w	r3, r7, #24
 800d282:	4618      	mov	r0, r3
 800d284:	f7fc fe8a 	bl	8009f9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d288:	69fb      	ldr	r3, [r7, #28]
 800d28a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d28c:	e01f      	b.n	800d2ce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d28e:	4b69      	ldr	r3, [pc, #420]	; (800d434 <UART_SetConfig+0xc2c>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	f003 0320 	and.w	r3, r3, #32
 800d296:	2b00      	cmp	r3, #0
 800d298:	d009      	beq.n	800d2ae <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d29a:	4b66      	ldr	r3, [pc, #408]	; (800d434 <UART_SetConfig+0xc2c>)
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	08db      	lsrs	r3, r3, #3
 800d2a0:	f003 0303 	and.w	r3, r3, #3
 800d2a4:	4a64      	ldr	r2, [pc, #400]	; (800d438 <UART_SetConfig+0xc30>)
 800d2a6:	fa22 f303 	lsr.w	r3, r2, r3
 800d2aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d2ac:	e00f      	b.n	800d2ce <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800d2ae:	4b62      	ldr	r3, [pc, #392]	; (800d438 <UART_SetConfig+0xc30>)
 800d2b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d2b2:	e00c      	b.n	800d2ce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d2b4:	4b61      	ldr	r3, [pc, #388]	; (800d43c <UART_SetConfig+0xc34>)
 800d2b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d2b8:	e009      	b.n	800d2ce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d2ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d2be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d2c0:	e005      	b.n	800d2ce <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d2c6:	2301      	movs	r3, #1
 800d2c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d2cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d2ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	f000 80ea 	beq.w	800d4aa <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d2d6:	697b      	ldr	r3, [r7, #20]
 800d2d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2da:	4a55      	ldr	r2, [pc, #340]	; (800d430 <UART_SetConfig+0xc28>)
 800d2dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d2e0:	461a      	mov	r2, r3
 800d2e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d2e8:	005a      	lsls	r2, r3, #1
 800d2ea:	697b      	ldr	r3, [r7, #20]
 800d2ec:	685b      	ldr	r3, [r3, #4]
 800d2ee:	085b      	lsrs	r3, r3, #1
 800d2f0:	441a      	add	r2, r3
 800d2f2:	697b      	ldr	r3, [r7, #20]
 800d2f4:	685b      	ldr	r3, [r3, #4]
 800d2f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d2fa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2fe:	2b0f      	cmp	r3, #15
 800d300:	d916      	bls.n	800d330 <UART_SetConfig+0xb28>
 800d302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d308:	d212      	bcs.n	800d330 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d30a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d30c:	b29b      	uxth	r3, r3
 800d30e:	f023 030f 	bic.w	r3, r3, #15
 800d312:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d316:	085b      	lsrs	r3, r3, #1
 800d318:	b29b      	uxth	r3, r3
 800d31a:	f003 0307 	and.w	r3, r3, #7
 800d31e:	b29a      	uxth	r2, r3
 800d320:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d322:	4313      	orrs	r3, r2
 800d324:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800d326:	697b      	ldr	r3, [r7, #20]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d32c:	60da      	str	r2, [r3, #12]
 800d32e:	e0bc      	b.n	800d4aa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d330:	2301      	movs	r3, #1
 800d332:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d336:	e0b8      	b.n	800d4aa <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d338:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d33c:	2b20      	cmp	r3, #32
 800d33e:	dc4b      	bgt.n	800d3d8 <UART_SetConfig+0xbd0>
 800d340:	2b00      	cmp	r3, #0
 800d342:	f2c0 8087 	blt.w	800d454 <UART_SetConfig+0xc4c>
 800d346:	2b20      	cmp	r3, #32
 800d348:	f200 8084 	bhi.w	800d454 <UART_SetConfig+0xc4c>
 800d34c:	a201      	add	r2, pc, #4	; (adr r2, 800d354 <UART_SetConfig+0xb4c>)
 800d34e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d352:	bf00      	nop
 800d354:	0800d3df 	.word	0x0800d3df
 800d358:	0800d3e7 	.word	0x0800d3e7
 800d35c:	0800d455 	.word	0x0800d455
 800d360:	0800d455 	.word	0x0800d455
 800d364:	0800d3ef 	.word	0x0800d3ef
 800d368:	0800d455 	.word	0x0800d455
 800d36c:	0800d455 	.word	0x0800d455
 800d370:	0800d455 	.word	0x0800d455
 800d374:	0800d3ff 	.word	0x0800d3ff
 800d378:	0800d455 	.word	0x0800d455
 800d37c:	0800d455 	.word	0x0800d455
 800d380:	0800d455 	.word	0x0800d455
 800d384:	0800d455 	.word	0x0800d455
 800d388:	0800d455 	.word	0x0800d455
 800d38c:	0800d455 	.word	0x0800d455
 800d390:	0800d455 	.word	0x0800d455
 800d394:	0800d40f 	.word	0x0800d40f
 800d398:	0800d455 	.word	0x0800d455
 800d39c:	0800d455 	.word	0x0800d455
 800d3a0:	0800d455 	.word	0x0800d455
 800d3a4:	0800d455 	.word	0x0800d455
 800d3a8:	0800d455 	.word	0x0800d455
 800d3ac:	0800d455 	.word	0x0800d455
 800d3b0:	0800d455 	.word	0x0800d455
 800d3b4:	0800d455 	.word	0x0800d455
 800d3b8:	0800d455 	.word	0x0800d455
 800d3bc:	0800d455 	.word	0x0800d455
 800d3c0:	0800d455 	.word	0x0800d455
 800d3c4:	0800d455 	.word	0x0800d455
 800d3c8:	0800d455 	.word	0x0800d455
 800d3cc:	0800d455 	.word	0x0800d455
 800d3d0:	0800d455 	.word	0x0800d455
 800d3d4:	0800d447 	.word	0x0800d447
 800d3d8:	2b40      	cmp	r3, #64	; 0x40
 800d3da:	d037      	beq.n	800d44c <UART_SetConfig+0xc44>
 800d3dc:	e03a      	b.n	800d454 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d3de:	f7fb faa7 	bl	8008930 <HAL_RCC_GetPCLK1Freq>
 800d3e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d3e4:	e03c      	b.n	800d460 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d3e6:	f7fb fab9 	bl	800895c <HAL_RCC_GetPCLK2Freq>
 800d3ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d3ec:	e038      	b.n	800d460 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d3ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	f7fc fc7e 	bl	8009cf4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d3f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d3fc:	e030      	b.n	800d460 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d3fe:	f107 0318 	add.w	r3, r7, #24
 800d402:	4618      	mov	r0, r3
 800d404:	f7fc fdca 	bl	8009f9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d408:	69fb      	ldr	r3, [r7, #28]
 800d40a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d40c:	e028      	b.n	800d460 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d40e:	4b09      	ldr	r3, [pc, #36]	; (800d434 <UART_SetConfig+0xc2c>)
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	f003 0320 	and.w	r3, r3, #32
 800d416:	2b00      	cmp	r3, #0
 800d418:	d012      	beq.n	800d440 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d41a:	4b06      	ldr	r3, [pc, #24]	; (800d434 <UART_SetConfig+0xc2c>)
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	08db      	lsrs	r3, r3, #3
 800d420:	f003 0303 	and.w	r3, r3, #3
 800d424:	4a04      	ldr	r2, [pc, #16]	; (800d438 <UART_SetConfig+0xc30>)
 800d426:	fa22 f303 	lsr.w	r3, r2, r3
 800d42a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d42c:	e018      	b.n	800d460 <UART_SetConfig+0xc58>
 800d42e:	bf00      	nop
 800d430:	0800e6dc 	.word	0x0800e6dc
 800d434:	58024400 	.word	0x58024400
 800d438:	03d09000 	.word	0x03d09000
 800d43c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800d440:	4b24      	ldr	r3, [pc, #144]	; (800d4d4 <UART_SetConfig+0xccc>)
 800d442:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d444:	e00c      	b.n	800d460 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d446:	4b24      	ldr	r3, [pc, #144]	; (800d4d8 <UART_SetConfig+0xcd0>)
 800d448:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d44a:	e009      	b.n	800d460 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d44c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d450:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d452:	e005      	b.n	800d460 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800d454:	2300      	movs	r3, #0
 800d456:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d458:	2301      	movs	r3, #1
 800d45a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d45e:	bf00      	nop
    }

    if (pclk != 0U)
 800d460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d462:	2b00      	cmp	r3, #0
 800d464:	d021      	beq.n	800d4aa <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d466:	697b      	ldr	r3, [r7, #20]
 800d468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d46a:	4a1c      	ldr	r2, [pc, #112]	; (800d4dc <UART_SetConfig+0xcd4>)
 800d46c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d470:	461a      	mov	r2, r3
 800d472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d474:	fbb3 f2f2 	udiv	r2, r3, r2
 800d478:	697b      	ldr	r3, [r7, #20]
 800d47a:	685b      	ldr	r3, [r3, #4]
 800d47c:	085b      	lsrs	r3, r3, #1
 800d47e:	441a      	add	r2, r3
 800d480:	697b      	ldr	r3, [r7, #20]
 800d482:	685b      	ldr	r3, [r3, #4]
 800d484:	fbb2 f3f3 	udiv	r3, r2, r3
 800d488:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d48a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d48c:	2b0f      	cmp	r3, #15
 800d48e:	d909      	bls.n	800d4a4 <UART_SetConfig+0xc9c>
 800d490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d492:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d496:	d205      	bcs.n	800d4a4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d49a:	b29a      	uxth	r2, r3
 800d49c:	697b      	ldr	r3, [r7, #20]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	60da      	str	r2, [r3, #12]
 800d4a2:	e002      	b.n	800d4aa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d4a4:	2301      	movs	r3, #1
 800d4a6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d4aa:	697b      	ldr	r3, [r7, #20]
 800d4ac:	2201      	movs	r2, #1
 800d4ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d4b2:	697b      	ldr	r3, [r7, #20]
 800d4b4:	2201      	movs	r2, #1
 800d4b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d4ba:	697b      	ldr	r3, [r7, #20]
 800d4bc:	2200      	movs	r2, #0
 800d4be:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800d4c0:	697b      	ldr	r3, [r7, #20]
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800d4c6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	3748      	adds	r7, #72	; 0x48
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d4d4:	03d09000 	.word	0x03d09000
 800d4d8:	003d0900 	.word	0x003d0900
 800d4dc:	0800e6dc 	.word	0x0800e6dc

0800d4e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d4e0:	b480      	push	{r7}
 800d4e2:	b083      	sub	sp, #12
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4ec:	f003 0301 	and.w	r3, r3, #1
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d00a      	beq.n	800d50a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	685b      	ldr	r3, [r3, #4]
 800d4fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	430a      	orrs	r2, r1
 800d508:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d50e:	f003 0302 	and.w	r3, r3, #2
 800d512:	2b00      	cmp	r3, #0
 800d514:	d00a      	beq.n	800d52c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	685b      	ldr	r3, [r3, #4]
 800d51c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	430a      	orrs	r2, r1
 800d52a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d530:	f003 0304 	and.w	r3, r3, #4
 800d534:	2b00      	cmp	r3, #0
 800d536:	d00a      	beq.n	800d54e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	685b      	ldr	r3, [r3, #4]
 800d53e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	430a      	orrs	r2, r1
 800d54c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d552:	f003 0308 	and.w	r3, r3, #8
 800d556:	2b00      	cmp	r3, #0
 800d558:	d00a      	beq.n	800d570 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	685b      	ldr	r3, [r3, #4]
 800d560:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	430a      	orrs	r2, r1
 800d56e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d574:	f003 0310 	and.w	r3, r3, #16
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d00a      	beq.n	800d592 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	689b      	ldr	r3, [r3, #8]
 800d582:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	430a      	orrs	r2, r1
 800d590:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d596:	f003 0320 	and.w	r3, r3, #32
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d00a      	beq.n	800d5b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	689b      	ldr	r3, [r3, #8]
 800d5a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	430a      	orrs	r2, r1
 800d5b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d01a      	beq.n	800d5f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	685b      	ldr	r3, [r3, #4]
 800d5c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	430a      	orrs	r2, r1
 800d5d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d5de:	d10a      	bne.n	800d5f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	685b      	ldr	r3, [r3, #4]
 800d5e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	430a      	orrs	r2, r1
 800d5f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d00a      	beq.n	800d618 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	685b      	ldr	r3, [r3, #4]
 800d608:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	430a      	orrs	r2, r1
 800d616:	605a      	str	r2, [r3, #4]
  }
}
 800d618:	bf00      	nop
 800d61a:	370c      	adds	r7, #12
 800d61c:	46bd      	mov	sp, r7
 800d61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d622:	4770      	bx	lr

0800d624 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b098      	sub	sp, #96	; 0x60
 800d628:	af02      	add	r7, sp, #8
 800d62a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2200      	movs	r2, #0
 800d630:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d634:	f7f7 f8f0 	bl	8004818 <HAL_GetTick>
 800d638:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	f003 0308 	and.w	r3, r3, #8
 800d644:	2b08      	cmp	r3, #8
 800d646:	d12f      	bne.n	800d6a8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d648:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d64c:	9300      	str	r3, [sp, #0]
 800d64e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d650:	2200      	movs	r2, #0
 800d652:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d656:	6878      	ldr	r0, [r7, #4]
 800d658:	f000 f88e 	bl	800d778 <UART_WaitOnFlagUntilTimeout>
 800d65c:	4603      	mov	r3, r0
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d022      	beq.n	800d6a8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d66a:	e853 3f00 	ldrex	r3, [r3]
 800d66e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d672:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d676:	653b      	str	r3, [r7, #80]	; 0x50
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	461a      	mov	r2, r3
 800d67e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d680:	647b      	str	r3, [r7, #68]	; 0x44
 800d682:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d684:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d686:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d688:	e841 2300 	strex	r3, r2, [r1]
 800d68c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d68e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d690:	2b00      	cmp	r3, #0
 800d692:	d1e6      	bne.n	800d662 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2220      	movs	r2, #32
 800d698:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	2200      	movs	r2, #0
 800d6a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d6a4:	2303      	movs	r3, #3
 800d6a6:	e063      	b.n	800d770 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	f003 0304 	and.w	r3, r3, #4
 800d6b2:	2b04      	cmp	r3, #4
 800d6b4:	d149      	bne.n	800d74a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d6b6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d6ba:	9300      	str	r3, [sp, #0]
 800d6bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d6be:	2200      	movs	r2, #0
 800d6c0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d6c4:	6878      	ldr	r0, [r7, #4]
 800d6c6:	f000 f857 	bl	800d778 <UART_WaitOnFlagUntilTimeout>
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d03c      	beq.n	800d74a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6d8:	e853 3f00 	ldrex	r3, [r3]
 800d6dc:	623b      	str	r3, [r7, #32]
   return(result);
 800d6de:	6a3b      	ldr	r3, [r7, #32]
 800d6e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d6e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	461a      	mov	r2, r3
 800d6ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6ee:	633b      	str	r3, [r7, #48]	; 0x30
 800d6f0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d6f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6f6:	e841 2300 	strex	r3, r2, [r1]
 800d6fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d1e6      	bne.n	800d6d0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	3308      	adds	r3, #8
 800d708:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d70a:	693b      	ldr	r3, [r7, #16]
 800d70c:	e853 3f00 	ldrex	r3, [r3]
 800d710:	60fb      	str	r3, [r7, #12]
   return(result);
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	f023 0301 	bic.w	r3, r3, #1
 800d718:	64bb      	str	r3, [r7, #72]	; 0x48
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	3308      	adds	r3, #8
 800d720:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d722:	61fa      	str	r2, [r7, #28]
 800d724:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d726:	69b9      	ldr	r1, [r7, #24]
 800d728:	69fa      	ldr	r2, [r7, #28]
 800d72a:	e841 2300 	strex	r3, r2, [r1]
 800d72e:	617b      	str	r3, [r7, #20]
   return(result);
 800d730:	697b      	ldr	r3, [r7, #20]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d1e5      	bne.n	800d702 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	2220      	movs	r2, #32
 800d73a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	2200      	movs	r2, #0
 800d742:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d746:	2303      	movs	r3, #3
 800d748:	e012      	b.n	800d770 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	2220      	movs	r2, #32
 800d74e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	2220      	movs	r2, #32
 800d756:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	2200      	movs	r2, #0
 800d75e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	2200      	movs	r2, #0
 800d764:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	2200      	movs	r2, #0
 800d76a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d76e:	2300      	movs	r3, #0
}
 800d770:	4618      	mov	r0, r3
 800d772:	3758      	adds	r7, #88	; 0x58
 800d774:	46bd      	mov	sp, r7
 800d776:	bd80      	pop	{r7, pc}

0800d778 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b084      	sub	sp, #16
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	60f8      	str	r0, [r7, #12]
 800d780:	60b9      	str	r1, [r7, #8]
 800d782:	603b      	str	r3, [r7, #0]
 800d784:	4613      	mov	r3, r2
 800d786:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d788:	e049      	b.n	800d81e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d78a:	69bb      	ldr	r3, [r7, #24]
 800d78c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d790:	d045      	beq.n	800d81e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d792:	f7f7 f841 	bl	8004818 <HAL_GetTick>
 800d796:	4602      	mov	r2, r0
 800d798:	683b      	ldr	r3, [r7, #0]
 800d79a:	1ad3      	subs	r3, r2, r3
 800d79c:	69ba      	ldr	r2, [r7, #24]
 800d79e:	429a      	cmp	r2, r3
 800d7a0:	d302      	bcc.n	800d7a8 <UART_WaitOnFlagUntilTimeout+0x30>
 800d7a2:	69bb      	ldr	r3, [r7, #24]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d101      	bne.n	800d7ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d7a8:	2303      	movs	r3, #3
 800d7aa:	e048      	b.n	800d83e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	f003 0304 	and.w	r3, r3, #4
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d031      	beq.n	800d81e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	69db      	ldr	r3, [r3, #28]
 800d7c0:	f003 0308 	and.w	r3, r3, #8
 800d7c4:	2b08      	cmp	r3, #8
 800d7c6:	d110      	bne.n	800d7ea <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	2208      	movs	r2, #8
 800d7ce:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800d7d0:	68f8      	ldr	r0, [r7, #12]
 800d7d2:	f000 f921 	bl	800da18 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	2208      	movs	r2, #8
 800d7da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800d7e6:	2301      	movs	r3, #1
 800d7e8:	e029      	b.n	800d83e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	69db      	ldr	r3, [r3, #28]
 800d7f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d7f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d7f8:	d111      	bne.n	800d81e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d802:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d804:	68f8      	ldr	r0, [r7, #12]
 800d806:	f000 f907 	bl	800da18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	2220      	movs	r2, #32
 800d80e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	2200      	movs	r2, #0
 800d816:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800d81a:	2303      	movs	r3, #3
 800d81c:	e00f      	b.n	800d83e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	69da      	ldr	r2, [r3, #28]
 800d824:	68bb      	ldr	r3, [r7, #8]
 800d826:	4013      	ands	r3, r2
 800d828:	68ba      	ldr	r2, [r7, #8]
 800d82a:	429a      	cmp	r2, r3
 800d82c:	bf0c      	ite	eq
 800d82e:	2301      	moveq	r3, #1
 800d830:	2300      	movne	r3, #0
 800d832:	b2db      	uxtb	r3, r3
 800d834:	461a      	mov	r2, r3
 800d836:	79fb      	ldrb	r3, [r7, #7]
 800d838:	429a      	cmp	r2, r3
 800d83a:	d0a6      	beq.n	800d78a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d83c:	2300      	movs	r3, #0
}
 800d83e:	4618      	mov	r0, r3
 800d840:	3710      	adds	r7, #16
 800d842:	46bd      	mov	sp, r7
 800d844:	bd80      	pop	{r7, pc}
	...

0800d848 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b096      	sub	sp, #88	; 0x58
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	60f8      	str	r0, [r7, #12]
 800d850:	60b9      	str	r1, [r7, #8]
 800d852:	4613      	mov	r3, r2
 800d854:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	68ba      	ldr	r2, [r7, #8]
 800d85a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	88fa      	ldrh	r2, [r7, #6]
 800d860:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	2200      	movs	r2, #0
 800d868:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	2222      	movs	r2, #34	; 0x22
 800d870:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d02d      	beq.n	800d8da <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d884:	4a40      	ldr	r2, [pc, #256]	; (800d988 <UART_Start_Receive_DMA+0x140>)
 800d886:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d88e:	4a3f      	ldr	r2, [pc, #252]	; (800d98c <UART_Start_Receive_DMA+0x144>)
 800d890:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d898:	4a3d      	ldr	r2, [pc, #244]	; (800d990 <UART_Start_Receive_DMA+0x148>)
 800d89a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	3324      	adds	r3, #36	; 0x24
 800d8b2:	4619      	mov	r1, r3
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d8b8:	461a      	mov	r2, r3
 800d8ba:	88fb      	ldrh	r3, [r7, #6]
 800d8bc:	f7f7 fc22 	bl	8005104 <HAL_DMA_Start_IT>
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d009      	beq.n	800d8da <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	2210      	movs	r2, #16
 800d8ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	2220      	movs	r2, #32
 800d8d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800d8d6:	2301      	movs	r3, #1
 800d8d8:	e051      	b.n	800d97e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	691b      	ldr	r3, [r3, #16]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d018      	beq.n	800d914 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8ea:	e853 3f00 	ldrex	r3, [r3]
 800d8ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d8f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d8f6:	657b      	str	r3, [r7, #84]	; 0x54
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	461a      	mov	r2, r3
 800d8fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d900:	64bb      	str	r3, [r7, #72]	; 0x48
 800d902:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d904:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d906:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d908:	e841 2300 	strex	r3, r2, [r1]
 800d90c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d90e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d910:	2b00      	cmp	r3, #0
 800d912:	d1e6      	bne.n	800d8e2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	3308      	adds	r3, #8
 800d91a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d91c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d91e:	e853 3f00 	ldrex	r3, [r3]
 800d922:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d926:	f043 0301 	orr.w	r3, r3, #1
 800d92a:	653b      	str	r3, [r7, #80]	; 0x50
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	3308      	adds	r3, #8
 800d932:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d934:	637a      	str	r2, [r7, #52]	; 0x34
 800d936:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d938:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d93a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d93c:	e841 2300 	strex	r3, r2, [r1]
 800d940:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d944:	2b00      	cmp	r3, #0
 800d946:	d1e5      	bne.n	800d914 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	3308      	adds	r3, #8
 800d94e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d950:	697b      	ldr	r3, [r7, #20]
 800d952:	e853 3f00 	ldrex	r3, [r3]
 800d956:	613b      	str	r3, [r7, #16]
   return(result);
 800d958:	693b      	ldr	r3, [r7, #16]
 800d95a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d95e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	3308      	adds	r3, #8
 800d966:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d968:	623a      	str	r2, [r7, #32]
 800d96a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d96c:	69f9      	ldr	r1, [r7, #28]
 800d96e:	6a3a      	ldr	r2, [r7, #32]
 800d970:	e841 2300 	strex	r3, r2, [r1]
 800d974:	61bb      	str	r3, [r7, #24]
   return(result);
 800d976:	69bb      	ldr	r3, [r7, #24]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d1e5      	bne.n	800d948 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800d97c:	2300      	movs	r3, #0
}
 800d97e:	4618      	mov	r0, r3
 800d980:	3758      	adds	r7, #88	; 0x58
 800d982:	46bd      	mov	sp, r7
 800d984:	bd80      	pop	{r7, pc}
 800d986:	bf00      	nop
 800d988:	0800db97 	.word	0x0800db97
 800d98c:	0800dcbf 	.word	0x0800dcbf
 800d990:	0800dcfd 	.word	0x0800dcfd

0800d994 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d994:	b480      	push	{r7}
 800d996:	b08f      	sub	sp, #60	; 0x3c
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9a2:	6a3b      	ldr	r3, [r7, #32]
 800d9a4:	e853 3f00 	ldrex	r3, [r3]
 800d9a8:	61fb      	str	r3, [r7, #28]
   return(result);
 800d9aa:	69fb      	ldr	r3, [r7, #28]
 800d9ac:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d9b0:	637b      	str	r3, [r7, #52]	; 0x34
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	461a      	mov	r2, r3
 800d9b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d9bc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d9c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d9c2:	e841 2300 	strex	r3, r2, [r1]
 800d9c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d1e6      	bne.n	800d99c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	3308      	adds	r3, #8
 800d9d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	e853 3f00 	ldrex	r3, [r3]
 800d9dc:	60bb      	str	r3, [r7, #8]
   return(result);
 800d9de:	68bb      	ldr	r3, [r7, #8]
 800d9e0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d9e4:	633b      	str	r3, [r7, #48]	; 0x30
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	3308      	adds	r3, #8
 800d9ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9ee:	61ba      	str	r2, [r7, #24]
 800d9f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9f2:	6979      	ldr	r1, [r7, #20]
 800d9f4:	69ba      	ldr	r2, [r7, #24]
 800d9f6:	e841 2300 	strex	r3, r2, [r1]
 800d9fa:	613b      	str	r3, [r7, #16]
   return(result);
 800d9fc:	693b      	ldr	r3, [r7, #16]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d1e5      	bne.n	800d9ce <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2220      	movs	r2, #32
 800da06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800da0a:	bf00      	nop
 800da0c:	373c      	adds	r7, #60	; 0x3c
 800da0e:	46bd      	mov	sp, r7
 800da10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da14:	4770      	bx	lr
	...

0800da18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800da18:	b480      	push	{r7}
 800da1a:	b095      	sub	sp, #84	; 0x54
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da28:	e853 3f00 	ldrex	r3, [r3]
 800da2c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800da2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800da34:	64fb      	str	r3, [r7, #76]	; 0x4c
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	461a      	mov	r2, r3
 800da3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da3e:	643b      	str	r3, [r7, #64]	; 0x40
 800da40:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da42:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800da44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800da46:	e841 2300 	strex	r3, r2, [r1]
 800da4a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800da4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d1e6      	bne.n	800da20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	3308      	adds	r3, #8
 800da58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da5a:	6a3b      	ldr	r3, [r7, #32]
 800da5c:	e853 3f00 	ldrex	r3, [r3]
 800da60:	61fb      	str	r3, [r7, #28]
   return(result);
 800da62:	69fa      	ldr	r2, [r7, #28]
 800da64:	4b1e      	ldr	r3, [pc, #120]	; (800dae0 <UART_EndRxTransfer+0xc8>)
 800da66:	4013      	ands	r3, r2
 800da68:	64bb      	str	r3, [r7, #72]	; 0x48
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	3308      	adds	r3, #8
 800da70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800da72:	62fa      	str	r2, [r7, #44]	; 0x2c
 800da74:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800da78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da7a:	e841 2300 	strex	r3, r2, [r1]
 800da7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800da80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da82:	2b00      	cmp	r3, #0
 800da84:	d1e5      	bne.n	800da52 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da8a:	2b01      	cmp	r3, #1
 800da8c:	d118      	bne.n	800dac0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	e853 3f00 	ldrex	r3, [r3]
 800da9a:	60bb      	str	r3, [r7, #8]
   return(result);
 800da9c:	68bb      	ldr	r3, [r7, #8]
 800da9e:	f023 0310 	bic.w	r3, r3, #16
 800daa2:	647b      	str	r3, [r7, #68]	; 0x44
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	461a      	mov	r2, r3
 800daaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800daac:	61bb      	str	r3, [r7, #24]
 800daae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dab0:	6979      	ldr	r1, [r7, #20]
 800dab2:	69ba      	ldr	r2, [r7, #24]
 800dab4:	e841 2300 	strex	r3, r2, [r1]
 800dab8:	613b      	str	r3, [r7, #16]
   return(result);
 800daba:	693b      	ldr	r3, [r7, #16]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d1e6      	bne.n	800da8e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	2220      	movs	r2, #32
 800dac4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	2200      	movs	r2, #0
 800dacc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	2200      	movs	r2, #0
 800dad2:	675a      	str	r2, [r3, #116]	; 0x74
}
 800dad4:	bf00      	nop
 800dad6:	3754      	adds	r7, #84	; 0x54
 800dad8:	46bd      	mov	sp, r7
 800dada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dade:	4770      	bx	lr
 800dae0:	effffffe 	.word	0xeffffffe

0800dae4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b090      	sub	sp, #64	; 0x40
 800dae8:	af00      	add	r7, sp, #0
 800daea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daf0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	69db      	ldr	r3, [r3, #28]
 800daf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dafa:	d037      	beq.n	800db6c <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800dafc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dafe:	2200      	movs	r2, #0
 800db00:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800db04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	3308      	adds	r3, #8
 800db0a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db0e:	e853 3f00 	ldrex	r3, [r3]
 800db12:	623b      	str	r3, [r7, #32]
   return(result);
 800db14:	6a3b      	ldr	r3, [r7, #32]
 800db16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800db1a:	63bb      	str	r3, [r7, #56]	; 0x38
 800db1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	3308      	adds	r3, #8
 800db22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800db24:	633a      	str	r2, [r7, #48]	; 0x30
 800db26:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800db2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db2c:	e841 2300 	strex	r3, r2, [r1]
 800db30:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800db32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db34:	2b00      	cmp	r3, #0
 800db36:	d1e5      	bne.n	800db04 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800db38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db3e:	693b      	ldr	r3, [r7, #16]
 800db40:	e853 3f00 	ldrex	r3, [r3]
 800db44:	60fb      	str	r3, [r7, #12]
   return(result);
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db4c:	637b      	str	r3, [r7, #52]	; 0x34
 800db4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	461a      	mov	r2, r3
 800db54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db56:	61fb      	str	r3, [r7, #28]
 800db58:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db5a:	69b9      	ldr	r1, [r7, #24]
 800db5c:	69fa      	ldr	r2, [r7, #28]
 800db5e:	e841 2300 	strex	r3, r2, [r1]
 800db62:	617b      	str	r3, [r7, #20]
   return(result);
 800db64:	697b      	ldr	r3, [r7, #20]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d1e6      	bne.n	800db38 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800db6a:	e002      	b.n	800db72 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800db6c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800db6e:	f7f5 fbaf 	bl	80032d0 <HAL_UART_TxCpltCallback>
}
 800db72:	bf00      	nop
 800db74:	3740      	adds	r7, #64	; 0x40
 800db76:	46bd      	mov	sp, r7
 800db78:	bd80      	pop	{r7, pc}

0800db7a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800db7a:	b580      	push	{r7, lr}
 800db7c:	b084      	sub	sp, #16
 800db7e:	af00      	add	r7, sp, #0
 800db80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db86:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800db88:	68f8      	ldr	r0, [r7, #12]
 800db8a:	f7fe fe09 	bl	800c7a0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800db8e:	bf00      	nop
 800db90:	3710      	adds	r7, #16
 800db92:	46bd      	mov	sp, r7
 800db94:	bd80      	pop	{r7, pc}

0800db96 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800db96:	b580      	push	{r7, lr}
 800db98:	b09c      	sub	sp, #112	; 0x70
 800db9a:	af00      	add	r7, sp, #0
 800db9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dba2:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	69db      	ldr	r3, [r3, #28]
 800dba8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dbac:	d071      	beq.n	800dc92 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800dbae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dbb0:	2200      	movs	r2, #0
 800dbb2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dbb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbbe:	e853 3f00 	ldrex	r3, [r3]
 800dbc2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800dbc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dbc6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dbca:	66bb      	str	r3, [r7, #104]	; 0x68
 800dbcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	461a      	mov	r2, r3
 800dbd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dbd4:	65bb      	str	r3, [r7, #88]	; 0x58
 800dbd6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbd8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dbda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dbdc:	e841 2300 	strex	r3, r2, [r1]
 800dbe0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800dbe2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d1e6      	bne.n	800dbb6 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dbe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	3308      	adds	r3, #8
 800dbee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbf2:	e853 3f00 	ldrex	r3, [r3]
 800dbf6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800dbf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbfa:	f023 0301 	bic.w	r3, r3, #1
 800dbfe:	667b      	str	r3, [r7, #100]	; 0x64
 800dc00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	3308      	adds	r3, #8
 800dc06:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800dc08:	647a      	str	r2, [r7, #68]	; 0x44
 800dc0a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc0c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dc0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dc10:	e841 2300 	strex	r3, r2, [r1]
 800dc14:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dc16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d1e5      	bne.n	800dbe8 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dc1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	3308      	adds	r3, #8
 800dc22:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc26:	e853 3f00 	ldrex	r3, [r3]
 800dc2a:	623b      	str	r3, [r7, #32]
   return(result);
 800dc2c:	6a3b      	ldr	r3, [r7, #32]
 800dc2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dc32:	663b      	str	r3, [r7, #96]	; 0x60
 800dc34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	3308      	adds	r3, #8
 800dc3a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dc3c:	633a      	str	r2, [r7, #48]	; 0x30
 800dc3e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dc42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc44:	e841 2300 	strex	r3, r2, [r1]
 800dc48:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dc4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d1e5      	bne.n	800dc1c <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800dc50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc52:	2220      	movs	r2, #32
 800dc54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dc58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc5c:	2b01      	cmp	r3, #1
 800dc5e:	d118      	bne.n	800dc92 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc66:	693b      	ldr	r3, [r7, #16]
 800dc68:	e853 3f00 	ldrex	r3, [r3]
 800dc6c:	60fb      	str	r3, [r7, #12]
   return(result);
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	f023 0310 	bic.w	r3, r3, #16
 800dc74:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dc76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	461a      	mov	r2, r3
 800dc7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dc7e:	61fb      	str	r3, [r7, #28]
 800dc80:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc82:	69b9      	ldr	r1, [r7, #24]
 800dc84:	69fa      	ldr	r2, [r7, #28]
 800dc86:	e841 2300 	strex	r3, r2, [r1]
 800dc8a:	617b      	str	r3, [r7, #20]
   return(result);
 800dc8c:	697b      	ldr	r3, [r7, #20]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d1e6      	bne.n	800dc60 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dc92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc94:	2200      	movs	r2, #0
 800dc96:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dc98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc9c:	2b01      	cmp	r3, #1
 800dc9e:	d107      	bne.n	800dcb0 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dca0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dca2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dca6:	4619      	mov	r1, r3
 800dca8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800dcaa:	f7fe fda1 	bl	800c7f0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800dcae:	e002      	b.n	800dcb6 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800dcb0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800dcb2:	f7fe fd7f 	bl	800c7b4 <HAL_UART_RxCpltCallback>
}
 800dcb6:	bf00      	nop
 800dcb8:	3770      	adds	r7, #112	; 0x70
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	bd80      	pop	{r7, pc}

0800dcbe <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800dcbe:	b580      	push	{r7, lr}
 800dcc0:	b084      	sub	sp, #16
 800dcc2:	af00      	add	r7, sp, #0
 800dcc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcca:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	2201      	movs	r2, #1
 800dcd0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dcd6:	2b01      	cmp	r3, #1
 800dcd8:	d109      	bne.n	800dcee <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dce0:	085b      	lsrs	r3, r3, #1
 800dce2:	b29b      	uxth	r3, r3
 800dce4:	4619      	mov	r1, r3
 800dce6:	68f8      	ldr	r0, [r7, #12]
 800dce8:	f7fe fd82 	bl	800c7f0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800dcec:	e002      	b.n	800dcf4 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800dcee:	68f8      	ldr	r0, [r7, #12]
 800dcf0:	f7fe fd6a 	bl	800c7c8 <HAL_UART_RxHalfCpltCallback>
}
 800dcf4:	bf00      	nop
 800dcf6:	3710      	adds	r7, #16
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	bd80      	pop	{r7, pc}

0800dcfc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b086      	sub	sp, #24
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd08:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800dd0a:	697b      	ldr	r3, [r7, #20]
 800dd0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd10:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800dd12:	697b      	ldr	r3, [r7, #20]
 800dd14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dd18:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800dd1a:	697b      	ldr	r3, [r7, #20]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	689b      	ldr	r3, [r3, #8]
 800dd20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd24:	2b80      	cmp	r3, #128	; 0x80
 800dd26:	d109      	bne.n	800dd3c <UART_DMAError+0x40>
 800dd28:	693b      	ldr	r3, [r7, #16]
 800dd2a:	2b21      	cmp	r3, #33	; 0x21
 800dd2c:	d106      	bne.n	800dd3c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800dd2e:	697b      	ldr	r3, [r7, #20]
 800dd30:	2200      	movs	r2, #0
 800dd32:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800dd36:	6978      	ldr	r0, [r7, #20]
 800dd38:	f7ff fe2c 	bl	800d994 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800dd3c:	697b      	ldr	r3, [r7, #20]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	689b      	ldr	r3, [r3, #8]
 800dd42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd46:	2b40      	cmp	r3, #64	; 0x40
 800dd48:	d109      	bne.n	800dd5e <UART_DMAError+0x62>
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	2b22      	cmp	r3, #34	; 0x22
 800dd4e:	d106      	bne.n	800dd5e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800dd50:	697b      	ldr	r3, [r7, #20]
 800dd52:	2200      	movs	r2, #0
 800dd54:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800dd58:	6978      	ldr	r0, [r7, #20]
 800dd5a:	f7ff fe5d 	bl	800da18 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800dd5e:	697b      	ldr	r3, [r7, #20]
 800dd60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd64:	f043 0210 	orr.w	r2, r3, #16
 800dd68:	697b      	ldr	r3, [r7, #20]
 800dd6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dd6e:	6978      	ldr	r0, [r7, #20]
 800dd70:	f7fe fd34 	bl	800c7dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dd74:	bf00      	nop
 800dd76:	3718      	adds	r7, #24
 800dd78:	46bd      	mov	sp, r7
 800dd7a:	bd80      	pop	{r7, pc}

0800dd7c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b084      	sub	sp, #16
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	2200      	movs	r2, #0
 800dd8e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	2200      	movs	r2, #0
 800dd96:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dd9a:	68f8      	ldr	r0, [r7, #12]
 800dd9c:	f7fe fd1e 	bl	800c7dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dda0:	bf00      	nop
 800dda2:	3710      	adds	r7, #16
 800dda4:	46bd      	mov	sp, r7
 800dda6:	bd80      	pop	{r7, pc}

0800dda8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b088      	sub	sp, #32
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	e853 3f00 	ldrex	r3, [r3]
 800ddbc:	60bb      	str	r3, [r7, #8]
   return(result);
 800ddbe:	68bb      	ldr	r3, [r7, #8]
 800ddc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ddc4:	61fb      	str	r3, [r7, #28]
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	461a      	mov	r2, r3
 800ddcc:	69fb      	ldr	r3, [r7, #28]
 800ddce:	61bb      	str	r3, [r7, #24]
 800ddd0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddd2:	6979      	ldr	r1, [r7, #20]
 800ddd4:	69ba      	ldr	r2, [r7, #24]
 800ddd6:	e841 2300 	strex	r3, r2, [r1]
 800ddda:	613b      	str	r3, [r7, #16]
   return(result);
 800dddc:	693b      	ldr	r3, [r7, #16]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d1e6      	bne.n	800ddb0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	2220      	movs	r2, #32
 800dde6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	2200      	movs	r2, #0
 800ddee:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ddf0:	6878      	ldr	r0, [r7, #4]
 800ddf2:	f7f5 fa6d 	bl	80032d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ddf6:	bf00      	nop
 800ddf8:	3720      	adds	r7, #32
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	bd80      	pop	{r7, pc}

0800ddfe <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ddfe:	b480      	push	{r7}
 800de00:	b083      	sub	sp, #12
 800de02:	af00      	add	r7, sp, #0
 800de04:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800de06:	bf00      	nop
 800de08:	370c      	adds	r7, #12
 800de0a:	46bd      	mov	sp, r7
 800de0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de10:	4770      	bx	lr

0800de12 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800de12:	b480      	push	{r7}
 800de14:	b083      	sub	sp, #12
 800de16:	af00      	add	r7, sp, #0
 800de18:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800de1a:	bf00      	nop
 800de1c:	370c      	adds	r7, #12
 800de1e:	46bd      	mov	sp, r7
 800de20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de24:	4770      	bx	lr

0800de26 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800de26:	b480      	push	{r7}
 800de28:	b083      	sub	sp, #12
 800de2a:	af00      	add	r7, sp, #0
 800de2c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800de2e:	bf00      	nop
 800de30:	370c      	adds	r7, #12
 800de32:	46bd      	mov	sp, r7
 800de34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de38:	4770      	bx	lr

0800de3a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800de3a:	b480      	push	{r7}
 800de3c:	b085      	sub	sp, #20
 800de3e:	af00      	add	r7, sp, #0
 800de40:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800de48:	2b01      	cmp	r3, #1
 800de4a:	d101      	bne.n	800de50 <HAL_UARTEx_DisableFifoMode+0x16>
 800de4c:	2302      	movs	r3, #2
 800de4e:	e027      	b.n	800dea0 <HAL_UARTEx_DisableFifoMode+0x66>
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	2201      	movs	r2, #1
 800de54:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	2224      	movs	r2, #36	; 0x24
 800de5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	681a      	ldr	r2, [r3, #0]
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	f022 0201 	bic.w	r2, r2, #1
 800de76:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800de7e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	2200      	movs	r2, #0
 800de84:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	68fa      	ldr	r2, [r7, #12]
 800de8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	2220      	movs	r2, #32
 800de92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	2200      	movs	r2, #0
 800de9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800de9e:	2300      	movs	r3, #0
}
 800dea0:	4618      	mov	r0, r3
 800dea2:	3714      	adds	r7, #20
 800dea4:	46bd      	mov	sp, r7
 800dea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deaa:	4770      	bx	lr

0800deac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800deac:	b580      	push	{r7, lr}
 800deae:	b084      	sub	sp, #16
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
 800deb4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800debc:	2b01      	cmp	r3, #1
 800debe:	d101      	bne.n	800dec4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dec0:	2302      	movs	r3, #2
 800dec2:	e02d      	b.n	800df20 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	2201      	movs	r2, #1
 800dec8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	2224      	movs	r2, #36	; 0x24
 800ded0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	681a      	ldr	r2, [r3, #0]
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	f022 0201 	bic.w	r2, r2, #1
 800deea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	689b      	ldr	r3, [r3, #8]
 800def2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	683a      	ldr	r2, [r7, #0]
 800defc:	430a      	orrs	r2, r1
 800defe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800df00:	6878      	ldr	r0, [r7, #4]
 800df02:	f000 f84f 	bl	800dfa4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	68fa      	ldr	r2, [r7, #12]
 800df0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	2220      	movs	r2, #32
 800df12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	2200      	movs	r2, #0
 800df1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800df1e:	2300      	movs	r3, #0
}
 800df20:	4618      	mov	r0, r3
 800df22:	3710      	adds	r7, #16
 800df24:	46bd      	mov	sp, r7
 800df26:	bd80      	pop	{r7, pc}

0800df28 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b084      	sub	sp, #16
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
 800df30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800df38:	2b01      	cmp	r3, #1
 800df3a:	d101      	bne.n	800df40 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800df3c:	2302      	movs	r3, #2
 800df3e:	e02d      	b.n	800df9c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	2201      	movs	r2, #1
 800df44:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	2224      	movs	r2, #36	; 0x24
 800df4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	681a      	ldr	r2, [r3, #0]
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	f022 0201 	bic.w	r2, r2, #1
 800df66:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	689b      	ldr	r3, [r3, #8]
 800df6e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	683a      	ldr	r2, [r7, #0]
 800df78:	430a      	orrs	r2, r1
 800df7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800df7c:	6878      	ldr	r0, [r7, #4]
 800df7e:	f000 f811 	bl	800dfa4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	68fa      	ldr	r2, [r7, #12]
 800df88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	2220      	movs	r2, #32
 800df8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	2200      	movs	r2, #0
 800df96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800df9a:	2300      	movs	r3, #0
}
 800df9c:	4618      	mov	r0, r3
 800df9e:	3710      	adds	r7, #16
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	bd80      	pop	{r7, pc}

0800dfa4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800dfa4:	b480      	push	{r7}
 800dfa6:	b085      	sub	sp, #20
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d108      	bne.n	800dfc6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	2201      	movs	r2, #1
 800dfb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	2201      	movs	r2, #1
 800dfc0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800dfc4:	e031      	b.n	800e02a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800dfc6:	2310      	movs	r3, #16
 800dfc8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800dfca:	2310      	movs	r3, #16
 800dfcc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	689b      	ldr	r3, [r3, #8]
 800dfd4:	0e5b      	lsrs	r3, r3, #25
 800dfd6:	b2db      	uxtb	r3, r3
 800dfd8:	f003 0307 	and.w	r3, r3, #7
 800dfdc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	689b      	ldr	r3, [r3, #8]
 800dfe4:	0f5b      	lsrs	r3, r3, #29
 800dfe6:	b2db      	uxtb	r3, r3
 800dfe8:	f003 0307 	and.w	r3, r3, #7
 800dfec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dfee:	7bbb      	ldrb	r3, [r7, #14]
 800dff0:	7b3a      	ldrb	r2, [r7, #12]
 800dff2:	4911      	ldr	r1, [pc, #68]	; (800e038 <UARTEx_SetNbDataToProcess+0x94>)
 800dff4:	5c8a      	ldrb	r2, [r1, r2]
 800dff6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800dffa:	7b3a      	ldrb	r2, [r7, #12]
 800dffc:	490f      	ldr	r1, [pc, #60]	; (800e03c <UARTEx_SetNbDataToProcess+0x98>)
 800dffe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e000:	fb93 f3f2 	sdiv	r3, r3, r2
 800e004:	b29a      	uxth	r2, r3
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e00c:	7bfb      	ldrb	r3, [r7, #15]
 800e00e:	7b7a      	ldrb	r2, [r7, #13]
 800e010:	4909      	ldr	r1, [pc, #36]	; (800e038 <UARTEx_SetNbDataToProcess+0x94>)
 800e012:	5c8a      	ldrb	r2, [r1, r2]
 800e014:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e018:	7b7a      	ldrb	r2, [r7, #13]
 800e01a:	4908      	ldr	r1, [pc, #32]	; (800e03c <UARTEx_SetNbDataToProcess+0x98>)
 800e01c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e01e:	fb93 f3f2 	sdiv	r3, r3, r2
 800e022:	b29a      	uxth	r2, r3
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e02a:	bf00      	nop
 800e02c:	3714      	adds	r7, #20
 800e02e:	46bd      	mov	sp, r7
 800e030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e034:	4770      	bx	lr
 800e036:	bf00      	nop
 800e038:	0800e6f4 	.word	0x0800e6f4
 800e03c:	0800e6fc 	.word	0x0800e6fc

0800e040 <__cxa_pure_virtual>:
 800e040:	b508      	push	{r3, lr}
 800e042:	f000 f80d 	bl	800e060 <_ZSt9terminatev>

0800e046 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800e046:	b508      	push	{r3, lr}
 800e048:	4780      	blx	r0
 800e04a:	f000 f80e 	bl	800e06a <abort>
	...

0800e050 <_ZSt13get_terminatev>:
 800e050:	4b02      	ldr	r3, [pc, #8]	; (800e05c <_ZSt13get_terminatev+0xc>)
 800e052:	6818      	ldr	r0, [r3, #0]
 800e054:	f3bf 8f5b 	dmb	ish
 800e058:	4770      	bx	lr
 800e05a:	bf00      	nop
 800e05c:	24000010 	.word	0x24000010

0800e060 <_ZSt9terminatev>:
 800e060:	b508      	push	{r3, lr}
 800e062:	f7ff fff5 	bl	800e050 <_ZSt13get_terminatev>
 800e066:	f7ff ffee 	bl	800e046 <_ZN10__cxxabiv111__terminateEPFvvE>

0800e06a <abort>:
 800e06a:	b508      	push	{r3, lr}
 800e06c:	2006      	movs	r0, #6
 800e06e:	f000 f873 	bl	800e158 <raise>
 800e072:	2001      	movs	r0, #1
 800e074:	f7f6 fa68 	bl	8004548 <_exit>

0800e078 <__errno>:
 800e078:	4b01      	ldr	r3, [pc, #4]	; (800e080 <__errno+0x8>)
 800e07a:	6818      	ldr	r0, [r3, #0]
 800e07c:	4770      	bx	lr
 800e07e:	bf00      	nop
 800e080:	24000014 	.word	0x24000014

0800e084 <__libc_init_array>:
 800e084:	b570      	push	{r4, r5, r6, lr}
 800e086:	4d0d      	ldr	r5, [pc, #52]	; (800e0bc <__libc_init_array+0x38>)
 800e088:	4c0d      	ldr	r4, [pc, #52]	; (800e0c0 <__libc_init_array+0x3c>)
 800e08a:	1b64      	subs	r4, r4, r5
 800e08c:	10a4      	asrs	r4, r4, #2
 800e08e:	2600      	movs	r6, #0
 800e090:	42a6      	cmp	r6, r4
 800e092:	d109      	bne.n	800e0a8 <__libc_init_array+0x24>
 800e094:	4d0b      	ldr	r5, [pc, #44]	; (800e0c4 <__libc_init_array+0x40>)
 800e096:	4c0c      	ldr	r4, [pc, #48]	; (800e0c8 <__libc_init_array+0x44>)
 800e098:	f000 f9b0 	bl	800e3fc <_init>
 800e09c:	1b64      	subs	r4, r4, r5
 800e09e:	10a4      	asrs	r4, r4, #2
 800e0a0:	2600      	movs	r6, #0
 800e0a2:	42a6      	cmp	r6, r4
 800e0a4:	d105      	bne.n	800e0b2 <__libc_init_array+0x2e>
 800e0a6:	bd70      	pop	{r4, r5, r6, pc}
 800e0a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800e0ac:	4798      	blx	r3
 800e0ae:	3601      	adds	r6, #1
 800e0b0:	e7ee      	b.n	800e090 <__libc_init_array+0xc>
 800e0b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800e0b6:	4798      	blx	r3
 800e0b8:	3601      	adds	r6, #1
 800e0ba:	e7f2      	b.n	800e0a2 <__libc_init_array+0x1e>
 800e0bc:	0800e70c 	.word	0x0800e70c
 800e0c0:	0800e70c 	.word	0x0800e70c
 800e0c4:	0800e70c 	.word	0x0800e70c
 800e0c8:	0800e714 	.word	0x0800e714

0800e0cc <memcpy>:
 800e0cc:	440a      	add	r2, r1
 800e0ce:	4291      	cmp	r1, r2
 800e0d0:	f100 33ff 	add.w	r3, r0, #4294967295
 800e0d4:	d100      	bne.n	800e0d8 <memcpy+0xc>
 800e0d6:	4770      	bx	lr
 800e0d8:	b510      	push	{r4, lr}
 800e0da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e0de:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e0e2:	4291      	cmp	r1, r2
 800e0e4:	d1f9      	bne.n	800e0da <memcpy+0xe>
 800e0e6:	bd10      	pop	{r4, pc}

0800e0e8 <memset>:
 800e0e8:	4402      	add	r2, r0
 800e0ea:	4603      	mov	r3, r0
 800e0ec:	4293      	cmp	r3, r2
 800e0ee:	d100      	bne.n	800e0f2 <memset+0xa>
 800e0f0:	4770      	bx	lr
 800e0f2:	f803 1b01 	strb.w	r1, [r3], #1
 800e0f6:	e7f9      	b.n	800e0ec <memset+0x4>

0800e0f8 <realloc>:
 800e0f8:	4b02      	ldr	r3, [pc, #8]	; (800e104 <realloc+0xc>)
 800e0fa:	460a      	mov	r2, r1
 800e0fc:	4601      	mov	r1, r0
 800e0fe:	6818      	ldr	r0, [r3, #0]
 800e100:	f000 b8da 	b.w	800e2b8 <_realloc_r>
 800e104:	24000014 	.word	0x24000014

0800e108 <_raise_r>:
 800e108:	291f      	cmp	r1, #31
 800e10a:	b538      	push	{r3, r4, r5, lr}
 800e10c:	4604      	mov	r4, r0
 800e10e:	460d      	mov	r5, r1
 800e110:	d904      	bls.n	800e11c <_raise_r+0x14>
 800e112:	2316      	movs	r3, #22
 800e114:	6003      	str	r3, [r0, #0]
 800e116:	f04f 30ff 	mov.w	r0, #4294967295
 800e11a:	bd38      	pop	{r3, r4, r5, pc}
 800e11c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e11e:	b112      	cbz	r2, 800e126 <_raise_r+0x1e>
 800e120:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e124:	b94b      	cbnz	r3, 800e13a <_raise_r+0x32>
 800e126:	4620      	mov	r0, r4
 800e128:	f000 f830 	bl	800e18c <_getpid_r>
 800e12c:	462a      	mov	r2, r5
 800e12e:	4601      	mov	r1, r0
 800e130:	4620      	mov	r0, r4
 800e132:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e136:	f000 b817 	b.w	800e168 <_kill_r>
 800e13a:	2b01      	cmp	r3, #1
 800e13c:	d00a      	beq.n	800e154 <_raise_r+0x4c>
 800e13e:	1c59      	adds	r1, r3, #1
 800e140:	d103      	bne.n	800e14a <_raise_r+0x42>
 800e142:	2316      	movs	r3, #22
 800e144:	6003      	str	r3, [r0, #0]
 800e146:	2001      	movs	r0, #1
 800e148:	e7e7      	b.n	800e11a <_raise_r+0x12>
 800e14a:	2400      	movs	r4, #0
 800e14c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e150:	4628      	mov	r0, r5
 800e152:	4798      	blx	r3
 800e154:	2000      	movs	r0, #0
 800e156:	e7e0      	b.n	800e11a <_raise_r+0x12>

0800e158 <raise>:
 800e158:	4b02      	ldr	r3, [pc, #8]	; (800e164 <raise+0xc>)
 800e15a:	4601      	mov	r1, r0
 800e15c:	6818      	ldr	r0, [r3, #0]
 800e15e:	f7ff bfd3 	b.w	800e108 <_raise_r>
 800e162:	bf00      	nop
 800e164:	24000014 	.word	0x24000014

0800e168 <_kill_r>:
 800e168:	b538      	push	{r3, r4, r5, lr}
 800e16a:	4d07      	ldr	r5, [pc, #28]	; (800e188 <_kill_r+0x20>)
 800e16c:	2300      	movs	r3, #0
 800e16e:	4604      	mov	r4, r0
 800e170:	4608      	mov	r0, r1
 800e172:	4611      	mov	r1, r2
 800e174:	602b      	str	r3, [r5, #0]
 800e176:	f7f6 f9d7 	bl	8004528 <_kill>
 800e17a:	1c43      	adds	r3, r0, #1
 800e17c:	d102      	bne.n	800e184 <_kill_r+0x1c>
 800e17e:	682b      	ldr	r3, [r5, #0]
 800e180:	b103      	cbz	r3, 800e184 <_kill_r+0x1c>
 800e182:	6023      	str	r3, [r4, #0]
 800e184:	bd38      	pop	{r3, r4, r5, pc}
 800e186:	bf00      	nop
 800e188:	24000e70 	.word	0x24000e70

0800e18c <_getpid_r>:
 800e18c:	f7f6 b9c4 	b.w	8004518 <_getpid>

0800e190 <sbrk_aligned>:
 800e190:	b570      	push	{r4, r5, r6, lr}
 800e192:	4e0e      	ldr	r6, [pc, #56]	; (800e1cc <sbrk_aligned+0x3c>)
 800e194:	460c      	mov	r4, r1
 800e196:	6831      	ldr	r1, [r6, #0]
 800e198:	4605      	mov	r5, r0
 800e19a:	b911      	cbnz	r1, 800e1a2 <sbrk_aligned+0x12>
 800e19c:	f000 f8bc 	bl	800e318 <_sbrk_r>
 800e1a0:	6030      	str	r0, [r6, #0]
 800e1a2:	4621      	mov	r1, r4
 800e1a4:	4628      	mov	r0, r5
 800e1a6:	f000 f8b7 	bl	800e318 <_sbrk_r>
 800e1aa:	1c43      	adds	r3, r0, #1
 800e1ac:	d00a      	beq.n	800e1c4 <sbrk_aligned+0x34>
 800e1ae:	1cc4      	adds	r4, r0, #3
 800e1b0:	f024 0403 	bic.w	r4, r4, #3
 800e1b4:	42a0      	cmp	r0, r4
 800e1b6:	d007      	beq.n	800e1c8 <sbrk_aligned+0x38>
 800e1b8:	1a21      	subs	r1, r4, r0
 800e1ba:	4628      	mov	r0, r5
 800e1bc:	f000 f8ac 	bl	800e318 <_sbrk_r>
 800e1c0:	3001      	adds	r0, #1
 800e1c2:	d101      	bne.n	800e1c8 <sbrk_aligned+0x38>
 800e1c4:	f04f 34ff 	mov.w	r4, #4294967295
 800e1c8:	4620      	mov	r0, r4
 800e1ca:	bd70      	pop	{r4, r5, r6, pc}
 800e1cc:	24000e6c 	.word	0x24000e6c

0800e1d0 <_malloc_r>:
 800e1d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1d4:	1ccd      	adds	r5, r1, #3
 800e1d6:	f025 0503 	bic.w	r5, r5, #3
 800e1da:	3508      	adds	r5, #8
 800e1dc:	2d0c      	cmp	r5, #12
 800e1de:	bf38      	it	cc
 800e1e0:	250c      	movcc	r5, #12
 800e1e2:	2d00      	cmp	r5, #0
 800e1e4:	4607      	mov	r7, r0
 800e1e6:	db01      	blt.n	800e1ec <_malloc_r+0x1c>
 800e1e8:	42a9      	cmp	r1, r5
 800e1ea:	d905      	bls.n	800e1f8 <_malloc_r+0x28>
 800e1ec:	230c      	movs	r3, #12
 800e1ee:	603b      	str	r3, [r7, #0]
 800e1f0:	2600      	movs	r6, #0
 800e1f2:	4630      	mov	r0, r6
 800e1f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1f8:	4e2e      	ldr	r6, [pc, #184]	; (800e2b4 <_malloc_r+0xe4>)
 800e1fa:	f000 f89d 	bl	800e338 <__malloc_lock>
 800e1fe:	6833      	ldr	r3, [r6, #0]
 800e200:	461c      	mov	r4, r3
 800e202:	bb34      	cbnz	r4, 800e252 <_malloc_r+0x82>
 800e204:	4629      	mov	r1, r5
 800e206:	4638      	mov	r0, r7
 800e208:	f7ff ffc2 	bl	800e190 <sbrk_aligned>
 800e20c:	1c43      	adds	r3, r0, #1
 800e20e:	4604      	mov	r4, r0
 800e210:	d14d      	bne.n	800e2ae <_malloc_r+0xde>
 800e212:	6834      	ldr	r4, [r6, #0]
 800e214:	4626      	mov	r6, r4
 800e216:	2e00      	cmp	r6, #0
 800e218:	d140      	bne.n	800e29c <_malloc_r+0xcc>
 800e21a:	6823      	ldr	r3, [r4, #0]
 800e21c:	4631      	mov	r1, r6
 800e21e:	4638      	mov	r0, r7
 800e220:	eb04 0803 	add.w	r8, r4, r3
 800e224:	f000 f878 	bl	800e318 <_sbrk_r>
 800e228:	4580      	cmp	r8, r0
 800e22a:	d13a      	bne.n	800e2a2 <_malloc_r+0xd2>
 800e22c:	6821      	ldr	r1, [r4, #0]
 800e22e:	3503      	adds	r5, #3
 800e230:	1a6d      	subs	r5, r5, r1
 800e232:	f025 0503 	bic.w	r5, r5, #3
 800e236:	3508      	adds	r5, #8
 800e238:	2d0c      	cmp	r5, #12
 800e23a:	bf38      	it	cc
 800e23c:	250c      	movcc	r5, #12
 800e23e:	4629      	mov	r1, r5
 800e240:	4638      	mov	r0, r7
 800e242:	f7ff ffa5 	bl	800e190 <sbrk_aligned>
 800e246:	3001      	adds	r0, #1
 800e248:	d02b      	beq.n	800e2a2 <_malloc_r+0xd2>
 800e24a:	6823      	ldr	r3, [r4, #0]
 800e24c:	442b      	add	r3, r5
 800e24e:	6023      	str	r3, [r4, #0]
 800e250:	e00e      	b.n	800e270 <_malloc_r+0xa0>
 800e252:	6822      	ldr	r2, [r4, #0]
 800e254:	1b52      	subs	r2, r2, r5
 800e256:	d41e      	bmi.n	800e296 <_malloc_r+0xc6>
 800e258:	2a0b      	cmp	r2, #11
 800e25a:	d916      	bls.n	800e28a <_malloc_r+0xba>
 800e25c:	1961      	adds	r1, r4, r5
 800e25e:	42a3      	cmp	r3, r4
 800e260:	6025      	str	r5, [r4, #0]
 800e262:	bf18      	it	ne
 800e264:	6059      	strne	r1, [r3, #4]
 800e266:	6863      	ldr	r3, [r4, #4]
 800e268:	bf08      	it	eq
 800e26a:	6031      	streq	r1, [r6, #0]
 800e26c:	5162      	str	r2, [r4, r5]
 800e26e:	604b      	str	r3, [r1, #4]
 800e270:	4638      	mov	r0, r7
 800e272:	f104 060b 	add.w	r6, r4, #11
 800e276:	f000 f865 	bl	800e344 <__malloc_unlock>
 800e27a:	f026 0607 	bic.w	r6, r6, #7
 800e27e:	1d23      	adds	r3, r4, #4
 800e280:	1af2      	subs	r2, r6, r3
 800e282:	d0b6      	beq.n	800e1f2 <_malloc_r+0x22>
 800e284:	1b9b      	subs	r3, r3, r6
 800e286:	50a3      	str	r3, [r4, r2]
 800e288:	e7b3      	b.n	800e1f2 <_malloc_r+0x22>
 800e28a:	6862      	ldr	r2, [r4, #4]
 800e28c:	42a3      	cmp	r3, r4
 800e28e:	bf0c      	ite	eq
 800e290:	6032      	streq	r2, [r6, #0]
 800e292:	605a      	strne	r2, [r3, #4]
 800e294:	e7ec      	b.n	800e270 <_malloc_r+0xa0>
 800e296:	4623      	mov	r3, r4
 800e298:	6864      	ldr	r4, [r4, #4]
 800e29a:	e7b2      	b.n	800e202 <_malloc_r+0x32>
 800e29c:	4634      	mov	r4, r6
 800e29e:	6876      	ldr	r6, [r6, #4]
 800e2a0:	e7b9      	b.n	800e216 <_malloc_r+0x46>
 800e2a2:	230c      	movs	r3, #12
 800e2a4:	603b      	str	r3, [r7, #0]
 800e2a6:	4638      	mov	r0, r7
 800e2a8:	f000 f84c 	bl	800e344 <__malloc_unlock>
 800e2ac:	e7a1      	b.n	800e1f2 <_malloc_r+0x22>
 800e2ae:	6025      	str	r5, [r4, #0]
 800e2b0:	e7de      	b.n	800e270 <_malloc_r+0xa0>
 800e2b2:	bf00      	nop
 800e2b4:	24000e68 	.word	0x24000e68

0800e2b8 <_realloc_r>:
 800e2b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2bc:	4680      	mov	r8, r0
 800e2be:	4614      	mov	r4, r2
 800e2c0:	460e      	mov	r6, r1
 800e2c2:	b921      	cbnz	r1, 800e2ce <_realloc_r+0x16>
 800e2c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e2c8:	4611      	mov	r1, r2
 800e2ca:	f7ff bf81 	b.w	800e1d0 <_malloc_r>
 800e2ce:	b92a      	cbnz	r2, 800e2dc <_realloc_r+0x24>
 800e2d0:	f000 f83e 	bl	800e350 <_free_r>
 800e2d4:	4625      	mov	r5, r4
 800e2d6:	4628      	mov	r0, r5
 800e2d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2dc:	f000 f884 	bl	800e3e8 <_malloc_usable_size_r>
 800e2e0:	4284      	cmp	r4, r0
 800e2e2:	4607      	mov	r7, r0
 800e2e4:	d802      	bhi.n	800e2ec <_realloc_r+0x34>
 800e2e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e2ea:	d812      	bhi.n	800e312 <_realloc_r+0x5a>
 800e2ec:	4621      	mov	r1, r4
 800e2ee:	4640      	mov	r0, r8
 800e2f0:	f7ff ff6e 	bl	800e1d0 <_malloc_r>
 800e2f4:	4605      	mov	r5, r0
 800e2f6:	2800      	cmp	r0, #0
 800e2f8:	d0ed      	beq.n	800e2d6 <_realloc_r+0x1e>
 800e2fa:	42bc      	cmp	r4, r7
 800e2fc:	4622      	mov	r2, r4
 800e2fe:	4631      	mov	r1, r6
 800e300:	bf28      	it	cs
 800e302:	463a      	movcs	r2, r7
 800e304:	f7ff fee2 	bl	800e0cc <memcpy>
 800e308:	4631      	mov	r1, r6
 800e30a:	4640      	mov	r0, r8
 800e30c:	f000 f820 	bl	800e350 <_free_r>
 800e310:	e7e1      	b.n	800e2d6 <_realloc_r+0x1e>
 800e312:	4635      	mov	r5, r6
 800e314:	e7df      	b.n	800e2d6 <_realloc_r+0x1e>
	...

0800e318 <_sbrk_r>:
 800e318:	b538      	push	{r3, r4, r5, lr}
 800e31a:	4d06      	ldr	r5, [pc, #24]	; (800e334 <_sbrk_r+0x1c>)
 800e31c:	2300      	movs	r3, #0
 800e31e:	4604      	mov	r4, r0
 800e320:	4608      	mov	r0, r1
 800e322:	602b      	str	r3, [r5, #0]
 800e324:	f7f6 f91a 	bl	800455c <_sbrk>
 800e328:	1c43      	adds	r3, r0, #1
 800e32a:	d102      	bne.n	800e332 <_sbrk_r+0x1a>
 800e32c:	682b      	ldr	r3, [r5, #0]
 800e32e:	b103      	cbz	r3, 800e332 <_sbrk_r+0x1a>
 800e330:	6023      	str	r3, [r4, #0]
 800e332:	bd38      	pop	{r3, r4, r5, pc}
 800e334:	24000e70 	.word	0x24000e70

0800e338 <__malloc_lock>:
 800e338:	4801      	ldr	r0, [pc, #4]	; (800e340 <__malloc_lock+0x8>)
 800e33a:	f000 b85d 	b.w	800e3f8 <__retarget_lock_acquire_recursive>
 800e33e:	bf00      	nop
 800e340:	24000e74 	.word	0x24000e74

0800e344 <__malloc_unlock>:
 800e344:	4801      	ldr	r0, [pc, #4]	; (800e34c <__malloc_unlock+0x8>)
 800e346:	f000 b858 	b.w	800e3fa <__retarget_lock_release_recursive>
 800e34a:	bf00      	nop
 800e34c:	24000e74 	.word	0x24000e74

0800e350 <_free_r>:
 800e350:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e352:	2900      	cmp	r1, #0
 800e354:	d044      	beq.n	800e3e0 <_free_r+0x90>
 800e356:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e35a:	9001      	str	r0, [sp, #4]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	f1a1 0404 	sub.w	r4, r1, #4
 800e362:	bfb8      	it	lt
 800e364:	18e4      	addlt	r4, r4, r3
 800e366:	f7ff ffe7 	bl	800e338 <__malloc_lock>
 800e36a:	4a1e      	ldr	r2, [pc, #120]	; (800e3e4 <_free_r+0x94>)
 800e36c:	9801      	ldr	r0, [sp, #4]
 800e36e:	6813      	ldr	r3, [r2, #0]
 800e370:	b933      	cbnz	r3, 800e380 <_free_r+0x30>
 800e372:	6063      	str	r3, [r4, #4]
 800e374:	6014      	str	r4, [r2, #0]
 800e376:	b003      	add	sp, #12
 800e378:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e37c:	f7ff bfe2 	b.w	800e344 <__malloc_unlock>
 800e380:	42a3      	cmp	r3, r4
 800e382:	d908      	bls.n	800e396 <_free_r+0x46>
 800e384:	6825      	ldr	r5, [r4, #0]
 800e386:	1961      	adds	r1, r4, r5
 800e388:	428b      	cmp	r3, r1
 800e38a:	bf01      	itttt	eq
 800e38c:	6819      	ldreq	r1, [r3, #0]
 800e38e:	685b      	ldreq	r3, [r3, #4]
 800e390:	1949      	addeq	r1, r1, r5
 800e392:	6021      	streq	r1, [r4, #0]
 800e394:	e7ed      	b.n	800e372 <_free_r+0x22>
 800e396:	461a      	mov	r2, r3
 800e398:	685b      	ldr	r3, [r3, #4]
 800e39a:	b10b      	cbz	r3, 800e3a0 <_free_r+0x50>
 800e39c:	42a3      	cmp	r3, r4
 800e39e:	d9fa      	bls.n	800e396 <_free_r+0x46>
 800e3a0:	6811      	ldr	r1, [r2, #0]
 800e3a2:	1855      	adds	r5, r2, r1
 800e3a4:	42a5      	cmp	r5, r4
 800e3a6:	d10b      	bne.n	800e3c0 <_free_r+0x70>
 800e3a8:	6824      	ldr	r4, [r4, #0]
 800e3aa:	4421      	add	r1, r4
 800e3ac:	1854      	adds	r4, r2, r1
 800e3ae:	42a3      	cmp	r3, r4
 800e3b0:	6011      	str	r1, [r2, #0]
 800e3b2:	d1e0      	bne.n	800e376 <_free_r+0x26>
 800e3b4:	681c      	ldr	r4, [r3, #0]
 800e3b6:	685b      	ldr	r3, [r3, #4]
 800e3b8:	6053      	str	r3, [r2, #4]
 800e3ba:	4421      	add	r1, r4
 800e3bc:	6011      	str	r1, [r2, #0]
 800e3be:	e7da      	b.n	800e376 <_free_r+0x26>
 800e3c0:	d902      	bls.n	800e3c8 <_free_r+0x78>
 800e3c2:	230c      	movs	r3, #12
 800e3c4:	6003      	str	r3, [r0, #0]
 800e3c6:	e7d6      	b.n	800e376 <_free_r+0x26>
 800e3c8:	6825      	ldr	r5, [r4, #0]
 800e3ca:	1961      	adds	r1, r4, r5
 800e3cc:	428b      	cmp	r3, r1
 800e3ce:	bf04      	itt	eq
 800e3d0:	6819      	ldreq	r1, [r3, #0]
 800e3d2:	685b      	ldreq	r3, [r3, #4]
 800e3d4:	6063      	str	r3, [r4, #4]
 800e3d6:	bf04      	itt	eq
 800e3d8:	1949      	addeq	r1, r1, r5
 800e3da:	6021      	streq	r1, [r4, #0]
 800e3dc:	6054      	str	r4, [r2, #4]
 800e3de:	e7ca      	b.n	800e376 <_free_r+0x26>
 800e3e0:	b003      	add	sp, #12
 800e3e2:	bd30      	pop	{r4, r5, pc}
 800e3e4:	24000e68 	.word	0x24000e68

0800e3e8 <_malloc_usable_size_r>:
 800e3e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e3ec:	1f18      	subs	r0, r3, #4
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	bfbc      	itt	lt
 800e3f2:	580b      	ldrlt	r3, [r1, r0]
 800e3f4:	18c0      	addlt	r0, r0, r3
 800e3f6:	4770      	bx	lr

0800e3f8 <__retarget_lock_acquire_recursive>:
 800e3f8:	4770      	bx	lr

0800e3fa <__retarget_lock_release_recursive>:
 800e3fa:	4770      	bx	lr

0800e3fc <_init>:
 800e3fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3fe:	bf00      	nop
 800e400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e402:	bc08      	pop	{r3}
 800e404:	469e      	mov	lr, r3
 800e406:	4770      	bx	lr

0800e408 <_fini>:
 800e408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e40a:	bf00      	nop
 800e40c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e40e:	bc08      	pop	{r3}
 800e410:	469e      	mov	lr, r3
 800e412:	4770      	bx	lr
