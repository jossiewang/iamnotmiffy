
0527_peanuts.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e468  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  0800e738  0800e738  0001e738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ea38  0800ea38  0001ea38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800ea40  0800ea40  0001ea40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ea48  0800ea48  0001ea48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000088  24000000  0800ea4c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000e78  24000088  0800ead4  00020088  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24000f00  0800ead4  00020f00  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f519  00000000  00000000  000200b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003369  00000000  00000000  0003f5cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001470  00000000  00000000  00042938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001380  00000000  00000000  00043da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034eda  00000000  00000000  00045128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a89f  00000000  00000000  0007a002  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00153427  00000000  00000000  000948a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001e7cc8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005c28  00000000  00000000  001e7d18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000088 	.word	0x24000088
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800e720 	.word	0x0800e720

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400008c 	.word	0x2400008c
 800030c:	0800e720 	.word	0x0800e720

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	0a5a      	lsrs	r2, r3, #9
 8000634:	490f      	ldr	r1, [pc, #60]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000636:	fba1 1202 	umull	r1, r2, r1, r2
 800063a:	09d2      	lsrs	r2, r2, #7
 800063c:	490e      	ldr	r1, [pc, #56]	; (8000678 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063e:	fb01 f202 	mul.w	r2, r1, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	0a5b      	lsrs	r3, r3, #9
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	09db      	lsrs	r3, r3, #7
 8000654:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	441a      	add	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	00044b83 	.word	0x00044b83
 8000678:	3b9aca00 	.word	0x3b9aca00

0800067c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000680:	f004 f9e0 	bl	8004a44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000684:	f000 f852 	bl	800072c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000688:	f000 fbca 	bl	8000e20 <MX_GPIO_Init>
  MX_DMA_Init();
 800068c:	f000 fba0 	bl	8000dd0 <MX_DMA_Init>
  MX_TIM3_Init();
 8000690:	f000 f97a 	bl	8000988 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000694:	f000 f9c6 	bl	8000a24 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000698:	f000 fa6a 	bl	8000b70 <MX_TIM8_Init>
  MX_TIM23_Init();
 800069c:	f000 faf6 	bl	8000c8c <MX_TIM23_Init>
  MX_TIM1_Init();
 80006a0:	f000 f8b4 	bl	800080c <MX_TIM1_Init>
  MX_USART3_UART_Init();
 80006a4:	f000 fb48 	bl	8000d38 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80006a8:	f000 f90a 	bl	80008c0 <MX_TIM2_Init>
  MX_TIM5_Init();
 80006ac:	f000 fa10 	bl	8000ad0 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 80006b0:	4817      	ldr	r0, [pc, #92]	; (8000710 <main+0x94>)
 80006b2:	f00a f91f 	bl	800a8f4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 80006b6:	4817      	ldr	r0, [pc, #92]	; (8000714 <main+0x98>)
 80006b8:	f00a f91c 	bl	800a8f4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(TIM_ENC_MF, TIM_CHANNEL_1);
 80006bc:	2100      	movs	r1, #0
 80006be:	4816      	ldr	r0, [pc, #88]	; (8000718 <main+0x9c>)
 80006c0:	f00a fbb8 	bl	800ae34 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(TIM_ENC_MF, TIM_CHANNEL_2);
 80006c4:	2104      	movs	r1, #4
 80006c6:	4814      	ldr	r0, [pc, #80]	; (8000718 <main+0x9c>)
 80006c8:	f00a fbb4 	bl	800ae34 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(TIM_ENC_ML, TIM_CHANNEL_1);
 80006cc:	2100      	movs	r1, #0
 80006ce:	4813      	ldr	r0, [pc, #76]	; (800071c <main+0xa0>)
 80006d0:	f00a fbb0 	bl	800ae34 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(TIM_ENC_ML, TIM_CHANNEL_2);
 80006d4:	2104      	movs	r1, #4
 80006d6:	4811      	ldr	r0, [pc, #68]	; (800071c <main+0xa0>)
 80006d8:	f00a fbac 	bl	800ae34 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(TIM_ENC_MR, TIM_CHANNEL_1);
 80006dc:	2100      	movs	r1, #0
 80006de:	4810      	ldr	r0, [pc, #64]	; (8000720 <main+0xa4>)
 80006e0:	f00a fba8 	bl	800ae34 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(TIM_ENC_MR, TIM_CHANNEL_2);
 80006e4:	2104      	movs	r1, #4
 80006e6:	480e      	ldr	r0, [pc, #56]	; (8000720 <main+0xa4>)
 80006e8:	f00a fba4 	bl	800ae34 <HAL_TIM_Encoder_Start>
    HAL_TIM_PWM_Start(TIM_PWM_MF, CH_PWM_MF);
 80006ec:	2100      	movs	r1, #0
 80006ee:	480d      	ldr	r0, [pc, #52]	; (8000724 <main+0xa8>)
 80006f0:	f00a f9de 	bl	800aab0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(TIM_PWM_ML, CH_PWM_ML);
 80006f4:	210c      	movs	r1, #12
 80006f6:	480b      	ldr	r0, [pc, #44]	; (8000724 <main+0xa8>)
 80006f8:	f00a f9da 	bl	800aab0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(TIM_PWM_MR, CH_PWM_MR);
 80006fc:	2108      	movs	r1, #8
 80006fe:	480a      	ldr	r0, [pc, #40]	; (8000728 <main+0xac>)
 8000700:	f00a f9d6 	bl	800aab0 <HAL_TIM_PWM_Start>
  	setup();
 8000704:	f002 ff24 	bl	8003550 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 8000708:	f002 ff38 	bl	800357c <loop>
 800070c:	e7fc      	b.n	8000708 <main+0x8c>
 800070e:	bf00      	nop
 8000710:	2400013c 	.word	0x2400013c
 8000714:	240001d4 	.word	0x240001d4
 8000718:	240000a4 	.word	0x240000a4
 800071c:	24000188 	.word	0x24000188
 8000720:	2400026c 	.word	0x2400026c
 8000724:	240000f0 	.word	0x240000f0
 8000728:	24000220 	.word	0x24000220

0800072c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b09c      	sub	sp, #112	; 0x70
 8000730:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000732:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000736:	224c      	movs	r2, #76	; 0x4c
 8000738:	2100      	movs	r1, #0
 800073a:	4618      	mov	r0, r3
 800073c:	f00d fe66 	bl	800e40c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	2220      	movs	r2, #32
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f00d fe60 	bl	800e40c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800074c:	2002      	movs	r0, #2
 800074e:	f007 fb17 	bl	8007d80 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000752:	2300      	movs	r3, #0
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	4b2c      	ldr	r3, [pc, #176]	; (8000808 <SystemClock_Config+0xdc>)
 8000758:	699b      	ldr	r3, [r3, #24]
 800075a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800075e:	4a2a      	ldr	r2, [pc, #168]	; (8000808 <SystemClock_Config+0xdc>)
 8000760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000764:	6193      	str	r3, [r2, #24]
 8000766:	4b28      	ldr	r3, [pc, #160]	; (8000808 <SystemClock_Config+0xdc>)
 8000768:	699b      	ldr	r3, [r3, #24]
 800076a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800076e:	603b      	str	r3, [r7, #0]
 8000770:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000772:	bf00      	nop
 8000774:	4b24      	ldr	r3, [pc, #144]	; (8000808 <SystemClock_Config+0xdc>)
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800077c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000780:	d1f8      	bne.n	8000774 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000782:	2301      	movs	r3, #1
 8000784:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000786:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800078a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800078c:	2302      	movs	r3, #2
 800078e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000790:	2302      	movs	r3, #2
 8000792:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000794:	2304      	movs	r3, #4
 8000796:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000798:	23a8      	movs	r3, #168	; 0xa8
 800079a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800079c:	2301      	movs	r3, #1
 800079e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007a0:	2302      	movs	r3, #2
 80007a2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007a4:	2302      	movs	r3, #2
 80007a6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80007a8:	2304      	movs	r3, #4
 80007aa:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007ac:	2300      	movs	r3, #0
 80007ae:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b8:	4618      	mov	r0, r3
 80007ba:	f007 fb1b 	bl	8007df4 <HAL_RCC_OscConfig>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007c4:	f001 f88c 	bl	80018e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c8:	233f      	movs	r3, #63	; 0x3f
 80007ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007cc:	2303      	movs	r3, #3
 80007ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 80007d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007d6:	2308      	movs	r3, #8
 80007d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007da:	2340      	movs	r3, #64	; 0x40
 80007dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007de:	2340      	movs	r3, #64	; 0x40
 80007e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007e6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007e8:	2340      	movs	r3, #64	; 0x40
 80007ea:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	2102      	movs	r1, #2
 80007f0:	4618      	mov	r0, r3
 80007f2:	f007 fed9 	bl	80085a8 <HAL_RCC_ClockConfig>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80007fc:	f001 f870 	bl	80018e0 <Error_Handler>
  }
}
 8000800:	bf00      	nop
 8000802:	3770      	adds	r7, #112	; 0x70
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	58024800 	.word	0x58024800

0800080c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08c      	sub	sp, #48	; 0x30
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000812:	f107 030c 	add.w	r3, r7, #12
 8000816:	2224      	movs	r2, #36	; 0x24
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f00d fdf6 	bl	800e40c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000820:	463b      	mov	r3, r7
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800082a:	4b23      	ldr	r3, [pc, #140]	; (80008b8 <MX_TIM1_Init+0xac>)
 800082c:	4a23      	ldr	r2, [pc, #140]	; (80008bc <MX_TIM1_Init+0xb0>)
 800082e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000830:	4b21      	ldr	r3, [pc, #132]	; (80008b8 <MX_TIM1_Init+0xac>)
 8000832:	2200      	movs	r2, #0
 8000834:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000836:	4b20      	ldr	r3, [pc, #128]	; (80008b8 <MX_TIM1_Init+0xac>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800083c:	4b1e      	ldr	r3, [pc, #120]	; (80008b8 <MX_TIM1_Init+0xac>)
 800083e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000842:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000844:	4b1c      	ldr	r3, [pc, #112]	; (80008b8 <MX_TIM1_Init+0xac>)
 8000846:	2200      	movs	r2, #0
 8000848:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800084a:	4b1b      	ldr	r3, [pc, #108]	; (80008b8 <MX_TIM1_Init+0xac>)
 800084c:	2200      	movs	r2, #0
 800084e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000850:	4b19      	ldr	r3, [pc, #100]	; (80008b8 <MX_TIM1_Init+0xac>)
 8000852:	2200      	movs	r2, #0
 8000854:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000856:	2303      	movs	r3, #3
 8000858:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800085e:	2301      	movs	r3, #1
 8000860:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000862:	2300      	movs	r3, #0
 8000864:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800086a:	2300      	movs	r3, #0
 800086c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800086e:	2301      	movs	r3, #1
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000872:	2300      	movs	r3, #0
 8000874:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800087a:	f107 030c 	add.w	r3, r7, #12
 800087e:	4619      	mov	r1, r3
 8000880:	480d      	ldr	r0, [pc, #52]	; (80008b8 <MX_TIM1_Init+0xac>)
 8000882:	f00a fa31 	bl	800ace8 <HAL_TIM_Encoder_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 800088c:	f001 f828 	bl	80018e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000890:	2300      	movs	r3, #0
 8000892:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000894:	2300      	movs	r3, #0
 8000896:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000898:	2300      	movs	r3, #0
 800089a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800089c:	463b      	mov	r3, r7
 800089e:	4619      	mov	r1, r3
 80008a0:	4805      	ldr	r0, [pc, #20]	; (80008b8 <MX_TIM1_Init+0xac>)
 80008a2:	f00b fae9 	bl	800be78 <HAL_TIMEx_MasterConfigSynchronization>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80008ac:	f001 f818 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80008b0:	bf00      	nop
 80008b2:	3730      	adds	r7, #48	; 0x30
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	240000a4 	.word	0x240000a4
 80008bc:	40010000 	.word	0x40010000

080008c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08a      	sub	sp, #40	; 0x28
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008d2:	463b      	mov	r3, r7
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
 80008de:	611a      	str	r2, [r3, #16]
 80008e0:	615a      	str	r2, [r3, #20]
 80008e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008e4:	4b27      	ldr	r3, [pc, #156]	; (8000984 <MX_TIM2_Init+0xc4>)
 80008e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80008ec:	4b25      	ldr	r3, [pc, #148]	; (8000984 <MX_TIM2_Init+0xc4>)
 80008ee:	2253      	movs	r2, #83	; 0x53
 80008f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f2:	4b24      	ldr	r3, [pc, #144]	; (8000984 <MX_TIM2_Init+0xc4>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49;
 80008f8:	4b22      	ldr	r3, [pc, #136]	; (8000984 <MX_TIM2_Init+0xc4>)
 80008fa:	2231      	movs	r2, #49	; 0x31
 80008fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008fe:	4b21      	ldr	r3, [pc, #132]	; (8000984 <MX_TIM2_Init+0xc4>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000904:	4b1f      	ldr	r3, [pc, #124]	; (8000984 <MX_TIM2_Init+0xc4>)
 8000906:	2200      	movs	r2, #0
 8000908:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800090a:	481e      	ldr	r0, [pc, #120]	; (8000984 <MX_TIM2_Init+0xc4>)
 800090c:	f00a f878 	bl	800aa00 <HAL_TIM_PWM_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000916:	f000 ffe3 	bl	80018e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800091a:	2300      	movs	r3, #0
 800091c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	4619      	mov	r1, r3
 8000928:	4816      	ldr	r0, [pc, #88]	; (8000984 <MX_TIM2_Init+0xc4>)
 800092a:	f00b faa5 	bl	800be78 <HAL_TIMEx_MasterConfigSynchronization>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000934:	f000 ffd4 	bl	80018e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000938:	2360      	movs	r3, #96	; 0x60
 800093a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000940:	2300      	movs	r3, #0
 8000942:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000944:	2300      	movs	r3, #0
 8000946:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000948:	463b      	mov	r3, r7
 800094a:	2200      	movs	r2, #0
 800094c:	4619      	mov	r1, r3
 800094e:	480d      	ldr	r0, [pc, #52]	; (8000984 <MX_TIM2_Init+0xc4>)
 8000950:	f00a fc1e 	bl	800b190 <HAL_TIM_PWM_ConfigChannel>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800095a:	f000 ffc1 	bl	80018e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800095e:	463b      	mov	r3, r7
 8000960:	220c      	movs	r2, #12
 8000962:	4619      	mov	r1, r3
 8000964:	4807      	ldr	r0, [pc, #28]	; (8000984 <MX_TIM2_Init+0xc4>)
 8000966:	f00a fc13 	bl	800b190 <HAL_TIM_PWM_ConfigChannel>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000970:	f000 ffb6 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000974:	4803      	ldr	r0, [pc, #12]	; (8000984 <MX_TIM2_Init+0xc4>)
 8000976:	f003 fdcd 	bl	8004514 <HAL_TIM_MspPostInit>

}
 800097a:	bf00      	nop
 800097c:	3728      	adds	r7, #40	; 0x28
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	240000f0 	.word	0x240000f0

08000988 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b088      	sub	sp, #32
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800098e:	f107 0310 	add.w	r3, r7, #16
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800099c:	1d3b      	adds	r3, r7, #4
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009a6:	4b1d      	ldr	r3, [pc, #116]	; (8000a1c <MX_TIM3_Init+0x94>)
 80009a8:	4a1d      	ldr	r2, [pc, #116]	; (8000a20 <MX_TIM3_Init+0x98>)
 80009aa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 839;
 80009ac:	4b1b      	ldr	r3, [pc, #108]	; (8000a1c <MX_TIM3_Init+0x94>)
 80009ae:	f240 3247 	movw	r2, #839	; 0x347
 80009b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b4:	4b19      	ldr	r3, [pc, #100]	; (8000a1c <MX_TIM3_Init+0x94>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80009ba:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <MX_TIM3_Init+0x94>)
 80009bc:	2263      	movs	r2, #99	; 0x63
 80009be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c0:	4b16      	ldr	r3, [pc, #88]	; (8000a1c <MX_TIM3_Init+0x94>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c6:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <MX_TIM3_Init+0x94>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009cc:	4813      	ldr	r0, [pc, #76]	; (8000a1c <MX_TIM3_Init+0x94>)
 80009ce:	f009 ff39 	bl	800a844 <HAL_TIM_Base_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80009d8:	f000 ff82 	bl	80018e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009e2:	f107 0310 	add.w	r3, r7, #16
 80009e6:	4619      	mov	r1, r3
 80009e8:	480c      	ldr	r0, [pc, #48]	; (8000a1c <MX_TIM3_Init+0x94>)
 80009ea:	f00a fce5 	bl	800b3b8 <HAL_TIM_ConfigClockSource>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80009f4:	f000 ff74 	bl	80018e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f8:	2300      	movs	r3, #0
 80009fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009fc:	2300      	movs	r3, #0
 80009fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a00:	1d3b      	adds	r3, r7, #4
 8000a02:	4619      	mov	r1, r3
 8000a04:	4805      	ldr	r0, [pc, #20]	; (8000a1c <MX_TIM3_Init+0x94>)
 8000a06:	f00b fa37 	bl	800be78 <HAL_TIMEx_MasterConfigSynchronization>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000a10:	f000 ff66 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a14:	bf00      	nop
 8000a16:	3720      	adds	r7, #32
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	2400013c 	.word	0x2400013c
 8000a20:	40000400 	.word	0x40000400

08000a24 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08c      	sub	sp, #48	; 0x30
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a2a:	f107 030c 	add.w	r3, r7, #12
 8000a2e:	2224      	movs	r2, #36	; 0x24
 8000a30:	2100      	movs	r1, #0
 8000a32:	4618      	mov	r0, r3
 8000a34:	f00d fcea 	bl	800e40c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a38:	463b      	mov	r3, r7
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a42:	4b21      	ldr	r3, [pc, #132]	; (8000ac8 <MX_TIM4_Init+0xa4>)
 8000a44:	4a21      	ldr	r2, [pc, #132]	; (8000acc <MX_TIM4_Init+0xa8>)
 8000a46:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000a48:	4b1f      	ldr	r3, [pc, #124]	; (8000ac8 <MX_TIM4_Init+0xa4>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a4e:	4b1e      	ldr	r3, [pc, #120]	; (8000ac8 <MX_TIM4_Init+0xa4>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000a54:	4b1c      	ldr	r3, [pc, #112]	; (8000ac8 <MX_TIM4_Init+0xa4>)
 8000a56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a5a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a5c:	4b1a      	ldr	r3, [pc, #104]	; (8000ac8 <MX_TIM4_Init+0xa4>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a62:	4b19      	ldr	r3, [pc, #100]	; (8000ac8 <MX_TIM4_Init+0xa4>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a70:	2301      	movs	r3, #1
 8000a72:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a74:	2300      	movs	r3, #0
 8000a76:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a80:	2301      	movs	r3, #1
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a84:	2300      	movs	r3, #0
 8000a86:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000a8c:	f107 030c 	add.w	r3, r7, #12
 8000a90:	4619      	mov	r1, r3
 8000a92:	480d      	ldr	r0, [pc, #52]	; (8000ac8 <MX_TIM4_Init+0xa4>)
 8000a94:	f00a f928 	bl	800ace8 <HAL_TIM_Encoder_Init>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000a9e:	f000 ff1f 	bl	80018e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000aaa:	463b      	mov	r3, r7
 8000aac:	4619      	mov	r1, r3
 8000aae:	4806      	ldr	r0, [pc, #24]	; (8000ac8 <MX_TIM4_Init+0xa4>)
 8000ab0:	f00b f9e2 	bl	800be78 <HAL_TIMEx_MasterConfigSynchronization>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000aba:	f000 ff11 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000abe:	bf00      	nop
 8000ac0:	3730      	adds	r7, #48	; 0x30
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	24000188 	.word	0x24000188
 8000acc:	40000800 	.word	0x40000800

08000ad0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b088      	sub	sp, #32
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ad6:	f107 0310 	add.w	r3, r7, #16
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	605a      	str	r2, [r3, #4]
 8000aec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000aee:	4b1d      	ldr	r3, [pc, #116]	; (8000b64 <MX_TIM5_Init+0x94>)
 8000af0:	4a1d      	ldr	r2, [pc, #116]	; (8000b68 <MX_TIM5_Init+0x98>)
 8000af2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8000af4:	4b1b      	ldr	r3, [pc, #108]	; (8000b64 <MX_TIM5_Init+0x94>)
 8000af6:	2253      	movs	r2, #83	; 0x53
 8000af8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000afa:	4b1a      	ldr	r3, [pc, #104]	; (8000b64 <MX_TIM5_Init+0x94>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 99999;
 8000b00:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <MX_TIM5_Init+0x94>)
 8000b02:	4a1a      	ldr	r2, [pc, #104]	; (8000b6c <MX_TIM5_Init+0x9c>)
 8000b04:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b06:	4b17      	ldr	r3, [pc, #92]	; (8000b64 <MX_TIM5_Init+0x94>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b0c:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <MX_TIM5_Init+0x94>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000b12:	4814      	ldr	r0, [pc, #80]	; (8000b64 <MX_TIM5_Init+0x94>)
 8000b14:	f009 fe96 	bl	800a844 <HAL_TIM_Base_Init>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8000b1e:	f000 fedf 	bl	80018e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b26:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000b28:	f107 0310 	add.w	r3, r7, #16
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	480d      	ldr	r0, [pc, #52]	; (8000b64 <MX_TIM5_Init+0x94>)
 8000b30:	f00a fc42 	bl	800b3b8 <HAL_TIM_ConfigClockSource>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8000b3a:	f000 fed1 	bl	80018e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b42:	2300      	movs	r3, #0
 8000b44:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4806      	ldr	r0, [pc, #24]	; (8000b64 <MX_TIM5_Init+0x94>)
 8000b4c:	f00b f994 	bl	800be78 <HAL_TIMEx_MasterConfigSynchronization>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8000b56:	f000 fec3 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000b5a:	bf00      	nop
 8000b5c:	3720      	adds	r7, #32
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	240001d4 	.word	0x240001d4
 8000b68:	40000c00 	.word	0x40000c00
 8000b6c:	0001869f 	.word	0x0001869f

08000b70 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b098      	sub	sp, #96	; 0x60
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b76:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b82:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	60da      	str	r2, [r3, #12]
 8000b90:	611a      	str	r2, [r3, #16]
 8000b92:	615a      	str	r2, [r3, #20]
 8000b94:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	2234      	movs	r2, #52	; 0x34
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f00d fc35 	bl	800e40c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000ba2:	4b38      	ldr	r3, [pc, #224]	; (8000c84 <MX_TIM8_Init+0x114>)
 8000ba4:	4a38      	ldr	r2, [pc, #224]	; (8000c88 <MX_TIM8_Init+0x118>)
 8000ba6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 83;
 8000ba8:	4b36      	ldr	r3, [pc, #216]	; (8000c84 <MX_TIM8_Init+0x114>)
 8000baa:	2253      	movs	r2, #83	; 0x53
 8000bac:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bae:	4b35      	ldr	r3, [pc, #212]	; (8000c84 <MX_TIM8_Init+0x114>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 49;
 8000bb4:	4b33      	ldr	r3, [pc, #204]	; (8000c84 <MX_TIM8_Init+0x114>)
 8000bb6:	2231      	movs	r2, #49	; 0x31
 8000bb8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bba:	4b32      	ldr	r3, [pc, #200]	; (8000c84 <MX_TIM8_Init+0x114>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000bc0:	4b30      	ldr	r3, [pc, #192]	; (8000c84 <MX_TIM8_Init+0x114>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc6:	4b2f      	ldr	r3, [pc, #188]	; (8000c84 <MX_TIM8_Init+0x114>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000bcc:	482d      	ldr	r0, [pc, #180]	; (8000c84 <MX_TIM8_Init+0x114>)
 8000bce:	f009 ff17 	bl	800aa00 <HAL_TIM_PWM_Init>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8000bd8:	f000 fe82 	bl	80018e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000be0:	2300      	movs	r3, #0
 8000be2:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000be4:	2300      	movs	r3, #0
 8000be6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000be8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000bec:	4619      	mov	r1, r3
 8000bee:	4825      	ldr	r0, [pc, #148]	; (8000c84 <MX_TIM8_Init+0x114>)
 8000bf0:	f00b f942 	bl	800be78 <HAL_TIMEx_MasterConfigSynchronization>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM8_Init+0x8e>
  {
    Error_Handler();
 8000bfa:	f000 fe71 	bl	80018e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bfe:	2360      	movs	r3, #96	; 0x60
 8000c00:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c06:	2300      	movs	r3, #0
 8000c08:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c12:	2300      	movs	r3, #0
 8000c14:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c16:	2300      	movs	r3, #0
 8000c18:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c1a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c1e:	2208      	movs	r2, #8
 8000c20:	4619      	mov	r1, r3
 8000c22:	4818      	ldr	r0, [pc, #96]	; (8000c84 <MX_TIM8_Init+0x114>)
 8000c24:	f00a fab4 	bl	800b190 <HAL_TIM_PWM_ConfigChannel>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8000c2e:	f000 fe57 	bl	80018e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c32:	2300      	movs	r3, #0
 8000c34:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c36:	2300      	movs	r3, #0
 8000c38:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c4a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c50:	2300      	movs	r3, #0
 8000c52:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c58:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	4619      	mov	r1, r3
 8000c66:	4807      	ldr	r0, [pc, #28]	; (8000c84 <MX_TIM8_Init+0x114>)
 8000c68:	f00b f9a2 	bl	800bfb0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_TIM8_Init+0x106>
  {
    Error_Handler();
 8000c72:	f000 fe35 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000c76:	4803      	ldr	r0, [pc, #12]	; (8000c84 <MX_TIM8_Init+0x114>)
 8000c78:	f003 fc4c 	bl	8004514 <HAL_TIM_MspPostInit>

}
 8000c7c:	bf00      	nop
 8000c7e:	3760      	adds	r7, #96	; 0x60
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	24000220 	.word	0x24000220
 8000c88:	40010400 	.word	0x40010400

08000c8c <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08c      	sub	sp, #48	; 0x30
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c92:	f107 030c 	add.w	r3, r7, #12
 8000c96:	2224      	movs	r2, #36	; 0x24
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f00d fbb6 	bl	800e40c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca0:	463b      	mov	r3, r7
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8000caa:	4b21      	ldr	r3, [pc, #132]	; (8000d30 <MX_TIM23_Init+0xa4>)
 8000cac:	4a21      	ldr	r2, [pc, #132]	; (8000d34 <MX_TIM23_Init+0xa8>)
 8000cae:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 0;
 8000cb0:	4b1f      	ldr	r3, [pc, #124]	; (8000d30 <MX_TIM23_Init+0xa4>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb6:	4b1e      	ldr	r3, [pc, #120]	; (8000d30 <MX_TIM23_Init+0xa4>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 8000cbc:	4b1c      	ldr	r3, [pc, #112]	; (8000d30 <MX_TIM23_Init+0xa4>)
 8000cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8000cc2:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cc4:	4b1a      	ldr	r3, [pc, #104]	; (8000d30 <MX_TIM23_Init+0xa4>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cca:	4b19      	ldr	r3, [pc, #100]	; (8000d30 <MX_TIM23_Init+0xa4>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000cec:	2300      	movs	r3, #0
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim23, &sConfig) != HAL_OK)
 8000cf4:	f107 030c 	add.w	r3, r7, #12
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	480d      	ldr	r0, [pc, #52]	; (8000d30 <MX_TIM23_Init+0xa4>)
 8000cfc:	f009 fff4 	bl	800ace8 <HAL_TIM_Encoder_Init>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_TIM23_Init+0x7e>
  {
    Error_Handler();
 8000d06:	f000 fdeb 	bl	80018e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8000d12:	463b      	mov	r3, r7
 8000d14:	4619      	mov	r1, r3
 8000d16:	4806      	ldr	r0, [pc, #24]	; (8000d30 <MX_TIM23_Init+0xa4>)
 8000d18:	f00b f8ae 	bl	800be78 <HAL_TIMEx_MasterConfigSynchronization>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM23_Init+0x9a>
  {
    Error_Handler();
 8000d22:	f000 fddd 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 8000d26:	bf00      	nop
 8000d28:	3730      	adds	r7, #48	; 0x30
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	2400026c 	.word	0x2400026c
 8000d34:	4000e000 	.word	0x4000e000

08000d38 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d3c:	4b22      	ldr	r3, [pc, #136]	; (8000dc8 <MX_USART3_UART_Init+0x90>)
 8000d3e:	4a23      	ldr	r2, [pc, #140]	; (8000dcc <MX_USART3_UART_Init+0x94>)
 8000d40:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d42:	4b21      	ldr	r3, [pc, #132]	; (8000dc8 <MX_USART3_UART_Init+0x90>)
 8000d44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d48:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d4a:	4b1f      	ldr	r3, [pc, #124]	; (8000dc8 <MX_USART3_UART_Init+0x90>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d50:	4b1d      	ldr	r3, [pc, #116]	; (8000dc8 <MX_USART3_UART_Init+0x90>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d56:	4b1c      	ldr	r3, [pc, #112]	; (8000dc8 <MX_USART3_UART_Init+0x90>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d5c:	4b1a      	ldr	r3, [pc, #104]	; (8000dc8 <MX_USART3_UART_Init+0x90>)
 8000d5e:	220c      	movs	r2, #12
 8000d60:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d62:	4b19      	ldr	r3, [pc, #100]	; (8000dc8 <MX_USART3_UART_Init+0x90>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d68:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <MX_USART3_UART_Init+0x90>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d6e:	4b16      	ldr	r3, [pc, #88]	; (8000dc8 <MX_USART3_UART_Init+0x90>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d74:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <MX_USART3_UART_Init+0x90>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d7a:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <MX_USART3_UART_Init+0x90>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d80:	4811      	ldr	r0, [pc, #68]	; (8000dc8 <MX_USART3_UART_Init+0x90>)
 8000d82:	f00b f9d3 	bl	800c12c <HAL_UART_Init>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d8c:	f000 fda8 	bl	80018e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d90:	2100      	movs	r1, #0
 8000d92:	480d      	ldr	r0, [pc, #52]	; (8000dc8 <MX_USART3_UART_Init+0x90>)
 8000d94:	f00d fa1c 	bl	800e1d0 <HAL_UARTEx_SetTxFifoThreshold>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d9e:	f000 fd9f 	bl	80018e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000da2:	2100      	movs	r1, #0
 8000da4:	4808      	ldr	r0, [pc, #32]	; (8000dc8 <MX_USART3_UART_Init+0x90>)
 8000da6:	f00d fa51 	bl	800e24c <HAL_UARTEx_SetRxFifoThreshold>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000db0:	f000 fd96 	bl	80018e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000db4:	4804      	ldr	r0, [pc, #16]	; (8000dc8 <MX_USART3_UART_Init+0x90>)
 8000db6:	f00d f9d2 	bl	800e15e <HAL_UARTEx_DisableFifoMode>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000dc0:	f000 fd8e 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	240002b8 	.word	0x240002b8
 8000dcc:	40004800 	.word	0x40004800

08000dd0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dd6:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <MX_DMA_Init+0x4c>)
 8000dd8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ddc:	4a0f      	ldr	r2, [pc, #60]	; (8000e1c <MX_DMA_Init+0x4c>)
 8000dde:	f043 0301 	orr.w	r3, r3, #1
 8000de2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000de6:	4b0d      	ldr	r3, [pc, #52]	; (8000e1c <MX_DMA_Init+0x4c>)
 8000de8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dec:	f003 0301 	and.w	r3, r3, #1
 8000df0:	607b      	str	r3, [r7, #4]
 8000df2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000df4:	2200      	movs	r2, #0
 8000df6:	2100      	movs	r1, #0
 8000df8:	200b      	movs	r0, #11
 8000dfa:	f003 ff90 	bl	8004d1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000dfe:	200b      	movs	r0, #11
 8000e00:	f003 ffa7 	bl	8004d52 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000e04:	2200      	movs	r2, #0
 8000e06:	2100      	movs	r1, #0
 8000e08:	200c      	movs	r0, #12
 8000e0a:	f003 ff88 	bl	8004d1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000e0e:	200c      	movs	r0, #12
 8000e10:	f003 ff9f 	bl	8004d52 <HAL_NVIC_EnableIRQ>

}
 8000e14:	bf00      	nop
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	58024400 	.word	0x58024400

08000e20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08c      	sub	sp, #48	; 0x30
 8000e24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e26:	f107 031c 	add.w	r3, r7, #28
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	609a      	str	r2, [r3, #8]
 8000e32:	60da      	str	r2, [r3, #12]
 8000e34:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e36:	4b39      	ldr	r3, [pc, #228]	; (8000f1c <MX_GPIO_Init+0xfc>)
 8000e38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e3c:	4a37      	ldr	r2, [pc, #220]	; (8000f1c <MX_GPIO_Init+0xfc>)
 8000e3e:	f043 0310 	orr.w	r3, r3, #16
 8000e42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e46:	4b35      	ldr	r3, [pc, #212]	; (8000f1c <MX_GPIO_Init+0xfc>)
 8000e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e4c:	f003 0310 	and.w	r3, r3, #16
 8000e50:	61bb      	str	r3, [r7, #24]
 8000e52:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e54:	4b31      	ldr	r3, [pc, #196]	; (8000f1c <MX_GPIO_Init+0xfc>)
 8000e56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e5a:	4a30      	ldr	r2, [pc, #192]	; (8000f1c <MX_GPIO_Init+0xfc>)
 8000e5c:	f043 0304 	orr.w	r3, r3, #4
 8000e60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e64:	4b2d      	ldr	r3, [pc, #180]	; (8000f1c <MX_GPIO_Init+0xfc>)
 8000e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e6a:	f003 0304 	and.w	r3, r3, #4
 8000e6e:	617b      	str	r3, [r7, #20]
 8000e70:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e72:	4b2a      	ldr	r3, [pc, #168]	; (8000f1c <MX_GPIO_Init+0xfc>)
 8000e74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e78:	4a28      	ldr	r2, [pc, #160]	; (8000f1c <MX_GPIO_Init+0xfc>)
 8000e7a:	f043 0320 	orr.w	r3, r3, #32
 8000e7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e82:	4b26      	ldr	r3, [pc, #152]	; (8000f1c <MX_GPIO_Init+0xfc>)
 8000e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e88:	f003 0320 	and.w	r3, r3, #32
 8000e8c:	613b      	str	r3, [r7, #16]
 8000e8e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e90:	4b22      	ldr	r3, [pc, #136]	; (8000f1c <MX_GPIO_Init+0xfc>)
 8000e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e96:	4a21      	ldr	r2, [pc, #132]	; (8000f1c <MX_GPIO_Init+0xfc>)
 8000e98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ea0:	4b1e      	ldr	r3, [pc, #120]	; (8000f1c <MX_GPIO_Init+0xfc>)
 8000ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eae:	4b1b      	ldr	r3, [pc, #108]	; (8000f1c <MX_GPIO_Init+0xfc>)
 8000eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb4:	4a19      	ldr	r2, [pc, #100]	; (8000f1c <MX_GPIO_Init+0xfc>)
 8000eb6:	f043 0301 	orr.w	r3, r3, #1
 8000eba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ebe:	4b17      	ldr	r3, [pc, #92]	; (8000f1c <MX_GPIO_Init+0xfc>)
 8000ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec4:	f003 0301 	and.w	r3, r3, #1
 8000ec8:	60bb      	str	r3, [r7, #8]
 8000eca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ecc:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <MX_GPIO_Init+0xfc>)
 8000ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed2:	4a12      	ldr	r2, [pc, #72]	; (8000f1c <MX_GPIO_Init+0xfc>)
 8000ed4:	f043 0308 	orr.w	r3, r3, #8
 8000ed8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000edc:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <MX_GPIO_Init+0xfc>)
 8000ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee2:	f003 0308 	and.w	r3, r3, #8
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 8000eea:	2200      	movs	r2, #0
 8000eec:	f249 51c0 	movw	r1, #38336	; 0x95c0
 8000ef0:	480b      	ldr	r0, [pc, #44]	; (8000f20 <MX_GPIO_Init+0x100>)
 8000ef2:	f006 ff2b 	bl	8007d4c <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE6 PE7 PE8 PE10
                           PE12 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 8000ef6:	f249 53c0 	movw	r3, #38336	; 0x95c0
 8000efa:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efc:	2301      	movs	r3, #1
 8000efe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f04:	2300      	movs	r3, #0
 8000f06:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f08:	f107 031c 	add.w	r3, r7, #28
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4804      	ldr	r0, [pc, #16]	; (8000f20 <MX_GPIO_Init+0x100>)
 8000f10:	f006 fd74 	bl	80079fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f14:	bf00      	nop
 8000f16:	3730      	adds	r7, #48	; 0x30
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	58024400 	.word	0x58024400
 8000f20:	58021000 	.word	0x58021000

08000f24 <HAL_TIM_PeriodElapsedCallback>:

double WF, WR, WL;
int into_tim3=0;
int into_tim5=0;
int into_PID=0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a10      	ldr	r2, [pc, #64]	; (8000f74 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d10d      	bne.n	8000f52 <HAL_TIM_PeriodElapsedCallback+0x2e>
		inverse_kinematics_model();
 8000f36:	f000 f827 	bl	8000f88 <inverse_kinematics_model>
		Encoder();
 8000f3a:	f000 f905 	bl	8001148 <Encoder>
		PID_PWM();
 8000f3e:	f000 f97f 	bl	8001240 <PID_PWM>
		kinematics_model();
 8000f42:	f000 fc0d 	bl	8001760 <kinematics_model>
		into_tim3++;
 8000f46:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000f4e:	6013      	str	r3, [r2, #0]
		//rVy = 1;
		//rW = 1;
		realspeed();
		into_tim5++;
	}
}
 8000f50:	e00b      	b.n	8000f6a <HAL_TIM_PeriodElapsedCallback+0x46>
	else if(htim->Instance == TIM5){
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a09      	ldr	r2, [pc, #36]	; (8000f7c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d106      	bne.n	8000f6a <HAL_TIM_PeriodElapsedCallback+0x46>
		realspeed();
 8000f5c:	f002 fb18 	bl	8003590 <realspeed>
		into_tim5++;
 8000f60:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	3301      	adds	r3, #1
 8000f66:	4a06      	ldr	r2, [pc, #24]	; (8000f80 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000f68:	6013      	str	r3, [r2, #0]
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40000400 	.word	0x40000400
 8000f78:	240004a8 	.word	0x240004a8
 8000f7c:	40000c00 	.word	0x40000c00
 8000f80:	240004ac 	.word	0x240004ac
 8000f84:	00000000 	.word	0x00000000

08000f88 <inverse_kinematics_model>:

void inverse_kinematics_model(){
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
	//treatise holonomic three wheels omni
	WL = (-Vx+sqrt(3)*Vy+LL*W)/3;
 8000f8c:	4b62      	ldr	r3, [pc, #392]	; (8001118 <inverse_kinematics_model+0x190>)
 8000f8e:	ed93 7b00 	vldr	d7, [r3]
 8000f92:	ed9f 6b59 	vldr	d6, [pc, #356]	; 80010f8 <inverse_kinematics_model+0x170>
 8000f96:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000f9a:	4b60      	ldr	r3, [pc, #384]	; (800111c <inverse_kinematics_model+0x194>)
 8000f9c:	ed93 7b00 	vldr	d7, [r3]
 8000fa0:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000fa4:	4b5e      	ldr	r3, [pc, #376]	; (8001120 <inverse_kinematics_model+0x198>)
 8000fa6:	ed93 7b00 	vldr	d7, [r3]
 8000faa:	ed9f 5b55 	vldr	d5, [pc, #340]	; 8001100 <inverse_kinematics_model+0x178>
 8000fae:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000fb2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000fb6:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8000fba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fbe:	4b59      	ldr	r3, [pc, #356]	; (8001124 <inverse_kinematics_model+0x19c>)
 8000fc0:	ed83 7b00 	vstr	d7, [r3]
	WR = (-Vx-sqrt(3)*Vy+LR*W)/3;
 8000fc4:	4b55      	ldr	r3, [pc, #340]	; (800111c <inverse_kinematics_model+0x194>)
 8000fc6:	ed93 7b00 	vldr	d7, [r3]
 8000fca:	eeb1 6b47 	vneg.f64	d6, d7
 8000fce:	4b52      	ldr	r3, [pc, #328]	; (8001118 <inverse_kinematics_model+0x190>)
 8000fd0:	ed93 7b00 	vldr	d7, [r3]
 8000fd4:	ed9f 5b48 	vldr	d5, [pc, #288]	; 80010f8 <inverse_kinematics_model+0x170>
 8000fd8:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000fdc:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000fe0:	4b4f      	ldr	r3, [pc, #316]	; (8001120 <inverse_kinematics_model+0x198>)
 8000fe2:	ed93 7b00 	vldr	d7, [r3]
 8000fe6:	ed9f 5b46 	vldr	d5, [pc, #280]	; 8001100 <inverse_kinematics_model+0x178>
 8000fea:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000fee:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000ff2:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8000ff6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ffa:	4b4b      	ldr	r3, [pc, #300]	; (8001128 <inverse_kinematics_model+0x1a0>)
 8000ffc:	ed83 7b00 	vstr	d7, [r3]
	WF = (2*Vx+LF*W)/3;
 8001000:	4b46      	ldr	r3, [pc, #280]	; (800111c <inverse_kinematics_model+0x194>)
 8001002:	ed93 7b00 	vldr	d7, [r3]
 8001006:	ee37 6b07 	vadd.f64	d6, d7, d7
 800100a:	4b45      	ldr	r3, [pc, #276]	; (8001120 <inverse_kinematics_model+0x198>)
 800100c:	ed93 7b00 	vldr	d7, [r3]
 8001010:	ed9f 5b3b 	vldr	d5, [pc, #236]	; 8001100 <inverse_kinematics_model+0x178>
 8001014:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001018:	ee36 6b07 	vadd.f64	d6, d6, d7
 800101c:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8001020:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001024:	4b41      	ldr	r3, [pc, #260]	; (800112c <inverse_kinematics_model+0x1a4>)
 8001026:	ed83 7b00 	vstr	d7, [r3]
	//W等比例調整? 用L?

	WF=WF*(-1);
 800102a:	4b40      	ldr	r3, [pc, #256]	; (800112c <inverse_kinematics_model+0x1a4>)
 800102c:	ed93 7b00 	vldr	d7, [r3]
 8001030:	eeb1 7b47 	vneg.f64	d7, d7
 8001034:	4b3d      	ldr	r3, [pc, #244]	; (800112c <inverse_kinematics_model+0x1a4>)
 8001036:	ed83 7b00 	vstr	d7, [r3]
	WL=WL*(-1);
 800103a:	4b3a      	ldr	r3, [pc, #232]	; (8001124 <inverse_kinematics_model+0x19c>)
 800103c:	ed93 7b00 	vldr	d7, [r3]
 8001040:	eeb1 7b47 	vneg.f64	d7, d7
 8001044:	4b37      	ldr	r3, [pc, #220]	; (8001124 <inverse_kinematics_model+0x19c>)
 8001046:	ed83 7b00 	vstr	d7, [r3]
	WR=WR*(-1);
 800104a:	4b37      	ldr	r3, [pc, #220]	; (8001128 <inverse_kinematics_model+0x1a0>)
 800104c:	ed93 7b00 	vldr	d7, [r3]
 8001050:	eeb1 7b47 	vneg.f64	d7, d7
 8001054:	4b34      	ldr	r3, [pc, #208]	; (8001128 <inverse_kinematics_model+0x1a0>)
 8001056:	ed83 7b00 	vstr	d7, [r3]

	MF = (WF/wheel_radius)/ratio_motor2wheel/(2*pi)*cmnspeed;
 800105a:	4b34      	ldr	r3, [pc, #208]	; (800112c <inverse_kinematics_model+0x1a4>)
 800105c:	ed93 7b00 	vldr	d7, [r3]
 8001060:	ed9f 5b29 	vldr	d5, [pc, #164]	; 8001108 <inverse_kinematics_model+0x180>
 8001064:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001068:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800106c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001070:	ed9f 5b27 	vldr	d5, [pc, #156]	; 8001110 <inverse_kinematics_model+0x188>
 8001074:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001078:	4b2d      	ldr	r3, [pc, #180]	; (8001130 <inverse_kinematics_model+0x1a8>)
 800107a:	ed93 7b00 	vldr	d7, [r3]
 800107e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001082:	4b2c      	ldr	r3, [pc, #176]	; (8001134 <inverse_kinematics_model+0x1ac>)
 8001084:	ed83 7b00 	vstr	d7, [r3]
	MR = (WR/wheel_radius)/ratio_motor2wheel/(2*pi)*cmnspeed;
 8001088:	4b27      	ldr	r3, [pc, #156]	; (8001128 <inverse_kinematics_model+0x1a0>)
 800108a:	ed93 7b00 	vldr	d7, [r3]
 800108e:	ed9f 5b1e 	vldr	d5, [pc, #120]	; 8001108 <inverse_kinematics_model+0x180>
 8001092:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001096:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800109a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800109e:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 8001110 <inverse_kinematics_model+0x188>
 80010a2:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80010a6:	4b22      	ldr	r3, [pc, #136]	; (8001130 <inverse_kinematics_model+0x1a8>)
 80010a8:	ed93 7b00 	vldr	d7, [r3]
 80010ac:	ee26 7b07 	vmul.f64	d7, d6, d7
 80010b0:	4b21      	ldr	r3, [pc, #132]	; (8001138 <inverse_kinematics_model+0x1b0>)
 80010b2:	ed83 7b00 	vstr	d7, [r3]
	ML = (WL/wheel_radius)/ratio_motor2wheel/(2*pi)*cmnMF*cmnspeed;
 80010b6:	4b1b      	ldr	r3, [pc, #108]	; (8001124 <inverse_kinematics_model+0x19c>)
 80010b8:	ed93 7b00 	vldr	d7, [r3]
 80010bc:	ed9f 5b12 	vldr	d5, [pc, #72]	; 8001108 <inverse_kinematics_model+0x180>
 80010c0:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80010c4:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80010c8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80010cc:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8001110 <inverse_kinematics_model+0x188>
 80010d0:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80010d4:	4b19      	ldr	r3, [pc, #100]	; (800113c <inverse_kinematics_model+0x1b4>)
 80010d6:	ed93 7b00 	vldr	d7, [r3]
 80010da:	ee26 6b07 	vmul.f64	d6, d6, d7
 80010de:	4b14      	ldr	r3, [pc, #80]	; (8001130 <inverse_kinematics_model+0x1a8>)
 80010e0:	ed93 7b00 	vldr	d7, [r3]
 80010e4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80010e8:	4b15      	ldr	r3, [pc, #84]	; (8001140 <inverse_kinematics_model+0x1b8>)
 80010ea:	ed83 7b00 	vstr	d7, [r3]
	}
 80010ee:	bf00      	nop
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e8584caa 	.word	0xe8584caa
 80010fc:	3ffbb67a 	.word	0x3ffbb67a
 8001100:	00000000 	.word	0x00000000
 8001104:	40590000 	.word	0x40590000
 8001108:	eb851eb8 	.word	0xeb851eb8
 800110c:	3f9eb851 	.word	0x3f9eb851
 8001110:	54442eea 	.word	0x54442eea
 8001114:	401921fb 	.word	0x401921fb
 8001118:	240004d0 	.word	0x240004d0
 800111c:	240004c8 	.word	0x240004c8
 8001120:	240004d8 	.word	0x240004d8
 8001124:	240004a0 	.word	0x240004a0
 8001128:	24000498 	.word	0x24000498
 800112c:	24000490 	.word	0x24000490
 8001130:	24000008 	.word	0x24000008
 8001134:	24000440 	.word	0x24000440
 8001138:	24000448 	.word	0x24000448
 800113c:	24000000 	.word	0x24000000
 8001140:	24000450 	.word	0x24000450
 8001144:	00000000 	.word	0x00000000

08001148 <Encoder>:
void Encoder() {
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
	//front wheel motor
	enc_MF = __HAL_TIM_GetCounter(TIM_ENC_MF);
 800114c:	4b32      	ldr	r3, [pc, #200]	; (8001218 <Encoder+0xd0>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001152:	b21a      	sxth	r2, r3
 8001154:	4b31      	ldr	r3, [pc, #196]	; (800121c <Encoder+0xd4>)
 8001156:	801a      	strh	r2, [r3, #0]
	rMF = (double) enc_MF / (4 * resolution_MF * reductionratio_MF) / motor_span;//(2*pi);//rev/s = 2Pi/s
 8001158:	4b30      	ldr	r3, [pc, #192]	; (800121c <Encoder+0xd4>)
 800115a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800115e:	ee07 3a90 	vmov	s15, r3
 8001162:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001166:	ed9f 5b26 	vldr	d5, [pc, #152]	; 8001200 <Encoder+0xb8>
 800116a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800116e:	ed9f 5b26 	vldr	d5, [pc, #152]	; 8001208 <Encoder+0xc0>
 8001172:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001176:	4b2a      	ldr	r3, [pc, #168]	; (8001220 <Encoder+0xd8>)
 8001178:	ed83 7b00 	vstr	d7, [r3]
	__HAL_TIM_SetCounter(TIM_ENC_MF, 0);
 800117c:	4b26      	ldr	r3, [pc, #152]	; (8001218 <Encoder+0xd0>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2200      	movs	r2, #0
 8001182:	625a      	str	r2, [r3, #36]	; 0x24

	//right wheel motor
	enc_MR = __HAL_TIM_GetCounter(TIM_ENC_MR);
 8001184:	4b27      	ldr	r3, [pc, #156]	; (8001224 <Encoder+0xdc>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118a:	b21a      	sxth	r2, r3
 800118c:	4b26      	ldr	r3, [pc, #152]	; (8001228 <Encoder+0xe0>)
 800118e:	801a      	strh	r2, [r3, #0]
	rMR = (double) enc_MR / (4 * resolution_MR * reductionratio_MR) / motor_span;//(2*pi);
 8001190:	4b25      	ldr	r3, [pc, #148]	; (8001228 <Encoder+0xe0>)
 8001192:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001196:	ee07 3a90 	vmov	s15, r3
 800119a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800119e:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 8001210 <Encoder+0xc8>
 80011a2:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80011a6:	ed9f 5b18 	vldr	d5, [pc, #96]	; 8001208 <Encoder+0xc0>
 80011aa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011ae:	4b1f      	ldr	r3, [pc, #124]	; (800122c <Encoder+0xe4>)
 80011b0:	ed83 7b00 	vstr	d7, [r3]
	__HAL_TIM_SetCounter(TIM_ENC_MR, 0);
 80011b4:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <Encoder+0xdc>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2200      	movs	r2, #0
 80011ba:	625a      	str	r2, [r3, #36]	; 0x24

	//left wheel motor
	enc_ML = __HAL_TIM_GetCounter(TIM_ENC_ML);
 80011bc:	4b1c      	ldr	r3, [pc, #112]	; (8001230 <Encoder+0xe8>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c2:	b21a      	sxth	r2, r3
 80011c4:	4b1b      	ldr	r3, [pc, #108]	; (8001234 <Encoder+0xec>)
 80011c6:	801a      	strh	r2, [r3, #0]
	rML = (double) enc_ML / (4 * resolution_ML * reductionratio_ML) / motor_span;//(2*pi);
 80011c8:	4b1a      	ldr	r3, [pc, #104]	; (8001234 <Encoder+0xec>)
 80011ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ce:	ee07 3a90 	vmov	s15, r3
 80011d2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80011d6:	ed9f 5b0e 	vldr	d5, [pc, #56]	; 8001210 <Encoder+0xc8>
 80011da:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80011de:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8001208 <Encoder+0xc0>
 80011e2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011e6:	4b14      	ldr	r3, [pc, #80]	; (8001238 <Encoder+0xf0>)
 80011e8:	ed83 7b00 	vstr	d7, [r3]
	__HAL_TIM_SetCounter(TIM_ENC_ML, 0);
 80011ec:	4b10      	ldr	r3, [pc, #64]	; (8001230 <Encoder+0xe8>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2200      	movs	r2, #0
 80011f2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	00000000 	.word	0x00000000
 8001204:	40e00000 	.word	0x40e00000
 8001208:	d2f1a9fc 	.word	0xd2f1a9fc
 800120c:	3f50624d 	.word	0x3f50624d
 8001210:	00000000 	.word	0x00000000
 8001214:	40d9c800 	.word	0x40d9c800
 8001218:	240000a4 	.word	0x240000a4
 800121c:	24000458 	.word	0x24000458
 8001220:	24000460 	.word	0x24000460
 8001224:	2400026c 	.word	0x2400026c
 8001228:	2400045a 	.word	0x2400045a
 800122c:	24000468 	.word	0x24000468
 8001230:	24000188 	.word	0x24000188
 8001234:	2400045c 	.word	0x2400045c
 8001238:	24000470 	.word	0x24000470
 800123c:	00000000 	.word	0x00000000

08001240 <PID_PWM>:
int pulse_MF;
int pulse_ML;
int pulse_MR;
float u_MF;
void PID_PWM(){
 8001240:	b580      	push	{r7, lr}
 8001242:	b08e      	sub	sp, #56	; 0x38
 8001244:	af00      	add	r7, sp, #0

	//PID_MF
	double err_MF = MF - rMF;
 8001246:	4bb2      	ldr	r3, [pc, #712]	; (8001510 <PID_PWM+0x2d0>)
 8001248:	ed93 6b00 	vldr	d6, [r3]
 800124c:	4bb1      	ldr	r3, [pc, #708]	; (8001514 <PID_PWM+0x2d4>)
 800124e:	ed93 7b00 	vldr	d7, [r3]
 8001252:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001256:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	inte_MF += err_MF * motor_span;
 800125a:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800125e:	ed9f 6baa 	vldr	d6, [pc, #680]	; 8001508 <PID_PWM+0x2c8>
 8001262:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001266:	4bac      	ldr	r3, [pc, #688]	; (8001518 <PID_PWM+0x2d8>)
 8001268:	ed93 7b00 	vldr	d7, [r3]
 800126c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001270:	4ba9      	ldr	r3, [pc, #676]	; (8001518 <PID_PWM+0x2d8>)
 8001272:	ed83 7b00 	vstr	d7, [r3]
	double bound_MF = 1/ki_MF;
 8001276:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 800151c <PID_PWM+0x2dc>
 800127a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800127e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001282:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001286:	ed87 7b08 	vstr	d7, [r7, #32]
	if (ki_MF * inte_MF > 1) inte_MF = bound_MF;
 800128a:	eddf 7aa4 	vldr	s15, [pc, #656]	; 800151c <PID_PWM+0x2dc>
 800128e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001292:	4ba1      	ldr	r3, [pc, #644]	; (8001518 <PID_PWM+0x2d8>)
 8001294:	ed93 7b00 	vldr	d7, [r3]
 8001298:	ee26 7b07 	vmul.f64	d7, d6, d7
 800129c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80012a0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80012a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a8:	dd05      	ble.n	80012b6 <PID_PWM+0x76>
 80012aa:	499b      	ldr	r1, [pc, #620]	; (8001518 <PID_PWM+0x2d8>)
 80012ac:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80012b0:	e9c1 2300 	strd	r2, r3, [r1]
 80012b4:	e016      	b.n	80012e4 <PID_PWM+0xa4>
	else if (ki_MF * inte_MF < -1) inte_MF = -bound_MF;
 80012b6:	eddf 7a99 	vldr	s15, [pc, #612]	; 800151c <PID_PWM+0x2dc>
 80012ba:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80012be:	4b96      	ldr	r3, [pc, #600]	; (8001518 <PID_PWM+0x2d8>)
 80012c0:	ed93 7b00 	vldr	d7, [r3]
 80012c4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80012c8:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80012cc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80012d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d4:	d506      	bpl.n	80012e4 <PID_PWM+0xa4>
 80012d6:	ed97 7b08 	vldr	d7, [r7, #32]
 80012da:	eeb1 7b47 	vneg.f64	d7, d7
 80012de:	4b8e      	ldr	r3, [pc, #568]	; (8001518 <PID_PWM+0x2d8>)
 80012e0:	ed83 7b00 	vstr	d7, [r3]
	u_MF = kp_MF * err_MF + ki_MF * inte_MF;
 80012e4:	eddf 7a8e 	vldr	s15, [pc, #568]	; 8001520 <PID_PWM+0x2e0>
 80012e8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80012ec:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80012f0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80012f4:	eddf 7a89 	vldr	s15, [pc, #548]	; 800151c <PID_PWM+0x2dc>
 80012f8:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80012fc:	4b86      	ldr	r3, [pc, #536]	; (8001518 <PID_PWM+0x2d8>)
 80012fe:	ed93 7b00 	vldr	d7, [r3]
 8001302:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001306:	ee36 7b07 	vadd.f64	d7, d6, d7
 800130a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800130e:	4b85      	ldr	r3, [pc, #532]	; (8001524 <PID_PWM+0x2e4>)
 8001310:	edc3 7a00 	vstr	s15, [r3]
	if (u_MF > 1) u_MF = 1;
 8001314:	4b83      	ldr	r3, [pc, #524]	; (8001524 <PID_PWM+0x2e4>)
 8001316:	edd3 7a00 	vldr	s15, [r3]
 800131a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800131e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001326:	dd04      	ble.n	8001332 <PID_PWM+0xf2>
 8001328:	4b7e      	ldr	r3, [pc, #504]	; (8001524 <PID_PWM+0x2e4>)
 800132a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	e00c      	b.n	800134c <PID_PWM+0x10c>
	else if (u_MF < -1) u_MF = -1;
 8001332:	4b7c      	ldr	r3, [pc, #496]	; (8001524 <PID_PWM+0x2e4>)
 8001334:	edd3 7a00 	vldr	s15, [r3]
 8001338:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800133c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001344:	d502      	bpl.n	800134c <PID_PWM+0x10c>
 8001346:	4b77      	ldr	r3, [pc, #476]	; (8001524 <PID_PWM+0x2e4>)
 8001348:	4a77      	ldr	r2, [pc, #476]	; (8001528 <PID_PWM+0x2e8>)
 800134a:	601a      	str	r2, [r3, #0]

	//PWM_MF
	//int pulse_MF;
	if (u_MF > 0) {
 800134c:	4b75      	ldr	r3, [pc, #468]	; (8001524 <PID_PWM+0x2e4>)
 800134e:	edd3 7a00 	vldr	s15, [r3]
 8001352:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800135a:	dd18      	ble.n	800138e <PID_PWM+0x14e>
		pulse_MF = (int) (u_MF * (motorARR + 1));
 800135c:	4b71      	ldr	r3, [pc, #452]	; (8001524 <PID_PWM+0x2e4>)
 800135e:	edd3 7a00 	vldr	s15, [r3]
 8001362:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8001550 <PID_PWM+0x310>
 8001366:	ee67 7a87 	vmul.f32	s15, s15, s14
 800136a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800136e:	ee17 2a90 	vmov	r2, s15
 8001372:	4b6e      	ldr	r3, [pc, #440]	; (800152c <PID_PWM+0x2ec>)
 8001374:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(INA_MF_PORT, INA_MF_PIN, GPIO_PIN_SET); // INA
 8001376:	2201      	movs	r2, #1
 8001378:	2140      	movs	r1, #64	; 0x40
 800137a:	486d      	ldr	r0, [pc, #436]	; (8001530 <PID_PWM+0x2f0>)
 800137c:	f006 fce6 	bl	8007d4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB_MF_PORT, INB_MF_PIN, GPIO_PIN_RESET); // INB
 8001380:	2200      	movs	r2, #0
 8001382:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001386:	486a      	ldr	r0, [pc, #424]	; (8001530 <PID_PWM+0x2f0>)
 8001388:	f006 fce0 	bl	8007d4c <HAL_GPIO_WritePin>
 800138c:	e019      	b.n	80013c2 <PID_PWM+0x182>
	} else {
		pulse_MF = (int) (-u_MF * (motorARR + 1));
 800138e:	4b65      	ldr	r3, [pc, #404]	; (8001524 <PID_PWM+0x2e4>)
 8001390:	edd3 7a00 	vldr	s15, [r3]
 8001394:	eef1 7a67 	vneg.f32	s15, s15
 8001398:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8001550 <PID_PWM+0x310>
 800139c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013a4:	ee17 2a90 	vmov	r2, s15
 80013a8:	4b60      	ldr	r3, [pc, #384]	; (800152c <PID_PWM+0x2ec>)
 80013aa:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(INA_MF_PORT, INA_MF_PIN, GPIO_PIN_RESET); // INA
 80013ac:	2200      	movs	r2, #0
 80013ae:	2140      	movs	r1, #64	; 0x40
 80013b0:	485f      	ldr	r0, [pc, #380]	; (8001530 <PID_PWM+0x2f0>)
 80013b2:	f006 fccb 	bl	8007d4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB_MF_PORT, INB_MF_PIN, GPIO_PIN_SET); // INB
 80013b6:	2201      	movs	r2, #1
 80013b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013bc:	485c      	ldr	r0, [pc, #368]	; (8001530 <PID_PWM+0x2f0>)
 80013be:	f006 fcc5 	bl	8007d4c <HAL_GPIO_WritePin>
	}
	__HAL_TIM_SET_COMPARE(TIM_PWM_MF, CH_PWM_MF, pulse_MF); // PWM
 80013c2:	4b5a      	ldr	r3, [pc, #360]	; (800152c <PID_PWM+0x2ec>)
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	4b5b      	ldr	r3, [pc, #364]	; (8001534 <PID_PWM+0x2f4>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	635a      	str	r2, [r3, #52]	; 0x34

	//PID_MR
	double err_MR = MR - rMR;
 80013cc:	4b5a      	ldr	r3, [pc, #360]	; (8001538 <PID_PWM+0x2f8>)
 80013ce:	ed93 6b00 	vldr	d6, [r3]
 80013d2:	4b5a      	ldr	r3, [pc, #360]	; (800153c <PID_PWM+0x2fc>)
 80013d4:	ed93 7b00 	vldr	d7, [r3]
 80013d8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80013dc:	ed87 7b06 	vstr	d7, [r7, #24]
	inte_MR += err_MR * motor_span;
 80013e0:	ed97 7b06 	vldr	d7, [r7, #24]
 80013e4:	ed9f 6b48 	vldr	d6, [pc, #288]	; 8001508 <PID_PWM+0x2c8>
 80013e8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80013ec:	4b54      	ldr	r3, [pc, #336]	; (8001540 <PID_PWM+0x300>)
 80013ee:	ed93 7b00 	vldr	d7, [r3]
 80013f2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80013f6:	4b52      	ldr	r3, [pc, #328]	; (8001540 <PID_PWM+0x300>)
 80013f8:	ed83 7b00 	vstr	d7, [r3]
	double bound_MR = 1/ki_MR;
 80013fc:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8001544 <PID_PWM+0x304>
 8001400:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001404:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001408:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800140c:	ed87 7b04 	vstr	d7, [r7, #16]
	if (ki_MR * inte_MR > 1) inte_MR = bound_MR;
 8001410:	eddf 7a4c 	vldr	s15, [pc, #304]	; 8001544 <PID_PWM+0x304>
 8001414:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001418:	4b49      	ldr	r3, [pc, #292]	; (8001540 <PID_PWM+0x300>)
 800141a:	ed93 7b00 	vldr	d7, [r3]
 800141e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001422:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001426:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800142a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800142e:	dd05      	ble.n	800143c <PID_PWM+0x1fc>
 8001430:	4943      	ldr	r1, [pc, #268]	; (8001540 <PID_PWM+0x300>)
 8001432:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001436:	e9c1 2300 	strd	r2, r3, [r1]
 800143a:	e016      	b.n	800146a <PID_PWM+0x22a>
	else if (ki_MR * inte_MR < -1) inte_MR = -bound_MR;
 800143c:	eddf 7a41 	vldr	s15, [pc, #260]	; 8001544 <PID_PWM+0x304>
 8001440:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001444:	4b3e      	ldr	r3, [pc, #248]	; (8001540 <PID_PWM+0x300>)
 8001446:	ed93 7b00 	vldr	d7, [r3]
 800144a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800144e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8001452:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800145a:	d506      	bpl.n	800146a <PID_PWM+0x22a>
 800145c:	ed97 7b04 	vldr	d7, [r7, #16]
 8001460:	eeb1 7b47 	vneg.f64	d7, d7
 8001464:	4b36      	ldr	r3, [pc, #216]	; (8001540 <PID_PWM+0x300>)
 8001466:	ed83 7b00 	vstr	d7, [r3]
	float u_MR = kp_MR * err_MR + ki_MR * inte_MR;
 800146a:	eddf 7a37 	vldr	s15, [pc, #220]	; 8001548 <PID_PWM+0x308>
 800146e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001472:	ed97 7b06 	vldr	d7, [r7, #24]
 8001476:	ee26 6b07 	vmul.f64	d6, d6, d7
 800147a:	eddf 7a32 	vldr	s15, [pc, #200]	; 8001544 <PID_PWM+0x304>
 800147e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001482:	4b2f      	ldr	r3, [pc, #188]	; (8001540 <PID_PWM+0x300>)
 8001484:	ed93 7b00 	vldr	d7, [r3]
 8001488:	ee25 7b07 	vmul.f64	d7, d5, d7
 800148c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001490:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001494:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	if (u_MR > 1) u_MR = 1;
 8001498:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800149c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80014a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a8:	dd03      	ble.n	80014b2 <PID_PWM+0x272>
 80014aa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80014ae:	637b      	str	r3, [r7, #52]	; 0x34
 80014b0:	e00a      	b.n	80014c8 <PID_PWM+0x288>
	else if (u_MR < -1) u_MR = -1;
 80014b2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80014b6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80014ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c2:	d501      	bpl.n	80014c8 <PID_PWM+0x288>
 80014c4:	4b18      	ldr	r3, [pc, #96]	; (8001528 <PID_PWM+0x2e8>)
 80014c6:	637b      	str	r3, [r7, #52]	; 0x34
	//PWM_MR
	//int pulse_MR;
	if (u_MR > 0) {
 80014c8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80014cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d4:	dd3e      	ble.n	8001554 <PID_PWM+0x314>
		pulse_MR = (int) (u_MR * (motorARR + 1));
 80014d6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80014da:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001550 <PID_PWM+0x310>
 80014de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014e6:	ee17 2a90 	vmov	r2, s15
 80014ea:	4b18      	ldr	r3, [pc, #96]	; (800154c <PID_PWM+0x30c>)
 80014ec:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(INA_MR_PORT, INA_MR_PIN, GPIO_PIN_SET); // INA
 80014ee:	2201      	movs	r2, #1
 80014f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014f4:	480e      	ldr	r0, [pc, #56]	; (8001530 <PID_PWM+0x2f0>)
 80014f6:	f006 fc29 	bl	8007d4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB_MR_PORT, INB_MR_PIN, GPIO_PIN_RESET); // INB
 80014fa:	2200      	movs	r2, #0
 80014fc:	2180      	movs	r1, #128	; 0x80
 80014fe:	480c      	ldr	r0, [pc, #48]	; (8001530 <PID_PWM+0x2f0>)
 8001500:	f006 fc24 	bl	8007d4c <HAL_GPIO_WritePin>
 8001504:	e03f      	b.n	8001586 <PID_PWM+0x346>
 8001506:	bf00      	nop
 8001508:	d2f1a9fc 	.word	0xd2f1a9fc
 800150c:	3f50624d 	.word	0x3f50624d
 8001510:	24000440 	.word	0x24000440
 8001514:	24000460 	.word	0x24000460
 8001518:	24000478 	.word	0x24000478
 800151c:	4240d581 	.word	0x4240d581
 8001520:	3f1edbb6 	.word	0x3f1edbb6
 8001524:	240004c0 	.word	0x240004c0
 8001528:	bf800000 	.word	0xbf800000
 800152c:	240004b4 	.word	0x240004b4
 8001530:	58021000 	.word	0x58021000
 8001534:	240000f0 	.word	0x240000f0
 8001538:	24000448 	.word	0x24000448
 800153c:	24000468 	.word	0x24000468
 8001540:	24000480 	.word	0x24000480
 8001544:	42296dac 	.word	0x42296dac
 8001548:	3f2280f1 	.word	0x3f2280f1
 800154c:	240004bc 	.word	0x240004bc
 8001550:	42480000 	.word	0x42480000
	} else {
		pulse_MR = (int) (-u_MR * (motorARR + 1));
 8001554:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001558:	eef1 7a67 	vneg.f32	s15, s15
 800155c:	ed1f 7a04 	vldr	s14, [pc, #-16]	; 8001550 <PID_PWM+0x310>
 8001560:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001564:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001568:	ee17 2a90 	vmov	r2, s15
 800156c:	4b6e      	ldr	r3, [pc, #440]	; (8001728 <PID_PWM+0x4e8>)
 800156e:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(INA_MR_PORT, INA_MR_PIN, GPIO_PIN_RESET); // INA
 8001570:	2200      	movs	r2, #0
 8001572:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001576:	486d      	ldr	r0, [pc, #436]	; (800172c <PID_PWM+0x4ec>)
 8001578:	f006 fbe8 	bl	8007d4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB_MR_PORT, INB_MR_PIN, GPIO_PIN_SET); // INB
 800157c:	2201      	movs	r2, #1
 800157e:	2180      	movs	r1, #128	; 0x80
 8001580:	486a      	ldr	r0, [pc, #424]	; (800172c <PID_PWM+0x4ec>)
 8001582:	f006 fbe3 	bl	8007d4c <HAL_GPIO_WritePin>
	}
	__HAL_TIM_SET_COMPARE(TIM_PWM_MR, CH_PWM_MR, pulse_MR); // PWM
 8001586:	4b68      	ldr	r3, [pc, #416]	; (8001728 <PID_PWM+0x4e8>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	4b69      	ldr	r3, [pc, #420]	; (8001730 <PID_PWM+0x4f0>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	63da      	str	r2, [r3, #60]	; 0x3c

	//PID_ML
	double err_ML = ML - rML;
 8001590:	4b68      	ldr	r3, [pc, #416]	; (8001734 <PID_PWM+0x4f4>)
 8001592:	ed93 6b00 	vldr	d6, [r3]
 8001596:	4b68      	ldr	r3, [pc, #416]	; (8001738 <PID_PWM+0x4f8>)
 8001598:	ed93 7b00 	vldr	d7, [r3]
 800159c:	ee36 7b47 	vsub.f64	d7, d6, d7
 80015a0:	ed87 7b02 	vstr	d7, [r7, #8]
	inte_ML += err_ML * motor_span;
 80015a4:	ed97 7b02 	vldr	d7, [r7, #8]
 80015a8:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 8001720 <PID_PWM+0x4e0>
 80015ac:	ee27 6b06 	vmul.f64	d6, d7, d6
 80015b0:	4b62      	ldr	r3, [pc, #392]	; (800173c <PID_PWM+0x4fc>)
 80015b2:	ed93 7b00 	vldr	d7, [r3]
 80015b6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80015ba:	4b60      	ldr	r3, [pc, #384]	; (800173c <PID_PWM+0x4fc>)
 80015bc:	ed83 7b00 	vstr	d7, [r3]
	double bound_ML = 1/ki_ML;
 80015c0:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8001740 <PID_PWM+0x500>
 80015c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80015c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015cc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015d0:	ed87 7b00 	vstr	d7, [r7]
	if (ki_ML * inte_ML > 1) inte_ML = bound_ML;
 80015d4:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8001740 <PID_PWM+0x500>
 80015d8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80015dc:	4b57      	ldr	r3, [pc, #348]	; (800173c <PID_PWM+0x4fc>)
 80015de:	ed93 7b00 	vldr	d7, [r3]
 80015e2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80015e6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80015ea:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80015ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f2:	dd05      	ble.n	8001600 <PID_PWM+0x3c0>
 80015f4:	4951      	ldr	r1, [pc, #324]	; (800173c <PID_PWM+0x4fc>)
 80015f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015fa:	e9c1 2300 	strd	r2, r3, [r1]
 80015fe:	e016      	b.n	800162e <PID_PWM+0x3ee>
	else if (ki_ML * inte_ML < -1) inte_ML = -bound_ML;
 8001600:	eddf 7a4f 	vldr	s15, [pc, #316]	; 8001740 <PID_PWM+0x500>
 8001604:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001608:	4b4c      	ldr	r3, [pc, #304]	; (800173c <PID_PWM+0x4fc>)
 800160a:	ed93 7b00 	vldr	d7, [r3]
 800160e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001612:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8001616:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800161a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800161e:	d506      	bpl.n	800162e <PID_PWM+0x3ee>
 8001620:	ed97 7b00 	vldr	d7, [r7]
 8001624:	eeb1 7b47 	vneg.f64	d7, d7
 8001628:	4b44      	ldr	r3, [pc, #272]	; (800173c <PID_PWM+0x4fc>)
 800162a:	ed83 7b00 	vstr	d7, [r3]
	float u_ML = kp_ML * err_ML + ki_ML * inte_ML;
 800162e:	eddf 7a45 	vldr	s15, [pc, #276]	; 8001744 <PID_PWM+0x504>
 8001632:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001636:	ed97 7b02 	vldr	d7, [r7, #8]
 800163a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800163e:	eddf 7a40 	vldr	s15, [pc, #256]	; 8001740 <PID_PWM+0x500>
 8001642:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001646:	4b3d      	ldr	r3, [pc, #244]	; (800173c <PID_PWM+0x4fc>)
 8001648:	ed93 7b00 	vldr	d7, [r3]
 800164c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001650:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001654:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001658:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	if (u_ML > 1) u_ML = 1;
 800165c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001660:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001664:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800166c:	dd03      	ble.n	8001676 <PID_PWM+0x436>
 800166e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001672:	633b      	str	r3, [r7, #48]	; 0x30
 8001674:	e00a      	b.n	800168c <PID_PWM+0x44c>
	else if (u_ML < -1) u_ML = -1;
 8001676:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800167a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800167e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001686:	d501      	bpl.n	800168c <PID_PWM+0x44c>
 8001688:	4b2f      	ldr	r3, [pc, #188]	; (8001748 <PID_PWM+0x508>)
 800168a:	633b      	str	r3, [r7, #48]	; 0x30
	//PWM_ML
	//int pulse_ML;
	if (u_ML > 0) {
 800168c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001690:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001698:	dd18      	ble.n	80016cc <PID_PWM+0x48c>
		pulse_ML = (int) (u_ML * (motorARR + 1));
 800169a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800169e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800174c <PID_PWM+0x50c>
 80016a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016aa:	ee17 2a90 	vmov	r2, s15
 80016ae:	4b28      	ldr	r3, [pc, #160]	; (8001750 <PID_PWM+0x510>)
 80016b0:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(INA_ML_PORT, INA_ML_PIN, GPIO_PIN_SET); // INA
 80016b2:	2201      	movs	r2, #1
 80016b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016b8:	481c      	ldr	r0, [pc, #112]	; (800172c <PID_PWM+0x4ec>)
 80016ba:	f006 fb47 	bl	8007d4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB_ML_PORT, INB_ML_PIN, GPIO_PIN_RESET); // INB
 80016be:	2200      	movs	r2, #0
 80016c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016c4:	4819      	ldr	r0, [pc, #100]	; (800172c <PID_PWM+0x4ec>)
 80016c6:	f006 fb41 	bl	8007d4c <HAL_GPIO_WritePin>
 80016ca:	e019      	b.n	8001700 <PID_PWM+0x4c0>
	} else {
		pulse_ML = (int) (-u_ML * (motorARR + 1));
 80016cc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80016d0:	eef1 7a67 	vneg.f32	s15, s15
 80016d4:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800174c <PID_PWM+0x50c>
 80016d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016e0:	ee17 2a90 	vmov	r2, s15
 80016e4:	4b1a      	ldr	r3, [pc, #104]	; (8001750 <PID_PWM+0x510>)
 80016e6:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(INA_ML_PORT, INA_ML_PIN, GPIO_PIN_RESET); // INA
 80016e8:	2200      	movs	r2, #0
 80016ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016ee:	480f      	ldr	r0, [pc, #60]	; (800172c <PID_PWM+0x4ec>)
 80016f0:	f006 fb2c 	bl	8007d4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB_ML_PORT, INB_ML_PIN, GPIO_PIN_SET); // INB
 80016f4:	2201      	movs	r2, #1
 80016f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016fa:	480c      	ldr	r0, [pc, #48]	; (800172c <PID_PWM+0x4ec>)
 80016fc:	f006 fb26 	bl	8007d4c <HAL_GPIO_WritePin>
	}
	__HAL_TIM_SET_COMPARE(TIM_PWM_ML, CH_PWM_ML, pulse_ML); // PWM
 8001700:	4b13      	ldr	r3, [pc, #76]	; (8001750 <PID_PWM+0x510>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	4b13      	ldr	r3, [pc, #76]	; (8001754 <PID_PWM+0x514>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	641a      	str	r2, [r3, #64]	; 0x40
	into_PID++;
 800170a:	4b13      	ldr	r3, [pc, #76]	; (8001758 <PID_PWM+0x518>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	3301      	adds	r3, #1
 8001710:	4a11      	ldr	r2, [pc, #68]	; (8001758 <PID_PWM+0x518>)
 8001712:	6013      	str	r3, [r2, #0]

}
 8001714:	bf00      	nop
 8001716:	3738      	adds	r7, #56	; 0x38
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	f3af 8000 	nop.w
 8001720:	d2f1a9fc 	.word	0xd2f1a9fc
 8001724:	3f50624d 	.word	0x3f50624d
 8001728:	240004bc 	.word	0x240004bc
 800172c:	58021000 	.word	0x58021000
 8001730:	24000220 	.word	0x24000220
 8001734:	24000450 	.word	0x24000450
 8001738:	24000470 	.word	0x24000470
 800173c:	24000488 	.word	0x24000488
 8001740:	425adc0f 	.word	0x425adc0f
 8001744:	3f2e3001 	.word	0x3f2e3001
 8001748:	bf800000 	.word	0xbf800000
 800174c:	42480000 	.word	0x42480000
 8001750:	240004b8 	.word	0x240004b8
 8001754:	240000f0 	.word	0x240000f0
 8001758:	240004b0 	.word	0x240004b0
 800175c:	00000000 	.word	0x00000000

08001760 <kinematics_model>:
void kinematics_model(){ //還沒加修正角度、輪半徑
 8001760:	b480      	push	{r7}
 8001762:	b087      	sub	sp, #28
 8001764:	af00      	add	r7, sp, #0
	double rWF = rMF*ratio_motor2wheel*wheel_radius,
 8001766:	4b58      	ldr	r3, [pc, #352]	; (80018c8 <kinematics_model+0x168>)
 8001768:	ed93 7b00 	vldr	d7, [r3]
 800176c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8001770:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001774:	ed9f 6b48 	vldr	d6, [pc, #288]	; 8001898 <kinematics_model+0x138>
 8001778:	ee27 7b06 	vmul.f64	d7, d7, d6
 800177c:	ed87 7b04 	vstr	d7, [r7, #16]
				 rWR = rMR*ratio_motor2wheel*wheel_radius,
 8001780:	4b52      	ldr	r3, [pc, #328]	; (80018cc <kinematics_model+0x16c>)
 8001782:	ed93 7b00 	vldr	d7, [r3]
 8001786:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800178a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800178e:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8001898 <kinematics_model+0x138>
 8001792:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001796:	ed87 7b02 	vstr	d7, [r7, #8]
				 rWL = rML*ratio_motor2wheel*wheel_radius;
 800179a:	4b4d      	ldr	r3, [pc, #308]	; (80018d0 <kinematics_model+0x170>)
 800179c:	ed93 7b00 	vldr	d7, [r3]
 80017a0:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80017a4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80017a8:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8001898 <kinematics_model+0x138>
 80017ac:	ee27 7b06 	vmul.f64	d7, d7, d6
 80017b0:	ed87 7b00 	vstr	d7, [r7]

	rVx = 1/(LF+LR+LL)*((LR+LL)*rWF - LF*rWR - LF*rWL);
 80017b4:	ed97 7b04 	vldr	d7, [r7, #16]
 80017b8:	ed9f 6b39 	vldr	d6, [pc, #228]	; 80018a0 <kinematics_model+0x140>
 80017bc:	ee27 6b06 	vmul.f64	d6, d7, d6
 80017c0:	ed97 7b02 	vldr	d7, [r7, #8]
 80017c4:	ed9f 5b38 	vldr	d5, [pc, #224]	; 80018a8 <kinematics_model+0x148>
 80017c8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80017cc:	ee36 6b47 	vsub.f64	d6, d6, d7
 80017d0:	ed97 7b00 	vldr	d7, [r7]
 80017d4:	ed9f 5b34 	vldr	d5, [pc, #208]	; 80018a8 <kinematics_model+0x148>
 80017d8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80017dc:	ee36 7b47 	vsub.f64	d7, d6, d7
 80017e0:	ed9f 6b33 	vldr	d6, [pc, #204]	; 80018b0 <kinematics_model+0x150>
 80017e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80017e8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80017ec:	4b39      	ldr	r3, [pc, #228]	; (80018d4 <kinematics_model+0x174>)
 80017ee:	edc3 7a00 	vstr	s15, [r3]
	rVy = 1/sqrt(3)/(LF+LR+LL)*((LR-LL)*rWF - (LF+2*LL)*rWR + (LF+2*LR)*rWL);
 80017f2:	ed97 7b04 	vldr	d7, [r7, #16]
 80017f6:	ed9f 6b2e 	vldr	d6, [pc, #184]	; 80018b0 <kinematics_model+0x150>
 80017fa:	ee27 6b06 	vmul.f64	d6, d7, d6
 80017fe:	ed97 7b02 	vldr	d7, [r7, #8]
 8001802:	ed9f 5b2d 	vldr	d5, [pc, #180]	; 80018b8 <kinematics_model+0x158>
 8001806:	ee27 7b05 	vmul.f64	d7, d7, d5
 800180a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800180e:	ed97 7b00 	vldr	d7, [r7]
 8001812:	ed9f 5b29 	vldr	d5, [pc, #164]	; 80018b8 <kinematics_model+0x158>
 8001816:	ee27 7b05 	vmul.f64	d7, d7, d5
 800181a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800181e:	ed9f 6b28 	vldr	d6, [pc, #160]	; 80018c0 <kinematics_model+0x160>
 8001822:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001826:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800182a:	4b2b      	ldr	r3, [pc, #172]	; (80018d8 <kinematics_model+0x178>)
 800182c:	edc3 7a00 	vstr	s15, [r3]
	rW = -1/(LF+LR+LL)*(rWF + rWR + rWL);
 8001830:	ed97 6b04 	vldr	d6, [r7, #16]
 8001834:	ed97 7b02 	vldr	d7, [r7, #8]
 8001838:	ee36 6b07 	vadd.f64	d6, d6, d7
 800183c:	ed97 7b00 	vldr	d7, [r7]
 8001840:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001844:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 80018b0 <kinematics_model+0x150>
 8001848:	ee27 7b06 	vmul.f64	d7, d7, d6
 800184c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001850:	4b22      	ldr	r3, [pc, #136]	; (80018dc <kinematics_model+0x17c>)
 8001852:	edc3 7a00 	vstr	s15, [r3]
	rVx = rVx*(-1);
 8001856:	4b1f      	ldr	r3, [pc, #124]	; (80018d4 <kinematics_model+0x174>)
 8001858:	edd3 7a00 	vldr	s15, [r3]
 800185c:	eef1 7a67 	vneg.f32	s15, s15
 8001860:	4b1c      	ldr	r3, [pc, #112]	; (80018d4 <kinematics_model+0x174>)
 8001862:	edc3 7a00 	vstr	s15, [r3]
	rVy = rVy*(-1);
 8001866:	4b1c      	ldr	r3, [pc, #112]	; (80018d8 <kinematics_model+0x178>)
 8001868:	edd3 7a00 	vldr	s15, [r3]
 800186c:	eef1 7a67 	vneg.f32	s15, s15
 8001870:	4b19      	ldr	r3, [pc, #100]	; (80018d8 <kinematics_model+0x178>)
 8001872:	edc3 7a00 	vstr	s15, [r3]
	rW = rW*(-1);
 8001876:	4b19      	ldr	r3, [pc, #100]	; (80018dc <kinematics_model+0x17c>)
 8001878:	edd3 7a00 	vldr	s15, [r3]
 800187c:	eef1 7a67 	vneg.f32	s15, s15
 8001880:	4b16      	ldr	r3, [pc, #88]	; (80018dc <kinematics_model+0x17c>)
 8001882:	edc3 7a00 	vstr	s15, [r3]
	/*alpha
	rVx = cos(A)*rVx - sin(A)*rVy;
	rVy = sin(A)*rVx + cos(A)*rVy;
	rA+=rW*motor_span;
	*/
}
 8001886:	bf00      	nop
 8001888:	371c      	adds	r7, #28
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	f3af 8000 	nop.w
 8001898:	eb851eb8 	.word	0xeb851eb8
 800189c:	3f9eb851 	.word	0x3f9eb851
 80018a0:	00000000 	.word	0x00000000
 80018a4:	40690000 	.word	0x40690000
 80018a8:	00000000 	.word	0x00000000
 80018ac:	40590000 	.word	0x40590000
	...
 80018bc:	4072c000 	.word	0x4072c000
 80018c0:	1a8fb365 	.word	0x1a8fb365
 80018c4:	3f5f87f1 	.word	0x3f5f87f1
 80018c8:	24000460 	.word	0x24000460
 80018cc:	24000468 	.word	0x24000468
 80018d0:	24000470 	.word	0x24000470
 80018d4:	240004e0 	.word	0x240004e0
 80018d8:	240004e4 	.word	0x240004e4
 80018dc:	240004e8 	.word	0x240004e8

080018e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018e4:	b672      	cpsid	i
}
 80018e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018e8:	e7fe      	b.n	80018e8 <Error_Handler+0x8>

080018ea <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80018ea:	b480      	push	{r7}
 80018ec:	b083      	sub	sp, #12
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4618      	mov	r0, r3
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	4a04      	ldr	r2, [pc, #16]	; (8001928 <_ZN3ros3MsgC1Ev+0x1c>)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4618      	mov	r0, r3
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	0800e9e8 	.word	0x0800e9e8

0800192c <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
      data()
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff ffe8 	bl	800190c <_ZN3ros3MsgC1Ev>
 800193c:	4a06      	ldr	r2, [pc, #24]	; (8001958 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	3304      	adds	r3, #4
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff ffcf 	bl	80018ea <_ZN3ros4TimeC1Ev>
    {
    }
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4618      	mov	r0, r3
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	0800e9d0 	.word	0x0800e9d0

0800195c <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6859      	ldr	r1, [r3, #4]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	4413      	add	r3, r2
 8001974:	b2ca      	uxtb	r2, r1
 8001976:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	0a19      	lsrs	r1, r3, #8
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	3301      	adds	r3, #1
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	4413      	add	r3, r2
 8001986:	b2ca      	uxtb	r2, r1
 8001988:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	0c19      	lsrs	r1, r3, #16
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	3302      	adds	r3, #2
 8001994:	683a      	ldr	r2, [r7, #0]
 8001996:	4413      	add	r3, r2
 8001998:	b2ca      	uxtb	r2, r1
 800199a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	0e19      	lsrs	r1, r3, #24
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	3303      	adds	r3, #3
 80019a6:	683a      	ldr	r2, [r7, #0]
 80019a8:	4413      	add	r3, r2
 80019aa:	b2ca      	uxtb	r2, r1
 80019ac:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	3304      	adds	r3, #4
 80019b2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6899      	ldr	r1, [r3, #8]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	4413      	add	r3, r2
 80019be:	b2ca      	uxtb	r2, r1
 80019c0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	0a19      	lsrs	r1, r3, #8
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	3301      	adds	r3, #1
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	4413      	add	r3, r2
 80019d0:	b2ca      	uxtb	r2, r1
 80019d2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	0c19      	lsrs	r1, r3, #16
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	3302      	adds	r3, #2
 80019de:	683a      	ldr	r2, [r7, #0]
 80019e0:	4413      	add	r3, r2
 80019e2:	b2ca      	uxtb	r2, r1
 80019e4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	0e19      	lsrs	r1, r3, #24
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	3303      	adds	r3, #3
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	4413      	add	r3, r2
 80019f4:	b2ca      	uxtb	r2, r1
 80019f6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	3304      	adds	r3, #4
 80019fc:	60fb      	str	r3, [r7, #12]
      return offset;
 80019fe:	68fb      	ldr	r3, [r7, #12]
    }
 8001a00:	4618      	mov	r0, r3
 8001a02:	3714      	adds	r7, #20
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	4413      	add	r3, r2
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	461a      	mov	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685a      	ldr	r2, [r3, #4]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	6839      	ldr	r1, [r7, #0]
 8001a32:	440b      	add	r3, r1
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	021b      	lsls	r3, r3, #8
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685a      	ldr	r2, [r3, #4]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	3302      	adds	r3, #2
 8001a46:	6839      	ldr	r1, [r7, #0]
 8001a48:	440b      	add	r3, r1
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	041b      	lsls	r3, r3, #16
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685a      	ldr	r2, [r3, #4]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	3303      	adds	r3, #3
 8001a5c:	6839      	ldr	r1, [r7, #0]
 8001a5e:	440b      	add	r3, r1
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	061b      	lsls	r3, r3, #24
 8001a64:	431a      	orrs	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	3304      	adds	r3, #4
 8001a6e:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	4413      	add	r3, r2
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	461a      	mov	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	689a      	ldr	r2, [r3, #8]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	3301      	adds	r3, #1
 8001a86:	6839      	ldr	r1, [r7, #0]
 8001a88:	440b      	add	r3, r1
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	021b      	lsls	r3, r3, #8
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	3302      	adds	r3, #2
 8001a9c:	6839      	ldr	r1, [r7, #0]
 8001a9e:	440b      	add	r3, r1
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	041b      	lsls	r3, r3, #16
 8001aa4:	431a      	orrs	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	689a      	ldr	r2, [r3, #8]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	3303      	adds	r3, #3
 8001ab2:	6839      	ldr	r1, [r7, #0]
 8001ab4:	440b      	add	r3, r1
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	061b      	lsls	r3, r3, #24
 8001aba:	431a      	orrs	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	3304      	adds	r3, #4
 8001ac4:	60fb      	str	r3, [r7, #12]
     return offset;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
    }
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3714      	adds	r7, #20
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	4b03      	ldr	r3, [pc, #12]	; (8001aec <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001ade:	4618      	mov	r0, r3
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	0800e738 	.word	0x0800e738

08001af0 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	4b03      	ldr	r3, [pc, #12]	; (8001b08 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001afa:	4618      	mov	r0, r3
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	0800e748 	.word	0x0800e748

08001b0c <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff fef8 	bl	800190c <_ZN3ros3MsgC1Ev>
 8001b1c:	4a0b      	ldr	r2, [pc, #44]	; (8001b4c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	809a      	strh	r2, [r3, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4a09      	ldr	r2, [pc, #36]	; (8001b50 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001b2c:	609a      	str	r2, [r3, #8]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a07      	ldr	r2, [pc, #28]	; (8001b50 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001b32:	60da      	str	r2, [r3, #12]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4a06      	ldr	r2, [pc, #24]	; (8001b50 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001b38:	611a      	str	r2, [r3, #16]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	615a      	str	r2, [r3, #20]
    {
    }
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4618      	mov	r0, r3
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	0800e9b8 	.word	0x0800e9b8
 8001b50:	0800e76c 	.word	0x0800e76c

08001b54 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b088      	sub	sp, #32
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	8899      	ldrh	r1, [r3, #4]
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	b2ca      	uxtb	r2, r1
 8001b6e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	889b      	ldrh	r3, [r3, #4]
 8001b74:	0a1b      	lsrs	r3, r3, #8
 8001b76:	b299      	uxth	r1, r3
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	683a      	ldr	r2, [r7, #0]
 8001b7e:	4413      	add	r3, r2
 8001b80:	b2ca      	uxtb	r2, r1
 8001b82:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	3302      	adds	r3, #2
 8001b88:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7fe fbbe 	bl	8000310 <strlen>
 8001b94:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	69b9      	ldr	r1, [r7, #24]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f001 fd2c 	bl	80035fc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	3304      	adds	r3, #4
 8001ba8:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	18d0      	adds	r0, r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	f00c fc1a 	bl	800e3f0 <memcpy>
      offset += length_topic_name;
 8001bbc:	69fa      	ldr	r2, [r7, #28]
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7fe fba1 	bl	8000310 <strlen>
 8001bce:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	6979      	ldr	r1, [r7, #20]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f001 fd0f 	bl	80035fc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	3304      	adds	r3, #4
 8001be2:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	18d0      	adds	r0, r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	697a      	ldr	r2, [r7, #20]
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	f00c fbfd 	bl	800e3f0 <memcpy>
      offset += length_message_type;
 8001bf6:	69fa      	ldr	r2, [r7, #28]
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7fe fb84 	bl	8000310 <strlen>
 8001c08:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	4413      	add	r3, r2
 8001c10:	6939      	ldr	r1, [r7, #16]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f001 fcf2 	bl	80035fc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	3304      	adds	r3, #4
 8001c1c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	18d0      	adds	r0, r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	f00c fbe0 	bl	800e3f0 <memcpy>
      offset += length_md5sum;
 8001c30:	69fa      	ldr	r2, [r7, #28]
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	4413      	add	r3, r2
 8001c36:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	695b      	ldr	r3, [r3, #20]
 8001c3c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001c3e:	68f9      	ldr	r1, [r7, #12]
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	4413      	add	r3, r2
 8001c46:	b2ca      	uxtb	r2, r1
 8001c48:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	0a19      	lsrs	r1, r3, #8
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	3301      	adds	r3, #1
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	4413      	add	r3, r2
 8001c56:	b2ca      	uxtb	r2, r1
 8001c58:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	0c19      	lsrs	r1, r3, #16
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	3302      	adds	r3, #2
 8001c62:	683a      	ldr	r2, [r7, #0]
 8001c64:	4413      	add	r3, r2
 8001c66:	b2ca      	uxtb	r2, r1
 8001c68:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	0e19      	lsrs	r1, r3, #24
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	3303      	adds	r3, #3
 8001c72:	683a      	ldr	r2, [r7, #0]
 8001c74:	4413      	add	r3, r2
 8001c76:	b2ca      	uxtb	r2, r1
 8001c78:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	3304      	adds	r3, #4
 8001c7e:	61fb      	str	r3, [r7, #28]
      return offset;
 8001c80:	69fb      	ldr	r3, [r7, #28]
    }
 8001c82:	4618      	mov	r0, r3
 8001c84:	3720      	adds	r7, #32
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b08a      	sub	sp, #40	; 0x28
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
 8001c92:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001c94:	2300      	movs	r3, #0
 8001c96:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	889b      	ldrh	r3, [r3, #4]
 8001caa:	b21a      	sxth	r2, r3
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	6839      	ldr	r1, [r7, #0]
 8001cb2:	440b      	add	r3, r1
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	021b      	lsls	r3, r3, #8
 8001cb8:	b21b      	sxth	r3, r3
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	b21b      	sxth	r3, r3
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	3302      	adds	r3, #2
 8001cc8:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	441a      	add	r2, r3
 8001cd0:	f107 0314 	add.w	r3, r7, #20
 8001cd4:	4611      	mov	r1, r2
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f001 fcae 	bl	8003638 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	3304      	adds	r3, #4
 8001ce0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	4413      	add	r3, r2
 8001cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d20c      	bcs.n	8001d0c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf6:	441a      	add	r2, r3
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	6839      	ldr	r1, [r7, #0]
 8001cfe:	440b      	add	r3, r1
 8001d00:	7812      	ldrb	r2, [r2, #0]
 8001d02:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d06:	3301      	adds	r3, #1
 8001d08:	627b      	str	r3, [r7, #36]	; 0x24
 8001d0a:	e7ec      	b.n	8001ce6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	4413      	add	r3, r2
 8001d12:	3b01      	subs	r3, #1
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	4413      	add	r3, r2
 8001d18:	2200      	movs	r2, #0
 8001d1a:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	441a      	add	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	441a      	add	r2, r3
 8001d36:	f107 0310 	add.w	r3, r7, #16
 8001d3a:	4611      	mov	r1, r2
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f001 fc7b 	bl	8003638 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	3304      	adds	r3, #4
 8001d46:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	623b      	str	r3, [r7, #32]
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	4413      	add	r3, r2
 8001d52:	6a3a      	ldr	r2, [r7, #32]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d20c      	bcs.n	8001d72 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8001d58:	683a      	ldr	r2, [r7, #0]
 8001d5a:	6a3b      	ldr	r3, [r7, #32]
 8001d5c:	441a      	add	r2, r3
 8001d5e:	6a3b      	ldr	r3, [r7, #32]
 8001d60:	3b01      	subs	r3, #1
 8001d62:	6839      	ldr	r1, [r7, #0]
 8001d64:	440b      	add	r3, r1
 8001d66:	7812      	ldrb	r2, [r2, #0]
 8001d68:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001d6a:	6a3b      	ldr	r3, [r7, #32]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	623b      	str	r3, [r7, #32]
 8001d70:	e7ec      	b.n	8001d4c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	4413      	add	r3, r2
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	2200      	movs	r2, #0
 8001d80:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	3b01      	subs	r3, #1
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	441a      	add	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	4413      	add	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	441a      	add	r2, r3
 8001d9c:	f107 030c 	add.w	r3, r7, #12
 8001da0:	4611      	mov	r1, r2
 8001da2:	4618      	mov	r0, r3
 8001da4:	f001 fc48 	bl	8003638 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	3304      	adds	r3, #4
 8001dac:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	61fb      	str	r3, [r7, #28]
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	4413      	add	r3, r2
 8001db8:	69fa      	ldr	r2, [r7, #28]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d20c      	bcs.n	8001dd8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8001dbe:	683a      	ldr	r2, [r7, #0]
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	441a      	add	r2, r3
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	6839      	ldr	r1, [r7, #0]
 8001dca:	440b      	add	r3, r1
 8001dcc:	7812      	ldrb	r2, [r2, #0]
 8001dce:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	61fb      	str	r3, [r7, #28]
 8001dd6:	e7ec      	b.n	8001db2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	4413      	add	r3, r2
 8001dde:	3b01      	subs	r3, #1
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	4413      	add	r3, r2
 8001de4:	2200      	movs	r2, #0
 8001de6:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	3b01      	subs	r3, #1
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	441a      	add	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	4413      	add	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	6839      	ldr	r1, [r7, #0]
 8001e06:	440a      	add	r2, r1
 8001e08:	7812      	ldrb	r2, [r2, #0]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001e0e:	68ba      	ldr	r2, [r7, #8]
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	3301      	adds	r3, #1
 8001e14:	6839      	ldr	r1, [r7, #0]
 8001e16:	440b      	add	r3, r1
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	021b      	lsls	r3, r3, #8
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001e20:	68ba      	ldr	r2, [r7, #8]
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	3302      	adds	r3, #2
 8001e26:	6839      	ldr	r1, [r7, #0]
 8001e28:	440b      	add	r3, r1
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	041b      	lsls	r3, r3, #16
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001e32:	68ba      	ldr	r2, [r7, #8]
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	3303      	adds	r3, #3
 8001e38:	6839      	ldr	r1, [r7, #0]
 8001e3a:	440b      	add	r3, r1
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	061b      	lsls	r3, r3, #24
 8001e40:	4313      	orrs	r3, r2
 8001e42:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001e44:	68ba      	ldr	r2, [r7, #8]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	61bb      	str	r3, [r7, #24]
     return offset;
 8001e50:	69bb      	ldr	r3, [r7, #24]
    }
 8001e52:	4618      	mov	r0, r3
 8001e54:	3728      	adds	r7, #40	; 0x28
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
	...

08001e5c <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	4b03      	ldr	r3, [pc, #12]	; (8001e74 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001e66:	4618      	mov	r0, r3
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	0800e770 	.word	0x0800e770

08001e78 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	4b03      	ldr	r3, [pc, #12]	; (8001e90 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8001e82:	4618      	mov	r0, r3
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	0800e78c 	.word	0x0800e78c

08001e94 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff fd34 	bl	800190c <_ZN3ros3MsgC1Ev>
 8001ea4:	4a06      	ldr	r2, [pc, #24]	; (8001ec0 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	711a      	strb	r2, [r3, #4]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a04      	ldr	r2, [pc, #16]	; (8001ec4 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001eb4:	609a      	str	r2, [r3, #8]
    {
    }
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	0800e9a0 	.word	0x0800e9a0
 8001ec4:	0800e76c 	.word	0x0800e76c

08001ec8 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	4413      	add	r3, r2
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	7912      	ldrb	r2, [r2, #4]
 8001ee0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7fe fa0f 	bl	8000310 <strlen>
 8001ef2:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	4413      	add	r3, r2
 8001efa:	68b9      	ldr	r1, [r7, #8]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f001 fb7d 	bl	80035fc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	3304      	adds	r3, #4
 8001f06:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	18d0      	adds	r0, r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	68ba      	ldr	r2, [r7, #8]
 8001f14:	4619      	mov	r1, r3
 8001f16:	f00c fa6b 	bl	800e3f0 <memcpy>
      offset += length_msg;
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	4413      	add	r3, r2
 8001f20:	60fb      	str	r3, [r7, #12]
      return offset;
 8001f22:	68fb      	ldr	r3, [r7, #12]
    }
 8001f24:	4618      	mov	r0, r3
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001f36:	2300      	movs	r3, #0
 8001f38:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	4413      	add	r3, r2
 8001f40:	781a      	ldrb	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	441a      	add	r2, r3
 8001f52:	f107 030c 	add.w	r3, r7, #12
 8001f56:	4611      	mov	r1, r2
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f001 fb6d 	bl	8003638 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	3304      	adds	r3, #4
 8001f62:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	617b      	str	r3, [r7, #20]
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	697a      	ldr	r2, [r7, #20]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d20c      	bcs.n	8001f8e <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	441a      	add	r2, r3
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	3b01      	subs	r3, #1
 8001f7e:	6839      	ldr	r1, [r7, #0]
 8001f80:	440b      	add	r3, r1
 8001f82:	7812      	ldrb	r2, [r2, #0]
 8001f84:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	617b      	str	r3, [r7, #20]
 8001f8c:	e7ec      	b.n	8001f68 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	4413      	add	r3, r2
 8001f94:	3b01      	subs	r3, #1
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	4413      	add	r3, r2
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	441a      	add	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	4413      	add	r3, r2
 8001fb0:	613b      	str	r3, [r7, #16]
     return offset;
 8001fb2:	693b      	ldr	r3, [r7, #16]
    }
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	4b03      	ldr	r3, [pc, #12]	; (8001fd4 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	0800e7b0 	.word	0x0800e7b0

08001fd8 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	4b03      	ldr	r3, [pc, #12]	; (8001ff0 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	0800e7c4 	.word	0x0800e7c4

08001ff4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff fc84 	bl	800190c <_ZN3ros3MsgC1Ev>
 8002004:	4a0c      	ldr	r2, [pc, #48]	; (8002038 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	605a      	str	r2, [r3, #4]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	60da      	str	r2, [r3, #12]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	611a      	str	r2, [r3, #16]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	619a      	str	r2, [r3, #24]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	61da      	str	r2, [r3, #28]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4618      	mov	r0, r3
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	0800e988 	.word	0x0800e988

0800203c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800203c:	b580      	push	{r7, lr}
 800203e:	b08a      	sub	sp, #40	; 0x28
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002046:	2300      	movs	r3, #0
 8002048:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6859      	ldr	r1, [r3, #4]
 800204e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	4413      	add	r3, r2
 8002054:	b2ca      	uxtb	r2, r1
 8002056:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	0a19      	lsrs	r1, r3, #8
 800205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002060:	3301      	adds	r3, #1
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	4413      	add	r3, r2
 8002066:	b2ca      	uxtb	r2, r1
 8002068:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	0c19      	lsrs	r1, r3, #16
 8002070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002072:	3302      	adds	r3, #2
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	4413      	add	r3, r2
 8002078:	b2ca      	uxtb	r2, r1
 800207a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	0e19      	lsrs	r1, r3, #24
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002084:	3303      	adds	r3, #3
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	4413      	add	r3, r2
 800208a:	b2ca      	uxtb	r2, r1
 800208c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800208e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002090:	3304      	adds	r3, #4
 8002092:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002094:	2300      	movs	r3, #0
 8002096:	623b      	str	r3, [r7, #32]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	6a3a      	ldr	r2, [r7, #32]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d22b      	bcs.n	80020fa <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	68da      	ldr	r2, [r3, #12]
 80020a6:	6a3b      	ldr	r3, [r7, #32]
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	4413      	add	r3, r2
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80020b0:	6939      	ldr	r1, [r7, #16]
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	4413      	add	r3, r2
 80020b8:	b2ca      	uxtb	r2, r1
 80020ba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	0a19      	lsrs	r1, r3, #8
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	3301      	adds	r3, #1
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	4413      	add	r3, r2
 80020c8:	b2ca      	uxtb	r2, r1
 80020ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	0c19      	lsrs	r1, r3, #16
 80020d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d2:	3302      	adds	r3, #2
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	4413      	add	r3, r2
 80020d8:	b2ca      	uxtb	r2, r1
 80020da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	0e19      	lsrs	r1, r3, #24
 80020e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e2:	3303      	adds	r3, #3
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	4413      	add	r3, r2
 80020e8:	b2ca      	uxtb	r2, r1
 80020ea:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ee:	3304      	adds	r3, #4
 80020f0:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80020f2:	6a3b      	ldr	r3, [r7, #32]
 80020f4:	3301      	adds	r3, #1
 80020f6:	623b      	str	r3, [r7, #32]
 80020f8:	e7ce      	b.n	8002098 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6919      	ldr	r1, [r3, #16]
 80020fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	4413      	add	r3, r2
 8002104:	b2ca      	uxtb	r2, r1
 8002106:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	0a19      	lsrs	r1, r3, #8
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	3301      	adds	r3, #1
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	4413      	add	r3, r2
 8002116:	b2ca      	uxtb	r2, r1
 8002118:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	0c19      	lsrs	r1, r3, #16
 8002120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002122:	3302      	adds	r3, #2
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	4413      	add	r3, r2
 8002128:	b2ca      	uxtb	r2, r1
 800212a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	0e19      	lsrs	r1, r3, #24
 8002132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002134:	3303      	adds	r3, #3
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	4413      	add	r3, r2
 800213a:	b2ca      	uxtb	r2, r1
 800213c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 800213e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002140:	3304      	adds	r3, #4
 8002142:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002144:	2300      	movs	r3, #0
 8002146:	61fb      	str	r3, [r7, #28]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	69fa      	ldr	r2, [r7, #28]
 800214e:	429a      	cmp	r2, r3
 8002150:	d22b      	bcs.n	80021aa <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	699a      	ldr	r2, [r3, #24]
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4413      	add	r3, r2
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002160:	68f9      	ldr	r1, [r7, #12]
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	4413      	add	r3, r2
 8002168:	b2ca      	uxtb	r2, r1
 800216a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	0a19      	lsrs	r1, r3, #8
 8002170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002172:	3301      	adds	r3, #1
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	4413      	add	r3, r2
 8002178:	b2ca      	uxtb	r2, r1
 800217a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	0c19      	lsrs	r1, r3, #16
 8002180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002182:	3302      	adds	r3, #2
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	4413      	add	r3, r2
 8002188:	b2ca      	uxtb	r2, r1
 800218a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	0e19      	lsrs	r1, r3, #24
 8002190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002192:	3303      	adds	r3, #3
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	4413      	add	r3, r2
 8002198:	b2ca      	uxtb	r2, r1
 800219a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 800219c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219e:	3304      	adds	r3, #4
 80021a0:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	3301      	adds	r3, #1
 80021a6:	61fb      	str	r3, [r7, #28]
 80021a8:	e7ce      	b.n	8002148 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69d9      	ldr	r1, [r3, #28]
 80021ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b0:	683a      	ldr	r2, [r7, #0]
 80021b2:	4413      	add	r3, r2
 80021b4:	b2ca      	uxtb	r2, r1
 80021b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	69db      	ldr	r3, [r3, #28]
 80021bc:	0a19      	lsrs	r1, r3, #8
 80021be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c0:	3301      	adds	r3, #1
 80021c2:	683a      	ldr	r2, [r7, #0]
 80021c4:	4413      	add	r3, r2
 80021c6:	b2ca      	uxtb	r2, r1
 80021c8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	0c19      	lsrs	r1, r3, #16
 80021d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d2:	3302      	adds	r3, #2
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	4413      	add	r3, r2
 80021d8:	b2ca      	uxtb	r2, r1
 80021da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	69db      	ldr	r3, [r3, #28]
 80021e0:	0e19      	lsrs	r1, r3, #24
 80021e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e4:	3303      	adds	r3, #3
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	4413      	add	r3, r2
 80021ea:	b2ca      	uxtb	r2, r1
 80021ec:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	3304      	adds	r3, #4
 80021f2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80021f4:	2300      	movs	r3, #0
 80021f6:	61bb      	str	r3, [r7, #24]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	69db      	ldr	r3, [r3, #28]
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d228      	bcs.n	8002254 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4413      	add	r3, r2
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe f87e 	bl	8000310 <strlen>
 8002214:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8002216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	4413      	add	r3, r2
 800221c:	6979      	ldr	r1, [r7, #20]
 800221e:	4618      	mov	r0, r3
 8002220:	f001 f9ec 	bl	80035fc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002226:	3304      	adds	r3, #4
 8002228:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	18d0      	adds	r0, r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4413      	add	r3, r2
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	4619      	mov	r1, r3
 8002240:	f00c f8d6 	bl	800e3f0 <memcpy>
      offset += length_stringsi;
 8002244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	4413      	add	r3, r2
 800224a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	3301      	adds	r3, #1
 8002250:	61bb      	str	r3, [r7, #24]
 8002252:	e7d1      	b.n	80021f8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8002254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002256:	4618      	mov	r0, r3
 8002258:	3728      	adds	r7, #40	; 0x28
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800225e:	b580      	push	{r7, lr}
 8002260:	b08e      	sub	sp, #56	; 0x38
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
 8002266:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002268:	2300      	movs	r3, #0
 800226a:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800226c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800226e:	683a      	ldr	r2, [r7, #0]
 8002270:	4413      	add	r3, r2
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002278:	3301      	adds	r3, #1
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	4413      	add	r3, r2
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	021b      	lsls	r3, r3, #8
 8002282:	6a3a      	ldr	r2, [r7, #32]
 8002284:	4313      	orrs	r3, r2
 8002286:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800228a:	3302      	adds	r3, #2
 800228c:	683a      	ldr	r2, [r7, #0]
 800228e:	4413      	add	r3, r2
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	041b      	lsls	r3, r3, #16
 8002294:	6a3a      	ldr	r2, [r7, #32]
 8002296:	4313      	orrs	r3, r2
 8002298:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800229a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800229c:	3303      	adds	r3, #3
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	4413      	add	r3, r2
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	061b      	lsls	r3, r3, #24
 80022a6:	6a3a      	ldr	r2, [r7, #32]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 80022ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ae:	3304      	adds	r3, #4
 80022b0:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	6a3a      	ldr	r2, [r7, #32]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d90a      	bls.n	80022d2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	68da      	ldr	r2, [r3, #12]
 80022c0:	6a3b      	ldr	r3, [r7, #32]
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4619      	mov	r1, r3
 80022c6:	4610      	mov	r0, r2
 80022c8:	f00c f8a8 	bl	800e41c <realloc>
 80022cc:	4602      	mov	r2, r0
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a3a      	ldr	r2, [r7, #32]
 80022d6:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80022d8:	2300      	movs	r3, #0
 80022da:	633b      	str	r3, [r7, #48]	; 0x30
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d236      	bcs.n	8002354 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80022e6:	2300      	movs	r3, #0
 80022e8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022ee:	6839      	ldr	r1, [r7, #0]
 80022f0:	440a      	add	r2, r1
 80022f2:	7812      	ldrb	r2, [r2, #0]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80022f8:	697a      	ldr	r2, [r7, #20]
 80022fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022fc:	3301      	adds	r3, #1
 80022fe:	6839      	ldr	r1, [r7, #0]
 8002300:	440b      	add	r3, r1
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	021b      	lsls	r3, r3, #8
 8002306:	4313      	orrs	r3, r2
 8002308:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800230a:	697a      	ldr	r2, [r7, #20]
 800230c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800230e:	3302      	adds	r3, #2
 8002310:	6839      	ldr	r1, [r7, #0]
 8002312:	440b      	add	r3, r1
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	041b      	lsls	r3, r3, #16
 8002318:	4313      	orrs	r3, r2
 800231a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800231c:	697a      	ldr	r2, [r7, #20]
 800231e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002320:	3303      	adds	r3, #3
 8002322:	6839      	ldr	r1, [r7, #0]
 8002324:	440b      	add	r3, r1
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	061b      	lsls	r3, r3, #24
 800232a:	4313      	orrs	r3, r2
 800232c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002336:	3304      	adds	r3, #4
 8002338:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4413      	add	r3, r2
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	3208      	adds	r2, #8
 8002348:	6812      	ldr	r2, [r2, #0]
 800234a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 800234c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800234e:	3301      	adds	r3, #1
 8002350:	633b      	str	r3, [r7, #48]	; 0x30
 8002352:	e7c3      	b.n	80022dc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	4413      	add	r3, r2
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800235e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002360:	3301      	adds	r3, #1
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	4413      	add	r3, r2
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	021b      	lsls	r3, r3, #8
 800236a:	69fa      	ldr	r2, [r7, #28]
 800236c:	4313      	orrs	r3, r2
 800236e:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002372:	3302      	adds	r3, #2
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	4413      	add	r3, r2
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	041b      	lsls	r3, r3, #16
 800237c:	69fa      	ldr	r2, [r7, #28]
 800237e:	4313      	orrs	r3, r2
 8002380:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002384:	3303      	adds	r3, #3
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	4413      	add	r3, r2
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	061b      	lsls	r3, r3, #24
 800238e:	69fa      	ldr	r2, [r7, #28]
 8002390:	4313      	orrs	r3, r2
 8002392:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002396:	3304      	adds	r3, #4
 8002398:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	69fa      	ldr	r2, [r7, #28]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d90a      	bls.n	80023ba <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	699a      	ldr	r2, [r3, #24]
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4619      	mov	r1, r3
 80023ae:	4610      	mov	r0, r2
 80023b0:	f00c f834 	bl	800e41c <realloc>
 80023b4:	4602      	mov	r2, r0
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	69fa      	ldr	r2, [r7, #28]
 80023be:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80023c0:	2300      	movs	r3, #0
 80023c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d236      	bcs.n	800243c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80023ce:	2300      	movs	r3, #0
 80023d0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023d6:	6839      	ldr	r1, [r7, #0]
 80023d8:	440a      	add	r2, r1
 80023da:	7812      	ldrb	r2, [r2, #0]
 80023dc:	4313      	orrs	r3, r2
 80023de:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023e4:	3301      	adds	r3, #1
 80023e6:	6839      	ldr	r1, [r7, #0]
 80023e8:	440b      	add	r3, r1
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	021b      	lsls	r3, r3, #8
 80023ee:	4313      	orrs	r3, r2
 80023f0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023f6:	3302      	adds	r3, #2
 80023f8:	6839      	ldr	r1, [r7, #0]
 80023fa:	440b      	add	r3, r1
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	041b      	lsls	r3, r3, #16
 8002400:	4313      	orrs	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002408:	3303      	adds	r3, #3
 800240a:	6839      	ldr	r1, [r7, #0]
 800240c:	440b      	add	r3, r1
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	061b      	lsls	r3, r3, #24
 8002412:	4313      	orrs	r3, r2
 8002414:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 800241c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800241e:	3304      	adds	r3, #4
 8002420:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	699a      	ldr	r2, [r3, #24]
 8002426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	4413      	add	r3, r2
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	3214      	adds	r2, #20
 8002430:	6812      	ldr	r2, [r2, #0]
 8002432:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002436:	3301      	adds	r3, #1
 8002438:	62fb      	str	r3, [r7, #44]	; 0x2c
 800243a:	e7c3      	b.n	80023c4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800243c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	4413      	add	r3, r2
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002448:	3301      	adds	r3, #1
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	4413      	add	r3, r2
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	021b      	lsls	r3, r3, #8
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	4313      	orrs	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800245a:	3302      	adds	r3, #2
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	4413      	add	r3, r2
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	041b      	lsls	r3, r3, #16
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4313      	orrs	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800246a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800246c:	3303      	adds	r3, #3
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	4413      	add	r3, r2
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	061b      	lsls	r3, r3, #24
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4313      	orrs	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 800247c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800247e:	3304      	adds	r3, #4
 8002480:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	429a      	cmp	r2, r3
 800248a:	d90a      	bls.n	80024a2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4619      	mov	r1, r3
 8002496:	4610      	mov	r0, r2
 8002498:	f00b ffc0 	bl	800e41c <realloc>
 800249c:	4602      	mov	r2, r0
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 80024a8:	2300      	movs	r3, #0
 80024aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	69db      	ldr	r3, [r3, #28]
 80024b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d23f      	bcs.n	8002536 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80024b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	441a      	add	r2, r3
 80024bc:	f107 030c 	add.w	r3, r7, #12
 80024c0:	4611      	mov	r1, r2
 80024c2:	4618      	mov	r0, r3
 80024c4:	f001 f8b8 	bl	8003638 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80024c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024ca:	3304      	adds	r3, #4
 80024cc:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80024ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024d0:	627b      	str	r3, [r7, #36]	; 0x24
 80024d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	4413      	add	r3, r2
 80024d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024da:	429a      	cmp	r2, r3
 80024dc:	d20c      	bcs.n	80024f8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e2:	441a      	add	r2, r3
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	3b01      	subs	r3, #1
 80024e8:	6839      	ldr	r1, [r7, #0]
 80024ea:	440b      	add	r3, r1
 80024ec:	7812      	ldrb	r2, [r2, #0]
 80024ee:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	3301      	adds	r3, #1
 80024f4:	627b      	str	r3, [r7, #36]	; 0x24
 80024f6:	e7ec      	b.n	80024d2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80024f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	4413      	add	r3, r2
 80024fe:	3b01      	subs	r3, #1
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	4413      	add	r3, r2
 8002504:	2200      	movs	r2, #0
 8002506:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800250a:	3b01      	subs	r3, #1
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	441a      	add	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002514:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	4413      	add	r3, r2
 800251a:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	3220      	adds	r2, #32
 800252a:	6812      	ldr	r2, [r2, #0]
 800252c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800252e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002530:	3301      	adds	r3, #1
 8002532:	62bb      	str	r3, [r7, #40]	; 0x28
 8002534:	e7ba      	b.n	80024ac <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8002536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002538:	4618      	mov	r0, r3
 800253a:	3738      	adds	r7, #56	; 0x38
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	4b03      	ldr	r3, [pc, #12]	; (8002558 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 800254a:	4618      	mov	r0, r3
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	0800e8dc 	.word	0x0800e8dc

0800255c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	4b03      	ldr	r3, [pc, #12]	; (8002574 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002566:	4618      	mov	r0, r3
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	0800e7e8 	.word	0x0800e7e8

08002578 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
 8002584:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	68ba      	ldr	r2, [r7, #8]
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	605a      	str	r2, [r3, #4]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	611a      	str	r2, [r3, #16]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	4618      	mov	r0, r3
 800259c:	3714      	adds	r7, #20
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr

080025a6 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b082      	sub	sp, #8
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
 80025ae:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68d8      	ldr	r0, [r3, #12]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	6891      	ldr	r1, [r2, #8]
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	4798      	blx	r3
 80025c4:	4603      	mov	r3, r0
  };
 80025c6:	4618      	mov	r0, r3
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 80025ce:	b480      	push	{r7}
 80025d0:	b083      	sub	sp, #12
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	691b      	ldr	r3, [r3, #16]
  }
 80025da:	4618      	mov	r0, r3
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
	...

080025e8 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a4b      	ldr	r2, [pc, #300]	; (8002728 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d077      	beq.n	80026f0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a48      	ldr	r2, [pc, #288]	; (800272c <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d06f      	beq.n	80026f0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a45      	ldr	r2, [pc, #276]	; (8002730 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d067      	beq.n	80026f0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a42      	ldr	r2, [pc, #264]	; (8002734 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d05f      	beq.n	80026f0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a3f      	ldr	r2, [pc, #252]	; (8002738 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d057      	beq.n	80026f0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a3c      	ldr	r2, [pc, #240]	; (800273c <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d04f      	beq.n	80026f0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a39      	ldr	r2, [pc, #228]	; (8002740 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d047      	beq.n	80026f0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a36      	ldr	r2, [pc, #216]	; (8002744 <_ZN13STM32Hardware10getRdmaIndEv+0x15c>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d03f      	beq.n	80026f0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a33      	ldr	r2, [pc, #204]	; (8002748 <_ZN13STM32Hardware10getRdmaIndEv+0x160>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d037      	beq.n	80026f0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a30      	ldr	r2, [pc, #192]	; (800274c <_ZN13STM32Hardware10getRdmaIndEv+0x164>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d02f      	beq.n	80026f0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a2d      	ldr	r2, [pc, #180]	; (8002750 <_ZN13STM32Hardware10getRdmaIndEv+0x168>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d027      	beq.n	80026f0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a2a      	ldr	r2, [pc, #168]	; (8002754 <_ZN13STM32Hardware10getRdmaIndEv+0x16c>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d01f      	beq.n	80026f0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a27      	ldr	r2, [pc, #156]	; (8002758 <_ZN13STM32Hardware10getRdmaIndEv+0x170>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d017      	beq.n	80026f0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a24      	ldr	r2, [pc, #144]	; (800275c <_ZN13STM32Hardware10getRdmaIndEv+0x174>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d00f      	beq.n	80026f0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a21      	ldr	r2, [pc, #132]	; (8002760 <_ZN13STM32Hardware10getRdmaIndEv+0x178>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d007      	beq.n	80026f0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a1e      	ldr	r2, [pc, #120]	; (8002764 <_ZN13STM32Hardware10getRdmaIndEv+0x17c>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d10a      	bne.n	8002706 <_ZN13STM32Hardware10getRdmaIndEv+0x11e>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002704:	e009      	b.n	800271a <_ZN13STM32Hardware10getRdmaIndEv+0x132>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800271a:	4618      	mov	r0, r3
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	40020010 	.word	0x40020010
 800272c:	40020028 	.word	0x40020028
 8002730:	40020040 	.word	0x40020040
 8002734:	40020058 	.word	0x40020058
 8002738:	40020070 	.word	0x40020070
 800273c:	40020088 	.word	0x40020088
 8002740:	400200a0 	.word	0x400200a0
 8002744:	400200b8 	.word	0x400200b8
 8002748:	40020410 	.word	0x40020410
 800274c:	40020428 	.word	0x40020428
 8002750:	40020440 	.word	0x40020440
 8002754:	40020458 	.word	0x40020458
 8002758:	40020470 	.word	0x40020470
 800275c:	40020488 	.word	0x40020488
 8002760:	400204a0 	.word	0x400204a0
 8002764:	400204b8 	.word	0x400204b8

08002768 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
      huart(&huart3), rind(0), twind(0), tfind(0){
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4a0a      	ldr	r2, [pc, #40]	; (800279c <_ZN13STM32HardwareC1Ev+0x34>)
 8002774:	601a      	str	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4618      	mov	r0, r3
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr
 800279c:	240002b8 	.word	0x240002b8

080027a0 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f000 f804 	bl	80027b6 <_ZN13STM32Hardware10reset_rbufEv>
    }
 80027ae:	bf00      	nop
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b082      	sub	sp, #8
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6818      	ldr	r0, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	3304      	adds	r3, #4
 80027c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027ca:	4619      	mov	r1, r3
 80027cc:	f009 fd7e 	bl	800c2cc <HAL_UART_Receive_DMA>
    }
 80027d0:	bf00      	nop
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <_ZN13STM32Hardware4readEv>:

    int read(){
 80027d8:	b590      	push	{r4, r7, lr}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
      int c = -1;
 80027e0:	f04f 33ff 	mov.w	r3, #4294967295
 80027e4:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f7ff fefb 	bl	80025e8 <_ZN13STM32Hardware10getRdmaIndEv>
 80027f2:	4603      	mov	r3, r0
 80027f4:	429c      	cmp	r4, r3
 80027f6:	bf14      	ite	ne
 80027f8:	2301      	movne	r3, #1
 80027fa:	2300      	moveq	r3, #0
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d012      	beq.n	8002828 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002808:	1c59      	adds	r1, r3, #1
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	4413      	add	r3, r2
 8002814:	791b      	ldrb	r3, [r3, #4]
 8002816:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800281e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8002828:	68fb      	ldr	r3, [r7, #12]
    }
 800282a:	4618      	mov	r0, r3
 800282c:	3714      	adds	r7, #20
 800282e:	46bd      	mov	sp, r7
 8002830:	bd90      	pop	{r4, r7, pc}
	...

08002834 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002844:	2b20      	cmp	r3, #32
 8002846:	d108      	bne.n	800285a <_ZN13STM32Hardware5flushEv+0x26>
 8002848:	4b27      	ldr	r3, [pc, #156]	; (80028e8 <_ZN13STM32Hardware5flushEv+0xb4>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	f083 0301 	eor.w	r3, r3, #1
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <_ZN13STM32Hardware5flushEv+0x26>
 8002856:	2301      	movs	r3, #1
 8002858:	e000      	b.n	800285c <_ZN13STM32Hardware5flushEv+0x28>
 800285a:	2300      	movs	r3, #0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d03f      	beq.n	80028e0 <_ZN13STM32Hardware5flushEv+0xac>
        mutex = true;
 8002860:	4b21      	ldr	r3, [pc, #132]	; (80028e8 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002862:	2201      	movs	r2, #1
 8002864:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002872:	429a      	cmp	r2, r3
 8002874:	d031      	beq.n	80028da <_ZN13STM32Hardware5flushEv+0xa6>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002882:	429a      	cmp	r2, r3
 8002884:	d20a      	bcs.n	800289c <_ZN13STM32Hardware5flushEv+0x68>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800288c:	b29a      	uxth	r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002894:	b29b      	uxth	r3, r3
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	b29b      	uxth	r3, r3
 800289a:	e006      	b.n	80028aa <_ZN13STM32Hardware5flushEv+0x76>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6818      	ldr	r0, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80028b6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	4413      	add	r3, r2
 80028be:	89fa      	ldrh	r2, [r7, #14]
 80028c0:	4619      	mov	r1, r3
 80028c2:	f009 fc83 	bl	800c1cc <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80028cc:	89fb      	ldrh	r3, [r7, #14]
 80028ce:	4413      	add	r3, r2
 80028d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 80028da:	4b03      	ldr	r3, [pc, #12]	; (80028e8 <_ZN13STM32Hardware5flushEv+0xb4>)
 80028dc:	2200      	movs	r2, #0
 80028de:	701a      	strb	r2, [r3, #0]
      }
    }
 80028e0:	bf00      	nop
 80028e2:	3710      	adds	r7, #16
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	240004c4 	.word	0x240004c4

080028ec <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
      int n = length;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002902:	bfa8      	it	ge
 8002904:	f44f 7300 	movge.w	r3, #512	; 0x200
 8002908:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002910:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	4293      	cmp	r3, r2
 8002918:	bf28      	it	cs
 800291a:	4613      	movcs	r3, r2
 800291c:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002924:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	4413      	add	r3, r2
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	68b9      	ldr	r1, [r7, #8]
 8002930:	4618      	mov	r0, r3
 8002932:	f00b fd5d 	bl	800e3f0 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	4413      	add	r3, r2
 8002940:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	429a      	cmp	r2, r3
 8002950:	d00b      	beq.n	800296a <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	68ba      	ldr	r2, [r7, #8]
 800295c:	18d1      	adds	r1, r2, r3
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	461a      	mov	r2, r3
 8002966:	f00b fd43 	bl	800e3f0 <memcpy>
      }

      flush();
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f7ff ff62 	bl	8002834 <_ZN13STM32Hardware5flushEv>
    }
 8002970:	bf00      	nop
 8002972:	3718      	adds	r7, #24
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	f002 f8e6 	bl	8004b50 <HAL_GetTick>
 8002984:	4603      	mov	r3, r0
 8002986:	4618      	mov	r0, r3
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
	...

08002990 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4618      	mov	r0, r3
 800299c:	f7fe ffb6 	bl	800190c <_ZN3ros3MsgC1Ev>
 80029a0:	4a0e      	ldr	r2, [pc, #56]	; (80029dc <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	6879      	ldr	r1, [r7, #4]
 80029a8:	f04f 0200 	mov.w	r2, #0
 80029ac:	f04f 0300 	mov.w	r3, #0
 80029b0:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80029b4:	6879      	ldr	r1, [r7, #4]
 80029b6:	f04f 0200 	mov.w	r2, #0
 80029ba:	f04f 0300 	mov.w	r3, #0
 80029be:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80029c2:	6879      	ldr	r1, [r7, #4]
 80029c4:	f04f 0200 	mov.w	r2, #0
 80029c8:	f04f 0300 	mov.w	r3, #0
 80029cc:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4618      	mov	r0, r3
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	0800e944 	.word	0x0800e944

080029e0 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80029e0:	b480      	push	{r7}
 80029e2:	b08b      	sub	sp, #44	; 0x2c
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80029ea:	2300      	movs	r3, #0
 80029ec:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80029f4:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80029f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029fe:	6838      	ldr	r0, [r7, #0]
 8002a00:	4401      	add	r1, r0
 8002a02:	b2d3      	uxtb	r3, r2
 8002a04:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8002a06:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002a0a:	f04f 0200 	mov.w	r2, #0
 8002a0e:	f04f 0300 	mov.w	r3, #0
 8002a12:	0a02      	lsrs	r2, r0, #8
 8002a14:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002a18:	0a0b      	lsrs	r3, r1, #8
 8002a1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a1c:	3101      	adds	r1, #1
 8002a1e:	6838      	ldr	r0, [r7, #0]
 8002a20:	4401      	add	r1, r0
 8002a22:	b2d3      	uxtb	r3, r2
 8002a24:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8002a26:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002a2a:	f04f 0200 	mov.w	r2, #0
 8002a2e:	f04f 0300 	mov.w	r3, #0
 8002a32:	0c02      	lsrs	r2, r0, #16
 8002a34:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002a38:	0c0b      	lsrs	r3, r1, #16
 8002a3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a3c:	3102      	adds	r1, #2
 8002a3e:	6838      	ldr	r0, [r7, #0]
 8002a40:	4401      	add	r1, r0
 8002a42:	b2d3      	uxtb	r3, r2
 8002a44:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8002a46:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002a4a:	f04f 0200 	mov.w	r2, #0
 8002a4e:	f04f 0300 	mov.w	r3, #0
 8002a52:	0e02      	lsrs	r2, r0, #24
 8002a54:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002a58:	0e0b      	lsrs	r3, r1, #24
 8002a5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a5c:	3103      	adds	r1, #3
 8002a5e:	6838      	ldr	r0, [r7, #0]
 8002a60:	4401      	add	r1, r0
 8002a62:	b2d3      	uxtb	r3, r2
 8002a64:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8002a66:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002a6a:	f04f 0200 	mov.w	r2, #0
 8002a6e:	f04f 0300 	mov.w	r3, #0
 8002a72:	000a      	movs	r2, r1
 8002a74:	2300      	movs	r3, #0
 8002a76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a78:	3104      	adds	r1, #4
 8002a7a:	6838      	ldr	r0, [r7, #0]
 8002a7c:	4401      	add	r1, r0
 8002a7e:	b2d3      	uxtb	r3, r2
 8002a80:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8002a82:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002a86:	f04f 0200 	mov.w	r2, #0
 8002a8a:	f04f 0300 	mov.w	r3, #0
 8002a8e:	0a0a      	lsrs	r2, r1, #8
 8002a90:	2300      	movs	r3, #0
 8002a92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a94:	3105      	adds	r1, #5
 8002a96:	6838      	ldr	r0, [r7, #0]
 8002a98:	4401      	add	r1, r0
 8002a9a:	b2d3      	uxtb	r3, r2
 8002a9c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8002a9e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002aa2:	f04f 0200 	mov.w	r2, #0
 8002aa6:	f04f 0300 	mov.w	r3, #0
 8002aaa:	0c0a      	lsrs	r2, r1, #16
 8002aac:	2300      	movs	r3, #0
 8002aae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ab0:	3106      	adds	r1, #6
 8002ab2:	6838      	ldr	r0, [r7, #0]
 8002ab4:	4401      	add	r1, r0
 8002ab6:	b2d3      	uxtb	r3, r2
 8002ab8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8002aba:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002abe:	f04f 0200 	mov.w	r2, #0
 8002ac2:	f04f 0300 	mov.w	r3, #0
 8002ac6:	0e0a      	lsrs	r2, r1, #24
 8002ac8:	2300      	movs	r3, #0
 8002aca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002acc:	3107      	adds	r1, #7
 8002ace:	6838      	ldr	r0, [r7, #0]
 8002ad0:	4401      	add	r1, r0
 8002ad2:	b2d3      	uxtb	r3, r2
 8002ad4:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad8:	3308      	adds	r3, #8
 8002ada:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002ae2:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8002ae6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002aea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002aec:	6838      	ldr	r0, [r7, #0]
 8002aee:	4401      	add	r1, r0
 8002af0:	b2d3      	uxtb	r3, r2
 8002af2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8002af4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002af8:	f04f 0200 	mov.w	r2, #0
 8002afc:	f04f 0300 	mov.w	r3, #0
 8002b00:	0a02      	lsrs	r2, r0, #8
 8002b02:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002b06:	0a0b      	lsrs	r3, r1, #8
 8002b08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b0a:	3101      	adds	r1, #1
 8002b0c:	6838      	ldr	r0, [r7, #0]
 8002b0e:	4401      	add	r1, r0
 8002b10:	b2d3      	uxtb	r3, r2
 8002b12:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8002b14:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b18:	f04f 0200 	mov.w	r2, #0
 8002b1c:	f04f 0300 	mov.w	r3, #0
 8002b20:	0c02      	lsrs	r2, r0, #16
 8002b22:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002b26:	0c0b      	lsrs	r3, r1, #16
 8002b28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b2a:	3102      	adds	r1, #2
 8002b2c:	6838      	ldr	r0, [r7, #0]
 8002b2e:	4401      	add	r1, r0
 8002b30:	b2d3      	uxtb	r3, r2
 8002b32:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8002b34:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b38:	f04f 0200 	mov.w	r2, #0
 8002b3c:	f04f 0300 	mov.w	r3, #0
 8002b40:	0e02      	lsrs	r2, r0, #24
 8002b42:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002b46:	0e0b      	lsrs	r3, r1, #24
 8002b48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b4a:	3103      	adds	r1, #3
 8002b4c:	6838      	ldr	r0, [r7, #0]
 8002b4e:	4401      	add	r1, r0
 8002b50:	b2d3      	uxtb	r3, r2
 8002b52:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8002b54:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b58:	f04f 0200 	mov.w	r2, #0
 8002b5c:	f04f 0300 	mov.w	r3, #0
 8002b60:	000a      	movs	r2, r1
 8002b62:	2300      	movs	r3, #0
 8002b64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b66:	3104      	adds	r1, #4
 8002b68:	6838      	ldr	r0, [r7, #0]
 8002b6a:	4401      	add	r1, r0
 8002b6c:	b2d3      	uxtb	r3, r2
 8002b6e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8002b70:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b74:	f04f 0200 	mov.w	r2, #0
 8002b78:	f04f 0300 	mov.w	r3, #0
 8002b7c:	0a0a      	lsrs	r2, r1, #8
 8002b7e:	2300      	movs	r3, #0
 8002b80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b82:	3105      	adds	r1, #5
 8002b84:	6838      	ldr	r0, [r7, #0]
 8002b86:	4401      	add	r1, r0
 8002b88:	b2d3      	uxtb	r3, r2
 8002b8a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8002b8c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b90:	f04f 0200 	mov.w	r2, #0
 8002b94:	f04f 0300 	mov.w	r3, #0
 8002b98:	0c0a      	lsrs	r2, r1, #16
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b9e:	3106      	adds	r1, #6
 8002ba0:	6838      	ldr	r0, [r7, #0]
 8002ba2:	4401      	add	r1, r0
 8002ba4:	b2d3      	uxtb	r3, r2
 8002ba6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8002ba8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002bac:	f04f 0200 	mov.w	r2, #0
 8002bb0:	f04f 0300 	mov.w	r3, #0
 8002bb4:	0e0a      	lsrs	r2, r1, #24
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bba:	3107      	adds	r1, #7
 8002bbc:	6838      	ldr	r0, [r7, #0]
 8002bbe:	4401      	add	r1, r0
 8002bc0:	b2d3      	uxtb	r3, r2
 8002bc2:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8002bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc6:	3308      	adds	r3, #8
 8002bc8:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002bd0:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8002bd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bda:	6838      	ldr	r0, [r7, #0]
 8002bdc:	4401      	add	r1, r0
 8002bde:	b2d3      	uxtb	r3, r2
 8002be0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8002be2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002be6:	f04f 0200 	mov.w	r2, #0
 8002bea:	f04f 0300 	mov.w	r3, #0
 8002bee:	0a02      	lsrs	r2, r0, #8
 8002bf0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002bf4:	0a0b      	lsrs	r3, r1, #8
 8002bf6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bf8:	3101      	adds	r1, #1
 8002bfa:	6838      	ldr	r0, [r7, #0]
 8002bfc:	4401      	add	r1, r0
 8002bfe:	b2d3      	uxtb	r3, r2
 8002c00:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8002c02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c06:	f04f 0200 	mov.w	r2, #0
 8002c0a:	f04f 0300 	mov.w	r3, #0
 8002c0e:	0c02      	lsrs	r2, r0, #16
 8002c10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002c14:	0c0b      	lsrs	r3, r1, #16
 8002c16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c18:	3102      	adds	r1, #2
 8002c1a:	6838      	ldr	r0, [r7, #0]
 8002c1c:	4401      	add	r1, r0
 8002c1e:	b2d3      	uxtb	r3, r2
 8002c20:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8002c22:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c26:	f04f 0200 	mov.w	r2, #0
 8002c2a:	f04f 0300 	mov.w	r3, #0
 8002c2e:	0e02      	lsrs	r2, r0, #24
 8002c30:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002c34:	0e0b      	lsrs	r3, r1, #24
 8002c36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c38:	3103      	adds	r1, #3
 8002c3a:	6838      	ldr	r0, [r7, #0]
 8002c3c:	4401      	add	r1, r0
 8002c3e:	b2d3      	uxtb	r3, r2
 8002c40:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8002c42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c46:	f04f 0200 	mov.w	r2, #0
 8002c4a:	f04f 0300 	mov.w	r3, #0
 8002c4e:	000a      	movs	r2, r1
 8002c50:	2300      	movs	r3, #0
 8002c52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c54:	3104      	adds	r1, #4
 8002c56:	6838      	ldr	r0, [r7, #0]
 8002c58:	4401      	add	r1, r0
 8002c5a:	b2d3      	uxtb	r3, r2
 8002c5c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8002c5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c62:	f04f 0200 	mov.w	r2, #0
 8002c66:	f04f 0300 	mov.w	r3, #0
 8002c6a:	0a0a      	lsrs	r2, r1, #8
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c70:	3105      	adds	r1, #5
 8002c72:	6838      	ldr	r0, [r7, #0]
 8002c74:	4401      	add	r1, r0
 8002c76:	b2d3      	uxtb	r3, r2
 8002c78:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8002c7a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c7e:	f04f 0200 	mov.w	r2, #0
 8002c82:	f04f 0300 	mov.w	r3, #0
 8002c86:	0c0a      	lsrs	r2, r1, #16
 8002c88:	2300      	movs	r3, #0
 8002c8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c8c:	3106      	adds	r1, #6
 8002c8e:	6838      	ldr	r0, [r7, #0]
 8002c90:	4401      	add	r1, r0
 8002c92:	b2d3      	uxtb	r3, r2
 8002c94:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8002c96:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c9a:	f04f 0200 	mov.w	r2, #0
 8002c9e:	f04f 0300 	mov.w	r3, #0
 8002ca2:	0e0a      	lsrs	r2, r1, #24
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ca8:	3107      	adds	r1, #7
 8002caa:	6838      	ldr	r0, [r7, #0]
 8002cac:	4401      	add	r1, r0
 8002cae:	b2d3      	uxtb	r3, r2
 8002cb0:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb4:	3308      	adds	r3, #8
 8002cb6:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8002cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002cba:	4618      	mov	r0, r3
 8002cbc:	372c      	adds	r7, #44	; 0x2c
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002cc6:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002cca:	b0eb      	sub	sp, #428	; 0x1ac
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8002cd2:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8002cdc:	f04f 0200 	mov.w	r2, #0
 8002ce0:	f04f 0300 	mov.w	r3, #0
 8002ce4:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002ce8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002cec:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002cf0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002cf4:	4413      	add	r3, r2
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	461c      	mov	r4, r3
 8002cfe:	4615      	mov	r5, r2
 8002d00:	ea40 0804 	orr.w	r8, r0, r4
 8002d04:	ea41 0905 	orr.w	r9, r1, r5
 8002d08:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002d0c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002d10:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d14:	1c5a      	adds	r2, r3, #1
 8002d16:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d1a:	4413      	add	r3, r2
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	2200      	movs	r2, #0
 8002d22:	469a      	mov	sl, r3
 8002d24:	4693      	mov	fp, r2
 8002d26:	f04f 0200 	mov.w	r2, #0
 8002d2a:	f04f 0300 	mov.w	r3, #0
 8002d2e:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8002d32:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8002d36:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8002d3a:	ea40 0402 	orr.w	r4, r0, r2
 8002d3e:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8002d42:	430b      	orrs	r3, r1
 8002d44:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002d48:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8002d4c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002d50:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002d54:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d58:	1c9a      	adds	r2, r3, #2
 8002d5a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d5e:	4413      	add	r3, r2
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	2200      	movs	r2, #0
 8002d66:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8002d6a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8002d6e:	f04f 0200 	mov.w	r2, #0
 8002d72:	f04f 0300 	mov.w	r3, #0
 8002d76:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8002d7a:	464c      	mov	r4, r9
 8002d7c:	0423      	lsls	r3, r4, #16
 8002d7e:	4644      	mov	r4, r8
 8002d80:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002d84:	4644      	mov	r4, r8
 8002d86:	0422      	lsls	r2, r4, #16
 8002d88:	ea40 0402 	orr.w	r4, r0, r2
 8002d8c:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8002d90:	430b      	orrs	r3, r1
 8002d92:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8002d96:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8002d9a:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002d9e:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002da2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002da6:	1cda      	adds	r2, r3, #3
 8002da8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002dac:	4413      	add	r3, r2
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2200      	movs	r2, #0
 8002db4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8002db8:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8002dbc:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8002dc0:	4623      	mov	r3, r4
 8002dc2:	0a1b      	lsrs	r3, r3, #8
 8002dc4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8002dc8:	4623      	mov	r3, r4
 8002dca:	061b      	lsls	r3, r3, #24
 8002dcc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002dd0:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8002dd4:	4623      	mov	r3, r4
 8002dd6:	4303      	orrs	r3, r0
 8002dd8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002ddc:	462b      	mov	r3, r5
 8002dde:	430b      	orrs	r3, r1
 8002de0:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002de4:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8002de8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002dec:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002df0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002df4:	1d1a      	adds	r2, r3, #4
 8002df6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002dfa:	4413      	add	r3, r2
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2200      	movs	r2, #0
 8002e02:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8002e06:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002e0a:	f04f 0200 	mov.w	r2, #0
 8002e0e:	f04f 0300 	mov.w	r3, #0
 8002e12:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8002e16:	0023      	movs	r3, r4
 8002e18:	2200      	movs	r2, #0
 8002e1a:	ea40 0402 	orr.w	r4, r0, r2
 8002e1e:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8002e22:	430b      	orrs	r3, r1
 8002e24:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002e28:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8002e2c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002e30:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002e34:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e38:	1d5a      	adds	r2, r3, #5
 8002e3a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e3e:	4413      	add	r3, r2
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	2200      	movs	r2, #0
 8002e46:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002e4a:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8002e4e:	f04f 0200 	mov.w	r2, #0
 8002e52:	f04f 0300 	mov.w	r3, #0
 8002e56:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8002e5a:	0223      	lsls	r3, r4, #8
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	ea40 0402 	orr.w	r4, r0, r2
 8002e62:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8002e66:	430b      	orrs	r3, r1
 8002e68:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002e6c:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8002e70:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002e74:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002e78:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e7c:	1d9a      	adds	r2, r3, #6
 8002e7e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e82:	4413      	add	r3, r2
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002e8e:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8002e92:	f04f 0200 	mov.w	r2, #0
 8002e96:	f04f 0300 	mov.w	r3, #0
 8002e9a:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8002e9e:	0423      	lsls	r3, r4, #16
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	ea40 0402 	orr.w	r4, r0, r2
 8002ea6:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8002eaa:	430b      	orrs	r3, r1
 8002eac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002eb0:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8002eb4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002eb8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002ebc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ec0:	1dda      	adds	r2, r3, #7
 8002ec2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ec6:	4413      	add	r3, r2
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8002ed2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002ed6:	f04f 0200 	mov.w	r2, #0
 8002eda:	f04f 0300 	mov.w	r3, #0
 8002ede:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8002ee2:	0623      	lsls	r3, r4, #24
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	ea40 0402 	orr.w	r4, r0, r2
 8002eea:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8002eee:	430b      	orrs	r3, r1
 8002ef0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002ef4:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8002ef8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8002efc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002f00:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002f04:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8002f08:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f0c:	3308      	adds	r3, #8
 8002f0e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8002f12:	f04f 0200 	mov.w	r2, #0
 8002f16:	f04f 0300 	mov.w	r3, #0
 8002f1a:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002f1e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002f22:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002f26:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f2a:	4413      	add	r3, r2
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	2200      	movs	r2, #0
 8002f32:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002f36:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8002f3a:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8002f3e:	4623      	mov	r3, r4
 8002f40:	4303      	orrs	r3, r0
 8002f42:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002f46:	462b      	mov	r3, r5
 8002f48:	430b      	orrs	r3, r1
 8002f4a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002f4e:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8002f52:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002f56:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002f5a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f5e:	1c5a      	adds	r2, r3, #1
 8002f60:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f64:	4413      	add	r3, r2
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002f70:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8002f74:	f04f 0200 	mov.w	r2, #0
 8002f78:	f04f 0300 	mov.w	r3, #0
 8002f7c:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8002f80:	464c      	mov	r4, r9
 8002f82:	0223      	lsls	r3, r4, #8
 8002f84:	4644      	mov	r4, r8
 8002f86:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002f8a:	4644      	mov	r4, r8
 8002f8c:	0222      	lsls	r2, r4, #8
 8002f8e:	ea40 0402 	orr.w	r4, r0, r2
 8002f92:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8002f96:	430b      	orrs	r3, r1
 8002f98:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002f9c:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8002fa0:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002fa4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002fa8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002fac:	1c9a      	adds	r2, r3, #2
 8002fae:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002fb2:	4413      	add	r3, r2
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002fbe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002fc2:	f04f 0200 	mov.w	r2, #0
 8002fc6:	f04f 0300 	mov.w	r3, #0
 8002fca:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8002fce:	464c      	mov	r4, r9
 8002fd0:	0423      	lsls	r3, r4, #16
 8002fd2:	4644      	mov	r4, r8
 8002fd4:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002fd8:	4644      	mov	r4, r8
 8002fda:	0422      	lsls	r2, r4, #16
 8002fdc:	ea40 0402 	orr.w	r4, r0, r2
 8002fe0:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8002fe4:	430b      	orrs	r3, r1
 8002fe6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002fea:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8002fee:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002ff2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002ff6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ffa:	1cda      	adds	r2, r3, #3
 8002ffc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003000:	4413      	add	r3, r2
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2200      	movs	r2, #0
 8003008:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800300c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003010:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8003014:	4623      	mov	r3, r4
 8003016:	0a1b      	lsrs	r3, r3, #8
 8003018:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800301c:	4623      	mov	r3, r4
 800301e:	061b      	lsls	r3, r3, #24
 8003020:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003024:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8003028:	4623      	mov	r3, r4
 800302a:	4303      	orrs	r3, r0
 800302c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003030:	462b      	mov	r3, r5
 8003032:	430b      	orrs	r3, r1
 8003034:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003038:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 800303c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003040:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003044:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003048:	1d1a      	adds	r2, r3, #4
 800304a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800304e:	4413      	add	r3, r2
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	b2db      	uxtb	r3, r3
 8003054:	2200      	movs	r2, #0
 8003056:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800305a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800305e:	f04f 0200 	mov.w	r2, #0
 8003062:	f04f 0300 	mov.w	r3, #0
 8003066:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 800306a:	0023      	movs	r3, r4
 800306c:	2200      	movs	r2, #0
 800306e:	ea40 0402 	orr.w	r4, r0, r2
 8003072:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8003076:	430b      	orrs	r3, r1
 8003078:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800307c:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8003080:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003084:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003088:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800308c:	1d5a      	adds	r2, r3, #5
 800308e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003092:	4413      	add	r3, r2
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	b2db      	uxtb	r3, r3
 8003098:	2200      	movs	r2, #0
 800309a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800309e:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80030a2:	f04f 0200 	mov.w	r2, #0
 80030a6:	f04f 0300 	mov.w	r3, #0
 80030aa:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 80030ae:	0223      	lsls	r3, r4, #8
 80030b0:	2200      	movs	r2, #0
 80030b2:	ea40 0402 	orr.w	r4, r0, r2
 80030b6:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80030ba:	430b      	orrs	r3, r1
 80030bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80030c0:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 80030c4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80030c8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80030cc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80030d0:	1d9a      	adds	r2, r3, #6
 80030d2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80030d6:	4413      	add	r3, r2
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	2200      	movs	r2, #0
 80030de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80030e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80030e6:	f04f 0200 	mov.w	r2, #0
 80030ea:	f04f 0300 	mov.w	r3, #0
 80030ee:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 80030f2:	0423      	lsls	r3, r4, #16
 80030f4:	2200      	movs	r2, #0
 80030f6:	ea40 0402 	orr.w	r4, r0, r2
 80030fa:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80030fe:	430b      	orrs	r3, r1
 8003100:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003104:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8003108:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800310c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003110:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003114:	1dda      	adds	r2, r3, #7
 8003116:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800311a:	4413      	add	r3, r2
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2200      	movs	r2, #0
 8003122:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003126:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800312a:	f04f 0200 	mov.w	r2, #0
 800312e:	f04f 0300 	mov.w	r3, #0
 8003132:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8003136:	0623      	lsls	r3, r4, #24
 8003138:	2200      	movs	r2, #0
 800313a:	ea40 0402 	orr.w	r4, r0, r2
 800313e:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8003142:	430b      	orrs	r3, r1
 8003144:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003148:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 800314c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8003150:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003154:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003158:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 800315c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003160:	3308      	adds	r3, #8
 8003162:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8003166:	f04f 0200 	mov.w	r2, #0
 800316a:	f04f 0300 	mov.w	r3, #0
 800316e:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003172:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003176:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800317a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800317e:	4413      	add	r3, r2
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2200      	movs	r2, #0
 8003186:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800318a:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800318e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8003192:	4623      	mov	r3, r4
 8003194:	4303      	orrs	r3, r0
 8003196:	67bb      	str	r3, [r7, #120]	; 0x78
 8003198:	462b      	mov	r3, r5
 800319a:	430b      	orrs	r3, r1
 800319c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800319e:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80031a2:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80031a6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80031aa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80031ae:	1c5a      	adds	r2, r3, #1
 80031b0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80031b4:	4413      	add	r3, r2
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2200      	movs	r2, #0
 80031bc:	673b      	str	r3, [r7, #112]	; 0x70
 80031be:	677a      	str	r2, [r7, #116]	; 0x74
 80031c0:	f04f 0200 	mov.w	r2, #0
 80031c4:	f04f 0300 	mov.w	r3, #0
 80031c8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80031cc:	464c      	mov	r4, r9
 80031ce:	0223      	lsls	r3, r4, #8
 80031d0:	4644      	mov	r4, r8
 80031d2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80031d6:	4644      	mov	r4, r8
 80031d8:	0222      	lsls	r2, r4, #8
 80031da:	ea40 0402 	orr.w	r4, r0, r2
 80031de:	66bc      	str	r4, [r7, #104]	; 0x68
 80031e0:	430b      	orrs	r3, r1
 80031e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80031e4:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80031e8:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80031ec:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80031f0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80031f4:	1c9a      	adds	r2, r3, #2
 80031f6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80031fa:	4413      	add	r3, r2
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2200      	movs	r2, #0
 8003202:	663b      	str	r3, [r7, #96]	; 0x60
 8003204:	667a      	str	r2, [r7, #100]	; 0x64
 8003206:	f04f 0200 	mov.w	r2, #0
 800320a:	f04f 0300 	mov.w	r3, #0
 800320e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003212:	464c      	mov	r4, r9
 8003214:	0423      	lsls	r3, r4, #16
 8003216:	4644      	mov	r4, r8
 8003218:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 800321c:	4644      	mov	r4, r8
 800321e:	0422      	lsls	r2, r4, #16
 8003220:	ea40 0402 	orr.w	r4, r0, r2
 8003224:	65bc      	str	r4, [r7, #88]	; 0x58
 8003226:	430b      	orrs	r3, r1
 8003228:	65fb      	str	r3, [r7, #92]	; 0x5c
 800322a:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800322e:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003232:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003236:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800323a:	1cda      	adds	r2, r3, #3
 800323c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003240:	4413      	add	r3, r2
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2200      	movs	r2, #0
 8003248:	653b      	str	r3, [r7, #80]	; 0x50
 800324a:	657a      	str	r2, [r7, #84]	; 0x54
 800324c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8003250:	4623      	mov	r3, r4
 8003252:	0a1b      	lsrs	r3, r3, #8
 8003254:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003256:	4623      	mov	r3, r4
 8003258:	061b      	lsls	r3, r3, #24
 800325a:	64bb      	str	r3, [r7, #72]	; 0x48
 800325c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003260:	4623      	mov	r3, r4
 8003262:	4303      	orrs	r3, r0
 8003264:	643b      	str	r3, [r7, #64]	; 0x40
 8003266:	462b      	mov	r3, r5
 8003268:	430b      	orrs	r3, r1
 800326a:	647b      	str	r3, [r7, #68]	; 0x44
 800326c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003270:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003274:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003278:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800327c:	1d1a      	adds	r2, r3, #4
 800327e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003282:	4413      	add	r3, r2
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	b2db      	uxtb	r3, r3
 8003288:	2200      	movs	r2, #0
 800328a:	63bb      	str	r3, [r7, #56]	; 0x38
 800328c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800328e:	f04f 0200 	mov.w	r2, #0
 8003292:	f04f 0300 	mov.w	r3, #0
 8003296:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8003298:	0023      	movs	r3, r4
 800329a:	2200      	movs	r2, #0
 800329c:	ea40 0402 	orr.w	r4, r0, r2
 80032a0:	633c      	str	r4, [r7, #48]	; 0x30
 80032a2:	430b      	orrs	r3, r1
 80032a4:	637b      	str	r3, [r7, #52]	; 0x34
 80032a6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80032aa:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80032ae:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80032b2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80032b6:	1d5a      	adds	r2, r3, #5
 80032b8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80032bc:	4413      	add	r3, r2
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2200      	movs	r2, #0
 80032c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80032c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032c8:	f04f 0200 	mov.w	r2, #0
 80032cc:	f04f 0300 	mov.w	r3, #0
 80032d0:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80032d2:	0223      	lsls	r3, r4, #8
 80032d4:	2200      	movs	r2, #0
 80032d6:	ea40 0402 	orr.w	r4, r0, r2
 80032da:	623c      	str	r4, [r7, #32]
 80032dc:	430b      	orrs	r3, r1
 80032de:	627b      	str	r3, [r7, #36]	; 0x24
 80032e0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80032e4:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80032e8:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80032ec:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80032f0:	3306      	adds	r3, #6
 80032f2:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80032f6:	4413      	add	r3, r2
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2200      	movs	r2, #0
 80032fe:	61bb      	str	r3, [r7, #24]
 8003300:	61fa      	str	r2, [r7, #28]
 8003302:	f04f 0200 	mov.w	r2, #0
 8003306:	f04f 0300 	mov.w	r3, #0
 800330a:	69bc      	ldr	r4, [r7, #24]
 800330c:	0423      	lsls	r3, r4, #16
 800330e:	2200      	movs	r2, #0
 8003310:	ea40 0402 	orr.w	r4, r0, r2
 8003314:	613c      	str	r4, [r7, #16]
 8003316:	430b      	orrs	r3, r1
 8003318:	617b      	str	r3, [r7, #20]
 800331a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800331e:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003322:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003326:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800332a:	3307      	adds	r3, #7
 800332c:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003330:	4413      	add	r3, r2
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2200      	movs	r2, #0
 8003338:	60bb      	str	r3, [r7, #8]
 800333a:	60fa      	str	r2, [r7, #12]
 800333c:	f04f 0200 	mov.w	r2, #0
 8003340:	f04f 0300 	mov.w	r3, #0
 8003344:	68bc      	ldr	r4, [r7, #8]
 8003346:	0623      	lsls	r3, r4, #24
 8003348:	2200      	movs	r2, #0
 800334a:	ea40 0402 	orr.w	r4, r0, r2
 800334e:	603c      	str	r4, [r7, #0]
 8003350:	430b      	orrs	r3, r1
 8003352:	607b      	str	r3, [r7, #4]
 8003354:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003358:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 800335c:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003360:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8003364:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8003368:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800336c:	3308      	adds	r3, #8
 800336e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8003372:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8003376:	4618      	mov	r0, r3
 8003378:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 800337c:	46bd      	mov	sp, r7
 800337e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003382:	4770      	bx	lr

08003384 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	4b03      	ldr	r3, [pc, #12]	; (800339c <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 800338e:	4618      	mov	r0, r3
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	0800e80c 	.word	0x0800e80c

080033a0 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	4b03      	ldr	r3, [pc, #12]	; (80033b8 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 80033aa:	4618      	mov	r0, r3
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	0800e824 	.word	0x0800e824

080033bc <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7fe faa0 	bl	800190c <_ZN3ros3MsgC1Ev>
 80033cc:	4a08      	ldr	r2, [pc, #32]	; (80033f0 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	601a      	str	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	3308      	adds	r3, #8
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7ff fada 	bl	8002990 <_ZN13geometry_msgs7Vector3C1Ev>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	3328      	adds	r3, #40	; 0x28
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff fad5 	bl	8002990 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4618      	mov	r0, r3
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	0800e92c 	.word	0x0800e92c

080033f4 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80033fe:	2300      	movs	r3, #0
 8003400:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f103 0008 	add.w	r0, r3, #8
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	683a      	ldr	r2, [r7, #0]
 800340c:	4413      	add	r3, r2
 800340e:	4619      	mov	r1, r3
 8003410:	f7ff fae6 	bl	80029e0 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003414:	4602      	mov	r2, r0
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	4413      	add	r3, r2
 800341a:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	683a      	ldr	r2, [r7, #0]
 8003426:	4413      	add	r3, r2
 8003428:	4619      	mov	r1, r3
 800342a:	f7ff fad9 	bl	80029e0 <_ZNK13geometry_msgs7Vector39serializeEPh>
 800342e:	4602      	mov	r2, r0
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	4413      	add	r3, r2
 8003434:	60fb      	str	r3, [r7, #12]
      return offset;
 8003436:	68fb      	ldr	r3, [r7, #12]
    }
 8003438:	4618      	mov	r0, r3
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800344a:	2300      	movs	r3, #0
 800344c:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f103 0008 	add.w	r0, r3, #8
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	4413      	add	r3, r2
 800345a:	4619      	mov	r1, r3
 800345c:	f7ff fc33 	bl	8002cc6 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003460:	4602      	mov	r2, r0
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	4413      	add	r3, r2
 8003466:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	4413      	add	r3, r2
 8003474:	4619      	mov	r1, r3
 8003476:	f7ff fc26 	bl	8002cc6 <_ZN13geometry_msgs7Vector311deserializeEPh>
 800347a:	4602      	mov	r2, r0
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	4413      	add	r3, r2
 8003480:	60fb      	str	r3, [r7, #12]
     return offset;
 8003482:	68fb      	ldr	r3, [r7, #12]
    }
 8003484:	4618      	mov	r0, r3
 8003486:	3710      	adds	r7, #16
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	4b03      	ldr	r3, [pc, #12]	; (80034a4 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8003496:	4618      	mov	r0, r3
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	0800e848 	.word	0x0800e848

080034a8 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	4b03      	ldr	r3, [pc, #12]	; (80034c0 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 80034b2:	4618      	mov	r0, r3
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	0800e85c 	.word	0x0800e85c

080034c4 <_Z12vel_callbackRKN13geometry_msgs5TwistE>:
#include "stm32h7xx_hal.h"
#include "geometry_msgs/Twist.h"
double Vx, Vy, W;
float rVx, rVy, rW;
void vel_callback(const geometry_msgs::Twist &msg)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
	Vx = msg.linear.x;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80034d2:	490a      	ldr	r1, [pc, #40]	; (80034fc <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x38>)
 80034d4:	e9c1 2300 	strd	r2, r3, [r1]
	Vy = msg.linear.y;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80034de:	4908      	ldr	r1, [pc, #32]	; (8003500 <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x3c>)
 80034e0:	e9c1 2300 	strd	r2, r3, [r1]
	W=msg.angular.z;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80034ea:	4906      	ldr	r1, [pc, #24]	; (8003504 <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x40>)
 80034ec:	e9c1 2300 	strd	r2, r3, [r1]
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr
 80034fc:	240004c8 	.word	0x240004c8
 8003500:	240004d0 	.word	0x240004d0
 8003504:	240004d8 	.word	0x240004d8

08003508 <HAL_UART_TxCpltCallback>:
ros::Subscriber<geometry_msgs::Twist> sub("cmdvel_toSTM", vel_callback);
geometry_msgs::Twist speed;
ros::Publisher pub("speed_fromSTM",&speed);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 8003510:	4805      	ldr	r0, [pc, #20]	; (8003528 <HAL_UART_TxCpltCallback+0x20>)
 8003512:	f000 f97b 	bl	800380c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8003516:	4603      	mov	r3, r0
 8003518:	4618      	mov	r0, r3
 800351a:	f7ff f98b 	bl	8002834 <_ZN13STM32Hardware5flushEv>
}
 800351e:	bf00      	nop
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	240004ec 	.word	0x240004ec

0800352c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
    nh.getHardware()->reset_rbuf();
 8003534:	4805      	ldr	r0, [pc, #20]	; (800354c <HAL_UART_RxCpltCallback+0x20>)
 8003536:	f000 f969 	bl	800380c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800353a:	4603      	mov	r3, r0
 800353c:	4618      	mov	r0, r3
 800353e:	f7ff f93a 	bl	80027b6 <_ZN13STM32Hardware10reset_rbufEv>
}
 8003542:	bf00      	nop
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	240004ec 	.word	0x240004ec

08003550 <setup>:
void setup(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
    nh.initNode();
 8003554:	4806      	ldr	r0, [pc, #24]	; (8003570 <setup+0x20>)
 8003556:	f000 f965 	bl	8003824 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
    nh.subscribe(sub);
 800355a:	4906      	ldr	r1, [pc, #24]	; (8003574 <setup+0x24>)
 800355c:	4804      	ldr	r0, [pc, #16]	; (8003570 <setup+0x20>)
 800355e:	f000 f97e 	bl	800385e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
    nh.advertise(pub);
 8003562:	4905      	ldr	r1, [pc, #20]	; (8003578 <setup+0x28>)
 8003564:	4802      	ldr	r0, [pc, #8]	; (8003570 <setup+0x20>)
 8003566:	f000 f9a5 	bl	80038b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 800356a:	bf00      	nop
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	240004ec 	.word	0x240004ec
 8003574:	24000e28 	.word	0x24000e28
 8003578:	24000ed0 	.word	0x24000ed0

0800357c <loop>:
void loop(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
    nh.spinOnce();
 8003580:	4802      	ldr	r0, [pc, #8]	; (800358c <loop+0x10>)
 8003582:	f000 f9c7 	bl	8003914 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 8003586:	bf00      	nop
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	240004ec 	.word	0x240004ec

08003590 <realspeed>:
void errcallback(void) {
	nh.getHardware()->init();
}

void realspeed(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b092      	sub	sp, #72	; 0x48
 8003594:	af00      	add	r7, sp, #0
	geometry_msgs::Twist speed_;
 8003596:	463b      	mov	r3, r7
 8003598:	4618      	mov	r0, r3
 800359a:	f7ff ff0f 	bl	80033bc <_ZN13geometry_msgs5TwistC1Ev>
	speed_.linear.x=rVx;
 800359e:	4b12      	ldr	r3, [pc, #72]	; (80035e8 <realspeed+0x58>)
 80035a0:	edd3 7a00 	vldr	s15, [r3]
 80035a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80035a8:	ed87 7b04 	vstr	d7, [r7, #16]
	speed_.linear.y=rVy;
 80035ac:	4b0f      	ldr	r3, [pc, #60]	; (80035ec <realspeed+0x5c>)
 80035ae:	edd3 7a00 	vldr	s15, [r3]
 80035b2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80035b6:	ed87 7b06 	vstr	d7, [r7, #24]
	speed_.angular.z=rW;
 80035ba:	4b0d      	ldr	r3, [pc, #52]	; (80035f0 <realspeed+0x60>)
 80035bc:	edd3 7a00 	vldr	s15, [r3]
 80035c0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80035c4:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40

	static bool flag = false;
	if(flag) pub.publish(&speed_);
 80035c8:	4b0a      	ldr	r3, [pc, #40]	; (80035f4 <realspeed+0x64>)
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d004      	beq.n	80035da <realspeed+0x4a>
 80035d0:	463b      	mov	r3, r7
 80035d2:	4619      	mov	r1, r3
 80035d4:	4808      	ldr	r0, [pc, #32]	; (80035f8 <realspeed+0x68>)
 80035d6:	f7fe ffe6 	bl	80025a6 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	flag = true;
 80035da:	4b06      	ldr	r3, [pc, #24]	; (80035f4 <realspeed+0x64>)
 80035dc:	2201      	movs	r2, #1
 80035de:	701a      	strb	r2, [r3, #0]
}
 80035e0:	bf00      	nop
 80035e2:	3748      	adds	r7, #72	; 0x48
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	240004e0 	.word	0x240004e0
 80035ec:	240004e4 	.word	0x240004e4
 80035f0:	240004e8 	.word	0x240004e8
 80035f4:	24000ee4 	.word	0x24000ee4
 80035f8:	24000ed0 	.word	0x24000ed0

080035fc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80035fc:	b480      	push	{r7}
 80035fe:	b085      	sub	sp, #20
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8003606:	2300      	movs	r3, #0
 8003608:	60fb      	str	r3, [r7, #12]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2b03      	cmp	r3, #3
 800360e:	d80d      	bhi.n	800362c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	683a      	ldr	r2, [r7, #0]
 8003616:	fa22 f103 	lsr.w	r1, r2, r3
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	4413      	add	r3, r2
 8003620:	b2ca      	uxtb	r2, r1
 8003622:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	3301      	adds	r3, #1
 8003628:	60fb      	str	r3, [r7, #12]
 800362a:	e7ee      	b.n	800360a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 800362c:	bf00      	nop
 800362e:	3714      	adds	r7, #20
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003648:	2300      	movs	r3, #0
 800364a:	60fb      	str	r3, [r7, #12]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2b03      	cmp	r3, #3
 8003650:	d811      	bhi.n	8003676 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	6839      	ldr	r1, [r7, #0]
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	440a      	add	r2, r1
 800365c:	7812      	ldrb	r2, [r2, #0]
 800365e:	4611      	mov	r1, r2
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	00d2      	lsls	r2, r2, #3
 8003664:	fa01 f202 	lsl.w	r2, r1, r2
 8003668:	431a      	orrs	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	3301      	adds	r3, #1
 8003672:	60fb      	str	r3, [r7, #12]
 8003674:	e7ea      	b.n	800364c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8003676:	bf00      	nop
 8003678:	3714      	adds	r7, #20
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
	...

08003684 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	4a04      	ldr	r2, [pc, #16]	; (80036a0 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	601a      	str	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4618      	mov	r0, r3
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr
 80036a0:	0800e974 	.word	0x0800e974

080036a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7ff ffe8 	bl	8003684 <_ZN3ros15NodeHandleBase_C1Ev>
 80036b4:	4a3a      	ldr	r2, [pc, #232]	; (80037a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	601a      	str	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	3304      	adds	r3, #4
 80036be:	4618      	mov	r0, r3
 80036c0:	f7ff f852 	bl	8002768 <_ZN13STM32HardwareC1Ev>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f603 1314 	addw	r3, r3, #2324	; 0x914
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7fe fc8e 	bl	8001ff4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80036d8:	2300      	movs	r3, #0
 80036da:	617b      	str	r3, [r7, #20]
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	2b18      	cmp	r3, #24
 80036e0:	d80b      	bhi.n	80036fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4413      	add	r3, r2
 80036ee:	2200      	movs	r2, #0
 80036f0:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	3301      	adds	r3, #1
 80036f6:	617b      	str	r3, [r7, #20]
 80036f8:	e7f0      	b.n	80036dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80036fa:	2300      	movs	r3, #0
 80036fc:	613b      	str	r3, [r7, #16]
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	2b18      	cmp	r3, #24
 8003702:	d80a      	bhi.n	800371a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	f202 2222 	addw	r2, r2, #546	; 0x222
 800370c:	2100      	movs	r1, #0
 800370e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	3301      	adds	r3, #1
 8003716:	613b      	str	r3, [r7, #16]
 8003718:	e7f1      	b.n	80036fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800371a:	2300      	movs	r3, #0
 800371c:	60fb      	str	r3, [r7, #12]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003724:	d20a      	bcs.n	800373c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	4413      	add	r3, r2
 800372c:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003730:	2200      	movs	r2, #0
 8003732:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	3301      	adds	r3, #1
 8003738:	60fb      	str	r3, [r7, #12]
 800373a:	e7f0      	b.n	800371e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800373c:	2300      	movs	r3, #0
 800373e:	60bb      	str	r3, [r7, #8]
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003746:	d20a      	bcs.n	800375e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	4413      	add	r3, r2
 800374e:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003752:	2200      	movs	r2, #0
 8003754:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	3301      	adds	r3, #1
 800375a:	60bb      	str	r3, [r7, #8]
 800375c:	e7f0      	b.n	8003740 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4618      	mov	r0, r3
 800379a:	3718      	adds	r7, #24
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	0800e918 	.word	0x0800e918

080037a4 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	4a04      	ldr	r2, [pc, #16]	; (80037c0 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	601a      	str	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4618      	mov	r0, r3
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr
 80037c0:	0800e95c 	.word	0x0800e95c

080037c4 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	607a      	str	r2, [r7, #4]
 80037d0:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7ff ffe5 	bl	80037a4 <_ZN3ros11Subscriber_C1Ev>
 80037da:	4a0b      	ldr	r2, [pc, #44]	; (8003808 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	3310      	adds	r3, #16
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7ff fde9 	bl	80033bc <_ZN13geometry_msgs5TwistC1Ev>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	659a      	str	r2, [r3, #88]	; 0x58
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	68ba      	ldr	r2, [r7, #8]
 80037fa:	609a      	str	r2, [r3, #8]
  };
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	4618      	mov	r0, r3
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	0800e900 	.word	0x0800e900

0800380c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3304      	adds	r3, #4
  }
 8003818:	4618      	mov	r0, r3
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	3304      	adds	r3, #4
 8003830:	4618      	mov	r0, r3
 8003832:	f7fe ffb5 	bl	80027a0 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8003856:	bf00      	nop
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 800385e:	b480      	push	{r7}
 8003860:	b085      	sub	sp, #20
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
 8003866:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003868:	2300      	movs	r3, #0
 800386a:	60fb      	str	r3, [r7, #12]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2b18      	cmp	r3, #24
 8003870:	dc19      	bgt.n	80038a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	f202 2222 	addw	r2, r2, #546	; 0x222
 800387a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d10d      	bne.n	800389e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8003882:	6839      	ldr	r1, [r7, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	f202 2222 	addw	r2, r2, #546	; 0x222
 800388c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	605a      	str	r2, [r3, #4]
        return true;
 800389a:	2301      	movs	r3, #1
 800389c:	e004      	b.n	80038a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	3301      	adds	r3, #1
 80038a2:	60fb      	str	r3, [r7, #12]
 80038a4:	e7e2      	b.n	800386c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0xe>
      }
    }
    return false;
 80038a6:	2300      	movs	r3, #0
  }
 80038a8:	4618      	mov	r0, r3
 80038aa:	3714      	adds	r7, #20
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80038be:	2300      	movs	r3, #0
 80038c0:	60fb      	str	r3, [r7, #12]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2b18      	cmp	r3, #24
 80038c6:	dc1e      	bgt.n	8003906 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	4413      	add	r3, r2
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d111      	bne.n	80038fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	4413      	add	r3, r2
 80038e6:	683a      	ldr	r2, [r7, #0]
 80038e8:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	60da      	str	r2, [r3, #12]
        return true;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e004      	b.n	8003908 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	3301      	adds	r3, #1
 8003902:	60fb      	str	r3, [r7, #12]
 8003904:	e7dd      	b.n	80038c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 8003906:	2300      	movs	r3, #0
  }
 8003908:	4618      	mov	r0, r3
 800390a:	3714      	adds	r7, #20
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	3304      	adds	r3, #4
 8003920:	4618      	mov	r0, r3
 8003922:	f7ff f829 	bl	8002978 <_ZN13STM32Hardware4timeEv>
 8003926:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8003936:	4293      	cmp	r3, r2
 8003938:	d903      	bls.n	8003942 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003948:	2b00      	cmp	r3, #0
 800394a:	d009      	beq.n	8003960 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	429a      	cmp	r2, r3
 8003956:	d903      	bls.n	8003960 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8003966:	2b00      	cmp	r3, #0
 8003968:	d014      	beq.n	8003994 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	3304      	adds	r3, #4
 800396e:	4618      	mov	r0, r3
 8003970:	f7ff f802 	bl	8002978 <_ZN13STM32Hardware4timeEv>
 8003974:	4602      	mov	r2, r0
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	1ad2      	subs	r2, r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8003980:	429a      	cmp	r2, r3
 8003982:	bf8c      	ite	hi
 8003984:	2301      	movhi	r3, #1
 8003986:	2300      	movls	r3, #0
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d002      	beq.n	8003994 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 800398e:	f06f 0301 	mvn.w	r3, #1
 8003992:	e194      	b.n	8003cbe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	3304      	adds	r3, #4
 8003998:	4618      	mov	r0, r3
 800399a:	f7fe ff1d 	bl	80027d8 <_ZN13STM32Hardware4readEv>
 800399e:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	f2c0 8174 	blt.w	8003c90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	441a      	add	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80039be:	2b07      	cmp	r3, #7
 80039c0:	d11e      	bne.n	8003a00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80039c8:	1c59      	adds	r1, r3, #1
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 80039d0:	68ba      	ldr	r2, [r7, #8]
 80039d2:	b2d1      	uxtb	r1, r2
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	4413      	add	r3, r2
 80039d8:	460a      	mov	r2, r1
 80039da:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80039e4:	1e5a      	subs	r2, r3, #1
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1b4      	bne.n	8003960 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2208      	movs	r2, #8
 80039fa:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80039fe:	e7af      	b.n	8003960 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d128      	bne.n	8003a5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	2bff      	cmp	r3, #255	; 0xff
 8003a0e:	d10d      	bne.n	8003a2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003a16:	1c5a      	adds	r2, r3, #1
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f103 0214 	add.w	r2, r3, #20
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8003a2a:	e799      	b.n	8003960 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3304      	adds	r3, #4
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7fe ffa1 	bl	8002978 <_ZN13STM32Hardware4timeEv>
 8003a36:	4602      	mov	r2, r0
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a40:	4293      	cmp	r3, r2
 8003a42:	bf8c      	ite	hi
 8003a44:	2301      	movhi	r3, #1
 8003a46:	2300      	movls	r3, #0
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d088      	beq.n	8003960 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8003a56:	f06f 0301 	mvn.w	r3, #1
 8003a5a:	e130      	b.n	8003cbe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d118      	bne.n	8003a98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	2bfe      	cmp	r3, #254	; 0xfe
 8003a6a:	d107      	bne.n	8003a7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003a72:	1c5a      	adds	r2, r3, #1
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003a7a:	e771      	b.n	8003960 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f47f af68 	bne.w	8003960 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 f918 	bl	8003cc6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8003a96:	e763      	b.n	8003960 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d113      	bne.n	8003aca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	68ba      	ldr	r2, [r7, #8]
 8003aa6:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003ab8:	1c5a      	adds	r2, r3, #1
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	68ba      	ldr	r2, [r7, #8]
 8003ac4:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8003ac8:	e74a      	b.n	8003960 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003ad0:	2b03      	cmp	r3, #3
 8003ad2:	d110      	bne.n	8003af6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	021b      	lsls	r3, r3, #8
 8003ade:	441a      	add	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003aec:	1c5a      	adds	r2, r3, #1
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003af4:	e734      	b.n	8003960 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003afc:	2b04      	cmp	r3, #4
 8003afe:	d116      	bne.n	8003b2e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8003b06:	425a      	negs	r2, r3
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	b2d2      	uxtb	r2, r2
 8003b0c:	bf58      	it	pl
 8003b0e:	4253      	negpl	r3, r2
 8003b10:	2bff      	cmp	r3, #255	; 0xff
 8003b12:	d107      	bne.n	8003b24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003b1a:	1c5a      	adds	r2, r3, #1
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003b22:	e71d      	b.n	8003960 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003b2c:	e718      	b.n	8003960 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003b34:	2b05      	cmp	r3, #5
 8003b36:	d10f      	bne.n	8003b58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	68ba      	ldr	r2, [r7, #8]
 8003b3c:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003b46:	1c5a      	adds	r2, r3, #1
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	68ba      	ldr	r2, [r7, #8]
 8003b52:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8003b56:	e703      	b.n	8003960 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003b5e:	2b06      	cmp	r3, #6
 8003b60:	d117      	bne.n	8003b92 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	021b      	lsls	r3, r3, #8
 8003b6c:	441a      	add	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2207      	movs	r2, #7
 8003b78:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f47f aeec 	bne.w	8003960 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2208      	movs	r2, #8
 8003b8c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003b90:	e6e6      	b.n	8003960 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003b98:	2b08      	cmp	r3, #8
 8003b9a:	f47f aee1 	bne.w	8003960 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8003bac:	425a      	negs	r2, r3
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	b2d2      	uxtb	r2, r2
 8003bb2:	bf58      	it	pl
 8003bb4:	4253      	negpl	r3, r2
 8003bb6:	2bff      	cmp	r3, #255	; 0xff
 8003bb8:	f47f aed2 	bne.w	8003960 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d110      	bne.n	8003be8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f87d 	bl	8003cc6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 f898 	bl	8003d02 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8003be2:	f04f 33ff 	mov.w	r3, #4294967295
 8003be6:	e06a      	b.n	8003cbe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003bee:	2b0a      	cmp	r3, #10
 8003bf0:	d107      	bne.n	8003c02 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 f960 	bl	8003ec0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8003c00:	e6ae      	b.n	8003960 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003c08:	2b06      	cmp	r3, #6
 8003c0a:	d10e      	bne.n	8003c2a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003c18:	4619      	mov	r1, r3
 8003c1a:	4610      	mov	r0, r2
 8003c1c:	f7fe fb1f 	bl	800225e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8003c28:	e69a      	b.n	8003960 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003c30:	2b0b      	cmp	r3, #11
 8003c32:	d104      	bne.n	8003c3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8003c3c:	e690      	b.n	8003960 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003c44:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003c4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	f43f ae84 	beq.w	8003960 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003c5e:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003c68:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003c72:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8003c8a:	4611      	mov	r1, r2
 8003c8c:	4798      	blx	r3
    while (true)
 8003c8e:	e667      	b.n	8003960 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8003c90:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00f      	beq.n	8003cbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d906      	bls.n	8003cbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f809 	bl	8003cc6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 8003cbc:	2300      	movs	r3, #0
  }
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b086      	sub	sp, #24
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8003cce:	f107 030c 	add.w	r3, r7, #12
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7fd fe2a 	bl	800192c <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f107 020c 	add.w	r2, r7, #12
 8003ce2:	210a      	movs	r1, #10
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	4798      	blx	r3
    rt_time = hardware_.time();
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	3304      	adds	r3, #4
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7fe fe43 	bl	8002978 <_ZN13STM32Hardware4timeEv>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8003cfa:	bf00      	nop
 8003cfc:	3718      	adds	r7, #24
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8003d02:	b590      	push	{r4, r7, lr}
 8003d04:	b08b      	sub	sp, #44	; 0x2c
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003d0a:	f107 030c 	add.w	r3, r7, #12
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7fd fefc 	bl	8001b0c <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003d14:	2300      	movs	r3, #0
 8003d16:	627b      	str	r3, [r7, #36]	; 0x24
 8003d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1a:	2b18      	cmp	r3, #24
 8003d1c:	dc63      	bgt.n	8003de6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d22:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	4413      	add	r3, r2
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d056      	beq.n	8003dde <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d34:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	4413      	add	r3, r2
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d48:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	4413      	add	r3, r2
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	4413      	add	r3, r2
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	6859      	ldr	r1, [r3, #4]
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	4413      	add	r3, r2
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	3308      	adds	r3, #8
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4608      	mov	r0, r1
 8003d7e:	4798      	blx	r3
 8003d80:	4603      	mov	r3, r0
 8003d82:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d88:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	4413      	add	r3, r2
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	6859      	ldr	r1, [r3, #4]
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d98:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	4413      	add	r3, r2
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	330c      	adds	r3, #12
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4608      	mov	r0, r1
 8003dac:	4798      	blx	r3
 8003dae:	4603      	mov	r3, r0
 8003db0:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8003db2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003db6:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681c      	ldr	r4, [r3, #0]
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	4413      	add	r3, r2
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7fe fbfe 	bl	80025ce <_ZN3ros9Publisher15getEndpointTypeEv>
 8003dd2:	4601      	mov	r1, r0
 8003dd4:	f107 030c 	add.w	r3, r7, #12
 8003dd8:	461a      	mov	r2, r3
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de0:	3301      	adds	r3, #1
 8003de2:	627b      	str	r3, [r7, #36]	; 0x24
 8003de4:	e798      	b.n	8003d18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003de6:	2300      	movs	r3, #0
 8003de8:	627b      	str	r3, [r7, #36]	; 0x24
 8003dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dec:	2b18      	cmp	r3, #24
 8003dee:	dc5f      	bgt.n	8003eb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003df4:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d053      	beq.n	8003ea8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e04:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e16:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003e1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e26:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003e2a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e32:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	3308      	adds	r3, #8
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4608      	mov	r0, r1
 8003e42:	4798      	blx	r3
 8003e44:	4603      	mov	r3, r0
 8003e46:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e4c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003e50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e58:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	330c      	adds	r3, #12
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4608      	mov	r0, r1
 8003e68:	4798      	blx	r3
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003e6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e72:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681c      	ldr	r4, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e7e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003e82:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e8a:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	3304      	adds	r3, #4
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4608      	mov	r0, r1
 8003e9a:	4798      	blx	r3
 8003e9c:	4601      	mov	r1, r0
 8003e9e:	f107 030c 	add.w	r3, r7, #12
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eaa:	3301      	adds	r3, #1
 8003eac:	627b      	str	r3, [r7, #36]	; 0x24
 8003eae:	e79c      	b.n	8003dea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8003eb8:	bf00      	nop
 8003eba:	372c      	adds	r7, #44	; 0x2c
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd90      	pop	{r4, r7, pc}

08003ec0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b086      	sub	sp, #24
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8003eca:	f107 0308 	add.w	r3, r7, #8
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7fd fd2c 	bl	800192c <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	3304      	adds	r3, #4
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f7fe fd4d 	bl	8002978 <_ZN13STM32Hardware4timeEv>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003eea:	f107 0308 	add.w	r3, r7, #8
 8003eee:	6839      	ldr	r1, [r7, #0]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7fd fd8b 	bl	8001a0c <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	4915      	ldr	r1, [pc, #84]	; (8003f50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003efc:	fba1 1303 	umull	r1, r3, r1, r3
 8003f00:	099b      	lsrs	r3, r3, #6
 8003f02:	4413      	add	r3, r2
 8003f04:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003f06:	6939      	ldr	r1, [r7, #16]
 8003f08:	697a      	ldr	r2, [r7, #20]
 8003f0a:	4b11      	ldr	r3, [pc, #68]	; (8003f50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003f0c:	fba3 0302 	umull	r0, r3, r3, r2
 8003f10:	099b      	lsrs	r3, r3, #6
 8003f12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003f16:	fb00 f303 	mul.w	r3, r0, r3
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	4a0d      	ldr	r2, [pc, #52]	; (8003f54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8003f1e:	fb02 f303 	mul.w	r3, r2, r3
 8003f22:	440b      	add	r3, r1
 8003f24:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003f26:	f107 0308 	add.w	r3, r7, #8
 8003f2a:	3304      	adds	r3, #4
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 f8a6 	bl	8004080 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	3304      	adds	r3, #4
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7fe fd1d 	bl	8002978 <_ZN13STM32Hardware4timeEv>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8003f46:	bf00      	nop
 8003f48:	3718      	adds	r7, #24
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	10624dd3 	.word	0x10624dd3
 8003f54:	000f4240 	.word	0x000f4240

08003f58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b088      	sub	sp, #32
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	2b63      	cmp	r3, #99	; 0x63
 8003f68:	dd09      	ble.n	8003f7e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003f70:	f083 0301 	eor.w	r3, r3, #1
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	e079      	b.n	8004072 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8003f8a:	3207      	adds	r2, #7
 8003f8c:	4611      	mov	r1, r2
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	4798      	blx	r3
 8003f92:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	22ff      	movs	r2, #255	; 0xff
 8003f98:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	22fe      	movs	r2, #254	; 0xfe
 8003fa0:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	b2da      	uxtb	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	0a1b      	lsrs	r3, r3, #8
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	b2da      	uxtb	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8003fca:	4413      	add	r3, r2
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	43db      	mvns	r3, r3
 8003fd0:	b2da      	uxtb	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	b2da      	uxtb	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	b21b      	sxth	r3, r3
 8003fe6:	121b      	asrs	r3, r3, #8
 8003fe8:	b21b      	sxth	r3, r3
 8003fea:	b2da      	uxtb	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003ff6:	2305      	movs	r3, #5
 8003ff8:	61bb      	str	r3, [r7, #24]
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	3306      	adds	r3, #6
 8003ffe:	69ba      	ldr	r2, [r7, #24]
 8004000:	429a      	cmp	r2, r3
 8004002:	dc0d      	bgt.n	8004020 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	4413      	add	r3, r2
 800400a:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	461a      	mov	r2, r3
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	4413      	add	r3, r2
 8004016:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	3301      	adds	r3, #1
 800401c:	61bb      	str	r3, [r7, #24]
 800401e:	e7ec      	b.n	8003ffa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	3307      	adds	r3, #7
 8004024:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	425a      	negs	r2, r3
 800402a:	b2db      	uxtb	r3, r3
 800402c:	b2d2      	uxtb	r2, r2
 800402e:	bf58      	it	pl
 8004030:	4253      	negpl	r3, r2
 8004032:	b2da      	uxtb	r2, r3
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	1c59      	adds	r1, r3, #1
 8004038:	6179      	str	r1, [r7, #20]
 800403a:	43d2      	mvns	r2, r2
 800403c:	b2d1      	uxtb	r1, r2
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	4413      	add	r3, r2
 8004042:	460a      	mov	r2, r1
 8004044:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800404e:	dc0a      	bgt.n	8004066 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	1d18      	adds	r0, r3, #4
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	4619      	mov	r1, r3
 800405e:	f7fe fc45 	bl	80028ec <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	e005      	b.n	8004072 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004066:	4905      	ldr	r1, [pc, #20]	; (800407c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f000 f849 	bl	8004100 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 800406e:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8004072:	4618      	mov	r0, r3
 8004074:	3720      	adds	r7, #32
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	0800e880 	.word	0x0800e880

08004080 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	3304      	adds	r3, #4
 800408e:	4618      	mov	r0, r3
 8004090:	f7fe fc72 	bl	8002978 <_ZN13STM32Hardware4timeEv>
 8004094:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	4915      	ldr	r1, [pc, #84]	; (80040f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 800409e:	fba1 1303 	umull	r1, r3, r1, r3
 80040a2:	099b      	lsrs	r3, r3, #6
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	1e5a      	subs	r2, r3, #1
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	6859      	ldr	r1, [r3, #4]
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	4b0f      	ldr	r3, [pc, #60]	; (80040f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 80040b6:	fba3 0302 	umull	r0, r3, r3, r2
 80040ba:	099b      	lsrs	r3, r3, #6
 80040bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80040c0:	fb00 f303 	mul.w	r3, r0, r3
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	4a0c      	ldr	r2, [pc, #48]	; (80040f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 80040c8:	fb02 f303 	mul.w	r3, r2, r3
 80040cc:	1aca      	subs	r2, r1, r3
 80040ce:	4b0b      	ldr	r3, [pc, #44]	; (80040fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 80040d0:	4413      	add	r3, r2
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80040e4:	4619      	mov	r1, r3
 80040e6:	4610      	mov	r0, r2
 80040e8:	f7fc fa9c 	bl	8000624 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80040ec:	bf00      	nop
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	10624dd3 	.word	0x10624dd3
 80040f8:	000f4240 	.word	0x000f4240
 80040fc:	3b9aca00 	.word	0x3b9aca00

08004100 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 800410a:	683a      	ldr	r2, [r7, #0]
 800410c:	2103      	movs	r1, #3
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f804 	bl	800411c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8004114:	bf00      	nop
 8004116:	3708      	adds	r7, #8
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 800411c:	b580      	push	{r7, lr}
 800411e:	b088      	sub	sp, #32
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	460b      	mov	r3, r1
 8004126:	607a      	str	r2, [r7, #4]
 8004128:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 800412a:	f107 0314 	add.w	r3, r7, #20
 800412e:	4618      	mov	r0, r3
 8004130:	f7fd feb0 	bl	8001e94 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004134:	7afb      	ldrb	r3, [r7, #11]
 8004136:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f107 0214 	add.w	r2, r7, #20
 8004146:	2107      	movs	r1, #7
 8004148:	68f8      	ldr	r0, [r7, #12]
 800414a:	4798      	blx	r3
  }
 800414c:	bf00      	nop
 800414e:	3720      	adds	r7, #32
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <_Z41__static_initialization_and_destruction_0ii>:
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d116      	bne.n	8004192 <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800416a:	4293      	cmp	r3, r2
 800416c:	d111      	bne.n	8004192 <_Z41__static_initialization_and_destruction_0ii+0x3e>
ros::NodeHandle nh;
 800416e:	480b      	ldr	r0, [pc, #44]	; (800419c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8004170:	f7ff fa98 	bl	80036a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Subscriber<geometry_msgs::Twist> sub("cmdvel_toSTM", vel_callback);
 8004174:	2301      	movs	r3, #1
 8004176:	4a0a      	ldr	r2, [pc, #40]	; (80041a0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8004178:	490a      	ldr	r1, [pc, #40]	; (80041a4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800417a:	480b      	ldr	r0, [pc, #44]	; (80041a8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800417c:	f7ff fb22 	bl	80037c4 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
geometry_msgs::Twist speed;
 8004180:	480a      	ldr	r0, [pc, #40]	; (80041ac <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8004182:	f7ff f91b 	bl	80033bc <_ZN13geometry_msgs5TwistC1Ev>
ros::Publisher pub("speed_fromSTM",&speed);
 8004186:	2300      	movs	r3, #0
 8004188:	4a08      	ldr	r2, [pc, #32]	; (80041ac <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800418a:	4909      	ldr	r1, [pc, #36]	; (80041b0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800418c:	4809      	ldr	r0, [pc, #36]	; (80041b4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800418e:	f7fe f9f3 	bl	8002578 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8004192:	bf00      	nop
 8004194:	3708      	adds	r7, #8
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	240004ec 	.word	0x240004ec
 80041a0:	080034c5 	.word	0x080034c5
 80041a4:	0800e8bc 	.word	0x0800e8bc
 80041a8:	24000e28 	.word	0x24000e28
 80041ac:	24000e88 	.word	0x24000e88
 80041b0:	0800e8cc 	.word	0x0800e8cc
 80041b4:	24000ed0 	.word	0x24000ed0

080041b8 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	3310      	adds	r3, #16
 80041c6:	6839      	ldr	r1, [r7, #0]
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7ff f939 	bl	8003440 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	3210      	adds	r2, #16
 80041d6:	4610      	mov	r0, r2
 80041d8:	4798      	blx	r3
  }
 80041da:	bf00      	nop
 80041dc:	3708      	adds	r7, #8
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 80041e2:	b480      	push	{r7}
 80041e4:	b083      	sub	sp, #12
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 80041ee:	4618      	mov	r0, r3
 80041f0:	370c      	adds	r7, #12
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr

080041fa <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b082      	sub	sp, #8
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	3310      	adds	r3, #16
 8004206:	4618      	mov	r0, r3
 8004208:	f7ff f940 	bl	800348c <_ZN13geometry_msgs5Twist7getTypeEv>
 800420c:	4603      	mov	r3, r0
  }
 800420e:	4618      	mov	r0, r3
 8004210:	3708      	adds	r7, #8
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004216:	b580      	push	{r7, lr}
 8004218:	b082      	sub	sp, #8
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	3310      	adds	r3, #16
 8004222:	4618      	mov	r0, r3
 8004224:	f7ff f940 	bl	80034a8 <_ZN13geometry_msgs5Twist6getMD5Ev>
 8004228:	4603      	mov	r3, r0
  }
 800422a:	4618      	mov	r0, r3
 800422c:	3708      	adds	r7, #8
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8004232:	b480      	push	{r7}
 8004234:	b083      	sub	sp, #12
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
    return configured_;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8004240:	4618      	mov	r0, r3
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <_GLOBAL__sub_I_Vx>:
 800424c:	b580      	push	{r7, lr}
 800424e:	af00      	add	r7, sp, #0
 8004250:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004254:	2001      	movs	r0, #1
 8004256:	f7ff ff7d 	bl	8004154 <_Z41__static_initialization_and_destruction_0ii>
 800425a:	bd80      	pop	{r7, pc}

0800425c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004262:	4b0d      	ldr	r3, [pc, #52]	; (8004298 <HAL_MspInit+0x3c>)
 8004264:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004268:	4a0b      	ldr	r2, [pc, #44]	; (8004298 <HAL_MspInit+0x3c>)
 800426a:	f043 0302 	orr.w	r3, r3, #2
 800426e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004272:	4b09      	ldr	r3, [pc, #36]	; (8004298 <HAL_MspInit+0x3c>)
 8004274:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004278:	f003 0302 	and.w	r3, r3, #2
 800427c:	607b      	str	r3, [r7, #4]
 800427e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8004280:	2200      	movs	r2, #0
 8004282:	2100      	movs	r1, #0
 8004284:	2005      	movs	r0, #5
 8004286:	f000 fd4a 	bl	8004d1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800428a:	2005      	movs	r0, #5
 800428c:	f000 fd61 	bl	8004d52 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004290:	bf00      	nop
 8004292:	3708      	adds	r7, #8
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	58024400 	.word	0x58024400

0800429c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b08e      	sub	sp, #56	; 0x38
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042a8:	2200      	movs	r2, #0
 80042aa:	601a      	str	r2, [r3, #0]
 80042ac:	605a      	str	r2, [r3, #4]
 80042ae:	609a      	str	r2, [r3, #8]
 80042b0:	60da      	str	r2, [r3, #12]
 80042b2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a4f      	ldr	r2, [pc, #316]	; (80043f8 <HAL_TIM_Encoder_MspInit+0x15c>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d12f      	bne.n	800431e <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80042be:	4b4f      	ldr	r3, [pc, #316]	; (80043fc <HAL_TIM_Encoder_MspInit+0x160>)
 80042c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80042c4:	4a4d      	ldr	r2, [pc, #308]	; (80043fc <HAL_TIM_Encoder_MspInit+0x160>)
 80042c6:	f043 0301 	orr.w	r3, r3, #1
 80042ca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80042ce:	4b4b      	ldr	r3, [pc, #300]	; (80043fc <HAL_TIM_Encoder_MspInit+0x160>)
 80042d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	623b      	str	r3, [r7, #32]
 80042da:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80042dc:	4b47      	ldr	r3, [pc, #284]	; (80043fc <HAL_TIM_Encoder_MspInit+0x160>)
 80042de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042e2:	4a46      	ldr	r2, [pc, #280]	; (80043fc <HAL_TIM_Encoder_MspInit+0x160>)
 80042e4:	f043 0310 	orr.w	r3, r3, #16
 80042e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80042ec:	4b43      	ldr	r3, [pc, #268]	; (80043fc <HAL_TIM_Encoder_MspInit+0x160>)
 80042ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042f2:	f003 0310 	and.w	r3, r3, #16
 80042f6:	61fb      	str	r3, [r7, #28]
 80042f8:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80042fa:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80042fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004300:	2302      	movs	r3, #2
 8004302:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004304:	2300      	movs	r3, #0
 8004306:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004308:	2300      	movs	r3, #0
 800430a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800430c:	2301      	movs	r3, #1
 800430e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004310:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004314:	4619      	mov	r1, r3
 8004316:	483a      	ldr	r0, [pc, #232]	; (8004400 <HAL_TIM_Encoder_MspInit+0x164>)
 8004318:	f003 fb70 	bl	80079fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM23_MspInit 1 */

  /* USER CODE END TIM23_MspInit 1 */
  }

}
 800431c:	e067      	b.n	80043ee <HAL_TIM_Encoder_MspInit+0x152>
  else if(htim_encoder->Instance==TIM4)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a38      	ldr	r2, [pc, #224]	; (8004404 <HAL_TIM_Encoder_MspInit+0x168>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d12f      	bne.n	8004388 <HAL_TIM_Encoder_MspInit+0xec>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004328:	4b34      	ldr	r3, [pc, #208]	; (80043fc <HAL_TIM_Encoder_MspInit+0x160>)
 800432a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800432e:	4a33      	ldr	r2, [pc, #204]	; (80043fc <HAL_TIM_Encoder_MspInit+0x160>)
 8004330:	f043 0304 	orr.w	r3, r3, #4
 8004334:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004338:	4b30      	ldr	r3, [pc, #192]	; (80043fc <HAL_TIM_Encoder_MspInit+0x160>)
 800433a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800433e:	f003 0304 	and.w	r3, r3, #4
 8004342:	61bb      	str	r3, [r7, #24]
 8004344:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004346:	4b2d      	ldr	r3, [pc, #180]	; (80043fc <HAL_TIM_Encoder_MspInit+0x160>)
 8004348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800434c:	4a2b      	ldr	r2, [pc, #172]	; (80043fc <HAL_TIM_Encoder_MspInit+0x160>)
 800434e:	f043 0308 	orr.w	r3, r3, #8
 8004352:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004356:	4b29      	ldr	r3, [pc, #164]	; (80043fc <HAL_TIM_Encoder_MspInit+0x160>)
 8004358:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800435c:	f003 0308 	and.w	r3, r3, #8
 8004360:	617b      	str	r3, [r7, #20]
 8004362:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004364:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004368:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800436a:	2302      	movs	r3, #2
 800436c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800436e:	2300      	movs	r3, #0
 8004370:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004372:	2300      	movs	r3, #0
 8004374:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004376:	2302      	movs	r3, #2
 8004378:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800437a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800437e:	4619      	mov	r1, r3
 8004380:	4821      	ldr	r0, [pc, #132]	; (8004408 <HAL_TIM_Encoder_MspInit+0x16c>)
 8004382:	f003 fb3b 	bl	80079fc <HAL_GPIO_Init>
}
 8004386:	e032      	b.n	80043ee <HAL_TIM_Encoder_MspInit+0x152>
  else if(htim_encoder->Instance==TIM23)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a1f      	ldr	r2, [pc, #124]	; (800440c <HAL_TIM_Encoder_MspInit+0x170>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d12d      	bne.n	80043ee <HAL_TIM_Encoder_MspInit+0x152>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8004392:	4b1a      	ldr	r3, [pc, #104]	; (80043fc <HAL_TIM_Encoder_MspInit+0x160>)
 8004394:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004398:	4a18      	ldr	r2, [pc, #96]	; (80043fc <HAL_TIM_Encoder_MspInit+0x160>)
 800439a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800439e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80043a2:	4b16      	ldr	r3, [pc, #88]	; (80043fc <HAL_TIM_Encoder_MspInit+0x160>)
 80043a4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80043a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043ac:	613b      	str	r3, [r7, #16]
 80043ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80043b0:	4b12      	ldr	r3, [pc, #72]	; (80043fc <HAL_TIM_Encoder_MspInit+0x160>)
 80043b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043b6:	4a11      	ldr	r2, [pc, #68]	; (80043fc <HAL_TIM_Encoder_MspInit+0x160>)
 80043b8:	f043 0320 	orr.w	r3, r3, #32
 80043bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80043c0:	4b0e      	ldr	r3, [pc, #56]	; (80043fc <HAL_TIM_Encoder_MspInit+0x160>)
 80043c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043c6:	f003 0320 	and.w	r3, r3, #32
 80043ca:	60fb      	str	r3, [r7, #12]
 80043cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80043ce:	2303      	movs	r3, #3
 80043d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043d2:	2302      	movs	r3, #2
 80043d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043d6:	2300      	movs	r3, #0
 80043d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043da:	2300      	movs	r3, #0
 80043dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 80043de:	230d      	movs	r3, #13
 80043e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80043e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043e6:	4619      	mov	r1, r3
 80043e8:	4809      	ldr	r0, [pc, #36]	; (8004410 <HAL_TIM_Encoder_MspInit+0x174>)
 80043ea:	f003 fb07 	bl	80079fc <HAL_GPIO_Init>
}
 80043ee:	bf00      	nop
 80043f0:	3738      	adds	r7, #56	; 0x38
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	40010000 	.word	0x40010000
 80043fc:	58024400 	.word	0x58024400
 8004400:	58021000 	.word	0x58021000
 8004404:	40000800 	.word	0x40000800
 8004408:	58020c00 	.word	0x58020c00
 800440c:	4000e000 	.word	0x4000e000
 8004410:	58021400 	.word	0x58021400

08004414 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004424:	d10f      	bne.n	8004446 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004426:	4b15      	ldr	r3, [pc, #84]	; (800447c <HAL_TIM_PWM_MspInit+0x68>)
 8004428:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800442c:	4a13      	ldr	r2, [pc, #76]	; (800447c <HAL_TIM_PWM_MspInit+0x68>)
 800442e:	f043 0301 	orr.w	r3, r3, #1
 8004432:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004436:	4b11      	ldr	r3, [pc, #68]	; (800447c <HAL_TIM_PWM_MspInit+0x68>)
 8004438:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800443c:	f003 0301 	and.w	r3, r3, #1
 8004440:	60fb      	str	r3, [r7, #12]
 8004442:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004444:	e013      	b.n	800446e <HAL_TIM_PWM_MspInit+0x5a>
  else if(htim_pwm->Instance==TIM8)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a0d      	ldr	r2, [pc, #52]	; (8004480 <HAL_TIM_PWM_MspInit+0x6c>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d10e      	bne.n	800446e <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004450:	4b0a      	ldr	r3, [pc, #40]	; (800447c <HAL_TIM_PWM_MspInit+0x68>)
 8004452:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004456:	4a09      	ldr	r2, [pc, #36]	; (800447c <HAL_TIM_PWM_MspInit+0x68>)
 8004458:	f043 0302 	orr.w	r3, r3, #2
 800445c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004460:	4b06      	ldr	r3, [pc, #24]	; (800447c <HAL_TIM_PWM_MspInit+0x68>)
 8004462:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	60bb      	str	r3, [r7, #8]
 800446c:	68bb      	ldr	r3, [r7, #8]
}
 800446e:	bf00      	nop
 8004470:	3714      	adds	r7, #20
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	58024400 	.word	0x58024400
 8004480:	40010400 	.word	0x40010400

08004484 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a1d      	ldr	r2, [pc, #116]	; (8004508 <HAL_TIM_Base_MspInit+0x84>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d117      	bne.n	80044c6 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004496:	4b1d      	ldr	r3, [pc, #116]	; (800450c <HAL_TIM_Base_MspInit+0x88>)
 8004498:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800449c:	4a1b      	ldr	r2, [pc, #108]	; (800450c <HAL_TIM_Base_MspInit+0x88>)
 800449e:	f043 0302 	orr.w	r3, r3, #2
 80044a2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80044a6:	4b19      	ldr	r3, [pc, #100]	; (800450c <HAL_TIM_Base_MspInit+0x88>)
 80044a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80044ac:	f003 0302 	and.w	r3, r3, #2
 80044b0:	60fb      	str	r3, [r7, #12]
 80044b2:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80044b4:	2200      	movs	r2, #0
 80044b6:	2100      	movs	r1, #0
 80044b8:	201d      	movs	r0, #29
 80044ba:	f000 fc30 	bl	8004d1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80044be:	201d      	movs	r0, #29
 80044c0:	f000 fc47 	bl	8004d52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80044c4:	e01b      	b.n	80044fe <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM5)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a11      	ldr	r2, [pc, #68]	; (8004510 <HAL_TIM_Base_MspInit+0x8c>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d116      	bne.n	80044fe <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80044d0:	4b0e      	ldr	r3, [pc, #56]	; (800450c <HAL_TIM_Base_MspInit+0x88>)
 80044d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80044d6:	4a0d      	ldr	r2, [pc, #52]	; (800450c <HAL_TIM_Base_MspInit+0x88>)
 80044d8:	f043 0308 	orr.w	r3, r3, #8
 80044dc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80044e0:	4b0a      	ldr	r3, [pc, #40]	; (800450c <HAL_TIM_Base_MspInit+0x88>)
 80044e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80044e6:	f003 0308 	and.w	r3, r3, #8
 80044ea:	60bb      	str	r3, [r7, #8]
 80044ec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80044ee:	2200      	movs	r2, #0
 80044f0:	2100      	movs	r1, #0
 80044f2:	2032      	movs	r0, #50	; 0x32
 80044f4:	f000 fc13 	bl	8004d1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80044f8:	2032      	movs	r0, #50	; 0x32
 80044fa:	f000 fc2a 	bl	8004d52 <HAL_NVIC_EnableIRQ>
}
 80044fe:	bf00      	nop
 8004500:	3710      	adds	r7, #16
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	40000400 	.word	0x40000400
 800450c:	58024400 	.word	0x58024400
 8004510:	40000c00 	.word	0x40000c00

08004514 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b08a      	sub	sp, #40	; 0x28
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800451c:	f107 0314 	add.w	r3, r7, #20
 8004520:	2200      	movs	r2, #0
 8004522:	601a      	str	r2, [r3, #0]
 8004524:	605a      	str	r2, [r3, #4]
 8004526:	609a      	str	r2, [r3, #8]
 8004528:	60da      	str	r2, [r3, #12]
 800452a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004534:	d11f      	bne.n	8004576 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004536:	4b24      	ldr	r3, [pc, #144]	; (80045c8 <HAL_TIM_MspPostInit+0xb4>)
 8004538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800453c:	4a22      	ldr	r2, [pc, #136]	; (80045c8 <HAL_TIM_MspPostInit+0xb4>)
 800453e:	f043 0301 	orr.w	r3, r3, #1
 8004542:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004546:	4b20      	ldr	r3, [pc, #128]	; (80045c8 <HAL_TIM_MspPostInit+0xb4>)
 8004548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800454c:	f003 0301 	and.w	r3, r3, #1
 8004550:	613b      	str	r3, [r7, #16]
 8004552:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8004554:	2309      	movs	r3, #9
 8004556:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004558:	2302      	movs	r3, #2
 800455a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800455c:	2300      	movs	r3, #0
 800455e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004560:	2300      	movs	r3, #0
 8004562:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004564:	2301      	movs	r3, #1
 8004566:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004568:	f107 0314 	add.w	r3, r7, #20
 800456c:	4619      	mov	r1, r3
 800456e:	4817      	ldr	r0, [pc, #92]	; (80045cc <HAL_TIM_MspPostInit+0xb8>)
 8004570:	f003 fa44 	bl	80079fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8004574:	e024      	b.n	80045c0 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM8)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a15      	ldr	r2, [pc, #84]	; (80045d0 <HAL_TIM_MspPostInit+0xbc>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d11f      	bne.n	80045c0 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004580:	4b11      	ldr	r3, [pc, #68]	; (80045c8 <HAL_TIM_MspPostInit+0xb4>)
 8004582:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004586:	4a10      	ldr	r2, [pc, #64]	; (80045c8 <HAL_TIM_MspPostInit+0xb4>)
 8004588:	f043 0304 	orr.w	r3, r3, #4
 800458c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004590:	4b0d      	ldr	r3, [pc, #52]	; (80045c8 <HAL_TIM_MspPostInit+0xb4>)
 8004592:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004596:	f003 0304 	and.w	r3, r3, #4
 800459a:	60fb      	str	r3, [r7, #12]
 800459c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800459e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80045a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045a4:	2302      	movs	r3, #2
 80045a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045a8:	2300      	movs	r3, #0
 80045aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045ac:	2300      	movs	r3, #0
 80045ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80045b0:	2303      	movs	r3, #3
 80045b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045b4:	f107 0314 	add.w	r3, r7, #20
 80045b8:	4619      	mov	r1, r3
 80045ba:	4806      	ldr	r0, [pc, #24]	; (80045d4 <HAL_TIM_MspPostInit+0xc0>)
 80045bc:	f003 fa1e 	bl	80079fc <HAL_GPIO_Init>
}
 80045c0:	bf00      	nop
 80045c2:	3728      	adds	r7, #40	; 0x28
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	58024400 	.word	0x58024400
 80045cc:	58020000 	.word	0x58020000
 80045d0:	40010400 	.word	0x40010400
 80045d4:	58020800 	.word	0x58020800

080045d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b0b8      	sub	sp, #224	; 0xe0
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045e0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80045e4:	2200      	movs	r2, #0
 80045e6:	601a      	str	r2, [r3, #0]
 80045e8:	605a      	str	r2, [r3, #4]
 80045ea:	609a      	str	r2, [r3, #8]
 80045ec:	60da      	str	r2, [r3, #12]
 80045ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80045f0:	f107 0310 	add.w	r3, r7, #16
 80045f4:	22b8      	movs	r2, #184	; 0xb8
 80045f6:	2100      	movs	r1, #0
 80045f8:	4618      	mov	r0, r3
 80045fa:	f009 ff07 	bl	800e40c <memset>
  if(huart->Instance==USART3)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a5a      	ldr	r2, [pc, #360]	; (800476c <HAL_UART_MspInit+0x194>)
 8004604:	4293      	cmp	r3, r2
 8004606:	f040 80ac 	bne.w	8004762 <HAL_UART_MspInit+0x18a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800460a:	f04f 0202 	mov.w	r2, #2
 800460e:	f04f 0300 	mov.w	r3, #0
 8004612:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004616:	2300      	movs	r3, #0
 8004618:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800461c:	f107 0310 	add.w	r3, r7, #16
 8004620:	4618      	mov	r0, r3
 8004622:	f004 fb4d 	bl	8008cc0 <HAL_RCCEx_PeriphCLKConfig>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d001      	beq.n	8004630 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 800462c:	f7fd f958 	bl	80018e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004630:	4b4f      	ldr	r3, [pc, #316]	; (8004770 <HAL_UART_MspInit+0x198>)
 8004632:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004636:	4a4e      	ldr	r2, [pc, #312]	; (8004770 <HAL_UART_MspInit+0x198>)
 8004638:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800463c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004640:	4b4b      	ldr	r3, [pc, #300]	; (8004770 <HAL_UART_MspInit+0x198>)
 8004642:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004646:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800464a:	60fb      	str	r3, [r7, #12]
 800464c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800464e:	4b48      	ldr	r3, [pc, #288]	; (8004770 <HAL_UART_MspInit+0x198>)
 8004650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004654:	4a46      	ldr	r2, [pc, #280]	; (8004770 <HAL_UART_MspInit+0x198>)
 8004656:	f043 0304 	orr.w	r3, r3, #4
 800465a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800465e:	4b44      	ldr	r3, [pc, #272]	; (8004770 <HAL_UART_MspInit+0x198>)
 8004660:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004664:	f003 0304 	and.w	r3, r3, #4
 8004668:	60bb      	str	r3, [r7, #8]
 800466a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800466c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004670:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004674:	2302      	movs	r3, #2
 8004676:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800467a:	2300      	movs	r3, #0
 800467c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004680:	2300      	movs	r3, #0
 8004682:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004686:	2307      	movs	r3, #7
 8004688:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800468c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004690:	4619      	mov	r1, r3
 8004692:	4838      	ldr	r0, [pc, #224]	; (8004774 <HAL_UART_MspInit+0x19c>)
 8004694:	f003 f9b2 	bl	80079fc <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8004698:	4b37      	ldr	r3, [pc, #220]	; (8004778 <HAL_UART_MspInit+0x1a0>)
 800469a:	4a38      	ldr	r2, [pc, #224]	; (800477c <HAL_UART_MspInit+0x1a4>)
 800469c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800469e:	4b36      	ldr	r3, [pc, #216]	; (8004778 <HAL_UART_MspInit+0x1a0>)
 80046a0:	222d      	movs	r2, #45	; 0x2d
 80046a2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80046a4:	4b34      	ldr	r3, [pc, #208]	; (8004778 <HAL_UART_MspInit+0x1a0>)
 80046a6:	2200      	movs	r2, #0
 80046a8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80046aa:	4b33      	ldr	r3, [pc, #204]	; (8004778 <HAL_UART_MspInit+0x1a0>)
 80046ac:	2200      	movs	r2, #0
 80046ae:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80046b0:	4b31      	ldr	r3, [pc, #196]	; (8004778 <HAL_UART_MspInit+0x1a0>)
 80046b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80046b6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80046b8:	4b2f      	ldr	r3, [pc, #188]	; (8004778 <HAL_UART_MspInit+0x1a0>)
 80046ba:	2200      	movs	r2, #0
 80046bc:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80046be:	4b2e      	ldr	r3, [pc, #184]	; (8004778 <HAL_UART_MspInit+0x1a0>)
 80046c0:	2200      	movs	r2, #0
 80046c2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80046c4:	4b2c      	ldr	r3, [pc, #176]	; (8004778 <HAL_UART_MspInit+0x1a0>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80046ca:	4b2b      	ldr	r3, [pc, #172]	; (8004778 <HAL_UART_MspInit+0x1a0>)
 80046cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80046d0:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80046d2:	4b29      	ldr	r3, [pc, #164]	; (8004778 <HAL_UART_MspInit+0x1a0>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80046d8:	4827      	ldr	r0, [pc, #156]	; (8004778 <HAL_UART_MspInit+0x1a0>)
 80046da:	f000 fb55 	bl	8004d88 <HAL_DMA_Init>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d001      	beq.n	80046e8 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 80046e4:	f7fd f8fc 	bl	80018e0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a23      	ldr	r2, [pc, #140]	; (8004778 <HAL_UART_MspInit+0x1a0>)
 80046ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80046f0:	4a21      	ldr	r2, [pc, #132]	; (8004778 <HAL_UART_MspInit+0x1a0>)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 80046f6:	4b22      	ldr	r3, [pc, #136]	; (8004780 <HAL_UART_MspInit+0x1a8>)
 80046f8:	4a22      	ldr	r2, [pc, #136]	; (8004784 <HAL_UART_MspInit+0x1ac>)
 80046fa:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80046fc:	4b20      	ldr	r3, [pc, #128]	; (8004780 <HAL_UART_MspInit+0x1a8>)
 80046fe:	222e      	movs	r2, #46	; 0x2e
 8004700:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004702:	4b1f      	ldr	r3, [pc, #124]	; (8004780 <HAL_UART_MspInit+0x1a8>)
 8004704:	2240      	movs	r2, #64	; 0x40
 8004706:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004708:	4b1d      	ldr	r3, [pc, #116]	; (8004780 <HAL_UART_MspInit+0x1a8>)
 800470a:	2200      	movs	r2, #0
 800470c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800470e:	4b1c      	ldr	r3, [pc, #112]	; (8004780 <HAL_UART_MspInit+0x1a8>)
 8004710:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004714:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004716:	4b1a      	ldr	r3, [pc, #104]	; (8004780 <HAL_UART_MspInit+0x1a8>)
 8004718:	2200      	movs	r2, #0
 800471a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800471c:	4b18      	ldr	r3, [pc, #96]	; (8004780 <HAL_UART_MspInit+0x1a8>)
 800471e:	2200      	movs	r2, #0
 8004720:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004722:	4b17      	ldr	r3, [pc, #92]	; (8004780 <HAL_UART_MspInit+0x1a8>)
 8004724:	2200      	movs	r2, #0
 8004726:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004728:	4b15      	ldr	r3, [pc, #84]	; (8004780 <HAL_UART_MspInit+0x1a8>)
 800472a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800472e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004730:	4b13      	ldr	r3, [pc, #76]	; (8004780 <HAL_UART_MspInit+0x1a8>)
 8004732:	2200      	movs	r2, #0
 8004734:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004736:	4812      	ldr	r0, [pc, #72]	; (8004780 <HAL_UART_MspInit+0x1a8>)
 8004738:	f000 fb26 	bl	8004d88 <HAL_DMA_Init>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <HAL_UART_MspInit+0x16e>
    {
      Error_Handler();
 8004742:	f7fd f8cd 	bl	80018e0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a0d      	ldr	r2, [pc, #52]	; (8004780 <HAL_UART_MspInit+0x1a8>)
 800474a:	67da      	str	r2, [r3, #124]	; 0x7c
 800474c:	4a0c      	ldr	r2, [pc, #48]	; (8004780 <HAL_UART_MspInit+0x1a8>)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004752:	2200      	movs	r2, #0
 8004754:	2100      	movs	r1, #0
 8004756:	2027      	movs	r0, #39	; 0x27
 8004758:	f000 fae1 	bl	8004d1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800475c:	2027      	movs	r0, #39	; 0x27
 800475e:	f000 faf8 	bl	8004d52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004762:	bf00      	nop
 8004764:	37e0      	adds	r7, #224	; 0xe0
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	40004800 	.word	0x40004800
 8004770:	58024400 	.word	0x58024400
 8004774:	58020800 	.word	0x58020800
 8004778:	2400034c 	.word	0x2400034c
 800477c:	40020010 	.word	0x40020010
 8004780:	240003c4 	.word	0x240003c4
 8004784:	40020028 	.word	0x40020028

08004788 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004788:	b480      	push	{r7}
 800478a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800478c:	e7fe      	b.n	800478c <NMI_Handler+0x4>

0800478e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800478e:	b480      	push	{r7}
 8004790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004792:	e7fe      	b.n	8004792 <HardFault_Handler+0x4>

08004794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004794:	b480      	push	{r7}
 8004796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004798:	e7fe      	b.n	8004798 <MemManage_Handler+0x4>

0800479a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800479a:	b480      	push	{r7}
 800479c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800479e:	e7fe      	b.n	800479e <BusFault_Handler+0x4>

080047a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80047a0:	b480      	push	{r7}
 80047a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80047a4:	e7fe      	b.n	80047a4 <UsageFault_Handler+0x4>

080047a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80047a6:	b480      	push	{r7}
 80047a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80047aa:	bf00      	nop
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80047b4:	b480      	push	{r7}
 80047b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80047b8:	bf00      	nop
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr

080047c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80047c2:	b480      	push	{r7}
 80047c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80047c6:	bf00      	nop
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80047d4:	f000 f9a8 	bl	8004b28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80047d8:	bf00      	nop
 80047da:	bd80      	pop	{r7, pc}

080047dc <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80047dc:	b480      	push	{r7}
 80047de:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80047e0:	bf00      	nop
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
	...

080047ec <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80047f0:	4802      	ldr	r0, [pc, #8]	; (80047fc <DMA1_Stream0_IRQHandler+0x10>)
 80047f2:	f001 fdf1 	bl	80063d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80047f6:	bf00      	nop
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	2400034c 	.word	0x2400034c

08004800 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8004804:	4802      	ldr	r0, [pc, #8]	; (8004810 <DMA1_Stream1_IRQHandler+0x10>)
 8004806:	f001 fde7 	bl	80063d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800480a:	bf00      	nop
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	240003c4 	.word	0x240003c4

08004814 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004818:	4802      	ldr	r0, [pc, #8]	; (8004824 <TIM3_IRQHandler+0x10>)
 800481a:	f006 fb99 	bl	800af50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800481e:	bf00      	nop
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	2400013c 	.word	0x2400013c

08004828 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800482c:	4802      	ldr	r0, [pc, #8]	; (8004838 <USART3_IRQHandler+0x10>)
 800482e:	f007 fd99 	bl	800c364 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004832:	bf00      	nop
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	240002b8 	.word	0x240002b8

0800483c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004840:	4802      	ldr	r0, [pc, #8]	; (800484c <TIM5_IRQHandler+0x10>)
 8004842:	f006 fb85 	bl	800af50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004846:	bf00      	nop
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	240001d4 	.word	0x240001d4

08004850 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004850:	b480      	push	{r7}
 8004852:	af00      	add	r7, sp, #0
  return 1;
 8004854:	2301      	movs	r3, #1
}
 8004856:	4618      	mov	r0, r3
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <_kill>:

int _kill(int pid, int sig)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800486a:	f009 fd97 	bl	800e39c <__errno>
 800486e:	4603      	mov	r3, r0
 8004870:	2216      	movs	r2, #22
 8004872:	601a      	str	r2, [r3, #0]
  return -1;
 8004874:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004878:	4618      	mov	r0, r3
 800487a:	3708      	adds	r7, #8
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <_exit>:

void _exit (int status)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004888:	f04f 31ff 	mov.w	r1, #4294967295
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f7ff ffe7 	bl	8004860 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004892:	e7fe      	b.n	8004892 <_exit+0x12>

08004894 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b086      	sub	sp, #24
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800489c:	4a14      	ldr	r2, [pc, #80]	; (80048f0 <_sbrk+0x5c>)
 800489e:	4b15      	ldr	r3, [pc, #84]	; (80048f4 <_sbrk+0x60>)
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80048a8:	4b13      	ldr	r3, [pc, #76]	; (80048f8 <_sbrk+0x64>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d102      	bne.n	80048b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80048b0:	4b11      	ldr	r3, [pc, #68]	; (80048f8 <_sbrk+0x64>)
 80048b2:	4a12      	ldr	r2, [pc, #72]	; (80048fc <_sbrk+0x68>)
 80048b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80048b6:	4b10      	ldr	r3, [pc, #64]	; (80048f8 <_sbrk+0x64>)
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4413      	add	r3, r2
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d207      	bcs.n	80048d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80048c4:	f009 fd6a 	bl	800e39c <__errno>
 80048c8:	4603      	mov	r3, r0
 80048ca:	220c      	movs	r2, #12
 80048cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80048ce:	f04f 33ff 	mov.w	r3, #4294967295
 80048d2:	e009      	b.n	80048e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80048d4:	4b08      	ldr	r3, [pc, #32]	; (80048f8 <_sbrk+0x64>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80048da:	4b07      	ldr	r3, [pc, #28]	; (80048f8 <_sbrk+0x64>)
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4413      	add	r3, r2
 80048e2:	4a05      	ldr	r2, [pc, #20]	; (80048f8 <_sbrk+0x64>)
 80048e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80048e6:	68fb      	ldr	r3, [r7, #12]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3718      	adds	r7, #24
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	24050000 	.word	0x24050000
 80048f4:	00000400 	.word	0x00000400
 80048f8:	24000ee8 	.word	0x24000ee8
 80048fc:	24000f00 	.word	0x24000f00

08004900 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004900:	b480      	push	{r7}
 8004902:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004904:	4b32      	ldr	r3, [pc, #200]	; (80049d0 <SystemInit+0xd0>)
 8004906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800490a:	4a31      	ldr	r2, [pc, #196]	; (80049d0 <SystemInit+0xd0>)
 800490c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004910:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004914:	4b2f      	ldr	r3, [pc, #188]	; (80049d4 <SystemInit+0xd4>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 030f 	and.w	r3, r3, #15
 800491c:	2b06      	cmp	r3, #6
 800491e:	d807      	bhi.n	8004930 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004920:	4b2c      	ldr	r3, [pc, #176]	; (80049d4 <SystemInit+0xd4>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f023 030f 	bic.w	r3, r3, #15
 8004928:	4a2a      	ldr	r2, [pc, #168]	; (80049d4 <SystemInit+0xd4>)
 800492a:	f043 0307 	orr.w	r3, r3, #7
 800492e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004930:	4b29      	ldr	r3, [pc, #164]	; (80049d8 <SystemInit+0xd8>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a28      	ldr	r2, [pc, #160]	; (80049d8 <SystemInit+0xd8>)
 8004936:	f043 0301 	orr.w	r3, r3, #1
 800493a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800493c:	4b26      	ldr	r3, [pc, #152]	; (80049d8 <SystemInit+0xd8>)
 800493e:	2200      	movs	r2, #0
 8004940:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004942:	4b25      	ldr	r3, [pc, #148]	; (80049d8 <SystemInit+0xd8>)
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	4924      	ldr	r1, [pc, #144]	; (80049d8 <SystemInit+0xd8>)
 8004948:	4b24      	ldr	r3, [pc, #144]	; (80049dc <SystemInit+0xdc>)
 800494a:	4013      	ands	r3, r2
 800494c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800494e:	4b21      	ldr	r3, [pc, #132]	; (80049d4 <SystemInit+0xd4>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0308 	and.w	r3, r3, #8
 8004956:	2b00      	cmp	r3, #0
 8004958:	d007      	beq.n	800496a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800495a:	4b1e      	ldr	r3, [pc, #120]	; (80049d4 <SystemInit+0xd4>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f023 030f 	bic.w	r3, r3, #15
 8004962:	4a1c      	ldr	r2, [pc, #112]	; (80049d4 <SystemInit+0xd4>)
 8004964:	f043 0307 	orr.w	r3, r3, #7
 8004968:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800496a:	4b1b      	ldr	r3, [pc, #108]	; (80049d8 <SystemInit+0xd8>)
 800496c:	2200      	movs	r2, #0
 800496e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004970:	4b19      	ldr	r3, [pc, #100]	; (80049d8 <SystemInit+0xd8>)
 8004972:	2200      	movs	r2, #0
 8004974:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004976:	4b18      	ldr	r3, [pc, #96]	; (80049d8 <SystemInit+0xd8>)
 8004978:	2200      	movs	r2, #0
 800497a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800497c:	4b16      	ldr	r3, [pc, #88]	; (80049d8 <SystemInit+0xd8>)
 800497e:	4a18      	ldr	r2, [pc, #96]	; (80049e0 <SystemInit+0xe0>)
 8004980:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004982:	4b15      	ldr	r3, [pc, #84]	; (80049d8 <SystemInit+0xd8>)
 8004984:	4a17      	ldr	r2, [pc, #92]	; (80049e4 <SystemInit+0xe4>)
 8004986:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004988:	4b13      	ldr	r3, [pc, #76]	; (80049d8 <SystemInit+0xd8>)
 800498a:	4a17      	ldr	r2, [pc, #92]	; (80049e8 <SystemInit+0xe8>)
 800498c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800498e:	4b12      	ldr	r3, [pc, #72]	; (80049d8 <SystemInit+0xd8>)
 8004990:	2200      	movs	r2, #0
 8004992:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004994:	4b10      	ldr	r3, [pc, #64]	; (80049d8 <SystemInit+0xd8>)
 8004996:	4a14      	ldr	r2, [pc, #80]	; (80049e8 <SystemInit+0xe8>)
 8004998:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800499a:	4b0f      	ldr	r3, [pc, #60]	; (80049d8 <SystemInit+0xd8>)
 800499c:	2200      	movs	r2, #0
 800499e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80049a0:	4b0d      	ldr	r3, [pc, #52]	; (80049d8 <SystemInit+0xd8>)
 80049a2:	4a11      	ldr	r2, [pc, #68]	; (80049e8 <SystemInit+0xe8>)
 80049a4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80049a6:	4b0c      	ldr	r3, [pc, #48]	; (80049d8 <SystemInit+0xd8>)
 80049a8:	2200      	movs	r2, #0
 80049aa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80049ac:	4b0a      	ldr	r3, [pc, #40]	; (80049d8 <SystemInit+0xd8>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a09      	ldr	r2, [pc, #36]	; (80049d8 <SystemInit+0xd8>)
 80049b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049b6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80049b8:	4b07      	ldr	r3, [pc, #28]	; (80049d8 <SystemInit+0xd8>)
 80049ba:	2200      	movs	r2, #0
 80049bc:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80049be:	4b0b      	ldr	r3, [pc, #44]	; (80049ec <SystemInit+0xec>)
 80049c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80049c4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80049c6:	bf00      	nop
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr
 80049d0:	e000ed00 	.word	0xe000ed00
 80049d4:	52002000 	.word	0x52002000
 80049d8:	58024400 	.word	0x58024400
 80049dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80049e0:	02020200 	.word	0x02020200
 80049e4:	01ff0000 	.word	0x01ff0000
 80049e8:	01010280 	.word	0x01010280
 80049ec:	52004000 	.word	0x52004000

080049f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80049f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004a28 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80049f4:	f7ff ff84 	bl	8004900 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80049f8:	480c      	ldr	r0, [pc, #48]	; (8004a2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80049fa:	490d      	ldr	r1, [pc, #52]	; (8004a30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80049fc:	4a0d      	ldr	r2, [pc, #52]	; (8004a34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80049fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004a00:	e002      	b.n	8004a08 <LoopCopyDataInit>

08004a02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a06:	3304      	adds	r3, #4

08004a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a0c:	d3f9      	bcc.n	8004a02 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a0e:	4a0a      	ldr	r2, [pc, #40]	; (8004a38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004a10:	4c0a      	ldr	r4, [pc, #40]	; (8004a3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004a12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a14:	e001      	b.n	8004a1a <LoopFillZerobss>

08004a16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a18:	3204      	adds	r2, #4

08004a1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004a1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004a1c:	d3fb      	bcc.n	8004a16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004a1e:	f009 fcc3 	bl	800e3a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004a22:	f7fb fe2b 	bl	800067c <main>
  bx  lr
 8004a26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004a28:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8004a2c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004a30:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 8004a34:	0800ea4c 	.word	0x0800ea4c
  ldr r2, =_sbss
 8004a38:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 8004a3c:	24000f00 	.word	0x24000f00

08004a40 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004a40:	e7fe      	b.n	8004a40 <ADC3_IRQHandler>
	...

08004a44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a4a:	2003      	movs	r0, #3
 8004a4c:	f000 f95c 	bl	8004d08 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004a50:	f003 ff60 	bl	8008914 <HAL_RCC_GetSysClockFreq>
 8004a54:	4602      	mov	r2, r0
 8004a56:	4b15      	ldr	r3, [pc, #84]	; (8004aac <HAL_Init+0x68>)
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	0a1b      	lsrs	r3, r3, #8
 8004a5c:	f003 030f 	and.w	r3, r3, #15
 8004a60:	4913      	ldr	r1, [pc, #76]	; (8004ab0 <HAL_Init+0x6c>)
 8004a62:	5ccb      	ldrb	r3, [r1, r3]
 8004a64:	f003 031f 	and.w	r3, r3, #31
 8004a68:	fa22 f303 	lsr.w	r3, r2, r3
 8004a6c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004a6e:	4b0f      	ldr	r3, [pc, #60]	; (8004aac <HAL_Init+0x68>)
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	f003 030f 	and.w	r3, r3, #15
 8004a76:	4a0e      	ldr	r2, [pc, #56]	; (8004ab0 <HAL_Init+0x6c>)
 8004a78:	5cd3      	ldrb	r3, [r2, r3]
 8004a7a:	f003 031f 	and.w	r3, r3, #31
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	fa22 f303 	lsr.w	r3, r2, r3
 8004a84:	4a0b      	ldr	r2, [pc, #44]	; (8004ab4 <HAL_Init+0x70>)
 8004a86:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004a88:	4a0b      	ldr	r2, [pc, #44]	; (8004ab8 <HAL_Init+0x74>)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004a8e:	200f      	movs	r0, #15
 8004a90:	f000 f814 	bl	8004abc <HAL_InitTick>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d001      	beq.n	8004a9e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e002      	b.n	8004aa4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004a9e:	f7ff fbdd 	bl	800425c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3708      	adds	r7, #8
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	58024400 	.word	0x58024400
 8004ab0:	0800e9f8 	.word	0x0800e9f8
 8004ab4:	24000014 	.word	0x24000014
 8004ab8:	24000010 	.word	0x24000010

08004abc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004ac4:	4b15      	ldr	r3, [pc, #84]	; (8004b1c <HAL_InitTick+0x60>)
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d101      	bne.n	8004ad0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e021      	b.n	8004b14 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004ad0:	4b13      	ldr	r3, [pc, #76]	; (8004b20 <HAL_InitTick+0x64>)
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	4b11      	ldr	r3, [pc, #68]	; (8004b1c <HAL_InitTick+0x60>)
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	4619      	mov	r1, r3
 8004ada:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ade:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f000 f941 	bl	8004d6e <HAL_SYSTICK_Config>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d001      	beq.n	8004af6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e00e      	b.n	8004b14 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2b0f      	cmp	r3, #15
 8004afa:	d80a      	bhi.n	8004b12 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004afc:	2200      	movs	r2, #0
 8004afe:	6879      	ldr	r1, [r7, #4]
 8004b00:	f04f 30ff 	mov.w	r0, #4294967295
 8004b04:	f000 f90b 	bl	8004d1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004b08:	4a06      	ldr	r2, [pc, #24]	; (8004b24 <HAL_InitTick+0x68>)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	e000      	b.n	8004b14 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3708      	adds	r7, #8
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	2400001c 	.word	0x2400001c
 8004b20:	24000010 	.word	0x24000010
 8004b24:	24000018 	.word	0x24000018

08004b28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004b2c:	4b06      	ldr	r3, [pc, #24]	; (8004b48 <HAL_IncTick+0x20>)
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	461a      	mov	r2, r3
 8004b32:	4b06      	ldr	r3, [pc, #24]	; (8004b4c <HAL_IncTick+0x24>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4413      	add	r3, r2
 8004b38:	4a04      	ldr	r2, [pc, #16]	; (8004b4c <HAL_IncTick+0x24>)
 8004b3a:	6013      	str	r3, [r2, #0]
}
 8004b3c:	bf00      	nop
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	2400001c 	.word	0x2400001c
 8004b4c:	24000eec 	.word	0x24000eec

08004b50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b50:	b480      	push	{r7}
 8004b52:	af00      	add	r7, sp, #0
  return uwTick;
 8004b54:	4b03      	ldr	r3, [pc, #12]	; (8004b64 <HAL_GetTick+0x14>)
 8004b56:	681b      	ldr	r3, [r3, #0]
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	24000eec 	.word	0x24000eec

08004b68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f003 0307 	and.w	r3, r3, #7
 8004b76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b78:	4b0b      	ldr	r3, [pc, #44]	; (8004ba8 <__NVIC_SetPriorityGrouping+0x40>)
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b7e:	68ba      	ldr	r2, [r7, #8]
 8004b80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b84:	4013      	ands	r3, r2
 8004b86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004b90:	4b06      	ldr	r3, [pc, #24]	; (8004bac <__NVIC_SetPriorityGrouping+0x44>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b96:	4a04      	ldr	r2, [pc, #16]	; (8004ba8 <__NVIC_SetPriorityGrouping+0x40>)
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	60d3      	str	r3, [r2, #12]
}
 8004b9c:	bf00      	nop
 8004b9e:	3714      	adds	r7, #20
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr
 8004ba8:	e000ed00 	.word	0xe000ed00
 8004bac:	05fa0000 	.word	0x05fa0000

08004bb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bb4:	4b04      	ldr	r3, [pc, #16]	; (8004bc8 <__NVIC_GetPriorityGrouping+0x18>)
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	0a1b      	lsrs	r3, r3, #8
 8004bba:	f003 0307 	and.w	r3, r3, #7
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr
 8004bc8:	e000ed00 	.word	0xe000ed00

08004bcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004bd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	db0b      	blt.n	8004bf6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bde:	88fb      	ldrh	r3, [r7, #6]
 8004be0:	f003 021f 	and.w	r2, r3, #31
 8004be4:	4907      	ldr	r1, [pc, #28]	; (8004c04 <__NVIC_EnableIRQ+0x38>)
 8004be6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bea:	095b      	lsrs	r3, r3, #5
 8004bec:	2001      	movs	r0, #1
 8004bee:	fa00 f202 	lsl.w	r2, r0, r2
 8004bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004bf6:	bf00      	nop
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	e000e100 	.word	0xe000e100

08004c08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	4603      	mov	r3, r0
 8004c10:	6039      	str	r1, [r7, #0]
 8004c12:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004c14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	db0a      	blt.n	8004c32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	b2da      	uxtb	r2, r3
 8004c20:	490c      	ldr	r1, [pc, #48]	; (8004c54 <__NVIC_SetPriority+0x4c>)
 8004c22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c26:	0112      	lsls	r2, r2, #4
 8004c28:	b2d2      	uxtb	r2, r2
 8004c2a:	440b      	add	r3, r1
 8004c2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c30:	e00a      	b.n	8004c48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	b2da      	uxtb	r2, r3
 8004c36:	4908      	ldr	r1, [pc, #32]	; (8004c58 <__NVIC_SetPriority+0x50>)
 8004c38:	88fb      	ldrh	r3, [r7, #6]
 8004c3a:	f003 030f 	and.w	r3, r3, #15
 8004c3e:	3b04      	subs	r3, #4
 8004c40:	0112      	lsls	r2, r2, #4
 8004c42:	b2d2      	uxtb	r2, r2
 8004c44:	440b      	add	r3, r1
 8004c46:	761a      	strb	r2, [r3, #24]
}
 8004c48:	bf00      	nop
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr
 8004c54:	e000e100 	.word	0xe000e100
 8004c58:	e000ed00 	.word	0xe000ed00

08004c5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b089      	sub	sp, #36	; 0x24
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f003 0307 	and.w	r3, r3, #7
 8004c6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	f1c3 0307 	rsb	r3, r3, #7
 8004c76:	2b04      	cmp	r3, #4
 8004c78:	bf28      	it	cs
 8004c7a:	2304      	movcs	r3, #4
 8004c7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	3304      	adds	r3, #4
 8004c82:	2b06      	cmp	r3, #6
 8004c84:	d902      	bls.n	8004c8c <NVIC_EncodePriority+0x30>
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	3b03      	subs	r3, #3
 8004c8a:	e000      	b.n	8004c8e <NVIC_EncodePriority+0x32>
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c90:	f04f 32ff 	mov.w	r2, #4294967295
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9a:	43da      	mvns	r2, r3
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	401a      	ands	r2, r3
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ca4:	f04f 31ff 	mov.w	r1, #4294967295
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	fa01 f303 	lsl.w	r3, r1, r3
 8004cae:	43d9      	mvns	r1, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cb4:	4313      	orrs	r3, r2
         );
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3724      	adds	r7, #36	; 0x24
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
	...

08004cc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cd4:	d301      	bcc.n	8004cda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e00f      	b.n	8004cfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cda:	4a0a      	ldr	r2, [pc, #40]	; (8004d04 <SysTick_Config+0x40>)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ce2:	210f      	movs	r1, #15
 8004ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ce8:	f7ff ff8e 	bl	8004c08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cec:	4b05      	ldr	r3, [pc, #20]	; (8004d04 <SysTick_Config+0x40>)
 8004cee:	2200      	movs	r2, #0
 8004cf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cf2:	4b04      	ldr	r3, [pc, #16]	; (8004d04 <SysTick_Config+0x40>)
 8004cf4:	2207      	movs	r2, #7
 8004cf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3708      	adds	r7, #8
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	e000e010 	.word	0xe000e010

08004d08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f7ff ff29 	bl	8004b68 <__NVIC_SetPriorityGrouping>
}
 8004d16:	bf00      	nop
 8004d18:	3708      	adds	r7, #8
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b086      	sub	sp, #24
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	4603      	mov	r3, r0
 8004d26:	60b9      	str	r1, [r7, #8]
 8004d28:	607a      	str	r2, [r7, #4]
 8004d2a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d2c:	f7ff ff40 	bl	8004bb0 <__NVIC_GetPriorityGrouping>
 8004d30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	68b9      	ldr	r1, [r7, #8]
 8004d36:	6978      	ldr	r0, [r7, #20]
 8004d38:	f7ff ff90 	bl	8004c5c <NVIC_EncodePriority>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004d42:	4611      	mov	r1, r2
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7ff ff5f 	bl	8004c08 <__NVIC_SetPriority>
}
 8004d4a:	bf00      	nop
 8004d4c:	3718      	adds	r7, #24
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b082      	sub	sp, #8
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	4603      	mov	r3, r0
 8004d5a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d60:	4618      	mov	r0, r3
 8004d62:	f7ff ff33 	bl	8004bcc <__NVIC_EnableIRQ>
}
 8004d66:	bf00      	nop
 8004d68:	3708      	adds	r7, #8
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b082      	sub	sp, #8
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f7ff ffa4 	bl	8004cc4 <SysTick_Config>
 8004d7c:	4603      	mov	r3, r0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3708      	adds	r7, #8
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
	...

08004d88 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b086      	sub	sp, #24
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004d90:	f7ff fede 	bl	8004b50 <HAL_GetTick>
 8004d94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d101      	bne.n	8004da0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e314      	b.n	80053ca <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a66      	ldr	r2, [pc, #408]	; (8004f40 <HAL_DMA_Init+0x1b8>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d04a      	beq.n	8004e40 <HAL_DMA_Init+0xb8>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a65      	ldr	r2, [pc, #404]	; (8004f44 <HAL_DMA_Init+0x1bc>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d045      	beq.n	8004e40 <HAL_DMA_Init+0xb8>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a63      	ldr	r2, [pc, #396]	; (8004f48 <HAL_DMA_Init+0x1c0>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d040      	beq.n	8004e40 <HAL_DMA_Init+0xb8>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a62      	ldr	r2, [pc, #392]	; (8004f4c <HAL_DMA_Init+0x1c4>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d03b      	beq.n	8004e40 <HAL_DMA_Init+0xb8>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a60      	ldr	r2, [pc, #384]	; (8004f50 <HAL_DMA_Init+0x1c8>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d036      	beq.n	8004e40 <HAL_DMA_Init+0xb8>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a5f      	ldr	r2, [pc, #380]	; (8004f54 <HAL_DMA_Init+0x1cc>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d031      	beq.n	8004e40 <HAL_DMA_Init+0xb8>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a5d      	ldr	r2, [pc, #372]	; (8004f58 <HAL_DMA_Init+0x1d0>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d02c      	beq.n	8004e40 <HAL_DMA_Init+0xb8>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a5c      	ldr	r2, [pc, #368]	; (8004f5c <HAL_DMA_Init+0x1d4>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d027      	beq.n	8004e40 <HAL_DMA_Init+0xb8>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a5a      	ldr	r2, [pc, #360]	; (8004f60 <HAL_DMA_Init+0x1d8>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d022      	beq.n	8004e40 <HAL_DMA_Init+0xb8>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a59      	ldr	r2, [pc, #356]	; (8004f64 <HAL_DMA_Init+0x1dc>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d01d      	beq.n	8004e40 <HAL_DMA_Init+0xb8>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a57      	ldr	r2, [pc, #348]	; (8004f68 <HAL_DMA_Init+0x1e0>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d018      	beq.n	8004e40 <HAL_DMA_Init+0xb8>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a56      	ldr	r2, [pc, #344]	; (8004f6c <HAL_DMA_Init+0x1e4>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d013      	beq.n	8004e40 <HAL_DMA_Init+0xb8>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a54      	ldr	r2, [pc, #336]	; (8004f70 <HAL_DMA_Init+0x1e8>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d00e      	beq.n	8004e40 <HAL_DMA_Init+0xb8>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a53      	ldr	r2, [pc, #332]	; (8004f74 <HAL_DMA_Init+0x1ec>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d009      	beq.n	8004e40 <HAL_DMA_Init+0xb8>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a51      	ldr	r2, [pc, #324]	; (8004f78 <HAL_DMA_Init+0x1f0>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d004      	beq.n	8004e40 <HAL_DMA_Init+0xb8>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a50      	ldr	r2, [pc, #320]	; (8004f7c <HAL_DMA_Init+0x1f4>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d101      	bne.n	8004e44 <HAL_DMA_Init+0xbc>
 8004e40:	2301      	movs	r3, #1
 8004e42:	e000      	b.n	8004e46 <HAL_DMA_Init+0xbe>
 8004e44:	2300      	movs	r3, #0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	f000 813c 	beq.w	80050c4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2202      	movs	r2, #2
 8004e50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a37      	ldr	r2, [pc, #220]	; (8004f40 <HAL_DMA_Init+0x1b8>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d04a      	beq.n	8004efc <HAL_DMA_Init+0x174>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a36      	ldr	r2, [pc, #216]	; (8004f44 <HAL_DMA_Init+0x1bc>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d045      	beq.n	8004efc <HAL_DMA_Init+0x174>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a34      	ldr	r2, [pc, #208]	; (8004f48 <HAL_DMA_Init+0x1c0>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d040      	beq.n	8004efc <HAL_DMA_Init+0x174>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a33      	ldr	r2, [pc, #204]	; (8004f4c <HAL_DMA_Init+0x1c4>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d03b      	beq.n	8004efc <HAL_DMA_Init+0x174>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a31      	ldr	r2, [pc, #196]	; (8004f50 <HAL_DMA_Init+0x1c8>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d036      	beq.n	8004efc <HAL_DMA_Init+0x174>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a30      	ldr	r2, [pc, #192]	; (8004f54 <HAL_DMA_Init+0x1cc>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d031      	beq.n	8004efc <HAL_DMA_Init+0x174>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a2e      	ldr	r2, [pc, #184]	; (8004f58 <HAL_DMA_Init+0x1d0>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d02c      	beq.n	8004efc <HAL_DMA_Init+0x174>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a2d      	ldr	r2, [pc, #180]	; (8004f5c <HAL_DMA_Init+0x1d4>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d027      	beq.n	8004efc <HAL_DMA_Init+0x174>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a2b      	ldr	r2, [pc, #172]	; (8004f60 <HAL_DMA_Init+0x1d8>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d022      	beq.n	8004efc <HAL_DMA_Init+0x174>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a2a      	ldr	r2, [pc, #168]	; (8004f64 <HAL_DMA_Init+0x1dc>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d01d      	beq.n	8004efc <HAL_DMA_Init+0x174>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a28      	ldr	r2, [pc, #160]	; (8004f68 <HAL_DMA_Init+0x1e0>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d018      	beq.n	8004efc <HAL_DMA_Init+0x174>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a27      	ldr	r2, [pc, #156]	; (8004f6c <HAL_DMA_Init+0x1e4>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d013      	beq.n	8004efc <HAL_DMA_Init+0x174>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a25      	ldr	r2, [pc, #148]	; (8004f70 <HAL_DMA_Init+0x1e8>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d00e      	beq.n	8004efc <HAL_DMA_Init+0x174>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a24      	ldr	r2, [pc, #144]	; (8004f74 <HAL_DMA_Init+0x1ec>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d009      	beq.n	8004efc <HAL_DMA_Init+0x174>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a22      	ldr	r2, [pc, #136]	; (8004f78 <HAL_DMA_Init+0x1f0>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d004      	beq.n	8004efc <HAL_DMA_Init+0x174>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a21      	ldr	r2, [pc, #132]	; (8004f7c <HAL_DMA_Init+0x1f4>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d108      	bne.n	8004f0e <HAL_DMA_Init+0x186>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f022 0201 	bic.w	r2, r2, #1
 8004f0a:	601a      	str	r2, [r3, #0]
 8004f0c:	e007      	b.n	8004f1e <HAL_DMA_Init+0x196>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f022 0201 	bic.w	r2, r2, #1
 8004f1c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004f1e:	e02f      	b.n	8004f80 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f20:	f7ff fe16 	bl	8004b50 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	2b05      	cmp	r3, #5
 8004f2c:	d928      	bls.n	8004f80 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2220      	movs	r2, #32
 8004f32:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2203      	movs	r2, #3
 8004f38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e244      	b.n	80053ca <HAL_DMA_Init+0x642>
 8004f40:	40020010 	.word	0x40020010
 8004f44:	40020028 	.word	0x40020028
 8004f48:	40020040 	.word	0x40020040
 8004f4c:	40020058 	.word	0x40020058
 8004f50:	40020070 	.word	0x40020070
 8004f54:	40020088 	.word	0x40020088
 8004f58:	400200a0 	.word	0x400200a0
 8004f5c:	400200b8 	.word	0x400200b8
 8004f60:	40020410 	.word	0x40020410
 8004f64:	40020428 	.word	0x40020428
 8004f68:	40020440 	.word	0x40020440
 8004f6c:	40020458 	.word	0x40020458
 8004f70:	40020470 	.word	0x40020470
 8004f74:	40020488 	.word	0x40020488
 8004f78:	400204a0 	.word	0x400204a0
 8004f7c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 0301 	and.w	r3, r3, #1
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d1c8      	bne.n	8004f20 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	4b84      	ldr	r3, [pc, #528]	; (80051ac <HAL_DMA_Init+0x424>)
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004fa6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fb2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fbe:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a1b      	ldr	r3, [r3, #32]
 8004fc4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004fc6:	697a      	ldr	r2, [r7, #20]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd0:	2b04      	cmp	r3, #4
 8004fd2:	d107      	bne.n	8004fe4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	2b28      	cmp	r3, #40	; 0x28
 8004fea:	d903      	bls.n	8004ff4 <HAL_DMA_Init+0x26c>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	2b2e      	cmp	r3, #46	; 0x2e
 8004ff2:	d91f      	bls.n	8005034 <HAL_DMA_Init+0x2ac>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	2b3e      	cmp	r3, #62	; 0x3e
 8004ffa:	d903      	bls.n	8005004 <HAL_DMA_Init+0x27c>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	2b42      	cmp	r3, #66	; 0x42
 8005002:	d917      	bls.n	8005034 <HAL_DMA_Init+0x2ac>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	2b46      	cmp	r3, #70	; 0x46
 800500a:	d903      	bls.n	8005014 <HAL_DMA_Init+0x28c>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	2b48      	cmp	r3, #72	; 0x48
 8005012:	d90f      	bls.n	8005034 <HAL_DMA_Init+0x2ac>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	2b4e      	cmp	r3, #78	; 0x4e
 800501a:	d903      	bls.n	8005024 <HAL_DMA_Init+0x29c>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	2b52      	cmp	r3, #82	; 0x52
 8005022:	d907      	bls.n	8005034 <HAL_DMA_Init+0x2ac>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	2b73      	cmp	r3, #115	; 0x73
 800502a:	d905      	bls.n	8005038 <HAL_DMA_Init+0x2b0>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	2b77      	cmp	r3, #119	; 0x77
 8005032:	d801      	bhi.n	8005038 <HAL_DMA_Init+0x2b0>
 8005034:	2301      	movs	r3, #1
 8005036:	e000      	b.n	800503a <HAL_DMA_Init+0x2b2>
 8005038:	2300      	movs	r3, #0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d003      	beq.n	8005046 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005044:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	697a      	ldr	r2, [r7, #20]
 800504c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	695b      	ldr	r3, [r3, #20]
 8005054:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	f023 0307 	bic.w	r3, r3, #7
 800505c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	4313      	orrs	r3, r2
 8005066:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506c:	2b04      	cmp	r3, #4
 800506e:	d117      	bne.n	80050a0 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005074:	697a      	ldr	r2, [r7, #20]
 8005076:	4313      	orrs	r3, r2
 8005078:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00e      	beq.n	80050a0 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f002 fb30 	bl	80076e8 <DMA_CheckFifoParam>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d008      	beq.n	80050a0 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2240      	movs	r2, #64	; 0x40
 8005092:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e194      	b.n	80053ca <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f002 fa6b 	bl	8007584 <DMA_CalcBaseAndBitshift>
 80050ae:	4603      	mov	r3, r0
 80050b0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050b6:	f003 031f 	and.w	r3, r3, #31
 80050ba:	223f      	movs	r2, #63	; 0x3f
 80050bc:	409a      	lsls	r2, r3
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	609a      	str	r2, [r3, #8]
 80050c2:	e0ca      	b.n	800525a <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a39      	ldr	r2, [pc, #228]	; (80051b0 <HAL_DMA_Init+0x428>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d022      	beq.n	8005114 <HAL_DMA_Init+0x38c>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a38      	ldr	r2, [pc, #224]	; (80051b4 <HAL_DMA_Init+0x42c>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d01d      	beq.n	8005114 <HAL_DMA_Init+0x38c>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a36      	ldr	r2, [pc, #216]	; (80051b8 <HAL_DMA_Init+0x430>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d018      	beq.n	8005114 <HAL_DMA_Init+0x38c>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a35      	ldr	r2, [pc, #212]	; (80051bc <HAL_DMA_Init+0x434>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d013      	beq.n	8005114 <HAL_DMA_Init+0x38c>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a33      	ldr	r2, [pc, #204]	; (80051c0 <HAL_DMA_Init+0x438>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d00e      	beq.n	8005114 <HAL_DMA_Init+0x38c>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a32      	ldr	r2, [pc, #200]	; (80051c4 <HAL_DMA_Init+0x43c>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d009      	beq.n	8005114 <HAL_DMA_Init+0x38c>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a30      	ldr	r2, [pc, #192]	; (80051c8 <HAL_DMA_Init+0x440>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d004      	beq.n	8005114 <HAL_DMA_Init+0x38c>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a2f      	ldr	r2, [pc, #188]	; (80051cc <HAL_DMA_Init+0x444>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d101      	bne.n	8005118 <HAL_DMA_Init+0x390>
 8005114:	2301      	movs	r3, #1
 8005116:	e000      	b.n	800511a <HAL_DMA_Init+0x392>
 8005118:	2300      	movs	r3, #0
 800511a:	2b00      	cmp	r3, #0
 800511c:	f000 8094 	beq.w	8005248 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a22      	ldr	r2, [pc, #136]	; (80051b0 <HAL_DMA_Init+0x428>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d021      	beq.n	800516e <HAL_DMA_Init+0x3e6>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a21      	ldr	r2, [pc, #132]	; (80051b4 <HAL_DMA_Init+0x42c>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d01c      	beq.n	800516e <HAL_DMA_Init+0x3e6>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a1f      	ldr	r2, [pc, #124]	; (80051b8 <HAL_DMA_Init+0x430>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d017      	beq.n	800516e <HAL_DMA_Init+0x3e6>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a1e      	ldr	r2, [pc, #120]	; (80051bc <HAL_DMA_Init+0x434>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d012      	beq.n	800516e <HAL_DMA_Init+0x3e6>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a1c      	ldr	r2, [pc, #112]	; (80051c0 <HAL_DMA_Init+0x438>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d00d      	beq.n	800516e <HAL_DMA_Init+0x3e6>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a1b      	ldr	r2, [pc, #108]	; (80051c4 <HAL_DMA_Init+0x43c>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d008      	beq.n	800516e <HAL_DMA_Init+0x3e6>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a19      	ldr	r2, [pc, #100]	; (80051c8 <HAL_DMA_Init+0x440>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d003      	beq.n	800516e <HAL_DMA_Init+0x3e6>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a18      	ldr	r2, [pc, #96]	; (80051cc <HAL_DMA_Init+0x444>)
 800516c:	4293      	cmp	r3, r2
 800516e:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2202      	movs	r2, #2
 8005174:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005188:	697a      	ldr	r2, [r7, #20]
 800518a:	4b11      	ldr	r3, [pc, #68]	; (80051d0 <HAL_DMA_Init+0x448>)
 800518c:	4013      	ands	r3, r2
 800518e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	2b40      	cmp	r3, #64	; 0x40
 8005196:	d01d      	beq.n	80051d4 <HAL_DMA_Init+0x44c>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	2b80      	cmp	r3, #128	; 0x80
 800519e:	d102      	bne.n	80051a6 <HAL_DMA_Init+0x41e>
 80051a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80051a4:	e017      	b.n	80051d6 <HAL_DMA_Init+0x44e>
 80051a6:	2300      	movs	r3, #0
 80051a8:	e015      	b.n	80051d6 <HAL_DMA_Init+0x44e>
 80051aa:	bf00      	nop
 80051ac:	fe10803f 	.word	0xfe10803f
 80051b0:	58025408 	.word	0x58025408
 80051b4:	5802541c 	.word	0x5802541c
 80051b8:	58025430 	.word	0x58025430
 80051bc:	58025444 	.word	0x58025444
 80051c0:	58025458 	.word	0x58025458
 80051c4:	5802546c 	.word	0x5802546c
 80051c8:	58025480 	.word	0x58025480
 80051cc:	58025494 	.word	0x58025494
 80051d0:	fffe000f 	.word	0xfffe000f
 80051d4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	68d2      	ldr	r2, [r2, #12]
 80051da:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80051dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80051e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80051ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80051f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	69db      	ldr	r3, [r3, #28]
 80051fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80051fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005204:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	4313      	orrs	r3, r2
 800520a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	697a      	ldr	r2, [r7, #20]
 8005212:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	461a      	mov	r2, r3
 800521a:	4b6e      	ldr	r3, [pc, #440]	; (80053d4 <HAL_DMA_Init+0x64c>)
 800521c:	4413      	add	r3, r2
 800521e:	4a6e      	ldr	r2, [pc, #440]	; (80053d8 <HAL_DMA_Init+0x650>)
 8005220:	fba2 2303 	umull	r2, r3, r2, r3
 8005224:	091b      	lsrs	r3, r3, #4
 8005226:	009a      	lsls	r2, r3, #2
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f002 f9a9 	bl	8007584 <DMA_CalcBaseAndBitshift>
 8005232:	4603      	mov	r3, r0
 8005234:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800523a:	f003 031f 	and.w	r3, r3, #31
 800523e:	2201      	movs	r2, #1
 8005240:	409a      	lsls	r2, r3
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	605a      	str	r2, [r3, #4]
 8005246:	e008      	b.n	800525a <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2240      	movs	r2, #64	; 0x40
 800524c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2203      	movs	r2, #3
 8005252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e0b7      	b.n	80053ca <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a5f      	ldr	r2, [pc, #380]	; (80053dc <HAL_DMA_Init+0x654>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d072      	beq.n	800534a <HAL_DMA_Init+0x5c2>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a5d      	ldr	r2, [pc, #372]	; (80053e0 <HAL_DMA_Init+0x658>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d06d      	beq.n	800534a <HAL_DMA_Init+0x5c2>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a5c      	ldr	r2, [pc, #368]	; (80053e4 <HAL_DMA_Init+0x65c>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d068      	beq.n	800534a <HAL_DMA_Init+0x5c2>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a5a      	ldr	r2, [pc, #360]	; (80053e8 <HAL_DMA_Init+0x660>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d063      	beq.n	800534a <HAL_DMA_Init+0x5c2>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a59      	ldr	r2, [pc, #356]	; (80053ec <HAL_DMA_Init+0x664>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d05e      	beq.n	800534a <HAL_DMA_Init+0x5c2>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a57      	ldr	r2, [pc, #348]	; (80053f0 <HAL_DMA_Init+0x668>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d059      	beq.n	800534a <HAL_DMA_Init+0x5c2>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a56      	ldr	r2, [pc, #344]	; (80053f4 <HAL_DMA_Init+0x66c>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d054      	beq.n	800534a <HAL_DMA_Init+0x5c2>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a54      	ldr	r2, [pc, #336]	; (80053f8 <HAL_DMA_Init+0x670>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d04f      	beq.n	800534a <HAL_DMA_Init+0x5c2>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a53      	ldr	r2, [pc, #332]	; (80053fc <HAL_DMA_Init+0x674>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d04a      	beq.n	800534a <HAL_DMA_Init+0x5c2>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a51      	ldr	r2, [pc, #324]	; (8005400 <HAL_DMA_Init+0x678>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d045      	beq.n	800534a <HAL_DMA_Init+0x5c2>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a50      	ldr	r2, [pc, #320]	; (8005404 <HAL_DMA_Init+0x67c>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d040      	beq.n	800534a <HAL_DMA_Init+0x5c2>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a4e      	ldr	r2, [pc, #312]	; (8005408 <HAL_DMA_Init+0x680>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d03b      	beq.n	800534a <HAL_DMA_Init+0x5c2>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a4d      	ldr	r2, [pc, #308]	; (800540c <HAL_DMA_Init+0x684>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d036      	beq.n	800534a <HAL_DMA_Init+0x5c2>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a4b      	ldr	r2, [pc, #300]	; (8005410 <HAL_DMA_Init+0x688>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d031      	beq.n	800534a <HAL_DMA_Init+0x5c2>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a4a      	ldr	r2, [pc, #296]	; (8005414 <HAL_DMA_Init+0x68c>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d02c      	beq.n	800534a <HAL_DMA_Init+0x5c2>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a48      	ldr	r2, [pc, #288]	; (8005418 <HAL_DMA_Init+0x690>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d027      	beq.n	800534a <HAL_DMA_Init+0x5c2>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a47      	ldr	r2, [pc, #284]	; (800541c <HAL_DMA_Init+0x694>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d022      	beq.n	800534a <HAL_DMA_Init+0x5c2>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a45      	ldr	r2, [pc, #276]	; (8005420 <HAL_DMA_Init+0x698>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d01d      	beq.n	800534a <HAL_DMA_Init+0x5c2>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a44      	ldr	r2, [pc, #272]	; (8005424 <HAL_DMA_Init+0x69c>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d018      	beq.n	800534a <HAL_DMA_Init+0x5c2>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a42      	ldr	r2, [pc, #264]	; (8005428 <HAL_DMA_Init+0x6a0>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d013      	beq.n	800534a <HAL_DMA_Init+0x5c2>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a41      	ldr	r2, [pc, #260]	; (800542c <HAL_DMA_Init+0x6a4>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d00e      	beq.n	800534a <HAL_DMA_Init+0x5c2>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a3f      	ldr	r2, [pc, #252]	; (8005430 <HAL_DMA_Init+0x6a8>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d009      	beq.n	800534a <HAL_DMA_Init+0x5c2>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a3e      	ldr	r2, [pc, #248]	; (8005434 <HAL_DMA_Init+0x6ac>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d004      	beq.n	800534a <HAL_DMA_Init+0x5c2>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a3c      	ldr	r2, [pc, #240]	; (8005438 <HAL_DMA_Init+0x6b0>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d101      	bne.n	800534e <HAL_DMA_Init+0x5c6>
 800534a:	2301      	movs	r3, #1
 800534c:	e000      	b.n	8005350 <HAL_DMA_Init+0x5c8>
 800534e:	2300      	movs	r3, #0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d032      	beq.n	80053ba <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f002 fa43 	bl	80077e0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	2b80      	cmp	r3, #128	; 0x80
 8005360:	d102      	bne.n	8005368 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685a      	ldr	r2, [r3, #4]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005370:	b2d2      	uxtb	r2, r2
 8005372:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800537c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d010      	beq.n	80053a8 <HAL_DMA_Init+0x620>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	2b08      	cmp	r3, #8
 800538c:	d80c      	bhi.n	80053a8 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f002 fac0 	bl	8007914 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005398:	2200      	movs	r2, #0
 800539a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80053a4:	605a      	str	r2, [r3, #4]
 80053a6:	e008      	b.n	80053ba <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3718      	adds	r7, #24
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	a7fdabf8 	.word	0xa7fdabf8
 80053d8:	cccccccd 	.word	0xcccccccd
 80053dc:	40020010 	.word	0x40020010
 80053e0:	40020028 	.word	0x40020028
 80053e4:	40020040 	.word	0x40020040
 80053e8:	40020058 	.word	0x40020058
 80053ec:	40020070 	.word	0x40020070
 80053f0:	40020088 	.word	0x40020088
 80053f4:	400200a0 	.word	0x400200a0
 80053f8:	400200b8 	.word	0x400200b8
 80053fc:	40020410 	.word	0x40020410
 8005400:	40020428 	.word	0x40020428
 8005404:	40020440 	.word	0x40020440
 8005408:	40020458 	.word	0x40020458
 800540c:	40020470 	.word	0x40020470
 8005410:	40020488 	.word	0x40020488
 8005414:	400204a0 	.word	0x400204a0
 8005418:	400204b8 	.word	0x400204b8
 800541c:	58025408 	.word	0x58025408
 8005420:	5802541c 	.word	0x5802541c
 8005424:	58025430 	.word	0x58025430
 8005428:	58025444 	.word	0x58025444
 800542c:	58025458 	.word	0x58025458
 8005430:	5802546c 	.word	0x5802546c
 8005434:	58025480 	.word	0x58025480
 8005438:	58025494 	.word	0x58025494

0800543c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b086      	sub	sp, #24
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
 8005448:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800544a:	2300      	movs	r3, #0
 800544c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d101      	bne.n	8005458 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e226      	b.n	80058a6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800545e:	2b01      	cmp	r3, #1
 8005460:	d101      	bne.n	8005466 <HAL_DMA_Start_IT+0x2a>
 8005462:	2302      	movs	r3, #2
 8005464:	e21f      	b.n	80058a6 <HAL_DMA_Start_IT+0x46a>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2201      	movs	r2, #1
 800546a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005474:	b2db      	uxtb	r3, r3
 8005476:	2b01      	cmp	r3, #1
 8005478:	f040 820a 	bne.w	8005890 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2202      	movs	r2, #2
 8005480:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a68      	ldr	r2, [pc, #416]	; (8005630 <HAL_DMA_Start_IT+0x1f4>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d04a      	beq.n	800552a <HAL_DMA_Start_IT+0xee>
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a66      	ldr	r2, [pc, #408]	; (8005634 <HAL_DMA_Start_IT+0x1f8>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d045      	beq.n	800552a <HAL_DMA_Start_IT+0xee>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a65      	ldr	r2, [pc, #404]	; (8005638 <HAL_DMA_Start_IT+0x1fc>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d040      	beq.n	800552a <HAL_DMA_Start_IT+0xee>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a63      	ldr	r2, [pc, #396]	; (800563c <HAL_DMA_Start_IT+0x200>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d03b      	beq.n	800552a <HAL_DMA_Start_IT+0xee>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a62      	ldr	r2, [pc, #392]	; (8005640 <HAL_DMA_Start_IT+0x204>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d036      	beq.n	800552a <HAL_DMA_Start_IT+0xee>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a60      	ldr	r2, [pc, #384]	; (8005644 <HAL_DMA_Start_IT+0x208>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d031      	beq.n	800552a <HAL_DMA_Start_IT+0xee>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a5f      	ldr	r2, [pc, #380]	; (8005648 <HAL_DMA_Start_IT+0x20c>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d02c      	beq.n	800552a <HAL_DMA_Start_IT+0xee>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a5d      	ldr	r2, [pc, #372]	; (800564c <HAL_DMA_Start_IT+0x210>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d027      	beq.n	800552a <HAL_DMA_Start_IT+0xee>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a5c      	ldr	r2, [pc, #368]	; (8005650 <HAL_DMA_Start_IT+0x214>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d022      	beq.n	800552a <HAL_DMA_Start_IT+0xee>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a5a      	ldr	r2, [pc, #360]	; (8005654 <HAL_DMA_Start_IT+0x218>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d01d      	beq.n	800552a <HAL_DMA_Start_IT+0xee>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a59      	ldr	r2, [pc, #356]	; (8005658 <HAL_DMA_Start_IT+0x21c>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d018      	beq.n	800552a <HAL_DMA_Start_IT+0xee>
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a57      	ldr	r2, [pc, #348]	; (800565c <HAL_DMA_Start_IT+0x220>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d013      	beq.n	800552a <HAL_DMA_Start_IT+0xee>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a56      	ldr	r2, [pc, #344]	; (8005660 <HAL_DMA_Start_IT+0x224>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d00e      	beq.n	800552a <HAL_DMA_Start_IT+0xee>
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a54      	ldr	r2, [pc, #336]	; (8005664 <HAL_DMA_Start_IT+0x228>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d009      	beq.n	800552a <HAL_DMA_Start_IT+0xee>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a53      	ldr	r2, [pc, #332]	; (8005668 <HAL_DMA_Start_IT+0x22c>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d004      	beq.n	800552a <HAL_DMA_Start_IT+0xee>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a51      	ldr	r2, [pc, #324]	; (800566c <HAL_DMA_Start_IT+0x230>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d108      	bne.n	800553c <HAL_DMA_Start_IT+0x100>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f022 0201 	bic.w	r2, r2, #1
 8005538:	601a      	str	r2, [r3, #0]
 800553a:	e007      	b.n	800554c <HAL_DMA_Start_IT+0x110>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f022 0201 	bic.w	r2, r2, #1
 800554a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	68b9      	ldr	r1, [r7, #8]
 8005552:	68f8      	ldr	r0, [r7, #12]
 8005554:	f001 fe6a 	bl	800722c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a34      	ldr	r2, [pc, #208]	; (8005630 <HAL_DMA_Start_IT+0x1f4>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d04a      	beq.n	80055f8 <HAL_DMA_Start_IT+0x1bc>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a33      	ldr	r2, [pc, #204]	; (8005634 <HAL_DMA_Start_IT+0x1f8>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d045      	beq.n	80055f8 <HAL_DMA_Start_IT+0x1bc>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a31      	ldr	r2, [pc, #196]	; (8005638 <HAL_DMA_Start_IT+0x1fc>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d040      	beq.n	80055f8 <HAL_DMA_Start_IT+0x1bc>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a30      	ldr	r2, [pc, #192]	; (800563c <HAL_DMA_Start_IT+0x200>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d03b      	beq.n	80055f8 <HAL_DMA_Start_IT+0x1bc>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a2e      	ldr	r2, [pc, #184]	; (8005640 <HAL_DMA_Start_IT+0x204>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d036      	beq.n	80055f8 <HAL_DMA_Start_IT+0x1bc>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a2d      	ldr	r2, [pc, #180]	; (8005644 <HAL_DMA_Start_IT+0x208>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d031      	beq.n	80055f8 <HAL_DMA_Start_IT+0x1bc>
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a2b      	ldr	r2, [pc, #172]	; (8005648 <HAL_DMA_Start_IT+0x20c>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d02c      	beq.n	80055f8 <HAL_DMA_Start_IT+0x1bc>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a2a      	ldr	r2, [pc, #168]	; (800564c <HAL_DMA_Start_IT+0x210>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d027      	beq.n	80055f8 <HAL_DMA_Start_IT+0x1bc>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a28      	ldr	r2, [pc, #160]	; (8005650 <HAL_DMA_Start_IT+0x214>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d022      	beq.n	80055f8 <HAL_DMA_Start_IT+0x1bc>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a27      	ldr	r2, [pc, #156]	; (8005654 <HAL_DMA_Start_IT+0x218>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d01d      	beq.n	80055f8 <HAL_DMA_Start_IT+0x1bc>
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a25      	ldr	r2, [pc, #148]	; (8005658 <HAL_DMA_Start_IT+0x21c>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d018      	beq.n	80055f8 <HAL_DMA_Start_IT+0x1bc>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a24      	ldr	r2, [pc, #144]	; (800565c <HAL_DMA_Start_IT+0x220>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d013      	beq.n	80055f8 <HAL_DMA_Start_IT+0x1bc>
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a22      	ldr	r2, [pc, #136]	; (8005660 <HAL_DMA_Start_IT+0x224>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d00e      	beq.n	80055f8 <HAL_DMA_Start_IT+0x1bc>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a21      	ldr	r2, [pc, #132]	; (8005664 <HAL_DMA_Start_IT+0x228>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d009      	beq.n	80055f8 <HAL_DMA_Start_IT+0x1bc>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a1f      	ldr	r2, [pc, #124]	; (8005668 <HAL_DMA_Start_IT+0x22c>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d004      	beq.n	80055f8 <HAL_DMA_Start_IT+0x1bc>
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a1e      	ldr	r2, [pc, #120]	; (800566c <HAL_DMA_Start_IT+0x230>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d101      	bne.n	80055fc <HAL_DMA_Start_IT+0x1c0>
 80055f8:	2301      	movs	r3, #1
 80055fa:	e000      	b.n	80055fe <HAL_DMA_Start_IT+0x1c2>
 80055fc:	2300      	movs	r3, #0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d036      	beq.n	8005670 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f023 021e 	bic.w	r2, r3, #30
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f042 0216 	orr.w	r2, r2, #22
 8005614:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561a:	2b00      	cmp	r3, #0
 800561c:	d03e      	beq.n	800569c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f042 0208 	orr.w	r2, r2, #8
 800562c:	601a      	str	r2, [r3, #0]
 800562e:	e035      	b.n	800569c <HAL_DMA_Start_IT+0x260>
 8005630:	40020010 	.word	0x40020010
 8005634:	40020028 	.word	0x40020028
 8005638:	40020040 	.word	0x40020040
 800563c:	40020058 	.word	0x40020058
 8005640:	40020070 	.word	0x40020070
 8005644:	40020088 	.word	0x40020088
 8005648:	400200a0 	.word	0x400200a0
 800564c:	400200b8 	.word	0x400200b8
 8005650:	40020410 	.word	0x40020410
 8005654:	40020428 	.word	0x40020428
 8005658:	40020440 	.word	0x40020440
 800565c:	40020458 	.word	0x40020458
 8005660:	40020470 	.word	0x40020470
 8005664:	40020488 	.word	0x40020488
 8005668:	400204a0 	.word	0x400204a0
 800566c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f023 020e 	bic.w	r2, r3, #14
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f042 020a 	orr.w	r2, r2, #10
 8005682:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005688:	2b00      	cmp	r3, #0
 800568a:	d007      	beq.n	800569c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f042 0204 	orr.w	r2, r2, #4
 800569a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a83      	ldr	r2, [pc, #524]	; (80058b0 <HAL_DMA_Start_IT+0x474>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d072      	beq.n	800578c <HAL_DMA_Start_IT+0x350>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a82      	ldr	r2, [pc, #520]	; (80058b4 <HAL_DMA_Start_IT+0x478>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d06d      	beq.n	800578c <HAL_DMA_Start_IT+0x350>
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a80      	ldr	r2, [pc, #512]	; (80058b8 <HAL_DMA_Start_IT+0x47c>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d068      	beq.n	800578c <HAL_DMA_Start_IT+0x350>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a7f      	ldr	r2, [pc, #508]	; (80058bc <HAL_DMA_Start_IT+0x480>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d063      	beq.n	800578c <HAL_DMA_Start_IT+0x350>
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a7d      	ldr	r2, [pc, #500]	; (80058c0 <HAL_DMA_Start_IT+0x484>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d05e      	beq.n	800578c <HAL_DMA_Start_IT+0x350>
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a7c      	ldr	r2, [pc, #496]	; (80058c4 <HAL_DMA_Start_IT+0x488>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d059      	beq.n	800578c <HAL_DMA_Start_IT+0x350>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a7a      	ldr	r2, [pc, #488]	; (80058c8 <HAL_DMA_Start_IT+0x48c>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d054      	beq.n	800578c <HAL_DMA_Start_IT+0x350>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a79      	ldr	r2, [pc, #484]	; (80058cc <HAL_DMA_Start_IT+0x490>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d04f      	beq.n	800578c <HAL_DMA_Start_IT+0x350>
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a77      	ldr	r2, [pc, #476]	; (80058d0 <HAL_DMA_Start_IT+0x494>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d04a      	beq.n	800578c <HAL_DMA_Start_IT+0x350>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a76      	ldr	r2, [pc, #472]	; (80058d4 <HAL_DMA_Start_IT+0x498>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d045      	beq.n	800578c <HAL_DMA_Start_IT+0x350>
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a74      	ldr	r2, [pc, #464]	; (80058d8 <HAL_DMA_Start_IT+0x49c>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d040      	beq.n	800578c <HAL_DMA_Start_IT+0x350>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a73      	ldr	r2, [pc, #460]	; (80058dc <HAL_DMA_Start_IT+0x4a0>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d03b      	beq.n	800578c <HAL_DMA_Start_IT+0x350>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a71      	ldr	r2, [pc, #452]	; (80058e0 <HAL_DMA_Start_IT+0x4a4>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d036      	beq.n	800578c <HAL_DMA_Start_IT+0x350>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a70      	ldr	r2, [pc, #448]	; (80058e4 <HAL_DMA_Start_IT+0x4a8>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d031      	beq.n	800578c <HAL_DMA_Start_IT+0x350>
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a6e      	ldr	r2, [pc, #440]	; (80058e8 <HAL_DMA_Start_IT+0x4ac>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d02c      	beq.n	800578c <HAL_DMA_Start_IT+0x350>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a6d      	ldr	r2, [pc, #436]	; (80058ec <HAL_DMA_Start_IT+0x4b0>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d027      	beq.n	800578c <HAL_DMA_Start_IT+0x350>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a6b      	ldr	r2, [pc, #428]	; (80058f0 <HAL_DMA_Start_IT+0x4b4>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d022      	beq.n	800578c <HAL_DMA_Start_IT+0x350>
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a6a      	ldr	r2, [pc, #424]	; (80058f4 <HAL_DMA_Start_IT+0x4b8>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d01d      	beq.n	800578c <HAL_DMA_Start_IT+0x350>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a68      	ldr	r2, [pc, #416]	; (80058f8 <HAL_DMA_Start_IT+0x4bc>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d018      	beq.n	800578c <HAL_DMA_Start_IT+0x350>
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a67      	ldr	r2, [pc, #412]	; (80058fc <HAL_DMA_Start_IT+0x4c0>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d013      	beq.n	800578c <HAL_DMA_Start_IT+0x350>
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a65      	ldr	r2, [pc, #404]	; (8005900 <HAL_DMA_Start_IT+0x4c4>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d00e      	beq.n	800578c <HAL_DMA_Start_IT+0x350>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a64      	ldr	r2, [pc, #400]	; (8005904 <HAL_DMA_Start_IT+0x4c8>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d009      	beq.n	800578c <HAL_DMA_Start_IT+0x350>
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a62      	ldr	r2, [pc, #392]	; (8005908 <HAL_DMA_Start_IT+0x4cc>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d004      	beq.n	800578c <HAL_DMA_Start_IT+0x350>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a61      	ldr	r2, [pc, #388]	; (800590c <HAL_DMA_Start_IT+0x4d0>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d101      	bne.n	8005790 <HAL_DMA_Start_IT+0x354>
 800578c:	2301      	movs	r3, #1
 800578e:	e000      	b.n	8005792 <HAL_DMA_Start_IT+0x356>
 8005790:	2300      	movs	r3, #0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d01a      	beq.n	80057cc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d007      	beq.n	80057b4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057b2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d007      	beq.n	80057cc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057ca:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a37      	ldr	r2, [pc, #220]	; (80058b0 <HAL_DMA_Start_IT+0x474>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d04a      	beq.n	800586c <HAL_DMA_Start_IT+0x430>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a36      	ldr	r2, [pc, #216]	; (80058b4 <HAL_DMA_Start_IT+0x478>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d045      	beq.n	800586c <HAL_DMA_Start_IT+0x430>
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a34      	ldr	r2, [pc, #208]	; (80058b8 <HAL_DMA_Start_IT+0x47c>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d040      	beq.n	800586c <HAL_DMA_Start_IT+0x430>
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a33      	ldr	r2, [pc, #204]	; (80058bc <HAL_DMA_Start_IT+0x480>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d03b      	beq.n	800586c <HAL_DMA_Start_IT+0x430>
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a31      	ldr	r2, [pc, #196]	; (80058c0 <HAL_DMA_Start_IT+0x484>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d036      	beq.n	800586c <HAL_DMA_Start_IT+0x430>
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a30      	ldr	r2, [pc, #192]	; (80058c4 <HAL_DMA_Start_IT+0x488>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d031      	beq.n	800586c <HAL_DMA_Start_IT+0x430>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a2e      	ldr	r2, [pc, #184]	; (80058c8 <HAL_DMA_Start_IT+0x48c>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d02c      	beq.n	800586c <HAL_DMA_Start_IT+0x430>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a2d      	ldr	r2, [pc, #180]	; (80058cc <HAL_DMA_Start_IT+0x490>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d027      	beq.n	800586c <HAL_DMA_Start_IT+0x430>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a2b      	ldr	r2, [pc, #172]	; (80058d0 <HAL_DMA_Start_IT+0x494>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d022      	beq.n	800586c <HAL_DMA_Start_IT+0x430>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a2a      	ldr	r2, [pc, #168]	; (80058d4 <HAL_DMA_Start_IT+0x498>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d01d      	beq.n	800586c <HAL_DMA_Start_IT+0x430>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a28      	ldr	r2, [pc, #160]	; (80058d8 <HAL_DMA_Start_IT+0x49c>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d018      	beq.n	800586c <HAL_DMA_Start_IT+0x430>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a27      	ldr	r2, [pc, #156]	; (80058dc <HAL_DMA_Start_IT+0x4a0>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d013      	beq.n	800586c <HAL_DMA_Start_IT+0x430>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a25      	ldr	r2, [pc, #148]	; (80058e0 <HAL_DMA_Start_IT+0x4a4>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d00e      	beq.n	800586c <HAL_DMA_Start_IT+0x430>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a24      	ldr	r2, [pc, #144]	; (80058e4 <HAL_DMA_Start_IT+0x4a8>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d009      	beq.n	800586c <HAL_DMA_Start_IT+0x430>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a22      	ldr	r2, [pc, #136]	; (80058e8 <HAL_DMA_Start_IT+0x4ac>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d004      	beq.n	800586c <HAL_DMA_Start_IT+0x430>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a21      	ldr	r2, [pc, #132]	; (80058ec <HAL_DMA_Start_IT+0x4b0>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d108      	bne.n	800587e <HAL_DMA_Start_IT+0x442>
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f042 0201 	orr.w	r2, r2, #1
 800587a:	601a      	str	r2, [r3, #0]
 800587c:	e012      	b.n	80058a4 <HAL_DMA_Start_IT+0x468>
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f042 0201 	orr.w	r2, r2, #1
 800588c:	601a      	str	r2, [r3, #0]
 800588e:	e009      	b.n	80058a4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005896:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80058a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3718      	adds	r7, #24
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	40020010 	.word	0x40020010
 80058b4:	40020028 	.word	0x40020028
 80058b8:	40020040 	.word	0x40020040
 80058bc:	40020058 	.word	0x40020058
 80058c0:	40020070 	.word	0x40020070
 80058c4:	40020088 	.word	0x40020088
 80058c8:	400200a0 	.word	0x400200a0
 80058cc:	400200b8 	.word	0x400200b8
 80058d0:	40020410 	.word	0x40020410
 80058d4:	40020428 	.word	0x40020428
 80058d8:	40020440 	.word	0x40020440
 80058dc:	40020458 	.word	0x40020458
 80058e0:	40020470 	.word	0x40020470
 80058e4:	40020488 	.word	0x40020488
 80058e8:	400204a0 	.word	0x400204a0
 80058ec:	400204b8 	.word	0x400204b8
 80058f0:	58025408 	.word	0x58025408
 80058f4:	5802541c 	.word	0x5802541c
 80058f8:	58025430 	.word	0x58025430
 80058fc:	58025444 	.word	0x58025444
 8005900:	58025458 	.word	0x58025458
 8005904:	5802546c 	.word	0x5802546c
 8005908:	58025480 	.word	0x58025480
 800590c:	58025494 	.word	0x58025494

08005910 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b086      	sub	sp, #24
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005918:	f7ff f91a 	bl	8004b50 <HAL_GetTick>
 800591c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d101      	bne.n	8005928 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e2dc      	b.n	8005ee2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800592e:	b2db      	uxtb	r3, r3
 8005930:	2b02      	cmp	r3, #2
 8005932:	d008      	beq.n	8005946 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2280      	movs	r2, #128	; 0x80
 8005938:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e2cd      	b.n	8005ee2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a76      	ldr	r2, [pc, #472]	; (8005b24 <HAL_DMA_Abort+0x214>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d04a      	beq.n	80059e6 <HAL_DMA_Abort+0xd6>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a74      	ldr	r2, [pc, #464]	; (8005b28 <HAL_DMA_Abort+0x218>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d045      	beq.n	80059e6 <HAL_DMA_Abort+0xd6>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a73      	ldr	r2, [pc, #460]	; (8005b2c <HAL_DMA_Abort+0x21c>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d040      	beq.n	80059e6 <HAL_DMA_Abort+0xd6>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a71      	ldr	r2, [pc, #452]	; (8005b30 <HAL_DMA_Abort+0x220>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d03b      	beq.n	80059e6 <HAL_DMA_Abort+0xd6>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a70      	ldr	r2, [pc, #448]	; (8005b34 <HAL_DMA_Abort+0x224>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d036      	beq.n	80059e6 <HAL_DMA_Abort+0xd6>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a6e      	ldr	r2, [pc, #440]	; (8005b38 <HAL_DMA_Abort+0x228>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d031      	beq.n	80059e6 <HAL_DMA_Abort+0xd6>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a6d      	ldr	r2, [pc, #436]	; (8005b3c <HAL_DMA_Abort+0x22c>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d02c      	beq.n	80059e6 <HAL_DMA_Abort+0xd6>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a6b      	ldr	r2, [pc, #428]	; (8005b40 <HAL_DMA_Abort+0x230>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d027      	beq.n	80059e6 <HAL_DMA_Abort+0xd6>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a6a      	ldr	r2, [pc, #424]	; (8005b44 <HAL_DMA_Abort+0x234>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d022      	beq.n	80059e6 <HAL_DMA_Abort+0xd6>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a68      	ldr	r2, [pc, #416]	; (8005b48 <HAL_DMA_Abort+0x238>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d01d      	beq.n	80059e6 <HAL_DMA_Abort+0xd6>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a67      	ldr	r2, [pc, #412]	; (8005b4c <HAL_DMA_Abort+0x23c>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d018      	beq.n	80059e6 <HAL_DMA_Abort+0xd6>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a65      	ldr	r2, [pc, #404]	; (8005b50 <HAL_DMA_Abort+0x240>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d013      	beq.n	80059e6 <HAL_DMA_Abort+0xd6>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a64      	ldr	r2, [pc, #400]	; (8005b54 <HAL_DMA_Abort+0x244>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d00e      	beq.n	80059e6 <HAL_DMA_Abort+0xd6>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a62      	ldr	r2, [pc, #392]	; (8005b58 <HAL_DMA_Abort+0x248>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d009      	beq.n	80059e6 <HAL_DMA_Abort+0xd6>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a61      	ldr	r2, [pc, #388]	; (8005b5c <HAL_DMA_Abort+0x24c>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d004      	beq.n	80059e6 <HAL_DMA_Abort+0xd6>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a5f      	ldr	r2, [pc, #380]	; (8005b60 <HAL_DMA_Abort+0x250>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d101      	bne.n	80059ea <HAL_DMA_Abort+0xda>
 80059e6:	2301      	movs	r3, #1
 80059e8:	e000      	b.n	80059ec <HAL_DMA_Abort+0xdc>
 80059ea:	2300      	movs	r3, #0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d013      	beq.n	8005a18 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f022 021e 	bic.w	r2, r2, #30
 80059fe:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	695a      	ldr	r2, [r3, #20]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a0e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	617b      	str	r3, [r7, #20]
 8005a16:	e00a      	b.n	8005a2e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f022 020e 	bic.w	r2, r2, #14
 8005a26:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a3c      	ldr	r2, [pc, #240]	; (8005b24 <HAL_DMA_Abort+0x214>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d072      	beq.n	8005b1e <HAL_DMA_Abort+0x20e>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a3a      	ldr	r2, [pc, #232]	; (8005b28 <HAL_DMA_Abort+0x218>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d06d      	beq.n	8005b1e <HAL_DMA_Abort+0x20e>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a39      	ldr	r2, [pc, #228]	; (8005b2c <HAL_DMA_Abort+0x21c>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d068      	beq.n	8005b1e <HAL_DMA_Abort+0x20e>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a37      	ldr	r2, [pc, #220]	; (8005b30 <HAL_DMA_Abort+0x220>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d063      	beq.n	8005b1e <HAL_DMA_Abort+0x20e>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a36      	ldr	r2, [pc, #216]	; (8005b34 <HAL_DMA_Abort+0x224>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d05e      	beq.n	8005b1e <HAL_DMA_Abort+0x20e>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a34      	ldr	r2, [pc, #208]	; (8005b38 <HAL_DMA_Abort+0x228>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d059      	beq.n	8005b1e <HAL_DMA_Abort+0x20e>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a33      	ldr	r2, [pc, #204]	; (8005b3c <HAL_DMA_Abort+0x22c>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d054      	beq.n	8005b1e <HAL_DMA_Abort+0x20e>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a31      	ldr	r2, [pc, #196]	; (8005b40 <HAL_DMA_Abort+0x230>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d04f      	beq.n	8005b1e <HAL_DMA_Abort+0x20e>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a30      	ldr	r2, [pc, #192]	; (8005b44 <HAL_DMA_Abort+0x234>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d04a      	beq.n	8005b1e <HAL_DMA_Abort+0x20e>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a2e      	ldr	r2, [pc, #184]	; (8005b48 <HAL_DMA_Abort+0x238>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d045      	beq.n	8005b1e <HAL_DMA_Abort+0x20e>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a2d      	ldr	r2, [pc, #180]	; (8005b4c <HAL_DMA_Abort+0x23c>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d040      	beq.n	8005b1e <HAL_DMA_Abort+0x20e>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a2b      	ldr	r2, [pc, #172]	; (8005b50 <HAL_DMA_Abort+0x240>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d03b      	beq.n	8005b1e <HAL_DMA_Abort+0x20e>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a2a      	ldr	r2, [pc, #168]	; (8005b54 <HAL_DMA_Abort+0x244>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d036      	beq.n	8005b1e <HAL_DMA_Abort+0x20e>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a28      	ldr	r2, [pc, #160]	; (8005b58 <HAL_DMA_Abort+0x248>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d031      	beq.n	8005b1e <HAL_DMA_Abort+0x20e>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a27      	ldr	r2, [pc, #156]	; (8005b5c <HAL_DMA_Abort+0x24c>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d02c      	beq.n	8005b1e <HAL_DMA_Abort+0x20e>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a25      	ldr	r2, [pc, #148]	; (8005b60 <HAL_DMA_Abort+0x250>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d027      	beq.n	8005b1e <HAL_DMA_Abort+0x20e>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a24      	ldr	r2, [pc, #144]	; (8005b64 <HAL_DMA_Abort+0x254>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d022      	beq.n	8005b1e <HAL_DMA_Abort+0x20e>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a22      	ldr	r2, [pc, #136]	; (8005b68 <HAL_DMA_Abort+0x258>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d01d      	beq.n	8005b1e <HAL_DMA_Abort+0x20e>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a21      	ldr	r2, [pc, #132]	; (8005b6c <HAL_DMA_Abort+0x25c>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d018      	beq.n	8005b1e <HAL_DMA_Abort+0x20e>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a1f      	ldr	r2, [pc, #124]	; (8005b70 <HAL_DMA_Abort+0x260>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d013      	beq.n	8005b1e <HAL_DMA_Abort+0x20e>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a1e      	ldr	r2, [pc, #120]	; (8005b74 <HAL_DMA_Abort+0x264>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d00e      	beq.n	8005b1e <HAL_DMA_Abort+0x20e>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a1c      	ldr	r2, [pc, #112]	; (8005b78 <HAL_DMA_Abort+0x268>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d009      	beq.n	8005b1e <HAL_DMA_Abort+0x20e>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a1b      	ldr	r2, [pc, #108]	; (8005b7c <HAL_DMA_Abort+0x26c>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d004      	beq.n	8005b1e <HAL_DMA_Abort+0x20e>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a19      	ldr	r2, [pc, #100]	; (8005b80 <HAL_DMA_Abort+0x270>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d132      	bne.n	8005b84 <HAL_DMA_Abort+0x274>
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e031      	b.n	8005b86 <HAL_DMA_Abort+0x276>
 8005b22:	bf00      	nop
 8005b24:	40020010 	.word	0x40020010
 8005b28:	40020028 	.word	0x40020028
 8005b2c:	40020040 	.word	0x40020040
 8005b30:	40020058 	.word	0x40020058
 8005b34:	40020070 	.word	0x40020070
 8005b38:	40020088 	.word	0x40020088
 8005b3c:	400200a0 	.word	0x400200a0
 8005b40:	400200b8 	.word	0x400200b8
 8005b44:	40020410 	.word	0x40020410
 8005b48:	40020428 	.word	0x40020428
 8005b4c:	40020440 	.word	0x40020440
 8005b50:	40020458 	.word	0x40020458
 8005b54:	40020470 	.word	0x40020470
 8005b58:	40020488 	.word	0x40020488
 8005b5c:	400204a0 	.word	0x400204a0
 8005b60:	400204b8 	.word	0x400204b8
 8005b64:	58025408 	.word	0x58025408
 8005b68:	5802541c 	.word	0x5802541c
 8005b6c:	58025430 	.word	0x58025430
 8005b70:	58025444 	.word	0x58025444
 8005b74:	58025458 	.word	0x58025458
 8005b78:	5802546c 	.word	0x5802546c
 8005b7c:	58025480 	.word	0x58025480
 8005b80:	58025494 	.word	0x58025494
 8005b84:	2300      	movs	r3, #0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d007      	beq.n	8005b9a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b98:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a6d      	ldr	r2, [pc, #436]	; (8005d54 <HAL_DMA_Abort+0x444>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d04a      	beq.n	8005c3a <HAL_DMA_Abort+0x32a>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a6b      	ldr	r2, [pc, #428]	; (8005d58 <HAL_DMA_Abort+0x448>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d045      	beq.n	8005c3a <HAL_DMA_Abort+0x32a>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a6a      	ldr	r2, [pc, #424]	; (8005d5c <HAL_DMA_Abort+0x44c>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d040      	beq.n	8005c3a <HAL_DMA_Abort+0x32a>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a68      	ldr	r2, [pc, #416]	; (8005d60 <HAL_DMA_Abort+0x450>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d03b      	beq.n	8005c3a <HAL_DMA_Abort+0x32a>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a67      	ldr	r2, [pc, #412]	; (8005d64 <HAL_DMA_Abort+0x454>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d036      	beq.n	8005c3a <HAL_DMA_Abort+0x32a>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a65      	ldr	r2, [pc, #404]	; (8005d68 <HAL_DMA_Abort+0x458>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d031      	beq.n	8005c3a <HAL_DMA_Abort+0x32a>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a64      	ldr	r2, [pc, #400]	; (8005d6c <HAL_DMA_Abort+0x45c>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d02c      	beq.n	8005c3a <HAL_DMA_Abort+0x32a>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a62      	ldr	r2, [pc, #392]	; (8005d70 <HAL_DMA_Abort+0x460>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d027      	beq.n	8005c3a <HAL_DMA_Abort+0x32a>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a61      	ldr	r2, [pc, #388]	; (8005d74 <HAL_DMA_Abort+0x464>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d022      	beq.n	8005c3a <HAL_DMA_Abort+0x32a>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a5f      	ldr	r2, [pc, #380]	; (8005d78 <HAL_DMA_Abort+0x468>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d01d      	beq.n	8005c3a <HAL_DMA_Abort+0x32a>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a5e      	ldr	r2, [pc, #376]	; (8005d7c <HAL_DMA_Abort+0x46c>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d018      	beq.n	8005c3a <HAL_DMA_Abort+0x32a>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a5c      	ldr	r2, [pc, #368]	; (8005d80 <HAL_DMA_Abort+0x470>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d013      	beq.n	8005c3a <HAL_DMA_Abort+0x32a>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a5b      	ldr	r2, [pc, #364]	; (8005d84 <HAL_DMA_Abort+0x474>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d00e      	beq.n	8005c3a <HAL_DMA_Abort+0x32a>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a59      	ldr	r2, [pc, #356]	; (8005d88 <HAL_DMA_Abort+0x478>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d009      	beq.n	8005c3a <HAL_DMA_Abort+0x32a>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a58      	ldr	r2, [pc, #352]	; (8005d8c <HAL_DMA_Abort+0x47c>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d004      	beq.n	8005c3a <HAL_DMA_Abort+0x32a>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a56      	ldr	r2, [pc, #344]	; (8005d90 <HAL_DMA_Abort+0x480>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d108      	bne.n	8005c4c <HAL_DMA_Abort+0x33c>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f022 0201 	bic.w	r2, r2, #1
 8005c48:	601a      	str	r2, [r3, #0]
 8005c4a:	e007      	b.n	8005c5c <HAL_DMA_Abort+0x34c>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f022 0201 	bic.w	r2, r2, #1
 8005c5a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005c5c:	e013      	b.n	8005c86 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005c5e:	f7fe ff77 	bl	8004b50 <HAL_GetTick>
 8005c62:	4602      	mov	r2, r0
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	2b05      	cmp	r3, #5
 8005c6a:	d90c      	bls.n	8005c86 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2220      	movs	r2, #32
 8005c70:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2203      	movs	r2, #3
 8005c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e12d      	b.n	8005ee2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 0301 	and.w	r3, r3, #1
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d1e5      	bne.n	8005c5e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a2f      	ldr	r2, [pc, #188]	; (8005d54 <HAL_DMA_Abort+0x444>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d04a      	beq.n	8005d32 <HAL_DMA_Abort+0x422>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a2d      	ldr	r2, [pc, #180]	; (8005d58 <HAL_DMA_Abort+0x448>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d045      	beq.n	8005d32 <HAL_DMA_Abort+0x422>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a2c      	ldr	r2, [pc, #176]	; (8005d5c <HAL_DMA_Abort+0x44c>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d040      	beq.n	8005d32 <HAL_DMA_Abort+0x422>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a2a      	ldr	r2, [pc, #168]	; (8005d60 <HAL_DMA_Abort+0x450>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d03b      	beq.n	8005d32 <HAL_DMA_Abort+0x422>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a29      	ldr	r2, [pc, #164]	; (8005d64 <HAL_DMA_Abort+0x454>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d036      	beq.n	8005d32 <HAL_DMA_Abort+0x422>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a27      	ldr	r2, [pc, #156]	; (8005d68 <HAL_DMA_Abort+0x458>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d031      	beq.n	8005d32 <HAL_DMA_Abort+0x422>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a26      	ldr	r2, [pc, #152]	; (8005d6c <HAL_DMA_Abort+0x45c>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d02c      	beq.n	8005d32 <HAL_DMA_Abort+0x422>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a24      	ldr	r2, [pc, #144]	; (8005d70 <HAL_DMA_Abort+0x460>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d027      	beq.n	8005d32 <HAL_DMA_Abort+0x422>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a23      	ldr	r2, [pc, #140]	; (8005d74 <HAL_DMA_Abort+0x464>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d022      	beq.n	8005d32 <HAL_DMA_Abort+0x422>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a21      	ldr	r2, [pc, #132]	; (8005d78 <HAL_DMA_Abort+0x468>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d01d      	beq.n	8005d32 <HAL_DMA_Abort+0x422>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a20      	ldr	r2, [pc, #128]	; (8005d7c <HAL_DMA_Abort+0x46c>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d018      	beq.n	8005d32 <HAL_DMA_Abort+0x422>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a1e      	ldr	r2, [pc, #120]	; (8005d80 <HAL_DMA_Abort+0x470>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d013      	beq.n	8005d32 <HAL_DMA_Abort+0x422>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a1d      	ldr	r2, [pc, #116]	; (8005d84 <HAL_DMA_Abort+0x474>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d00e      	beq.n	8005d32 <HAL_DMA_Abort+0x422>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a1b      	ldr	r2, [pc, #108]	; (8005d88 <HAL_DMA_Abort+0x478>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d009      	beq.n	8005d32 <HAL_DMA_Abort+0x422>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a1a      	ldr	r2, [pc, #104]	; (8005d8c <HAL_DMA_Abort+0x47c>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d004      	beq.n	8005d32 <HAL_DMA_Abort+0x422>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a18      	ldr	r2, [pc, #96]	; (8005d90 <HAL_DMA_Abort+0x480>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d101      	bne.n	8005d36 <HAL_DMA_Abort+0x426>
 8005d32:	2301      	movs	r3, #1
 8005d34:	e000      	b.n	8005d38 <HAL_DMA_Abort+0x428>
 8005d36:	2300      	movs	r3, #0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d02b      	beq.n	8005d94 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d40:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d46:	f003 031f 	and.w	r3, r3, #31
 8005d4a:	223f      	movs	r2, #63	; 0x3f
 8005d4c:	409a      	lsls	r2, r3
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	609a      	str	r2, [r3, #8]
 8005d52:	e02a      	b.n	8005daa <HAL_DMA_Abort+0x49a>
 8005d54:	40020010 	.word	0x40020010
 8005d58:	40020028 	.word	0x40020028
 8005d5c:	40020040 	.word	0x40020040
 8005d60:	40020058 	.word	0x40020058
 8005d64:	40020070 	.word	0x40020070
 8005d68:	40020088 	.word	0x40020088
 8005d6c:	400200a0 	.word	0x400200a0
 8005d70:	400200b8 	.word	0x400200b8
 8005d74:	40020410 	.word	0x40020410
 8005d78:	40020428 	.word	0x40020428
 8005d7c:	40020440 	.word	0x40020440
 8005d80:	40020458 	.word	0x40020458
 8005d84:	40020470 	.word	0x40020470
 8005d88:	40020488 	.word	0x40020488
 8005d8c:	400204a0 	.word	0x400204a0
 8005d90:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d98:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d9e:	f003 031f 	and.w	r3, r3, #31
 8005da2:	2201      	movs	r2, #1
 8005da4:	409a      	lsls	r2, r3
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a4f      	ldr	r2, [pc, #316]	; (8005eec <HAL_DMA_Abort+0x5dc>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d072      	beq.n	8005e9a <HAL_DMA_Abort+0x58a>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a4d      	ldr	r2, [pc, #308]	; (8005ef0 <HAL_DMA_Abort+0x5e0>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d06d      	beq.n	8005e9a <HAL_DMA_Abort+0x58a>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a4c      	ldr	r2, [pc, #304]	; (8005ef4 <HAL_DMA_Abort+0x5e4>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d068      	beq.n	8005e9a <HAL_DMA_Abort+0x58a>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a4a      	ldr	r2, [pc, #296]	; (8005ef8 <HAL_DMA_Abort+0x5e8>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d063      	beq.n	8005e9a <HAL_DMA_Abort+0x58a>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a49      	ldr	r2, [pc, #292]	; (8005efc <HAL_DMA_Abort+0x5ec>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d05e      	beq.n	8005e9a <HAL_DMA_Abort+0x58a>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a47      	ldr	r2, [pc, #284]	; (8005f00 <HAL_DMA_Abort+0x5f0>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d059      	beq.n	8005e9a <HAL_DMA_Abort+0x58a>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a46      	ldr	r2, [pc, #280]	; (8005f04 <HAL_DMA_Abort+0x5f4>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d054      	beq.n	8005e9a <HAL_DMA_Abort+0x58a>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a44      	ldr	r2, [pc, #272]	; (8005f08 <HAL_DMA_Abort+0x5f8>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d04f      	beq.n	8005e9a <HAL_DMA_Abort+0x58a>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a43      	ldr	r2, [pc, #268]	; (8005f0c <HAL_DMA_Abort+0x5fc>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d04a      	beq.n	8005e9a <HAL_DMA_Abort+0x58a>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a41      	ldr	r2, [pc, #260]	; (8005f10 <HAL_DMA_Abort+0x600>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d045      	beq.n	8005e9a <HAL_DMA_Abort+0x58a>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a40      	ldr	r2, [pc, #256]	; (8005f14 <HAL_DMA_Abort+0x604>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d040      	beq.n	8005e9a <HAL_DMA_Abort+0x58a>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a3e      	ldr	r2, [pc, #248]	; (8005f18 <HAL_DMA_Abort+0x608>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d03b      	beq.n	8005e9a <HAL_DMA_Abort+0x58a>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a3d      	ldr	r2, [pc, #244]	; (8005f1c <HAL_DMA_Abort+0x60c>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d036      	beq.n	8005e9a <HAL_DMA_Abort+0x58a>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a3b      	ldr	r2, [pc, #236]	; (8005f20 <HAL_DMA_Abort+0x610>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d031      	beq.n	8005e9a <HAL_DMA_Abort+0x58a>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a3a      	ldr	r2, [pc, #232]	; (8005f24 <HAL_DMA_Abort+0x614>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d02c      	beq.n	8005e9a <HAL_DMA_Abort+0x58a>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a38      	ldr	r2, [pc, #224]	; (8005f28 <HAL_DMA_Abort+0x618>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d027      	beq.n	8005e9a <HAL_DMA_Abort+0x58a>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a37      	ldr	r2, [pc, #220]	; (8005f2c <HAL_DMA_Abort+0x61c>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d022      	beq.n	8005e9a <HAL_DMA_Abort+0x58a>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a35      	ldr	r2, [pc, #212]	; (8005f30 <HAL_DMA_Abort+0x620>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d01d      	beq.n	8005e9a <HAL_DMA_Abort+0x58a>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a34      	ldr	r2, [pc, #208]	; (8005f34 <HAL_DMA_Abort+0x624>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d018      	beq.n	8005e9a <HAL_DMA_Abort+0x58a>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a32      	ldr	r2, [pc, #200]	; (8005f38 <HAL_DMA_Abort+0x628>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d013      	beq.n	8005e9a <HAL_DMA_Abort+0x58a>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a31      	ldr	r2, [pc, #196]	; (8005f3c <HAL_DMA_Abort+0x62c>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d00e      	beq.n	8005e9a <HAL_DMA_Abort+0x58a>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a2f      	ldr	r2, [pc, #188]	; (8005f40 <HAL_DMA_Abort+0x630>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d009      	beq.n	8005e9a <HAL_DMA_Abort+0x58a>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a2e      	ldr	r2, [pc, #184]	; (8005f44 <HAL_DMA_Abort+0x634>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d004      	beq.n	8005e9a <HAL_DMA_Abort+0x58a>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a2c      	ldr	r2, [pc, #176]	; (8005f48 <HAL_DMA_Abort+0x638>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d101      	bne.n	8005e9e <HAL_DMA_Abort+0x58e>
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e000      	b.n	8005ea0 <HAL_DMA_Abort+0x590>
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d015      	beq.n	8005ed0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005eac:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00c      	beq.n	8005ed0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ec0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ec4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005ece:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3718      	adds	r7, #24
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	40020010 	.word	0x40020010
 8005ef0:	40020028 	.word	0x40020028
 8005ef4:	40020040 	.word	0x40020040
 8005ef8:	40020058 	.word	0x40020058
 8005efc:	40020070 	.word	0x40020070
 8005f00:	40020088 	.word	0x40020088
 8005f04:	400200a0 	.word	0x400200a0
 8005f08:	400200b8 	.word	0x400200b8
 8005f0c:	40020410 	.word	0x40020410
 8005f10:	40020428 	.word	0x40020428
 8005f14:	40020440 	.word	0x40020440
 8005f18:	40020458 	.word	0x40020458
 8005f1c:	40020470 	.word	0x40020470
 8005f20:	40020488 	.word	0x40020488
 8005f24:	400204a0 	.word	0x400204a0
 8005f28:	400204b8 	.word	0x400204b8
 8005f2c:	58025408 	.word	0x58025408
 8005f30:	5802541c 	.word	0x5802541c
 8005f34:	58025430 	.word	0x58025430
 8005f38:	58025444 	.word	0x58025444
 8005f3c:	58025458 	.word	0x58025458
 8005f40:	5802546c 	.word	0x5802546c
 8005f44:	58025480 	.word	0x58025480
 8005f48:	58025494 	.word	0x58025494

08005f4c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d101      	bne.n	8005f5e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e237      	b.n	80063ce <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	d004      	beq.n	8005f74 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2280      	movs	r2, #128	; 0x80
 8005f6e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	e22c      	b.n	80063ce <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a5c      	ldr	r2, [pc, #368]	; (80060ec <HAL_DMA_Abort_IT+0x1a0>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d04a      	beq.n	8006014 <HAL_DMA_Abort_IT+0xc8>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a5b      	ldr	r2, [pc, #364]	; (80060f0 <HAL_DMA_Abort_IT+0x1a4>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d045      	beq.n	8006014 <HAL_DMA_Abort_IT+0xc8>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a59      	ldr	r2, [pc, #356]	; (80060f4 <HAL_DMA_Abort_IT+0x1a8>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d040      	beq.n	8006014 <HAL_DMA_Abort_IT+0xc8>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a58      	ldr	r2, [pc, #352]	; (80060f8 <HAL_DMA_Abort_IT+0x1ac>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d03b      	beq.n	8006014 <HAL_DMA_Abort_IT+0xc8>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a56      	ldr	r2, [pc, #344]	; (80060fc <HAL_DMA_Abort_IT+0x1b0>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d036      	beq.n	8006014 <HAL_DMA_Abort_IT+0xc8>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a55      	ldr	r2, [pc, #340]	; (8006100 <HAL_DMA_Abort_IT+0x1b4>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d031      	beq.n	8006014 <HAL_DMA_Abort_IT+0xc8>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a53      	ldr	r2, [pc, #332]	; (8006104 <HAL_DMA_Abort_IT+0x1b8>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d02c      	beq.n	8006014 <HAL_DMA_Abort_IT+0xc8>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a52      	ldr	r2, [pc, #328]	; (8006108 <HAL_DMA_Abort_IT+0x1bc>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d027      	beq.n	8006014 <HAL_DMA_Abort_IT+0xc8>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a50      	ldr	r2, [pc, #320]	; (800610c <HAL_DMA_Abort_IT+0x1c0>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d022      	beq.n	8006014 <HAL_DMA_Abort_IT+0xc8>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a4f      	ldr	r2, [pc, #316]	; (8006110 <HAL_DMA_Abort_IT+0x1c4>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d01d      	beq.n	8006014 <HAL_DMA_Abort_IT+0xc8>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a4d      	ldr	r2, [pc, #308]	; (8006114 <HAL_DMA_Abort_IT+0x1c8>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d018      	beq.n	8006014 <HAL_DMA_Abort_IT+0xc8>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a4c      	ldr	r2, [pc, #304]	; (8006118 <HAL_DMA_Abort_IT+0x1cc>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d013      	beq.n	8006014 <HAL_DMA_Abort_IT+0xc8>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a4a      	ldr	r2, [pc, #296]	; (800611c <HAL_DMA_Abort_IT+0x1d0>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d00e      	beq.n	8006014 <HAL_DMA_Abort_IT+0xc8>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a49      	ldr	r2, [pc, #292]	; (8006120 <HAL_DMA_Abort_IT+0x1d4>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d009      	beq.n	8006014 <HAL_DMA_Abort_IT+0xc8>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a47      	ldr	r2, [pc, #284]	; (8006124 <HAL_DMA_Abort_IT+0x1d8>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d004      	beq.n	8006014 <HAL_DMA_Abort_IT+0xc8>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a46      	ldr	r2, [pc, #280]	; (8006128 <HAL_DMA_Abort_IT+0x1dc>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d101      	bne.n	8006018 <HAL_DMA_Abort_IT+0xcc>
 8006014:	2301      	movs	r3, #1
 8006016:	e000      	b.n	800601a <HAL_DMA_Abort_IT+0xce>
 8006018:	2300      	movs	r3, #0
 800601a:	2b00      	cmp	r3, #0
 800601c:	f000 8086 	beq.w	800612c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2204      	movs	r2, #4
 8006024:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a2f      	ldr	r2, [pc, #188]	; (80060ec <HAL_DMA_Abort_IT+0x1a0>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d04a      	beq.n	80060c8 <HAL_DMA_Abort_IT+0x17c>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a2e      	ldr	r2, [pc, #184]	; (80060f0 <HAL_DMA_Abort_IT+0x1a4>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d045      	beq.n	80060c8 <HAL_DMA_Abort_IT+0x17c>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a2c      	ldr	r2, [pc, #176]	; (80060f4 <HAL_DMA_Abort_IT+0x1a8>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d040      	beq.n	80060c8 <HAL_DMA_Abort_IT+0x17c>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a2b      	ldr	r2, [pc, #172]	; (80060f8 <HAL_DMA_Abort_IT+0x1ac>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d03b      	beq.n	80060c8 <HAL_DMA_Abort_IT+0x17c>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a29      	ldr	r2, [pc, #164]	; (80060fc <HAL_DMA_Abort_IT+0x1b0>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d036      	beq.n	80060c8 <HAL_DMA_Abort_IT+0x17c>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a28      	ldr	r2, [pc, #160]	; (8006100 <HAL_DMA_Abort_IT+0x1b4>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d031      	beq.n	80060c8 <HAL_DMA_Abort_IT+0x17c>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a26      	ldr	r2, [pc, #152]	; (8006104 <HAL_DMA_Abort_IT+0x1b8>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d02c      	beq.n	80060c8 <HAL_DMA_Abort_IT+0x17c>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a25      	ldr	r2, [pc, #148]	; (8006108 <HAL_DMA_Abort_IT+0x1bc>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d027      	beq.n	80060c8 <HAL_DMA_Abort_IT+0x17c>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a23      	ldr	r2, [pc, #140]	; (800610c <HAL_DMA_Abort_IT+0x1c0>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d022      	beq.n	80060c8 <HAL_DMA_Abort_IT+0x17c>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a22      	ldr	r2, [pc, #136]	; (8006110 <HAL_DMA_Abort_IT+0x1c4>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d01d      	beq.n	80060c8 <HAL_DMA_Abort_IT+0x17c>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a20      	ldr	r2, [pc, #128]	; (8006114 <HAL_DMA_Abort_IT+0x1c8>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d018      	beq.n	80060c8 <HAL_DMA_Abort_IT+0x17c>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a1f      	ldr	r2, [pc, #124]	; (8006118 <HAL_DMA_Abort_IT+0x1cc>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d013      	beq.n	80060c8 <HAL_DMA_Abort_IT+0x17c>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a1d      	ldr	r2, [pc, #116]	; (800611c <HAL_DMA_Abort_IT+0x1d0>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d00e      	beq.n	80060c8 <HAL_DMA_Abort_IT+0x17c>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a1c      	ldr	r2, [pc, #112]	; (8006120 <HAL_DMA_Abort_IT+0x1d4>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d009      	beq.n	80060c8 <HAL_DMA_Abort_IT+0x17c>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a1a      	ldr	r2, [pc, #104]	; (8006124 <HAL_DMA_Abort_IT+0x1d8>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d004      	beq.n	80060c8 <HAL_DMA_Abort_IT+0x17c>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a19      	ldr	r2, [pc, #100]	; (8006128 <HAL_DMA_Abort_IT+0x1dc>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d108      	bne.n	80060da <HAL_DMA_Abort_IT+0x18e>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f022 0201 	bic.w	r2, r2, #1
 80060d6:	601a      	str	r2, [r3, #0]
 80060d8:	e178      	b.n	80063cc <HAL_DMA_Abort_IT+0x480>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f022 0201 	bic.w	r2, r2, #1
 80060e8:	601a      	str	r2, [r3, #0]
 80060ea:	e16f      	b.n	80063cc <HAL_DMA_Abort_IT+0x480>
 80060ec:	40020010 	.word	0x40020010
 80060f0:	40020028 	.word	0x40020028
 80060f4:	40020040 	.word	0x40020040
 80060f8:	40020058 	.word	0x40020058
 80060fc:	40020070 	.word	0x40020070
 8006100:	40020088 	.word	0x40020088
 8006104:	400200a0 	.word	0x400200a0
 8006108:	400200b8 	.word	0x400200b8
 800610c:	40020410 	.word	0x40020410
 8006110:	40020428 	.word	0x40020428
 8006114:	40020440 	.word	0x40020440
 8006118:	40020458 	.word	0x40020458
 800611c:	40020470 	.word	0x40020470
 8006120:	40020488 	.word	0x40020488
 8006124:	400204a0 	.word	0x400204a0
 8006128:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f022 020e 	bic.w	r2, r2, #14
 800613a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a6c      	ldr	r2, [pc, #432]	; (80062f4 <HAL_DMA_Abort_IT+0x3a8>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d04a      	beq.n	80061dc <HAL_DMA_Abort_IT+0x290>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a6b      	ldr	r2, [pc, #428]	; (80062f8 <HAL_DMA_Abort_IT+0x3ac>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d045      	beq.n	80061dc <HAL_DMA_Abort_IT+0x290>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a69      	ldr	r2, [pc, #420]	; (80062fc <HAL_DMA_Abort_IT+0x3b0>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d040      	beq.n	80061dc <HAL_DMA_Abort_IT+0x290>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a68      	ldr	r2, [pc, #416]	; (8006300 <HAL_DMA_Abort_IT+0x3b4>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d03b      	beq.n	80061dc <HAL_DMA_Abort_IT+0x290>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a66      	ldr	r2, [pc, #408]	; (8006304 <HAL_DMA_Abort_IT+0x3b8>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d036      	beq.n	80061dc <HAL_DMA_Abort_IT+0x290>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a65      	ldr	r2, [pc, #404]	; (8006308 <HAL_DMA_Abort_IT+0x3bc>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d031      	beq.n	80061dc <HAL_DMA_Abort_IT+0x290>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a63      	ldr	r2, [pc, #396]	; (800630c <HAL_DMA_Abort_IT+0x3c0>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d02c      	beq.n	80061dc <HAL_DMA_Abort_IT+0x290>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a62      	ldr	r2, [pc, #392]	; (8006310 <HAL_DMA_Abort_IT+0x3c4>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d027      	beq.n	80061dc <HAL_DMA_Abort_IT+0x290>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a60      	ldr	r2, [pc, #384]	; (8006314 <HAL_DMA_Abort_IT+0x3c8>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d022      	beq.n	80061dc <HAL_DMA_Abort_IT+0x290>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a5f      	ldr	r2, [pc, #380]	; (8006318 <HAL_DMA_Abort_IT+0x3cc>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d01d      	beq.n	80061dc <HAL_DMA_Abort_IT+0x290>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a5d      	ldr	r2, [pc, #372]	; (800631c <HAL_DMA_Abort_IT+0x3d0>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d018      	beq.n	80061dc <HAL_DMA_Abort_IT+0x290>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a5c      	ldr	r2, [pc, #368]	; (8006320 <HAL_DMA_Abort_IT+0x3d4>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d013      	beq.n	80061dc <HAL_DMA_Abort_IT+0x290>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a5a      	ldr	r2, [pc, #360]	; (8006324 <HAL_DMA_Abort_IT+0x3d8>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d00e      	beq.n	80061dc <HAL_DMA_Abort_IT+0x290>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a59      	ldr	r2, [pc, #356]	; (8006328 <HAL_DMA_Abort_IT+0x3dc>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d009      	beq.n	80061dc <HAL_DMA_Abort_IT+0x290>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a57      	ldr	r2, [pc, #348]	; (800632c <HAL_DMA_Abort_IT+0x3e0>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d004      	beq.n	80061dc <HAL_DMA_Abort_IT+0x290>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a56      	ldr	r2, [pc, #344]	; (8006330 <HAL_DMA_Abort_IT+0x3e4>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d108      	bne.n	80061ee <HAL_DMA_Abort_IT+0x2a2>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f022 0201 	bic.w	r2, r2, #1
 80061ea:	601a      	str	r2, [r3, #0]
 80061ec:	e007      	b.n	80061fe <HAL_DMA_Abort_IT+0x2b2>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f022 0201 	bic.w	r2, r2, #1
 80061fc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a3c      	ldr	r2, [pc, #240]	; (80062f4 <HAL_DMA_Abort_IT+0x3a8>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d072      	beq.n	80062ee <HAL_DMA_Abort_IT+0x3a2>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a3a      	ldr	r2, [pc, #232]	; (80062f8 <HAL_DMA_Abort_IT+0x3ac>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d06d      	beq.n	80062ee <HAL_DMA_Abort_IT+0x3a2>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a39      	ldr	r2, [pc, #228]	; (80062fc <HAL_DMA_Abort_IT+0x3b0>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d068      	beq.n	80062ee <HAL_DMA_Abort_IT+0x3a2>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a37      	ldr	r2, [pc, #220]	; (8006300 <HAL_DMA_Abort_IT+0x3b4>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d063      	beq.n	80062ee <HAL_DMA_Abort_IT+0x3a2>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a36      	ldr	r2, [pc, #216]	; (8006304 <HAL_DMA_Abort_IT+0x3b8>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d05e      	beq.n	80062ee <HAL_DMA_Abort_IT+0x3a2>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a34      	ldr	r2, [pc, #208]	; (8006308 <HAL_DMA_Abort_IT+0x3bc>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d059      	beq.n	80062ee <HAL_DMA_Abort_IT+0x3a2>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a33      	ldr	r2, [pc, #204]	; (800630c <HAL_DMA_Abort_IT+0x3c0>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d054      	beq.n	80062ee <HAL_DMA_Abort_IT+0x3a2>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a31      	ldr	r2, [pc, #196]	; (8006310 <HAL_DMA_Abort_IT+0x3c4>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d04f      	beq.n	80062ee <HAL_DMA_Abort_IT+0x3a2>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a30      	ldr	r2, [pc, #192]	; (8006314 <HAL_DMA_Abort_IT+0x3c8>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d04a      	beq.n	80062ee <HAL_DMA_Abort_IT+0x3a2>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a2e      	ldr	r2, [pc, #184]	; (8006318 <HAL_DMA_Abort_IT+0x3cc>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d045      	beq.n	80062ee <HAL_DMA_Abort_IT+0x3a2>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a2d      	ldr	r2, [pc, #180]	; (800631c <HAL_DMA_Abort_IT+0x3d0>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d040      	beq.n	80062ee <HAL_DMA_Abort_IT+0x3a2>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a2b      	ldr	r2, [pc, #172]	; (8006320 <HAL_DMA_Abort_IT+0x3d4>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d03b      	beq.n	80062ee <HAL_DMA_Abort_IT+0x3a2>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a2a      	ldr	r2, [pc, #168]	; (8006324 <HAL_DMA_Abort_IT+0x3d8>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d036      	beq.n	80062ee <HAL_DMA_Abort_IT+0x3a2>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a28      	ldr	r2, [pc, #160]	; (8006328 <HAL_DMA_Abort_IT+0x3dc>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d031      	beq.n	80062ee <HAL_DMA_Abort_IT+0x3a2>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a27      	ldr	r2, [pc, #156]	; (800632c <HAL_DMA_Abort_IT+0x3e0>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d02c      	beq.n	80062ee <HAL_DMA_Abort_IT+0x3a2>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a25      	ldr	r2, [pc, #148]	; (8006330 <HAL_DMA_Abort_IT+0x3e4>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d027      	beq.n	80062ee <HAL_DMA_Abort_IT+0x3a2>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a24      	ldr	r2, [pc, #144]	; (8006334 <HAL_DMA_Abort_IT+0x3e8>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d022      	beq.n	80062ee <HAL_DMA_Abort_IT+0x3a2>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a22      	ldr	r2, [pc, #136]	; (8006338 <HAL_DMA_Abort_IT+0x3ec>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d01d      	beq.n	80062ee <HAL_DMA_Abort_IT+0x3a2>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a21      	ldr	r2, [pc, #132]	; (800633c <HAL_DMA_Abort_IT+0x3f0>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d018      	beq.n	80062ee <HAL_DMA_Abort_IT+0x3a2>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a1f      	ldr	r2, [pc, #124]	; (8006340 <HAL_DMA_Abort_IT+0x3f4>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d013      	beq.n	80062ee <HAL_DMA_Abort_IT+0x3a2>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a1e      	ldr	r2, [pc, #120]	; (8006344 <HAL_DMA_Abort_IT+0x3f8>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d00e      	beq.n	80062ee <HAL_DMA_Abort_IT+0x3a2>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a1c      	ldr	r2, [pc, #112]	; (8006348 <HAL_DMA_Abort_IT+0x3fc>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d009      	beq.n	80062ee <HAL_DMA_Abort_IT+0x3a2>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a1b      	ldr	r2, [pc, #108]	; (800634c <HAL_DMA_Abort_IT+0x400>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d004      	beq.n	80062ee <HAL_DMA_Abort_IT+0x3a2>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a19      	ldr	r2, [pc, #100]	; (8006350 <HAL_DMA_Abort_IT+0x404>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d132      	bne.n	8006354 <HAL_DMA_Abort_IT+0x408>
 80062ee:	2301      	movs	r3, #1
 80062f0:	e031      	b.n	8006356 <HAL_DMA_Abort_IT+0x40a>
 80062f2:	bf00      	nop
 80062f4:	40020010 	.word	0x40020010
 80062f8:	40020028 	.word	0x40020028
 80062fc:	40020040 	.word	0x40020040
 8006300:	40020058 	.word	0x40020058
 8006304:	40020070 	.word	0x40020070
 8006308:	40020088 	.word	0x40020088
 800630c:	400200a0 	.word	0x400200a0
 8006310:	400200b8 	.word	0x400200b8
 8006314:	40020410 	.word	0x40020410
 8006318:	40020428 	.word	0x40020428
 800631c:	40020440 	.word	0x40020440
 8006320:	40020458 	.word	0x40020458
 8006324:	40020470 	.word	0x40020470
 8006328:	40020488 	.word	0x40020488
 800632c:	400204a0 	.word	0x400204a0
 8006330:	400204b8 	.word	0x400204b8
 8006334:	58025408 	.word	0x58025408
 8006338:	5802541c 	.word	0x5802541c
 800633c:	58025430 	.word	0x58025430
 8006340:	58025444 	.word	0x58025444
 8006344:	58025458 	.word	0x58025458
 8006348:	5802546c 	.word	0x5802546c
 800634c:	58025480 	.word	0x58025480
 8006350:	58025494 	.word	0x58025494
 8006354:	2300      	movs	r3, #0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d028      	beq.n	80063ac <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006364:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006368:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800636e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006374:	f003 031f 	and.w	r3, r3, #31
 8006378:	2201      	movs	r2, #1
 800637a:	409a      	lsls	r2, r3
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006388:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800638e:	2b00      	cmp	r3, #0
 8006390:	d00c      	beq.n	80063ac <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800639c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063a0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80063aa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d003      	beq.n	80063cc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3710      	adds	r7, #16
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop

080063d8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b08a      	sub	sp, #40	; 0x28
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80063e0:	2300      	movs	r3, #0
 80063e2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80063e4:	4b67      	ldr	r3, [pc, #412]	; (8006584 <HAL_DMA_IRQHandler+0x1ac>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a67      	ldr	r2, [pc, #412]	; (8006588 <HAL_DMA_IRQHandler+0x1b0>)
 80063ea:	fba2 2303 	umull	r2, r3, r2, r3
 80063ee:	0a9b      	lsrs	r3, r3, #10
 80063f0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063f6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063fc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80063fe:	6a3b      	ldr	r3, [r7, #32]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a5f      	ldr	r2, [pc, #380]	; (800658c <HAL_DMA_IRQHandler+0x1b4>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d04a      	beq.n	80064aa <HAL_DMA_IRQHandler+0xd2>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a5d      	ldr	r2, [pc, #372]	; (8006590 <HAL_DMA_IRQHandler+0x1b8>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d045      	beq.n	80064aa <HAL_DMA_IRQHandler+0xd2>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a5c      	ldr	r2, [pc, #368]	; (8006594 <HAL_DMA_IRQHandler+0x1bc>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d040      	beq.n	80064aa <HAL_DMA_IRQHandler+0xd2>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a5a      	ldr	r2, [pc, #360]	; (8006598 <HAL_DMA_IRQHandler+0x1c0>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d03b      	beq.n	80064aa <HAL_DMA_IRQHandler+0xd2>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a59      	ldr	r2, [pc, #356]	; (800659c <HAL_DMA_IRQHandler+0x1c4>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d036      	beq.n	80064aa <HAL_DMA_IRQHandler+0xd2>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a57      	ldr	r2, [pc, #348]	; (80065a0 <HAL_DMA_IRQHandler+0x1c8>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d031      	beq.n	80064aa <HAL_DMA_IRQHandler+0xd2>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a56      	ldr	r2, [pc, #344]	; (80065a4 <HAL_DMA_IRQHandler+0x1cc>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d02c      	beq.n	80064aa <HAL_DMA_IRQHandler+0xd2>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a54      	ldr	r2, [pc, #336]	; (80065a8 <HAL_DMA_IRQHandler+0x1d0>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d027      	beq.n	80064aa <HAL_DMA_IRQHandler+0xd2>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a53      	ldr	r2, [pc, #332]	; (80065ac <HAL_DMA_IRQHandler+0x1d4>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d022      	beq.n	80064aa <HAL_DMA_IRQHandler+0xd2>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a51      	ldr	r2, [pc, #324]	; (80065b0 <HAL_DMA_IRQHandler+0x1d8>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d01d      	beq.n	80064aa <HAL_DMA_IRQHandler+0xd2>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a50      	ldr	r2, [pc, #320]	; (80065b4 <HAL_DMA_IRQHandler+0x1dc>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d018      	beq.n	80064aa <HAL_DMA_IRQHandler+0xd2>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a4e      	ldr	r2, [pc, #312]	; (80065b8 <HAL_DMA_IRQHandler+0x1e0>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d013      	beq.n	80064aa <HAL_DMA_IRQHandler+0xd2>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a4d      	ldr	r2, [pc, #308]	; (80065bc <HAL_DMA_IRQHandler+0x1e4>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d00e      	beq.n	80064aa <HAL_DMA_IRQHandler+0xd2>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a4b      	ldr	r2, [pc, #300]	; (80065c0 <HAL_DMA_IRQHandler+0x1e8>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d009      	beq.n	80064aa <HAL_DMA_IRQHandler+0xd2>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a4a      	ldr	r2, [pc, #296]	; (80065c4 <HAL_DMA_IRQHandler+0x1ec>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d004      	beq.n	80064aa <HAL_DMA_IRQHandler+0xd2>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a48      	ldr	r2, [pc, #288]	; (80065c8 <HAL_DMA_IRQHandler+0x1f0>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d101      	bne.n	80064ae <HAL_DMA_IRQHandler+0xd6>
 80064aa:	2301      	movs	r3, #1
 80064ac:	e000      	b.n	80064b0 <HAL_DMA_IRQHandler+0xd8>
 80064ae:	2300      	movs	r3, #0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	f000 842b 	beq.w	8006d0c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064ba:	f003 031f 	and.w	r3, r3, #31
 80064be:	2208      	movs	r2, #8
 80064c0:	409a      	lsls	r2, r3
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	4013      	ands	r3, r2
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	f000 80a2 	beq.w	8006610 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a2e      	ldr	r2, [pc, #184]	; (800658c <HAL_DMA_IRQHandler+0x1b4>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d04a      	beq.n	800656c <HAL_DMA_IRQHandler+0x194>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a2d      	ldr	r2, [pc, #180]	; (8006590 <HAL_DMA_IRQHandler+0x1b8>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d045      	beq.n	800656c <HAL_DMA_IRQHandler+0x194>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a2b      	ldr	r2, [pc, #172]	; (8006594 <HAL_DMA_IRQHandler+0x1bc>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d040      	beq.n	800656c <HAL_DMA_IRQHandler+0x194>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a2a      	ldr	r2, [pc, #168]	; (8006598 <HAL_DMA_IRQHandler+0x1c0>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d03b      	beq.n	800656c <HAL_DMA_IRQHandler+0x194>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a28      	ldr	r2, [pc, #160]	; (800659c <HAL_DMA_IRQHandler+0x1c4>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d036      	beq.n	800656c <HAL_DMA_IRQHandler+0x194>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a27      	ldr	r2, [pc, #156]	; (80065a0 <HAL_DMA_IRQHandler+0x1c8>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d031      	beq.n	800656c <HAL_DMA_IRQHandler+0x194>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a25      	ldr	r2, [pc, #148]	; (80065a4 <HAL_DMA_IRQHandler+0x1cc>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d02c      	beq.n	800656c <HAL_DMA_IRQHandler+0x194>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a24      	ldr	r2, [pc, #144]	; (80065a8 <HAL_DMA_IRQHandler+0x1d0>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d027      	beq.n	800656c <HAL_DMA_IRQHandler+0x194>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a22      	ldr	r2, [pc, #136]	; (80065ac <HAL_DMA_IRQHandler+0x1d4>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d022      	beq.n	800656c <HAL_DMA_IRQHandler+0x194>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a21      	ldr	r2, [pc, #132]	; (80065b0 <HAL_DMA_IRQHandler+0x1d8>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d01d      	beq.n	800656c <HAL_DMA_IRQHandler+0x194>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a1f      	ldr	r2, [pc, #124]	; (80065b4 <HAL_DMA_IRQHandler+0x1dc>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d018      	beq.n	800656c <HAL_DMA_IRQHandler+0x194>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a1e      	ldr	r2, [pc, #120]	; (80065b8 <HAL_DMA_IRQHandler+0x1e0>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d013      	beq.n	800656c <HAL_DMA_IRQHandler+0x194>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a1c      	ldr	r2, [pc, #112]	; (80065bc <HAL_DMA_IRQHandler+0x1e4>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d00e      	beq.n	800656c <HAL_DMA_IRQHandler+0x194>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a1b      	ldr	r2, [pc, #108]	; (80065c0 <HAL_DMA_IRQHandler+0x1e8>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d009      	beq.n	800656c <HAL_DMA_IRQHandler+0x194>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a19      	ldr	r2, [pc, #100]	; (80065c4 <HAL_DMA_IRQHandler+0x1ec>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d004      	beq.n	800656c <HAL_DMA_IRQHandler+0x194>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a18      	ldr	r2, [pc, #96]	; (80065c8 <HAL_DMA_IRQHandler+0x1f0>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d12f      	bne.n	80065cc <HAL_DMA_IRQHandler+0x1f4>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 0304 	and.w	r3, r3, #4
 8006576:	2b00      	cmp	r3, #0
 8006578:	bf14      	ite	ne
 800657a:	2301      	movne	r3, #1
 800657c:	2300      	moveq	r3, #0
 800657e:	b2db      	uxtb	r3, r3
 8006580:	e02e      	b.n	80065e0 <HAL_DMA_IRQHandler+0x208>
 8006582:	bf00      	nop
 8006584:	24000010 	.word	0x24000010
 8006588:	1b4e81b5 	.word	0x1b4e81b5
 800658c:	40020010 	.word	0x40020010
 8006590:	40020028 	.word	0x40020028
 8006594:	40020040 	.word	0x40020040
 8006598:	40020058 	.word	0x40020058
 800659c:	40020070 	.word	0x40020070
 80065a0:	40020088 	.word	0x40020088
 80065a4:	400200a0 	.word	0x400200a0
 80065a8:	400200b8 	.word	0x400200b8
 80065ac:	40020410 	.word	0x40020410
 80065b0:	40020428 	.word	0x40020428
 80065b4:	40020440 	.word	0x40020440
 80065b8:	40020458 	.word	0x40020458
 80065bc:	40020470 	.word	0x40020470
 80065c0:	40020488 	.word	0x40020488
 80065c4:	400204a0 	.word	0x400204a0
 80065c8:	400204b8 	.word	0x400204b8
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 0308 	and.w	r3, r3, #8
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	bf14      	ite	ne
 80065da:	2301      	movne	r3, #1
 80065dc:	2300      	moveq	r3, #0
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d015      	beq.n	8006610 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f022 0204 	bic.w	r2, r2, #4
 80065f2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065f8:	f003 031f 	and.w	r3, r3, #31
 80065fc:	2208      	movs	r2, #8
 80065fe:	409a      	lsls	r2, r3
 8006600:	6a3b      	ldr	r3, [r7, #32]
 8006602:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006608:	f043 0201 	orr.w	r2, r3, #1
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006614:	f003 031f 	and.w	r3, r3, #31
 8006618:	69ba      	ldr	r2, [r7, #24]
 800661a:	fa22 f303 	lsr.w	r3, r2, r3
 800661e:	f003 0301 	and.w	r3, r3, #1
 8006622:	2b00      	cmp	r3, #0
 8006624:	d06e      	beq.n	8006704 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a69      	ldr	r2, [pc, #420]	; (80067d0 <HAL_DMA_IRQHandler+0x3f8>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d04a      	beq.n	80066c6 <HAL_DMA_IRQHandler+0x2ee>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a67      	ldr	r2, [pc, #412]	; (80067d4 <HAL_DMA_IRQHandler+0x3fc>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d045      	beq.n	80066c6 <HAL_DMA_IRQHandler+0x2ee>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a66      	ldr	r2, [pc, #408]	; (80067d8 <HAL_DMA_IRQHandler+0x400>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d040      	beq.n	80066c6 <HAL_DMA_IRQHandler+0x2ee>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a64      	ldr	r2, [pc, #400]	; (80067dc <HAL_DMA_IRQHandler+0x404>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d03b      	beq.n	80066c6 <HAL_DMA_IRQHandler+0x2ee>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a63      	ldr	r2, [pc, #396]	; (80067e0 <HAL_DMA_IRQHandler+0x408>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d036      	beq.n	80066c6 <HAL_DMA_IRQHandler+0x2ee>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a61      	ldr	r2, [pc, #388]	; (80067e4 <HAL_DMA_IRQHandler+0x40c>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d031      	beq.n	80066c6 <HAL_DMA_IRQHandler+0x2ee>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a60      	ldr	r2, [pc, #384]	; (80067e8 <HAL_DMA_IRQHandler+0x410>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d02c      	beq.n	80066c6 <HAL_DMA_IRQHandler+0x2ee>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a5e      	ldr	r2, [pc, #376]	; (80067ec <HAL_DMA_IRQHandler+0x414>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d027      	beq.n	80066c6 <HAL_DMA_IRQHandler+0x2ee>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a5d      	ldr	r2, [pc, #372]	; (80067f0 <HAL_DMA_IRQHandler+0x418>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d022      	beq.n	80066c6 <HAL_DMA_IRQHandler+0x2ee>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a5b      	ldr	r2, [pc, #364]	; (80067f4 <HAL_DMA_IRQHandler+0x41c>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d01d      	beq.n	80066c6 <HAL_DMA_IRQHandler+0x2ee>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a5a      	ldr	r2, [pc, #360]	; (80067f8 <HAL_DMA_IRQHandler+0x420>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d018      	beq.n	80066c6 <HAL_DMA_IRQHandler+0x2ee>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a58      	ldr	r2, [pc, #352]	; (80067fc <HAL_DMA_IRQHandler+0x424>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d013      	beq.n	80066c6 <HAL_DMA_IRQHandler+0x2ee>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a57      	ldr	r2, [pc, #348]	; (8006800 <HAL_DMA_IRQHandler+0x428>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d00e      	beq.n	80066c6 <HAL_DMA_IRQHandler+0x2ee>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a55      	ldr	r2, [pc, #340]	; (8006804 <HAL_DMA_IRQHandler+0x42c>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d009      	beq.n	80066c6 <HAL_DMA_IRQHandler+0x2ee>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a54      	ldr	r2, [pc, #336]	; (8006808 <HAL_DMA_IRQHandler+0x430>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d004      	beq.n	80066c6 <HAL_DMA_IRQHandler+0x2ee>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a52      	ldr	r2, [pc, #328]	; (800680c <HAL_DMA_IRQHandler+0x434>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d10a      	bne.n	80066dc <HAL_DMA_IRQHandler+0x304>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	695b      	ldr	r3, [r3, #20]
 80066cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	bf14      	ite	ne
 80066d4:	2301      	movne	r3, #1
 80066d6:	2300      	moveq	r3, #0
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	e003      	b.n	80066e4 <HAL_DMA_IRQHandler+0x30c>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2300      	movs	r3, #0
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d00d      	beq.n	8006704 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066ec:	f003 031f 	and.w	r3, r3, #31
 80066f0:	2201      	movs	r2, #1
 80066f2:	409a      	lsls	r2, r3
 80066f4:	6a3b      	ldr	r3, [r7, #32]
 80066f6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066fc:	f043 0202 	orr.w	r2, r3, #2
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006708:	f003 031f 	and.w	r3, r3, #31
 800670c:	2204      	movs	r2, #4
 800670e:	409a      	lsls	r2, r3
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	4013      	ands	r3, r2
 8006714:	2b00      	cmp	r3, #0
 8006716:	f000 808f 	beq.w	8006838 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a2c      	ldr	r2, [pc, #176]	; (80067d0 <HAL_DMA_IRQHandler+0x3f8>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d04a      	beq.n	80067ba <HAL_DMA_IRQHandler+0x3e2>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a2a      	ldr	r2, [pc, #168]	; (80067d4 <HAL_DMA_IRQHandler+0x3fc>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d045      	beq.n	80067ba <HAL_DMA_IRQHandler+0x3e2>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a29      	ldr	r2, [pc, #164]	; (80067d8 <HAL_DMA_IRQHandler+0x400>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d040      	beq.n	80067ba <HAL_DMA_IRQHandler+0x3e2>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a27      	ldr	r2, [pc, #156]	; (80067dc <HAL_DMA_IRQHandler+0x404>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d03b      	beq.n	80067ba <HAL_DMA_IRQHandler+0x3e2>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a26      	ldr	r2, [pc, #152]	; (80067e0 <HAL_DMA_IRQHandler+0x408>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d036      	beq.n	80067ba <HAL_DMA_IRQHandler+0x3e2>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a24      	ldr	r2, [pc, #144]	; (80067e4 <HAL_DMA_IRQHandler+0x40c>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d031      	beq.n	80067ba <HAL_DMA_IRQHandler+0x3e2>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a23      	ldr	r2, [pc, #140]	; (80067e8 <HAL_DMA_IRQHandler+0x410>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d02c      	beq.n	80067ba <HAL_DMA_IRQHandler+0x3e2>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a21      	ldr	r2, [pc, #132]	; (80067ec <HAL_DMA_IRQHandler+0x414>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d027      	beq.n	80067ba <HAL_DMA_IRQHandler+0x3e2>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a20      	ldr	r2, [pc, #128]	; (80067f0 <HAL_DMA_IRQHandler+0x418>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d022      	beq.n	80067ba <HAL_DMA_IRQHandler+0x3e2>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a1e      	ldr	r2, [pc, #120]	; (80067f4 <HAL_DMA_IRQHandler+0x41c>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d01d      	beq.n	80067ba <HAL_DMA_IRQHandler+0x3e2>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a1d      	ldr	r2, [pc, #116]	; (80067f8 <HAL_DMA_IRQHandler+0x420>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d018      	beq.n	80067ba <HAL_DMA_IRQHandler+0x3e2>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a1b      	ldr	r2, [pc, #108]	; (80067fc <HAL_DMA_IRQHandler+0x424>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d013      	beq.n	80067ba <HAL_DMA_IRQHandler+0x3e2>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a1a      	ldr	r2, [pc, #104]	; (8006800 <HAL_DMA_IRQHandler+0x428>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d00e      	beq.n	80067ba <HAL_DMA_IRQHandler+0x3e2>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a18      	ldr	r2, [pc, #96]	; (8006804 <HAL_DMA_IRQHandler+0x42c>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d009      	beq.n	80067ba <HAL_DMA_IRQHandler+0x3e2>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a17      	ldr	r2, [pc, #92]	; (8006808 <HAL_DMA_IRQHandler+0x430>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d004      	beq.n	80067ba <HAL_DMA_IRQHandler+0x3e2>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a15      	ldr	r2, [pc, #84]	; (800680c <HAL_DMA_IRQHandler+0x434>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d12a      	bne.n	8006810 <HAL_DMA_IRQHandler+0x438>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 0302 	and.w	r3, r3, #2
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	bf14      	ite	ne
 80067c8:	2301      	movne	r3, #1
 80067ca:	2300      	moveq	r3, #0
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	e023      	b.n	8006818 <HAL_DMA_IRQHandler+0x440>
 80067d0:	40020010 	.word	0x40020010
 80067d4:	40020028 	.word	0x40020028
 80067d8:	40020040 	.word	0x40020040
 80067dc:	40020058 	.word	0x40020058
 80067e0:	40020070 	.word	0x40020070
 80067e4:	40020088 	.word	0x40020088
 80067e8:	400200a0 	.word	0x400200a0
 80067ec:	400200b8 	.word	0x400200b8
 80067f0:	40020410 	.word	0x40020410
 80067f4:	40020428 	.word	0x40020428
 80067f8:	40020440 	.word	0x40020440
 80067fc:	40020458 	.word	0x40020458
 8006800:	40020470 	.word	0x40020470
 8006804:	40020488 	.word	0x40020488
 8006808:	400204a0 	.word	0x400204a0
 800680c:	400204b8 	.word	0x400204b8
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2300      	movs	r3, #0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d00d      	beq.n	8006838 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006820:	f003 031f 	and.w	r3, r3, #31
 8006824:	2204      	movs	r2, #4
 8006826:	409a      	lsls	r2, r3
 8006828:	6a3b      	ldr	r3, [r7, #32]
 800682a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006830:	f043 0204 	orr.w	r2, r3, #4
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800683c:	f003 031f 	and.w	r3, r3, #31
 8006840:	2210      	movs	r2, #16
 8006842:	409a      	lsls	r2, r3
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	4013      	ands	r3, r2
 8006848:	2b00      	cmp	r3, #0
 800684a:	f000 80a6 	beq.w	800699a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a85      	ldr	r2, [pc, #532]	; (8006a68 <HAL_DMA_IRQHandler+0x690>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d04a      	beq.n	80068ee <HAL_DMA_IRQHandler+0x516>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a83      	ldr	r2, [pc, #524]	; (8006a6c <HAL_DMA_IRQHandler+0x694>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d045      	beq.n	80068ee <HAL_DMA_IRQHandler+0x516>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a82      	ldr	r2, [pc, #520]	; (8006a70 <HAL_DMA_IRQHandler+0x698>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d040      	beq.n	80068ee <HAL_DMA_IRQHandler+0x516>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a80      	ldr	r2, [pc, #512]	; (8006a74 <HAL_DMA_IRQHandler+0x69c>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d03b      	beq.n	80068ee <HAL_DMA_IRQHandler+0x516>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a7f      	ldr	r2, [pc, #508]	; (8006a78 <HAL_DMA_IRQHandler+0x6a0>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d036      	beq.n	80068ee <HAL_DMA_IRQHandler+0x516>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a7d      	ldr	r2, [pc, #500]	; (8006a7c <HAL_DMA_IRQHandler+0x6a4>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d031      	beq.n	80068ee <HAL_DMA_IRQHandler+0x516>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a7c      	ldr	r2, [pc, #496]	; (8006a80 <HAL_DMA_IRQHandler+0x6a8>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d02c      	beq.n	80068ee <HAL_DMA_IRQHandler+0x516>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a7a      	ldr	r2, [pc, #488]	; (8006a84 <HAL_DMA_IRQHandler+0x6ac>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d027      	beq.n	80068ee <HAL_DMA_IRQHandler+0x516>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a79      	ldr	r2, [pc, #484]	; (8006a88 <HAL_DMA_IRQHandler+0x6b0>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d022      	beq.n	80068ee <HAL_DMA_IRQHandler+0x516>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a77      	ldr	r2, [pc, #476]	; (8006a8c <HAL_DMA_IRQHandler+0x6b4>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d01d      	beq.n	80068ee <HAL_DMA_IRQHandler+0x516>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a76      	ldr	r2, [pc, #472]	; (8006a90 <HAL_DMA_IRQHandler+0x6b8>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d018      	beq.n	80068ee <HAL_DMA_IRQHandler+0x516>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a74      	ldr	r2, [pc, #464]	; (8006a94 <HAL_DMA_IRQHandler+0x6bc>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d013      	beq.n	80068ee <HAL_DMA_IRQHandler+0x516>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a73      	ldr	r2, [pc, #460]	; (8006a98 <HAL_DMA_IRQHandler+0x6c0>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d00e      	beq.n	80068ee <HAL_DMA_IRQHandler+0x516>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a71      	ldr	r2, [pc, #452]	; (8006a9c <HAL_DMA_IRQHandler+0x6c4>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d009      	beq.n	80068ee <HAL_DMA_IRQHandler+0x516>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a70      	ldr	r2, [pc, #448]	; (8006aa0 <HAL_DMA_IRQHandler+0x6c8>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d004      	beq.n	80068ee <HAL_DMA_IRQHandler+0x516>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a6e      	ldr	r2, [pc, #440]	; (8006aa4 <HAL_DMA_IRQHandler+0x6cc>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d10a      	bne.n	8006904 <HAL_DMA_IRQHandler+0x52c>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 0308 	and.w	r3, r3, #8
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	bf14      	ite	ne
 80068fc:	2301      	movne	r3, #1
 80068fe:	2300      	moveq	r3, #0
 8006900:	b2db      	uxtb	r3, r3
 8006902:	e009      	b.n	8006918 <HAL_DMA_IRQHandler+0x540>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 0304 	and.w	r3, r3, #4
 800690e:	2b00      	cmp	r3, #0
 8006910:	bf14      	ite	ne
 8006912:	2301      	movne	r3, #1
 8006914:	2300      	moveq	r3, #0
 8006916:	b2db      	uxtb	r3, r3
 8006918:	2b00      	cmp	r3, #0
 800691a:	d03e      	beq.n	800699a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006920:	f003 031f 	and.w	r3, r3, #31
 8006924:	2210      	movs	r2, #16
 8006926:	409a      	lsls	r2, r3
 8006928:	6a3b      	ldr	r3, [r7, #32]
 800692a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006936:	2b00      	cmp	r3, #0
 8006938:	d018      	beq.n	800696c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006944:	2b00      	cmp	r3, #0
 8006946:	d108      	bne.n	800695a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694c:	2b00      	cmp	r3, #0
 800694e:	d024      	beq.n	800699a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	4798      	blx	r3
 8006958:	e01f      	b.n	800699a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800695e:	2b00      	cmp	r3, #0
 8006960:	d01b      	beq.n	800699a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	4798      	blx	r3
 800696a:	e016      	b.n	800699a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006976:	2b00      	cmp	r3, #0
 8006978:	d107      	bne.n	800698a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f022 0208 	bic.w	r2, r2, #8
 8006988:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800698e:	2b00      	cmp	r3, #0
 8006990:	d003      	beq.n	800699a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800699e:	f003 031f 	and.w	r3, r3, #31
 80069a2:	2220      	movs	r2, #32
 80069a4:	409a      	lsls	r2, r3
 80069a6:	69bb      	ldr	r3, [r7, #24]
 80069a8:	4013      	ands	r3, r2
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	f000 8110 	beq.w	8006bd0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a2c      	ldr	r2, [pc, #176]	; (8006a68 <HAL_DMA_IRQHandler+0x690>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d04a      	beq.n	8006a50 <HAL_DMA_IRQHandler+0x678>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a2b      	ldr	r2, [pc, #172]	; (8006a6c <HAL_DMA_IRQHandler+0x694>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d045      	beq.n	8006a50 <HAL_DMA_IRQHandler+0x678>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a29      	ldr	r2, [pc, #164]	; (8006a70 <HAL_DMA_IRQHandler+0x698>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d040      	beq.n	8006a50 <HAL_DMA_IRQHandler+0x678>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a28      	ldr	r2, [pc, #160]	; (8006a74 <HAL_DMA_IRQHandler+0x69c>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d03b      	beq.n	8006a50 <HAL_DMA_IRQHandler+0x678>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a26      	ldr	r2, [pc, #152]	; (8006a78 <HAL_DMA_IRQHandler+0x6a0>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d036      	beq.n	8006a50 <HAL_DMA_IRQHandler+0x678>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a25      	ldr	r2, [pc, #148]	; (8006a7c <HAL_DMA_IRQHandler+0x6a4>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d031      	beq.n	8006a50 <HAL_DMA_IRQHandler+0x678>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a23      	ldr	r2, [pc, #140]	; (8006a80 <HAL_DMA_IRQHandler+0x6a8>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d02c      	beq.n	8006a50 <HAL_DMA_IRQHandler+0x678>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a22      	ldr	r2, [pc, #136]	; (8006a84 <HAL_DMA_IRQHandler+0x6ac>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d027      	beq.n	8006a50 <HAL_DMA_IRQHandler+0x678>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a20      	ldr	r2, [pc, #128]	; (8006a88 <HAL_DMA_IRQHandler+0x6b0>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d022      	beq.n	8006a50 <HAL_DMA_IRQHandler+0x678>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a1f      	ldr	r2, [pc, #124]	; (8006a8c <HAL_DMA_IRQHandler+0x6b4>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d01d      	beq.n	8006a50 <HAL_DMA_IRQHandler+0x678>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a1d      	ldr	r2, [pc, #116]	; (8006a90 <HAL_DMA_IRQHandler+0x6b8>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d018      	beq.n	8006a50 <HAL_DMA_IRQHandler+0x678>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a1c      	ldr	r2, [pc, #112]	; (8006a94 <HAL_DMA_IRQHandler+0x6bc>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d013      	beq.n	8006a50 <HAL_DMA_IRQHandler+0x678>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a1a      	ldr	r2, [pc, #104]	; (8006a98 <HAL_DMA_IRQHandler+0x6c0>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d00e      	beq.n	8006a50 <HAL_DMA_IRQHandler+0x678>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a19      	ldr	r2, [pc, #100]	; (8006a9c <HAL_DMA_IRQHandler+0x6c4>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d009      	beq.n	8006a50 <HAL_DMA_IRQHandler+0x678>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a17      	ldr	r2, [pc, #92]	; (8006aa0 <HAL_DMA_IRQHandler+0x6c8>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d004      	beq.n	8006a50 <HAL_DMA_IRQHandler+0x678>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a16      	ldr	r2, [pc, #88]	; (8006aa4 <HAL_DMA_IRQHandler+0x6cc>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d12b      	bne.n	8006aa8 <HAL_DMA_IRQHandler+0x6d0>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f003 0310 	and.w	r3, r3, #16
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	bf14      	ite	ne
 8006a5e:	2301      	movne	r3, #1
 8006a60:	2300      	moveq	r3, #0
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	e02a      	b.n	8006abc <HAL_DMA_IRQHandler+0x6e4>
 8006a66:	bf00      	nop
 8006a68:	40020010 	.word	0x40020010
 8006a6c:	40020028 	.word	0x40020028
 8006a70:	40020040 	.word	0x40020040
 8006a74:	40020058 	.word	0x40020058
 8006a78:	40020070 	.word	0x40020070
 8006a7c:	40020088 	.word	0x40020088
 8006a80:	400200a0 	.word	0x400200a0
 8006a84:	400200b8 	.word	0x400200b8
 8006a88:	40020410 	.word	0x40020410
 8006a8c:	40020428 	.word	0x40020428
 8006a90:	40020440 	.word	0x40020440
 8006a94:	40020458 	.word	0x40020458
 8006a98:	40020470 	.word	0x40020470
 8006a9c:	40020488 	.word	0x40020488
 8006aa0:	400204a0 	.word	0x400204a0
 8006aa4:	400204b8 	.word	0x400204b8
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f003 0302 	and.w	r3, r3, #2
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	bf14      	ite	ne
 8006ab6:	2301      	movne	r3, #1
 8006ab8:	2300      	moveq	r3, #0
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	f000 8087 	beq.w	8006bd0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ac6:	f003 031f 	and.w	r3, r3, #31
 8006aca:	2220      	movs	r2, #32
 8006acc:	409a      	lsls	r2, r3
 8006ace:	6a3b      	ldr	r3, [r7, #32]
 8006ad0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	2b04      	cmp	r3, #4
 8006adc:	d139      	bne.n	8006b52 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f022 0216 	bic.w	r2, r2, #22
 8006aec:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	695a      	ldr	r2, [r3, #20]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006afc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d103      	bne.n	8006b0e <HAL_DMA_IRQHandler+0x736>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d007      	beq.n	8006b1e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f022 0208 	bic.w	r2, r2, #8
 8006b1c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b22:	f003 031f 	and.w	r3, r3, #31
 8006b26:	223f      	movs	r2, #63	; 0x3f
 8006b28:	409a      	lsls	r2, r3
 8006b2a:	6a3b      	ldr	r3, [r7, #32]
 8006b2c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2201      	movs	r2, #1
 8006b32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	f000 834a 	beq.w	80071dc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	4798      	blx	r3
          }
          return;
 8006b50:	e344      	b.n	80071dc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d018      	beq.n	8006b92 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d108      	bne.n	8006b80 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d02c      	beq.n	8006bd0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	4798      	blx	r3
 8006b7e:	e027      	b.n	8006bd0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d023      	beq.n	8006bd0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	4798      	blx	r3
 8006b90:	e01e      	b.n	8006bd0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d10f      	bne.n	8006bc0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f022 0210 	bic.w	r2, r2, #16
 8006bae:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d003      	beq.n	8006bd0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	f000 8306 	beq.w	80071e6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bde:	f003 0301 	and.w	r3, r3, #1
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	f000 8088 	beq.w	8006cf8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2204      	movs	r2, #4
 8006bec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a7a      	ldr	r2, [pc, #488]	; (8006de0 <HAL_DMA_IRQHandler+0xa08>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d04a      	beq.n	8006c90 <HAL_DMA_IRQHandler+0x8b8>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a79      	ldr	r2, [pc, #484]	; (8006de4 <HAL_DMA_IRQHandler+0xa0c>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d045      	beq.n	8006c90 <HAL_DMA_IRQHandler+0x8b8>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a77      	ldr	r2, [pc, #476]	; (8006de8 <HAL_DMA_IRQHandler+0xa10>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d040      	beq.n	8006c90 <HAL_DMA_IRQHandler+0x8b8>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a76      	ldr	r2, [pc, #472]	; (8006dec <HAL_DMA_IRQHandler+0xa14>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d03b      	beq.n	8006c90 <HAL_DMA_IRQHandler+0x8b8>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a74      	ldr	r2, [pc, #464]	; (8006df0 <HAL_DMA_IRQHandler+0xa18>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d036      	beq.n	8006c90 <HAL_DMA_IRQHandler+0x8b8>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a73      	ldr	r2, [pc, #460]	; (8006df4 <HAL_DMA_IRQHandler+0xa1c>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d031      	beq.n	8006c90 <HAL_DMA_IRQHandler+0x8b8>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a71      	ldr	r2, [pc, #452]	; (8006df8 <HAL_DMA_IRQHandler+0xa20>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d02c      	beq.n	8006c90 <HAL_DMA_IRQHandler+0x8b8>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a70      	ldr	r2, [pc, #448]	; (8006dfc <HAL_DMA_IRQHandler+0xa24>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d027      	beq.n	8006c90 <HAL_DMA_IRQHandler+0x8b8>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a6e      	ldr	r2, [pc, #440]	; (8006e00 <HAL_DMA_IRQHandler+0xa28>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d022      	beq.n	8006c90 <HAL_DMA_IRQHandler+0x8b8>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a6d      	ldr	r2, [pc, #436]	; (8006e04 <HAL_DMA_IRQHandler+0xa2c>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d01d      	beq.n	8006c90 <HAL_DMA_IRQHandler+0x8b8>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a6b      	ldr	r2, [pc, #428]	; (8006e08 <HAL_DMA_IRQHandler+0xa30>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d018      	beq.n	8006c90 <HAL_DMA_IRQHandler+0x8b8>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a6a      	ldr	r2, [pc, #424]	; (8006e0c <HAL_DMA_IRQHandler+0xa34>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d013      	beq.n	8006c90 <HAL_DMA_IRQHandler+0x8b8>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a68      	ldr	r2, [pc, #416]	; (8006e10 <HAL_DMA_IRQHandler+0xa38>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d00e      	beq.n	8006c90 <HAL_DMA_IRQHandler+0x8b8>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a67      	ldr	r2, [pc, #412]	; (8006e14 <HAL_DMA_IRQHandler+0xa3c>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d009      	beq.n	8006c90 <HAL_DMA_IRQHandler+0x8b8>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a65      	ldr	r2, [pc, #404]	; (8006e18 <HAL_DMA_IRQHandler+0xa40>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d004      	beq.n	8006c90 <HAL_DMA_IRQHandler+0x8b8>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a64      	ldr	r2, [pc, #400]	; (8006e1c <HAL_DMA_IRQHandler+0xa44>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d108      	bne.n	8006ca2 <HAL_DMA_IRQHandler+0x8ca>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f022 0201 	bic.w	r2, r2, #1
 8006c9e:	601a      	str	r2, [r3, #0]
 8006ca0:	e007      	b.n	8006cb2 <HAL_DMA_IRQHandler+0x8da>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f022 0201 	bic.w	r2, r2, #1
 8006cb0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	60fb      	str	r3, [r7, #12]
 8006cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d307      	bcc.n	8006cce <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f003 0301 	and.w	r3, r3, #1
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d1f2      	bne.n	8006cb2 <HAL_DMA_IRQHandler+0x8da>
 8006ccc:	e000      	b.n	8006cd0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006cce:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f003 0301 	and.w	r3, r3, #1
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d004      	beq.n	8006ce8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2203      	movs	r2, #3
 8006ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006ce6:	e003      	b.n	8006cf0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f000 8272 	beq.w	80071e6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	4798      	blx	r3
 8006d0a:	e26c      	b.n	80071e6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a43      	ldr	r2, [pc, #268]	; (8006e20 <HAL_DMA_IRQHandler+0xa48>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d022      	beq.n	8006d5c <HAL_DMA_IRQHandler+0x984>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a42      	ldr	r2, [pc, #264]	; (8006e24 <HAL_DMA_IRQHandler+0xa4c>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d01d      	beq.n	8006d5c <HAL_DMA_IRQHandler+0x984>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a40      	ldr	r2, [pc, #256]	; (8006e28 <HAL_DMA_IRQHandler+0xa50>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d018      	beq.n	8006d5c <HAL_DMA_IRQHandler+0x984>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a3f      	ldr	r2, [pc, #252]	; (8006e2c <HAL_DMA_IRQHandler+0xa54>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d013      	beq.n	8006d5c <HAL_DMA_IRQHandler+0x984>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a3d      	ldr	r2, [pc, #244]	; (8006e30 <HAL_DMA_IRQHandler+0xa58>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d00e      	beq.n	8006d5c <HAL_DMA_IRQHandler+0x984>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a3c      	ldr	r2, [pc, #240]	; (8006e34 <HAL_DMA_IRQHandler+0xa5c>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d009      	beq.n	8006d5c <HAL_DMA_IRQHandler+0x984>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a3a      	ldr	r2, [pc, #232]	; (8006e38 <HAL_DMA_IRQHandler+0xa60>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d004      	beq.n	8006d5c <HAL_DMA_IRQHandler+0x984>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a39      	ldr	r2, [pc, #228]	; (8006e3c <HAL_DMA_IRQHandler+0xa64>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d101      	bne.n	8006d60 <HAL_DMA_IRQHandler+0x988>
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e000      	b.n	8006d62 <HAL_DMA_IRQHandler+0x98a>
 8006d60:	2300      	movs	r3, #0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	f000 823f 	beq.w	80071e6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d74:	f003 031f 	and.w	r3, r3, #31
 8006d78:	2204      	movs	r2, #4
 8006d7a:	409a      	lsls	r2, r3
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	4013      	ands	r3, r2
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	f000 80cd 	beq.w	8006f20 <HAL_DMA_IRQHandler+0xb48>
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	f003 0304 	and.w	r3, r3, #4
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	f000 80c7 	beq.w	8006f20 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d96:	f003 031f 	and.w	r3, r3, #31
 8006d9a:	2204      	movs	r2, #4
 8006d9c:	409a      	lsls	r2, r3
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d049      	beq.n	8006e40 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d109      	bne.n	8006dca <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	f000 8210 	beq.w	80071e0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006dc8:	e20a      	b.n	80071e0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	f000 8206 	beq.w	80071e0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ddc:	e200      	b.n	80071e0 <HAL_DMA_IRQHandler+0xe08>
 8006dde:	bf00      	nop
 8006de0:	40020010 	.word	0x40020010
 8006de4:	40020028 	.word	0x40020028
 8006de8:	40020040 	.word	0x40020040
 8006dec:	40020058 	.word	0x40020058
 8006df0:	40020070 	.word	0x40020070
 8006df4:	40020088 	.word	0x40020088
 8006df8:	400200a0 	.word	0x400200a0
 8006dfc:	400200b8 	.word	0x400200b8
 8006e00:	40020410 	.word	0x40020410
 8006e04:	40020428 	.word	0x40020428
 8006e08:	40020440 	.word	0x40020440
 8006e0c:	40020458 	.word	0x40020458
 8006e10:	40020470 	.word	0x40020470
 8006e14:	40020488 	.word	0x40020488
 8006e18:	400204a0 	.word	0x400204a0
 8006e1c:	400204b8 	.word	0x400204b8
 8006e20:	58025408 	.word	0x58025408
 8006e24:	5802541c 	.word	0x5802541c
 8006e28:	58025430 	.word	0x58025430
 8006e2c:	58025444 	.word	0x58025444
 8006e30:	58025458 	.word	0x58025458
 8006e34:	5802546c 	.word	0x5802546c
 8006e38:	58025480 	.word	0x58025480
 8006e3c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	f003 0320 	and.w	r3, r3, #32
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d160      	bne.n	8006f0c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a7f      	ldr	r2, [pc, #508]	; (800704c <HAL_DMA_IRQHandler+0xc74>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d04a      	beq.n	8006eea <HAL_DMA_IRQHandler+0xb12>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a7d      	ldr	r2, [pc, #500]	; (8007050 <HAL_DMA_IRQHandler+0xc78>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d045      	beq.n	8006eea <HAL_DMA_IRQHandler+0xb12>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a7c      	ldr	r2, [pc, #496]	; (8007054 <HAL_DMA_IRQHandler+0xc7c>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d040      	beq.n	8006eea <HAL_DMA_IRQHandler+0xb12>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a7a      	ldr	r2, [pc, #488]	; (8007058 <HAL_DMA_IRQHandler+0xc80>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d03b      	beq.n	8006eea <HAL_DMA_IRQHandler+0xb12>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a79      	ldr	r2, [pc, #484]	; (800705c <HAL_DMA_IRQHandler+0xc84>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d036      	beq.n	8006eea <HAL_DMA_IRQHandler+0xb12>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a77      	ldr	r2, [pc, #476]	; (8007060 <HAL_DMA_IRQHandler+0xc88>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d031      	beq.n	8006eea <HAL_DMA_IRQHandler+0xb12>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a76      	ldr	r2, [pc, #472]	; (8007064 <HAL_DMA_IRQHandler+0xc8c>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d02c      	beq.n	8006eea <HAL_DMA_IRQHandler+0xb12>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a74      	ldr	r2, [pc, #464]	; (8007068 <HAL_DMA_IRQHandler+0xc90>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d027      	beq.n	8006eea <HAL_DMA_IRQHandler+0xb12>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a73      	ldr	r2, [pc, #460]	; (800706c <HAL_DMA_IRQHandler+0xc94>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d022      	beq.n	8006eea <HAL_DMA_IRQHandler+0xb12>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a71      	ldr	r2, [pc, #452]	; (8007070 <HAL_DMA_IRQHandler+0xc98>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d01d      	beq.n	8006eea <HAL_DMA_IRQHandler+0xb12>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a70      	ldr	r2, [pc, #448]	; (8007074 <HAL_DMA_IRQHandler+0xc9c>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d018      	beq.n	8006eea <HAL_DMA_IRQHandler+0xb12>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a6e      	ldr	r2, [pc, #440]	; (8007078 <HAL_DMA_IRQHandler+0xca0>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d013      	beq.n	8006eea <HAL_DMA_IRQHandler+0xb12>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a6d      	ldr	r2, [pc, #436]	; (800707c <HAL_DMA_IRQHandler+0xca4>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d00e      	beq.n	8006eea <HAL_DMA_IRQHandler+0xb12>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a6b      	ldr	r2, [pc, #428]	; (8007080 <HAL_DMA_IRQHandler+0xca8>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d009      	beq.n	8006eea <HAL_DMA_IRQHandler+0xb12>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a6a      	ldr	r2, [pc, #424]	; (8007084 <HAL_DMA_IRQHandler+0xcac>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d004      	beq.n	8006eea <HAL_DMA_IRQHandler+0xb12>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a68      	ldr	r2, [pc, #416]	; (8007088 <HAL_DMA_IRQHandler+0xcb0>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d108      	bne.n	8006efc <HAL_DMA_IRQHandler+0xb24>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f022 0208 	bic.w	r2, r2, #8
 8006ef8:	601a      	str	r2, [r3, #0]
 8006efa:	e007      	b.n	8006f0c <HAL_DMA_IRQHandler+0xb34>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f022 0204 	bic.w	r2, r2, #4
 8006f0a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	f000 8165 	beq.w	80071e0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f1e:	e15f      	b.n	80071e0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f24:	f003 031f 	and.w	r3, r3, #31
 8006f28:	2202      	movs	r2, #2
 8006f2a:	409a      	lsls	r2, r3
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	4013      	ands	r3, r2
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	f000 80c5 	beq.w	80070c0 <HAL_DMA_IRQHandler+0xce8>
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	f003 0302 	and.w	r3, r3, #2
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	f000 80bf 	beq.w	80070c0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f46:	f003 031f 	and.w	r3, r3, #31
 8006f4a:	2202      	movs	r2, #2
 8006f4c:	409a      	lsls	r2, r3
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d018      	beq.n	8006f8e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d109      	bne.n	8006f7a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	f000 813a 	beq.w	80071e4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f78:	e134      	b.n	80071e4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	f000 8130 	beq.w	80071e4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f8c:	e12a      	b.n	80071e4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	f003 0320 	and.w	r3, r3, #32
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	f040 8089 	bne.w	80070ac <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a2b      	ldr	r2, [pc, #172]	; (800704c <HAL_DMA_IRQHandler+0xc74>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d04a      	beq.n	800703a <HAL_DMA_IRQHandler+0xc62>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a29      	ldr	r2, [pc, #164]	; (8007050 <HAL_DMA_IRQHandler+0xc78>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d045      	beq.n	800703a <HAL_DMA_IRQHandler+0xc62>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a28      	ldr	r2, [pc, #160]	; (8007054 <HAL_DMA_IRQHandler+0xc7c>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d040      	beq.n	800703a <HAL_DMA_IRQHandler+0xc62>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a26      	ldr	r2, [pc, #152]	; (8007058 <HAL_DMA_IRQHandler+0xc80>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d03b      	beq.n	800703a <HAL_DMA_IRQHandler+0xc62>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a25      	ldr	r2, [pc, #148]	; (800705c <HAL_DMA_IRQHandler+0xc84>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d036      	beq.n	800703a <HAL_DMA_IRQHandler+0xc62>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a23      	ldr	r2, [pc, #140]	; (8007060 <HAL_DMA_IRQHandler+0xc88>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d031      	beq.n	800703a <HAL_DMA_IRQHandler+0xc62>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a22      	ldr	r2, [pc, #136]	; (8007064 <HAL_DMA_IRQHandler+0xc8c>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d02c      	beq.n	800703a <HAL_DMA_IRQHandler+0xc62>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a20      	ldr	r2, [pc, #128]	; (8007068 <HAL_DMA_IRQHandler+0xc90>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d027      	beq.n	800703a <HAL_DMA_IRQHandler+0xc62>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a1f      	ldr	r2, [pc, #124]	; (800706c <HAL_DMA_IRQHandler+0xc94>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d022      	beq.n	800703a <HAL_DMA_IRQHandler+0xc62>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a1d      	ldr	r2, [pc, #116]	; (8007070 <HAL_DMA_IRQHandler+0xc98>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d01d      	beq.n	800703a <HAL_DMA_IRQHandler+0xc62>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a1c      	ldr	r2, [pc, #112]	; (8007074 <HAL_DMA_IRQHandler+0xc9c>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d018      	beq.n	800703a <HAL_DMA_IRQHandler+0xc62>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a1a      	ldr	r2, [pc, #104]	; (8007078 <HAL_DMA_IRQHandler+0xca0>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d013      	beq.n	800703a <HAL_DMA_IRQHandler+0xc62>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a19      	ldr	r2, [pc, #100]	; (800707c <HAL_DMA_IRQHandler+0xca4>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d00e      	beq.n	800703a <HAL_DMA_IRQHandler+0xc62>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a17      	ldr	r2, [pc, #92]	; (8007080 <HAL_DMA_IRQHandler+0xca8>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d009      	beq.n	800703a <HAL_DMA_IRQHandler+0xc62>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a16      	ldr	r2, [pc, #88]	; (8007084 <HAL_DMA_IRQHandler+0xcac>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d004      	beq.n	800703a <HAL_DMA_IRQHandler+0xc62>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a14      	ldr	r2, [pc, #80]	; (8007088 <HAL_DMA_IRQHandler+0xcb0>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d128      	bne.n	800708c <HAL_DMA_IRQHandler+0xcb4>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f022 0214 	bic.w	r2, r2, #20
 8007048:	601a      	str	r2, [r3, #0]
 800704a:	e027      	b.n	800709c <HAL_DMA_IRQHandler+0xcc4>
 800704c:	40020010 	.word	0x40020010
 8007050:	40020028 	.word	0x40020028
 8007054:	40020040 	.word	0x40020040
 8007058:	40020058 	.word	0x40020058
 800705c:	40020070 	.word	0x40020070
 8007060:	40020088 	.word	0x40020088
 8007064:	400200a0 	.word	0x400200a0
 8007068:	400200b8 	.word	0x400200b8
 800706c:	40020410 	.word	0x40020410
 8007070:	40020428 	.word	0x40020428
 8007074:	40020440 	.word	0x40020440
 8007078:	40020458 	.word	0x40020458
 800707c:	40020470 	.word	0x40020470
 8007080:	40020488 	.word	0x40020488
 8007084:	400204a0 	.word	0x400204a0
 8007088:	400204b8 	.word	0x400204b8
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f022 020a 	bic.w	r2, r2, #10
 800709a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f000 8097 	beq.w	80071e4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80070be:	e091      	b.n	80071e4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070c4:	f003 031f 	and.w	r3, r3, #31
 80070c8:	2208      	movs	r2, #8
 80070ca:	409a      	lsls	r2, r3
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	4013      	ands	r3, r2
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f000 8088 	beq.w	80071e6 <HAL_DMA_IRQHandler+0xe0e>
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	f003 0308 	and.w	r3, r3, #8
 80070dc:	2b00      	cmp	r3, #0
 80070de:	f000 8082 	beq.w	80071e6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a41      	ldr	r2, [pc, #260]	; (80071ec <HAL_DMA_IRQHandler+0xe14>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d04a      	beq.n	8007182 <HAL_DMA_IRQHandler+0xdaa>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a3f      	ldr	r2, [pc, #252]	; (80071f0 <HAL_DMA_IRQHandler+0xe18>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d045      	beq.n	8007182 <HAL_DMA_IRQHandler+0xdaa>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a3e      	ldr	r2, [pc, #248]	; (80071f4 <HAL_DMA_IRQHandler+0xe1c>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d040      	beq.n	8007182 <HAL_DMA_IRQHandler+0xdaa>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a3c      	ldr	r2, [pc, #240]	; (80071f8 <HAL_DMA_IRQHandler+0xe20>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d03b      	beq.n	8007182 <HAL_DMA_IRQHandler+0xdaa>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a3b      	ldr	r2, [pc, #236]	; (80071fc <HAL_DMA_IRQHandler+0xe24>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d036      	beq.n	8007182 <HAL_DMA_IRQHandler+0xdaa>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a39      	ldr	r2, [pc, #228]	; (8007200 <HAL_DMA_IRQHandler+0xe28>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d031      	beq.n	8007182 <HAL_DMA_IRQHandler+0xdaa>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a38      	ldr	r2, [pc, #224]	; (8007204 <HAL_DMA_IRQHandler+0xe2c>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d02c      	beq.n	8007182 <HAL_DMA_IRQHandler+0xdaa>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a36      	ldr	r2, [pc, #216]	; (8007208 <HAL_DMA_IRQHandler+0xe30>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d027      	beq.n	8007182 <HAL_DMA_IRQHandler+0xdaa>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a35      	ldr	r2, [pc, #212]	; (800720c <HAL_DMA_IRQHandler+0xe34>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d022      	beq.n	8007182 <HAL_DMA_IRQHandler+0xdaa>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a33      	ldr	r2, [pc, #204]	; (8007210 <HAL_DMA_IRQHandler+0xe38>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d01d      	beq.n	8007182 <HAL_DMA_IRQHandler+0xdaa>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a32      	ldr	r2, [pc, #200]	; (8007214 <HAL_DMA_IRQHandler+0xe3c>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d018      	beq.n	8007182 <HAL_DMA_IRQHandler+0xdaa>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a30      	ldr	r2, [pc, #192]	; (8007218 <HAL_DMA_IRQHandler+0xe40>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d013      	beq.n	8007182 <HAL_DMA_IRQHandler+0xdaa>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a2f      	ldr	r2, [pc, #188]	; (800721c <HAL_DMA_IRQHandler+0xe44>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d00e      	beq.n	8007182 <HAL_DMA_IRQHandler+0xdaa>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a2d      	ldr	r2, [pc, #180]	; (8007220 <HAL_DMA_IRQHandler+0xe48>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d009      	beq.n	8007182 <HAL_DMA_IRQHandler+0xdaa>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a2c      	ldr	r2, [pc, #176]	; (8007224 <HAL_DMA_IRQHandler+0xe4c>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d004      	beq.n	8007182 <HAL_DMA_IRQHandler+0xdaa>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a2a      	ldr	r2, [pc, #168]	; (8007228 <HAL_DMA_IRQHandler+0xe50>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d108      	bne.n	8007194 <HAL_DMA_IRQHandler+0xdbc>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f022 021c 	bic.w	r2, r2, #28
 8007190:	601a      	str	r2, [r3, #0]
 8007192:	e007      	b.n	80071a4 <HAL_DMA_IRQHandler+0xdcc>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f022 020e 	bic.w	r2, r2, #14
 80071a2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071a8:	f003 031f 	and.w	r3, r3, #31
 80071ac:	2201      	movs	r2, #1
 80071ae:	409a      	lsls	r2, r3
 80071b0:	69fb      	ldr	r3, [r7, #28]
 80071b2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2201      	movs	r2, #1
 80071be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d009      	beq.n	80071e6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	4798      	blx	r3
 80071da:	e004      	b.n	80071e6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80071dc:	bf00      	nop
 80071de:	e002      	b.n	80071e6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071e0:	bf00      	nop
 80071e2:	e000      	b.n	80071e6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071e4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80071e6:	3728      	adds	r7, #40	; 0x28
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}
 80071ec:	40020010 	.word	0x40020010
 80071f0:	40020028 	.word	0x40020028
 80071f4:	40020040 	.word	0x40020040
 80071f8:	40020058 	.word	0x40020058
 80071fc:	40020070 	.word	0x40020070
 8007200:	40020088 	.word	0x40020088
 8007204:	400200a0 	.word	0x400200a0
 8007208:	400200b8 	.word	0x400200b8
 800720c:	40020410 	.word	0x40020410
 8007210:	40020428 	.word	0x40020428
 8007214:	40020440 	.word	0x40020440
 8007218:	40020458 	.word	0x40020458
 800721c:	40020470 	.word	0x40020470
 8007220:	40020488 	.word	0x40020488
 8007224:	400204a0 	.word	0x400204a0
 8007228:	400204b8 	.word	0x400204b8

0800722c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800722c:	b480      	push	{r7}
 800722e:	b087      	sub	sp, #28
 8007230:	af00      	add	r7, sp, #0
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	60b9      	str	r1, [r7, #8]
 8007236:	607a      	str	r2, [r7, #4]
 8007238:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800723e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007244:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a7f      	ldr	r2, [pc, #508]	; (8007448 <DMA_SetConfig+0x21c>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d072      	beq.n	8007336 <DMA_SetConfig+0x10a>
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a7d      	ldr	r2, [pc, #500]	; (800744c <DMA_SetConfig+0x220>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d06d      	beq.n	8007336 <DMA_SetConfig+0x10a>
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a7c      	ldr	r2, [pc, #496]	; (8007450 <DMA_SetConfig+0x224>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d068      	beq.n	8007336 <DMA_SetConfig+0x10a>
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a7a      	ldr	r2, [pc, #488]	; (8007454 <DMA_SetConfig+0x228>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d063      	beq.n	8007336 <DMA_SetConfig+0x10a>
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a79      	ldr	r2, [pc, #484]	; (8007458 <DMA_SetConfig+0x22c>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d05e      	beq.n	8007336 <DMA_SetConfig+0x10a>
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a77      	ldr	r2, [pc, #476]	; (800745c <DMA_SetConfig+0x230>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d059      	beq.n	8007336 <DMA_SetConfig+0x10a>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a76      	ldr	r2, [pc, #472]	; (8007460 <DMA_SetConfig+0x234>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d054      	beq.n	8007336 <DMA_SetConfig+0x10a>
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a74      	ldr	r2, [pc, #464]	; (8007464 <DMA_SetConfig+0x238>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d04f      	beq.n	8007336 <DMA_SetConfig+0x10a>
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a73      	ldr	r2, [pc, #460]	; (8007468 <DMA_SetConfig+0x23c>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d04a      	beq.n	8007336 <DMA_SetConfig+0x10a>
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a71      	ldr	r2, [pc, #452]	; (800746c <DMA_SetConfig+0x240>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d045      	beq.n	8007336 <DMA_SetConfig+0x10a>
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a70      	ldr	r2, [pc, #448]	; (8007470 <DMA_SetConfig+0x244>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d040      	beq.n	8007336 <DMA_SetConfig+0x10a>
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a6e      	ldr	r2, [pc, #440]	; (8007474 <DMA_SetConfig+0x248>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d03b      	beq.n	8007336 <DMA_SetConfig+0x10a>
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a6d      	ldr	r2, [pc, #436]	; (8007478 <DMA_SetConfig+0x24c>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d036      	beq.n	8007336 <DMA_SetConfig+0x10a>
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a6b      	ldr	r2, [pc, #428]	; (800747c <DMA_SetConfig+0x250>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d031      	beq.n	8007336 <DMA_SetConfig+0x10a>
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a6a      	ldr	r2, [pc, #424]	; (8007480 <DMA_SetConfig+0x254>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d02c      	beq.n	8007336 <DMA_SetConfig+0x10a>
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a68      	ldr	r2, [pc, #416]	; (8007484 <DMA_SetConfig+0x258>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d027      	beq.n	8007336 <DMA_SetConfig+0x10a>
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a67      	ldr	r2, [pc, #412]	; (8007488 <DMA_SetConfig+0x25c>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d022      	beq.n	8007336 <DMA_SetConfig+0x10a>
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a65      	ldr	r2, [pc, #404]	; (800748c <DMA_SetConfig+0x260>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d01d      	beq.n	8007336 <DMA_SetConfig+0x10a>
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a64      	ldr	r2, [pc, #400]	; (8007490 <DMA_SetConfig+0x264>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d018      	beq.n	8007336 <DMA_SetConfig+0x10a>
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a62      	ldr	r2, [pc, #392]	; (8007494 <DMA_SetConfig+0x268>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d013      	beq.n	8007336 <DMA_SetConfig+0x10a>
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a61      	ldr	r2, [pc, #388]	; (8007498 <DMA_SetConfig+0x26c>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d00e      	beq.n	8007336 <DMA_SetConfig+0x10a>
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a5f      	ldr	r2, [pc, #380]	; (800749c <DMA_SetConfig+0x270>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d009      	beq.n	8007336 <DMA_SetConfig+0x10a>
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a5e      	ldr	r2, [pc, #376]	; (80074a0 <DMA_SetConfig+0x274>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d004      	beq.n	8007336 <DMA_SetConfig+0x10a>
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a5c      	ldr	r2, [pc, #368]	; (80074a4 <DMA_SetConfig+0x278>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d101      	bne.n	800733a <DMA_SetConfig+0x10e>
 8007336:	2301      	movs	r3, #1
 8007338:	e000      	b.n	800733c <DMA_SetConfig+0x110>
 800733a:	2300      	movs	r3, #0
 800733c:	2b00      	cmp	r3, #0
 800733e:	d00d      	beq.n	800735c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007344:	68fa      	ldr	r2, [r7, #12]
 8007346:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007348:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800734e:	2b00      	cmp	r3, #0
 8007350:	d004      	beq.n	800735c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007356:	68fa      	ldr	r2, [r7, #12]
 8007358:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800735a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a39      	ldr	r2, [pc, #228]	; (8007448 <DMA_SetConfig+0x21c>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d04a      	beq.n	80073fc <DMA_SetConfig+0x1d0>
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a38      	ldr	r2, [pc, #224]	; (800744c <DMA_SetConfig+0x220>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d045      	beq.n	80073fc <DMA_SetConfig+0x1d0>
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a36      	ldr	r2, [pc, #216]	; (8007450 <DMA_SetConfig+0x224>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d040      	beq.n	80073fc <DMA_SetConfig+0x1d0>
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a35      	ldr	r2, [pc, #212]	; (8007454 <DMA_SetConfig+0x228>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d03b      	beq.n	80073fc <DMA_SetConfig+0x1d0>
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a33      	ldr	r2, [pc, #204]	; (8007458 <DMA_SetConfig+0x22c>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d036      	beq.n	80073fc <DMA_SetConfig+0x1d0>
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a32      	ldr	r2, [pc, #200]	; (800745c <DMA_SetConfig+0x230>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d031      	beq.n	80073fc <DMA_SetConfig+0x1d0>
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a30      	ldr	r2, [pc, #192]	; (8007460 <DMA_SetConfig+0x234>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d02c      	beq.n	80073fc <DMA_SetConfig+0x1d0>
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a2f      	ldr	r2, [pc, #188]	; (8007464 <DMA_SetConfig+0x238>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d027      	beq.n	80073fc <DMA_SetConfig+0x1d0>
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a2d      	ldr	r2, [pc, #180]	; (8007468 <DMA_SetConfig+0x23c>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d022      	beq.n	80073fc <DMA_SetConfig+0x1d0>
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a2c      	ldr	r2, [pc, #176]	; (800746c <DMA_SetConfig+0x240>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d01d      	beq.n	80073fc <DMA_SetConfig+0x1d0>
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a2a      	ldr	r2, [pc, #168]	; (8007470 <DMA_SetConfig+0x244>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d018      	beq.n	80073fc <DMA_SetConfig+0x1d0>
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a29      	ldr	r2, [pc, #164]	; (8007474 <DMA_SetConfig+0x248>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d013      	beq.n	80073fc <DMA_SetConfig+0x1d0>
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a27      	ldr	r2, [pc, #156]	; (8007478 <DMA_SetConfig+0x24c>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d00e      	beq.n	80073fc <DMA_SetConfig+0x1d0>
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a26      	ldr	r2, [pc, #152]	; (800747c <DMA_SetConfig+0x250>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d009      	beq.n	80073fc <DMA_SetConfig+0x1d0>
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a24      	ldr	r2, [pc, #144]	; (8007480 <DMA_SetConfig+0x254>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d004      	beq.n	80073fc <DMA_SetConfig+0x1d0>
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a23      	ldr	r2, [pc, #140]	; (8007484 <DMA_SetConfig+0x258>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d101      	bne.n	8007400 <DMA_SetConfig+0x1d4>
 80073fc:	2301      	movs	r3, #1
 80073fe:	e000      	b.n	8007402 <DMA_SetConfig+0x1d6>
 8007400:	2300      	movs	r3, #0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d059      	beq.n	80074ba <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800740a:	f003 031f 	and.w	r3, r3, #31
 800740e:	223f      	movs	r2, #63	; 0x3f
 8007410:	409a      	lsls	r2, r3
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007424:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	683a      	ldr	r2, [r7, #0]
 800742c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	2b40      	cmp	r3, #64	; 0x40
 8007434:	d138      	bne.n	80074a8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	68ba      	ldr	r2, [r7, #8]
 8007444:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007446:	e086      	b.n	8007556 <DMA_SetConfig+0x32a>
 8007448:	40020010 	.word	0x40020010
 800744c:	40020028 	.word	0x40020028
 8007450:	40020040 	.word	0x40020040
 8007454:	40020058 	.word	0x40020058
 8007458:	40020070 	.word	0x40020070
 800745c:	40020088 	.word	0x40020088
 8007460:	400200a0 	.word	0x400200a0
 8007464:	400200b8 	.word	0x400200b8
 8007468:	40020410 	.word	0x40020410
 800746c:	40020428 	.word	0x40020428
 8007470:	40020440 	.word	0x40020440
 8007474:	40020458 	.word	0x40020458
 8007478:	40020470 	.word	0x40020470
 800747c:	40020488 	.word	0x40020488
 8007480:	400204a0 	.word	0x400204a0
 8007484:	400204b8 	.word	0x400204b8
 8007488:	58025408 	.word	0x58025408
 800748c:	5802541c 	.word	0x5802541c
 8007490:	58025430 	.word	0x58025430
 8007494:	58025444 	.word	0x58025444
 8007498:	58025458 	.word	0x58025458
 800749c:	5802546c 	.word	0x5802546c
 80074a0:	58025480 	.word	0x58025480
 80074a4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	68ba      	ldr	r2, [r7, #8]
 80074ae:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	60da      	str	r2, [r3, #12]
}
 80074b8:	e04d      	b.n	8007556 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a29      	ldr	r2, [pc, #164]	; (8007564 <DMA_SetConfig+0x338>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d022      	beq.n	800750a <DMA_SetConfig+0x2de>
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a27      	ldr	r2, [pc, #156]	; (8007568 <DMA_SetConfig+0x33c>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d01d      	beq.n	800750a <DMA_SetConfig+0x2de>
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a26      	ldr	r2, [pc, #152]	; (800756c <DMA_SetConfig+0x340>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d018      	beq.n	800750a <DMA_SetConfig+0x2de>
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a24      	ldr	r2, [pc, #144]	; (8007570 <DMA_SetConfig+0x344>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d013      	beq.n	800750a <DMA_SetConfig+0x2de>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a23      	ldr	r2, [pc, #140]	; (8007574 <DMA_SetConfig+0x348>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d00e      	beq.n	800750a <DMA_SetConfig+0x2de>
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a21      	ldr	r2, [pc, #132]	; (8007578 <DMA_SetConfig+0x34c>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d009      	beq.n	800750a <DMA_SetConfig+0x2de>
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a20      	ldr	r2, [pc, #128]	; (800757c <DMA_SetConfig+0x350>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d004      	beq.n	800750a <DMA_SetConfig+0x2de>
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a1e      	ldr	r2, [pc, #120]	; (8007580 <DMA_SetConfig+0x354>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d101      	bne.n	800750e <DMA_SetConfig+0x2e2>
 800750a:	2301      	movs	r3, #1
 800750c:	e000      	b.n	8007510 <DMA_SetConfig+0x2e4>
 800750e:	2300      	movs	r3, #0
 8007510:	2b00      	cmp	r3, #0
 8007512:	d020      	beq.n	8007556 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007518:	f003 031f 	and.w	r3, r3, #31
 800751c:	2201      	movs	r2, #1
 800751e:	409a      	lsls	r2, r3
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	683a      	ldr	r2, [r7, #0]
 800752a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	2b40      	cmp	r3, #64	; 0x40
 8007532:	d108      	bne.n	8007546 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	68ba      	ldr	r2, [r7, #8]
 8007542:	60da      	str	r2, [r3, #12]
}
 8007544:	e007      	b.n	8007556 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	68ba      	ldr	r2, [r7, #8]
 800754c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	60da      	str	r2, [r3, #12]
}
 8007556:	bf00      	nop
 8007558:	371c      	adds	r7, #28
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr
 8007562:	bf00      	nop
 8007564:	58025408 	.word	0x58025408
 8007568:	5802541c 	.word	0x5802541c
 800756c:	58025430 	.word	0x58025430
 8007570:	58025444 	.word	0x58025444
 8007574:	58025458 	.word	0x58025458
 8007578:	5802546c 	.word	0x5802546c
 800757c:	58025480 	.word	0x58025480
 8007580:	58025494 	.word	0x58025494

08007584 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007584:	b480      	push	{r7}
 8007586:	b085      	sub	sp, #20
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a42      	ldr	r2, [pc, #264]	; (800769c <DMA_CalcBaseAndBitshift+0x118>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d04a      	beq.n	800762c <DMA_CalcBaseAndBitshift+0xa8>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a41      	ldr	r2, [pc, #260]	; (80076a0 <DMA_CalcBaseAndBitshift+0x11c>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d045      	beq.n	800762c <DMA_CalcBaseAndBitshift+0xa8>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a3f      	ldr	r2, [pc, #252]	; (80076a4 <DMA_CalcBaseAndBitshift+0x120>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d040      	beq.n	800762c <DMA_CalcBaseAndBitshift+0xa8>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a3e      	ldr	r2, [pc, #248]	; (80076a8 <DMA_CalcBaseAndBitshift+0x124>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d03b      	beq.n	800762c <DMA_CalcBaseAndBitshift+0xa8>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a3c      	ldr	r2, [pc, #240]	; (80076ac <DMA_CalcBaseAndBitshift+0x128>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d036      	beq.n	800762c <DMA_CalcBaseAndBitshift+0xa8>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a3b      	ldr	r2, [pc, #236]	; (80076b0 <DMA_CalcBaseAndBitshift+0x12c>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d031      	beq.n	800762c <DMA_CalcBaseAndBitshift+0xa8>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a39      	ldr	r2, [pc, #228]	; (80076b4 <DMA_CalcBaseAndBitshift+0x130>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d02c      	beq.n	800762c <DMA_CalcBaseAndBitshift+0xa8>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a38      	ldr	r2, [pc, #224]	; (80076b8 <DMA_CalcBaseAndBitshift+0x134>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d027      	beq.n	800762c <DMA_CalcBaseAndBitshift+0xa8>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a36      	ldr	r2, [pc, #216]	; (80076bc <DMA_CalcBaseAndBitshift+0x138>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d022      	beq.n	800762c <DMA_CalcBaseAndBitshift+0xa8>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a35      	ldr	r2, [pc, #212]	; (80076c0 <DMA_CalcBaseAndBitshift+0x13c>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d01d      	beq.n	800762c <DMA_CalcBaseAndBitshift+0xa8>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a33      	ldr	r2, [pc, #204]	; (80076c4 <DMA_CalcBaseAndBitshift+0x140>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d018      	beq.n	800762c <DMA_CalcBaseAndBitshift+0xa8>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a32      	ldr	r2, [pc, #200]	; (80076c8 <DMA_CalcBaseAndBitshift+0x144>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d013      	beq.n	800762c <DMA_CalcBaseAndBitshift+0xa8>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a30      	ldr	r2, [pc, #192]	; (80076cc <DMA_CalcBaseAndBitshift+0x148>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d00e      	beq.n	800762c <DMA_CalcBaseAndBitshift+0xa8>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a2f      	ldr	r2, [pc, #188]	; (80076d0 <DMA_CalcBaseAndBitshift+0x14c>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d009      	beq.n	800762c <DMA_CalcBaseAndBitshift+0xa8>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a2d      	ldr	r2, [pc, #180]	; (80076d4 <DMA_CalcBaseAndBitshift+0x150>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d004      	beq.n	800762c <DMA_CalcBaseAndBitshift+0xa8>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a2c      	ldr	r2, [pc, #176]	; (80076d8 <DMA_CalcBaseAndBitshift+0x154>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d101      	bne.n	8007630 <DMA_CalcBaseAndBitshift+0xac>
 800762c:	2301      	movs	r3, #1
 800762e:	e000      	b.n	8007632 <DMA_CalcBaseAndBitshift+0xae>
 8007630:	2300      	movs	r3, #0
 8007632:	2b00      	cmp	r3, #0
 8007634:	d024      	beq.n	8007680 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	b2db      	uxtb	r3, r3
 800763c:	3b10      	subs	r3, #16
 800763e:	4a27      	ldr	r2, [pc, #156]	; (80076dc <DMA_CalcBaseAndBitshift+0x158>)
 8007640:	fba2 2303 	umull	r2, r3, r2, r3
 8007644:	091b      	lsrs	r3, r3, #4
 8007646:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f003 0307 	and.w	r3, r3, #7
 800764e:	4a24      	ldr	r2, [pc, #144]	; (80076e0 <DMA_CalcBaseAndBitshift+0x15c>)
 8007650:	5cd3      	ldrb	r3, [r2, r3]
 8007652:	461a      	mov	r2, r3
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2b03      	cmp	r3, #3
 800765c:	d908      	bls.n	8007670 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	461a      	mov	r2, r3
 8007664:	4b1f      	ldr	r3, [pc, #124]	; (80076e4 <DMA_CalcBaseAndBitshift+0x160>)
 8007666:	4013      	ands	r3, r2
 8007668:	1d1a      	adds	r2, r3, #4
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	659a      	str	r2, [r3, #88]	; 0x58
 800766e:	e00d      	b.n	800768c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	461a      	mov	r2, r3
 8007676:	4b1b      	ldr	r3, [pc, #108]	; (80076e4 <DMA_CalcBaseAndBitshift+0x160>)
 8007678:	4013      	ands	r3, r2
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	6593      	str	r3, [r2, #88]	; 0x58
 800767e:	e005      	b.n	800768c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007690:	4618      	mov	r0, r3
 8007692:	3714      	adds	r7, #20
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr
 800769c:	40020010 	.word	0x40020010
 80076a0:	40020028 	.word	0x40020028
 80076a4:	40020040 	.word	0x40020040
 80076a8:	40020058 	.word	0x40020058
 80076ac:	40020070 	.word	0x40020070
 80076b0:	40020088 	.word	0x40020088
 80076b4:	400200a0 	.word	0x400200a0
 80076b8:	400200b8 	.word	0x400200b8
 80076bc:	40020410 	.word	0x40020410
 80076c0:	40020428 	.word	0x40020428
 80076c4:	40020440 	.word	0x40020440
 80076c8:	40020458 	.word	0x40020458
 80076cc:	40020470 	.word	0x40020470
 80076d0:	40020488 	.word	0x40020488
 80076d4:	400204a0 	.word	0x400204a0
 80076d8:	400204b8 	.word	0x400204b8
 80076dc:	aaaaaaab 	.word	0xaaaaaaab
 80076e0:	0800ea08 	.word	0x0800ea08
 80076e4:	fffffc00 	.word	0xfffffc00

080076e8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b085      	sub	sp, #20
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076f0:	2300      	movs	r3, #0
 80076f2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	699b      	ldr	r3, [r3, #24]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d120      	bne.n	800773e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007700:	2b03      	cmp	r3, #3
 8007702:	d858      	bhi.n	80077b6 <DMA_CheckFifoParam+0xce>
 8007704:	a201      	add	r2, pc, #4	; (adr r2, 800770c <DMA_CheckFifoParam+0x24>)
 8007706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800770a:	bf00      	nop
 800770c:	0800771d 	.word	0x0800771d
 8007710:	0800772f 	.word	0x0800772f
 8007714:	0800771d 	.word	0x0800771d
 8007718:	080077b7 	.word	0x080077b7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007720:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007724:	2b00      	cmp	r3, #0
 8007726:	d048      	beq.n	80077ba <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007728:	2301      	movs	r3, #1
 800772a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800772c:	e045      	b.n	80077ba <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007732:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007736:	d142      	bne.n	80077be <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007738:	2301      	movs	r3, #1
 800773a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800773c:	e03f      	b.n	80077be <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	699b      	ldr	r3, [r3, #24]
 8007742:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007746:	d123      	bne.n	8007790 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800774c:	2b03      	cmp	r3, #3
 800774e:	d838      	bhi.n	80077c2 <DMA_CheckFifoParam+0xda>
 8007750:	a201      	add	r2, pc, #4	; (adr r2, 8007758 <DMA_CheckFifoParam+0x70>)
 8007752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007756:	bf00      	nop
 8007758:	08007769 	.word	0x08007769
 800775c:	0800776f 	.word	0x0800776f
 8007760:	08007769 	.word	0x08007769
 8007764:	08007781 	.word	0x08007781
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	73fb      	strb	r3, [r7, #15]
        break;
 800776c:	e030      	b.n	80077d0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007772:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007776:	2b00      	cmp	r3, #0
 8007778:	d025      	beq.n	80077c6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800777e:	e022      	b.n	80077c6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007784:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007788:	d11f      	bne.n	80077ca <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800778e:	e01c      	b.n	80077ca <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007794:	2b02      	cmp	r3, #2
 8007796:	d902      	bls.n	800779e <DMA_CheckFifoParam+0xb6>
 8007798:	2b03      	cmp	r3, #3
 800779a:	d003      	beq.n	80077a4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800779c:	e018      	b.n	80077d0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800779e:	2301      	movs	r3, #1
 80077a0:	73fb      	strb	r3, [r7, #15]
        break;
 80077a2:	e015      	b.n	80077d0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d00e      	beq.n	80077ce <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80077b0:	2301      	movs	r3, #1
 80077b2:	73fb      	strb	r3, [r7, #15]
    break;
 80077b4:	e00b      	b.n	80077ce <DMA_CheckFifoParam+0xe6>
        break;
 80077b6:	bf00      	nop
 80077b8:	e00a      	b.n	80077d0 <DMA_CheckFifoParam+0xe8>
        break;
 80077ba:	bf00      	nop
 80077bc:	e008      	b.n	80077d0 <DMA_CheckFifoParam+0xe8>
        break;
 80077be:	bf00      	nop
 80077c0:	e006      	b.n	80077d0 <DMA_CheckFifoParam+0xe8>
        break;
 80077c2:	bf00      	nop
 80077c4:	e004      	b.n	80077d0 <DMA_CheckFifoParam+0xe8>
        break;
 80077c6:	bf00      	nop
 80077c8:	e002      	b.n	80077d0 <DMA_CheckFifoParam+0xe8>
        break;
 80077ca:	bf00      	nop
 80077cc:	e000      	b.n	80077d0 <DMA_CheckFifoParam+0xe8>
    break;
 80077ce:	bf00      	nop
    }
  }

  return status;
 80077d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3714      	adds	r7, #20
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop

080077e0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b085      	sub	sp, #20
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a38      	ldr	r2, [pc, #224]	; (80078d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d022      	beq.n	800783e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a36      	ldr	r2, [pc, #216]	; (80078d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d01d      	beq.n	800783e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a35      	ldr	r2, [pc, #212]	; (80078dc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d018      	beq.n	800783e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a33      	ldr	r2, [pc, #204]	; (80078e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d013      	beq.n	800783e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a32      	ldr	r2, [pc, #200]	; (80078e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d00e      	beq.n	800783e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a30      	ldr	r2, [pc, #192]	; (80078e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d009      	beq.n	800783e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a2f      	ldr	r2, [pc, #188]	; (80078ec <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d004      	beq.n	800783e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a2d      	ldr	r2, [pc, #180]	; (80078f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d101      	bne.n	8007842 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800783e:	2301      	movs	r3, #1
 8007840:	e000      	b.n	8007844 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007842:	2300      	movs	r3, #0
 8007844:	2b00      	cmp	r3, #0
 8007846:	d01a      	beq.n	800787e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	b2db      	uxtb	r3, r3
 800784e:	3b08      	subs	r3, #8
 8007850:	4a28      	ldr	r2, [pc, #160]	; (80078f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007852:	fba2 2303 	umull	r2, r3, r2, r3
 8007856:	091b      	lsrs	r3, r3, #4
 8007858:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800785a:	68fa      	ldr	r2, [r7, #12]
 800785c:	4b26      	ldr	r3, [pc, #152]	; (80078f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800785e:	4413      	add	r3, r2
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	461a      	mov	r2, r3
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	4a24      	ldr	r2, [pc, #144]	; (80078fc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800786c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f003 031f 	and.w	r3, r3, #31
 8007874:	2201      	movs	r2, #1
 8007876:	409a      	lsls	r2, r3
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800787c:	e024      	b.n	80078c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	b2db      	uxtb	r3, r3
 8007884:	3b10      	subs	r3, #16
 8007886:	4a1e      	ldr	r2, [pc, #120]	; (8007900 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007888:	fba2 2303 	umull	r2, r3, r2, r3
 800788c:	091b      	lsrs	r3, r3, #4
 800788e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	4a1c      	ldr	r2, [pc, #112]	; (8007904 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d806      	bhi.n	80078a6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	4a1b      	ldr	r2, [pc, #108]	; (8007908 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d902      	bls.n	80078a6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	3308      	adds	r3, #8
 80078a4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80078a6:	68fa      	ldr	r2, [r7, #12]
 80078a8:	4b18      	ldr	r3, [pc, #96]	; (800790c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80078aa:	4413      	add	r3, r2
 80078ac:	009b      	lsls	r3, r3, #2
 80078ae:	461a      	mov	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	4a16      	ldr	r2, [pc, #88]	; (8007910 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80078b8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f003 031f 	and.w	r3, r3, #31
 80078c0:	2201      	movs	r2, #1
 80078c2:	409a      	lsls	r2, r3
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80078c8:	bf00      	nop
 80078ca:	3714      	adds	r7, #20
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr
 80078d4:	58025408 	.word	0x58025408
 80078d8:	5802541c 	.word	0x5802541c
 80078dc:	58025430 	.word	0x58025430
 80078e0:	58025444 	.word	0x58025444
 80078e4:	58025458 	.word	0x58025458
 80078e8:	5802546c 	.word	0x5802546c
 80078ec:	58025480 	.word	0x58025480
 80078f0:	58025494 	.word	0x58025494
 80078f4:	cccccccd 	.word	0xcccccccd
 80078f8:	16009600 	.word	0x16009600
 80078fc:	58025880 	.word	0x58025880
 8007900:	aaaaaaab 	.word	0xaaaaaaab
 8007904:	400204b8 	.word	0x400204b8
 8007908:	4002040f 	.word	0x4002040f
 800790c:	10008200 	.word	0x10008200
 8007910:	40020880 	.word	0x40020880

08007914 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007914:	b480      	push	{r7}
 8007916:	b085      	sub	sp, #20
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	b2db      	uxtb	r3, r3
 8007922:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d04a      	beq.n	80079c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2b08      	cmp	r3, #8
 800792e:	d847      	bhi.n	80079c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a25      	ldr	r2, [pc, #148]	; (80079cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d022      	beq.n	8007980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a24      	ldr	r2, [pc, #144]	; (80079d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d01d      	beq.n	8007980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a22      	ldr	r2, [pc, #136]	; (80079d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d018      	beq.n	8007980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a21      	ldr	r2, [pc, #132]	; (80079d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d013      	beq.n	8007980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a1f      	ldr	r2, [pc, #124]	; (80079dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d00e      	beq.n	8007980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a1e      	ldr	r2, [pc, #120]	; (80079e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d009      	beq.n	8007980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a1c      	ldr	r2, [pc, #112]	; (80079e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d004      	beq.n	8007980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a1b      	ldr	r2, [pc, #108]	; (80079e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d101      	bne.n	8007984 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007980:	2301      	movs	r3, #1
 8007982:	e000      	b.n	8007986 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007984:	2300      	movs	r3, #0
 8007986:	2b00      	cmp	r3, #0
 8007988:	d00a      	beq.n	80079a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800798a:	68fa      	ldr	r2, [r7, #12]
 800798c:	4b17      	ldr	r3, [pc, #92]	; (80079ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800798e:	4413      	add	r3, r2
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	461a      	mov	r2, r3
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	4a15      	ldr	r2, [pc, #84]	; (80079f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800799c:	671a      	str	r2, [r3, #112]	; 0x70
 800799e:	e009      	b.n	80079b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80079a0:	68fa      	ldr	r2, [r7, #12]
 80079a2:	4b14      	ldr	r3, [pc, #80]	; (80079f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80079a4:	4413      	add	r3, r2
 80079a6:	009b      	lsls	r3, r3, #2
 80079a8:	461a      	mov	r2, r3
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	4a11      	ldr	r2, [pc, #68]	; (80079f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80079b2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	3b01      	subs	r3, #1
 80079b8:	2201      	movs	r2, #1
 80079ba:	409a      	lsls	r2, r3
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80079c0:	bf00      	nop
 80079c2:	3714      	adds	r7, #20
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr
 80079cc:	58025408 	.word	0x58025408
 80079d0:	5802541c 	.word	0x5802541c
 80079d4:	58025430 	.word	0x58025430
 80079d8:	58025444 	.word	0x58025444
 80079dc:	58025458 	.word	0x58025458
 80079e0:	5802546c 	.word	0x5802546c
 80079e4:	58025480 	.word	0x58025480
 80079e8:	58025494 	.word	0x58025494
 80079ec:	1600963f 	.word	0x1600963f
 80079f0:	58025940 	.word	0x58025940
 80079f4:	1000823f 	.word	0x1000823f
 80079f8:	40020940 	.word	0x40020940

080079fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b089      	sub	sp, #36	; 0x24
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007a06:	2300      	movs	r3, #0
 8007a08:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007a0a:	4b86      	ldr	r3, [pc, #536]	; (8007c24 <HAL_GPIO_Init+0x228>)
 8007a0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007a0e:	e18c      	b.n	8007d2a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	2101      	movs	r1, #1
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	fa01 f303 	lsl.w	r3, r1, r3
 8007a1c:	4013      	ands	r3, r2
 8007a1e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	f000 817e 	beq.w	8007d24 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	f003 0303 	and.w	r3, r3, #3
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d005      	beq.n	8007a40 <HAL_GPIO_Init+0x44>
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	f003 0303 	and.w	r3, r3, #3
 8007a3c:	2b02      	cmp	r3, #2
 8007a3e:	d130      	bne.n	8007aa2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007a46:	69fb      	ldr	r3, [r7, #28]
 8007a48:	005b      	lsls	r3, r3, #1
 8007a4a:	2203      	movs	r2, #3
 8007a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a50:	43db      	mvns	r3, r3
 8007a52:	69ba      	ldr	r2, [r7, #24]
 8007a54:	4013      	ands	r3, r2
 8007a56:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	68da      	ldr	r2, [r3, #12]
 8007a5c:	69fb      	ldr	r3, [r7, #28]
 8007a5e:	005b      	lsls	r3, r3, #1
 8007a60:	fa02 f303 	lsl.w	r3, r2, r3
 8007a64:	69ba      	ldr	r2, [r7, #24]
 8007a66:	4313      	orrs	r3, r2
 8007a68:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	69ba      	ldr	r2, [r7, #24]
 8007a6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007a76:	2201      	movs	r2, #1
 8007a78:	69fb      	ldr	r3, [r7, #28]
 8007a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a7e:	43db      	mvns	r3, r3
 8007a80:	69ba      	ldr	r2, [r7, #24]
 8007a82:	4013      	ands	r3, r2
 8007a84:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	091b      	lsrs	r3, r3, #4
 8007a8c:	f003 0201 	and.w	r2, r3, #1
 8007a90:	69fb      	ldr	r3, [r7, #28]
 8007a92:	fa02 f303 	lsl.w	r3, r2, r3
 8007a96:	69ba      	ldr	r2, [r7, #24]
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	69ba      	ldr	r2, [r7, #24]
 8007aa0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	f003 0303 	and.w	r3, r3, #3
 8007aaa:	2b03      	cmp	r3, #3
 8007aac:	d017      	beq.n	8007ade <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	68db      	ldr	r3, [r3, #12]
 8007ab2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007ab4:	69fb      	ldr	r3, [r7, #28]
 8007ab6:	005b      	lsls	r3, r3, #1
 8007ab8:	2203      	movs	r2, #3
 8007aba:	fa02 f303 	lsl.w	r3, r2, r3
 8007abe:	43db      	mvns	r3, r3
 8007ac0:	69ba      	ldr	r2, [r7, #24]
 8007ac2:	4013      	ands	r3, r2
 8007ac4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	689a      	ldr	r2, [r3, #8]
 8007aca:	69fb      	ldr	r3, [r7, #28]
 8007acc:	005b      	lsls	r3, r3, #1
 8007ace:	fa02 f303 	lsl.w	r3, r2, r3
 8007ad2:	69ba      	ldr	r2, [r7, #24]
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	69ba      	ldr	r2, [r7, #24]
 8007adc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	f003 0303 	and.w	r3, r3, #3
 8007ae6:	2b02      	cmp	r3, #2
 8007ae8:	d123      	bne.n	8007b32 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007aea:	69fb      	ldr	r3, [r7, #28]
 8007aec:	08da      	lsrs	r2, r3, #3
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	3208      	adds	r2, #8
 8007af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007af8:	69fb      	ldr	r3, [r7, #28]
 8007afa:	f003 0307 	and.w	r3, r3, #7
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	220f      	movs	r2, #15
 8007b02:	fa02 f303 	lsl.w	r3, r2, r3
 8007b06:	43db      	mvns	r3, r3
 8007b08:	69ba      	ldr	r2, [r7, #24]
 8007b0a:	4013      	ands	r3, r2
 8007b0c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	691a      	ldr	r2, [r3, #16]
 8007b12:	69fb      	ldr	r3, [r7, #28]
 8007b14:	f003 0307 	and.w	r3, r3, #7
 8007b18:	009b      	lsls	r3, r3, #2
 8007b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b1e:	69ba      	ldr	r2, [r7, #24]
 8007b20:	4313      	orrs	r3, r2
 8007b22:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007b24:	69fb      	ldr	r3, [r7, #28]
 8007b26:	08da      	lsrs	r2, r3, #3
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	3208      	adds	r2, #8
 8007b2c:	69b9      	ldr	r1, [r7, #24]
 8007b2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	005b      	lsls	r3, r3, #1
 8007b3c:	2203      	movs	r2, #3
 8007b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b42:	43db      	mvns	r3, r3
 8007b44:	69ba      	ldr	r2, [r7, #24]
 8007b46:	4013      	ands	r3, r2
 8007b48:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	f003 0203 	and.w	r2, r3, #3
 8007b52:	69fb      	ldr	r3, [r7, #28]
 8007b54:	005b      	lsls	r3, r3, #1
 8007b56:	fa02 f303 	lsl.w	r3, r2, r3
 8007b5a:	69ba      	ldr	r2, [r7, #24]
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	69ba      	ldr	r2, [r7, #24]
 8007b64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	f000 80d8 	beq.w	8007d24 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b74:	4b2c      	ldr	r3, [pc, #176]	; (8007c28 <HAL_GPIO_Init+0x22c>)
 8007b76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007b7a:	4a2b      	ldr	r2, [pc, #172]	; (8007c28 <HAL_GPIO_Init+0x22c>)
 8007b7c:	f043 0302 	orr.w	r3, r3, #2
 8007b80:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007b84:	4b28      	ldr	r3, [pc, #160]	; (8007c28 <HAL_GPIO_Init+0x22c>)
 8007b86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007b8a:	f003 0302 	and.w	r3, r3, #2
 8007b8e:	60fb      	str	r3, [r7, #12]
 8007b90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007b92:	4a26      	ldr	r2, [pc, #152]	; (8007c2c <HAL_GPIO_Init+0x230>)
 8007b94:	69fb      	ldr	r3, [r7, #28]
 8007b96:	089b      	lsrs	r3, r3, #2
 8007b98:	3302      	adds	r3, #2
 8007b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	f003 0303 	and.w	r3, r3, #3
 8007ba6:	009b      	lsls	r3, r3, #2
 8007ba8:	220f      	movs	r2, #15
 8007baa:	fa02 f303 	lsl.w	r3, r2, r3
 8007bae:	43db      	mvns	r3, r3
 8007bb0:	69ba      	ldr	r2, [r7, #24]
 8007bb2:	4013      	ands	r3, r2
 8007bb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	4a1d      	ldr	r2, [pc, #116]	; (8007c30 <HAL_GPIO_Init+0x234>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d04a      	beq.n	8007c54 <HAL_GPIO_Init+0x258>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	4a1c      	ldr	r2, [pc, #112]	; (8007c34 <HAL_GPIO_Init+0x238>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d02b      	beq.n	8007c1e <HAL_GPIO_Init+0x222>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	4a1b      	ldr	r2, [pc, #108]	; (8007c38 <HAL_GPIO_Init+0x23c>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d025      	beq.n	8007c1a <HAL_GPIO_Init+0x21e>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	4a1a      	ldr	r2, [pc, #104]	; (8007c3c <HAL_GPIO_Init+0x240>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d01f      	beq.n	8007c16 <HAL_GPIO_Init+0x21a>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	4a19      	ldr	r2, [pc, #100]	; (8007c40 <HAL_GPIO_Init+0x244>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d019      	beq.n	8007c12 <HAL_GPIO_Init+0x216>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	4a18      	ldr	r2, [pc, #96]	; (8007c44 <HAL_GPIO_Init+0x248>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d013      	beq.n	8007c0e <HAL_GPIO_Init+0x212>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	4a17      	ldr	r2, [pc, #92]	; (8007c48 <HAL_GPIO_Init+0x24c>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d00d      	beq.n	8007c0a <HAL_GPIO_Init+0x20e>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	4a16      	ldr	r2, [pc, #88]	; (8007c4c <HAL_GPIO_Init+0x250>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d007      	beq.n	8007c06 <HAL_GPIO_Init+0x20a>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	4a15      	ldr	r2, [pc, #84]	; (8007c50 <HAL_GPIO_Init+0x254>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d101      	bne.n	8007c02 <HAL_GPIO_Init+0x206>
 8007bfe:	2309      	movs	r3, #9
 8007c00:	e029      	b.n	8007c56 <HAL_GPIO_Init+0x25a>
 8007c02:	230a      	movs	r3, #10
 8007c04:	e027      	b.n	8007c56 <HAL_GPIO_Init+0x25a>
 8007c06:	2307      	movs	r3, #7
 8007c08:	e025      	b.n	8007c56 <HAL_GPIO_Init+0x25a>
 8007c0a:	2306      	movs	r3, #6
 8007c0c:	e023      	b.n	8007c56 <HAL_GPIO_Init+0x25a>
 8007c0e:	2305      	movs	r3, #5
 8007c10:	e021      	b.n	8007c56 <HAL_GPIO_Init+0x25a>
 8007c12:	2304      	movs	r3, #4
 8007c14:	e01f      	b.n	8007c56 <HAL_GPIO_Init+0x25a>
 8007c16:	2303      	movs	r3, #3
 8007c18:	e01d      	b.n	8007c56 <HAL_GPIO_Init+0x25a>
 8007c1a:	2302      	movs	r3, #2
 8007c1c:	e01b      	b.n	8007c56 <HAL_GPIO_Init+0x25a>
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e019      	b.n	8007c56 <HAL_GPIO_Init+0x25a>
 8007c22:	bf00      	nop
 8007c24:	58000080 	.word	0x58000080
 8007c28:	58024400 	.word	0x58024400
 8007c2c:	58000400 	.word	0x58000400
 8007c30:	58020000 	.word	0x58020000
 8007c34:	58020400 	.word	0x58020400
 8007c38:	58020800 	.word	0x58020800
 8007c3c:	58020c00 	.word	0x58020c00
 8007c40:	58021000 	.word	0x58021000
 8007c44:	58021400 	.word	0x58021400
 8007c48:	58021800 	.word	0x58021800
 8007c4c:	58021c00 	.word	0x58021c00
 8007c50:	58022400 	.word	0x58022400
 8007c54:	2300      	movs	r3, #0
 8007c56:	69fa      	ldr	r2, [r7, #28]
 8007c58:	f002 0203 	and.w	r2, r2, #3
 8007c5c:	0092      	lsls	r2, r2, #2
 8007c5e:	4093      	lsls	r3, r2
 8007c60:	69ba      	ldr	r2, [r7, #24]
 8007c62:	4313      	orrs	r3, r2
 8007c64:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007c66:	4938      	ldr	r1, [pc, #224]	; (8007d48 <HAL_GPIO_Init+0x34c>)
 8007c68:	69fb      	ldr	r3, [r7, #28]
 8007c6a:	089b      	lsrs	r3, r3, #2
 8007c6c:	3302      	adds	r3, #2
 8007c6e:	69ba      	ldr	r2, [r7, #24]
 8007c70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	43db      	mvns	r3, r3
 8007c80:	69ba      	ldr	r2, [r7, #24]
 8007c82:	4013      	ands	r3, r2
 8007c84:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d003      	beq.n	8007c9a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007c92:	69ba      	ldr	r2, [r7, #24]
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	4313      	orrs	r3, r2
 8007c98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007c9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c9e:	69bb      	ldr	r3, [r7, #24]
 8007ca0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007ca2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	43db      	mvns	r3, r3
 8007cae:	69ba      	ldr	r2, [r7, #24]
 8007cb0:	4013      	ands	r3, r2
 8007cb2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d003      	beq.n	8007cc8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007cc0:	69ba      	ldr	r2, [r7, #24]
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007cc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ccc:	69bb      	ldr	r3, [r7, #24]
 8007cce:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	43db      	mvns	r3, r3
 8007cda:	69ba      	ldr	r2, [r7, #24]
 8007cdc:	4013      	ands	r3, r2
 8007cde:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d003      	beq.n	8007cf4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007cec:	69ba      	ldr	r2, [r7, #24]
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	69ba      	ldr	r2, [r7, #24]
 8007cf8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	43db      	mvns	r3, r3
 8007d04:	69ba      	ldr	r2, [r7, #24]
 8007d06:	4013      	ands	r3, r2
 8007d08:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d003      	beq.n	8007d1e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8007d16:	69ba      	ldr	r2, [r7, #24]
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	69ba      	ldr	r2, [r7, #24]
 8007d22:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	3301      	adds	r3, #1
 8007d28:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	fa22 f303 	lsr.w	r3, r2, r3
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	f47f ae6b 	bne.w	8007a10 <HAL_GPIO_Init+0x14>
  }
}
 8007d3a:	bf00      	nop
 8007d3c:	bf00      	nop
 8007d3e:	3724      	adds	r7, #36	; 0x24
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr
 8007d48:	58000400 	.word	0x58000400

08007d4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b083      	sub	sp, #12
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	460b      	mov	r3, r1
 8007d56:	807b      	strh	r3, [r7, #2]
 8007d58:	4613      	mov	r3, r2
 8007d5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007d5c:	787b      	ldrb	r3, [r7, #1]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d003      	beq.n	8007d6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007d62:	887a      	ldrh	r2, [r7, #2]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007d68:	e003      	b.n	8007d72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007d6a:	887b      	ldrh	r3, [r7, #2]
 8007d6c:	041a      	lsls	r2, r3, #16
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	619a      	str	r2, [r3, #24]
}
 8007d72:	bf00      	nop
 8007d74:	370c      	adds	r7, #12
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr
	...

08007d80 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007d88:	4b19      	ldr	r3, [pc, #100]	; (8007df0 <HAL_PWREx_ConfigSupply+0x70>)
 8007d8a:	68db      	ldr	r3, [r3, #12]
 8007d8c:	f003 0304 	and.w	r3, r3, #4
 8007d90:	2b04      	cmp	r3, #4
 8007d92:	d00a      	beq.n	8007daa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007d94:	4b16      	ldr	r3, [pc, #88]	; (8007df0 <HAL_PWREx_ConfigSupply+0x70>)
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	f003 0307 	and.w	r3, r3, #7
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d001      	beq.n	8007da6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007da2:	2301      	movs	r3, #1
 8007da4:	e01f      	b.n	8007de6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007da6:	2300      	movs	r3, #0
 8007da8:	e01d      	b.n	8007de6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007daa:	4b11      	ldr	r3, [pc, #68]	; (8007df0 <HAL_PWREx_ConfigSupply+0x70>)
 8007dac:	68db      	ldr	r3, [r3, #12]
 8007dae:	f023 0207 	bic.w	r2, r3, #7
 8007db2:	490f      	ldr	r1, [pc, #60]	; (8007df0 <HAL_PWREx_ConfigSupply+0x70>)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	4313      	orrs	r3, r2
 8007db8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007dba:	f7fc fec9 	bl	8004b50 <HAL_GetTick>
 8007dbe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007dc0:	e009      	b.n	8007dd6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007dc2:	f7fc fec5 	bl	8004b50 <HAL_GetTick>
 8007dc6:	4602      	mov	r2, r0
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	1ad3      	subs	r3, r2, r3
 8007dcc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007dd0:	d901      	bls.n	8007dd6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	e007      	b.n	8007de6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007dd6:	4b06      	ldr	r3, [pc, #24]	; (8007df0 <HAL_PWREx_ConfigSupply+0x70>)
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007dde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007de2:	d1ee      	bne.n	8007dc2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007de4:	2300      	movs	r3, #0
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3710      	adds	r7, #16
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	58024800 	.word	0x58024800

08007df4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b08c      	sub	sp, #48	; 0x30
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d101      	bne.n	8007e06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	e3c8      	b.n	8008598 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f003 0301 	and.w	r3, r3, #1
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	f000 8087 	beq.w	8007f22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e14:	4b88      	ldr	r3, [pc, #544]	; (8008038 <HAL_RCC_OscConfig+0x244>)
 8007e16:	691b      	ldr	r3, [r3, #16]
 8007e18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007e1e:	4b86      	ldr	r3, [pc, #536]	; (8008038 <HAL_RCC_OscConfig+0x244>)
 8007e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e22:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e26:	2b10      	cmp	r3, #16
 8007e28:	d007      	beq.n	8007e3a <HAL_RCC_OscConfig+0x46>
 8007e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e2c:	2b18      	cmp	r3, #24
 8007e2e:	d110      	bne.n	8007e52 <HAL_RCC_OscConfig+0x5e>
 8007e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e32:	f003 0303 	and.w	r3, r3, #3
 8007e36:	2b02      	cmp	r3, #2
 8007e38:	d10b      	bne.n	8007e52 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e3a:	4b7f      	ldr	r3, [pc, #508]	; (8008038 <HAL_RCC_OscConfig+0x244>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d06c      	beq.n	8007f20 <HAL_RCC_OscConfig+0x12c>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d168      	bne.n	8007f20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	e3a2      	b.n	8008598 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e5a:	d106      	bne.n	8007e6a <HAL_RCC_OscConfig+0x76>
 8007e5c:	4b76      	ldr	r3, [pc, #472]	; (8008038 <HAL_RCC_OscConfig+0x244>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a75      	ldr	r2, [pc, #468]	; (8008038 <HAL_RCC_OscConfig+0x244>)
 8007e62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e66:	6013      	str	r3, [r2, #0]
 8007e68:	e02e      	b.n	8007ec8 <HAL_RCC_OscConfig+0xd4>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d10c      	bne.n	8007e8c <HAL_RCC_OscConfig+0x98>
 8007e72:	4b71      	ldr	r3, [pc, #452]	; (8008038 <HAL_RCC_OscConfig+0x244>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a70      	ldr	r2, [pc, #448]	; (8008038 <HAL_RCC_OscConfig+0x244>)
 8007e78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e7c:	6013      	str	r3, [r2, #0]
 8007e7e:	4b6e      	ldr	r3, [pc, #440]	; (8008038 <HAL_RCC_OscConfig+0x244>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a6d      	ldr	r2, [pc, #436]	; (8008038 <HAL_RCC_OscConfig+0x244>)
 8007e84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e88:	6013      	str	r3, [r2, #0]
 8007e8a:	e01d      	b.n	8007ec8 <HAL_RCC_OscConfig+0xd4>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e94:	d10c      	bne.n	8007eb0 <HAL_RCC_OscConfig+0xbc>
 8007e96:	4b68      	ldr	r3, [pc, #416]	; (8008038 <HAL_RCC_OscConfig+0x244>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a67      	ldr	r2, [pc, #412]	; (8008038 <HAL_RCC_OscConfig+0x244>)
 8007e9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007ea0:	6013      	str	r3, [r2, #0]
 8007ea2:	4b65      	ldr	r3, [pc, #404]	; (8008038 <HAL_RCC_OscConfig+0x244>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a64      	ldr	r2, [pc, #400]	; (8008038 <HAL_RCC_OscConfig+0x244>)
 8007ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007eac:	6013      	str	r3, [r2, #0]
 8007eae:	e00b      	b.n	8007ec8 <HAL_RCC_OscConfig+0xd4>
 8007eb0:	4b61      	ldr	r3, [pc, #388]	; (8008038 <HAL_RCC_OscConfig+0x244>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a60      	ldr	r2, [pc, #384]	; (8008038 <HAL_RCC_OscConfig+0x244>)
 8007eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007eba:	6013      	str	r3, [r2, #0]
 8007ebc:	4b5e      	ldr	r3, [pc, #376]	; (8008038 <HAL_RCC_OscConfig+0x244>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a5d      	ldr	r2, [pc, #372]	; (8008038 <HAL_RCC_OscConfig+0x244>)
 8007ec2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ec6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d013      	beq.n	8007ef8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ed0:	f7fc fe3e 	bl	8004b50 <HAL_GetTick>
 8007ed4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007ed6:	e008      	b.n	8007eea <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ed8:	f7fc fe3a 	bl	8004b50 <HAL_GetTick>
 8007edc:	4602      	mov	r2, r0
 8007ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee0:	1ad3      	subs	r3, r2, r3
 8007ee2:	2b64      	cmp	r3, #100	; 0x64
 8007ee4:	d901      	bls.n	8007eea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007ee6:	2303      	movs	r3, #3
 8007ee8:	e356      	b.n	8008598 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007eea:	4b53      	ldr	r3, [pc, #332]	; (8008038 <HAL_RCC_OscConfig+0x244>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d0f0      	beq.n	8007ed8 <HAL_RCC_OscConfig+0xe4>
 8007ef6:	e014      	b.n	8007f22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ef8:	f7fc fe2a 	bl	8004b50 <HAL_GetTick>
 8007efc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007efe:	e008      	b.n	8007f12 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f00:	f7fc fe26 	bl	8004b50 <HAL_GetTick>
 8007f04:	4602      	mov	r2, r0
 8007f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f08:	1ad3      	subs	r3, r2, r3
 8007f0a:	2b64      	cmp	r3, #100	; 0x64
 8007f0c:	d901      	bls.n	8007f12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007f0e:	2303      	movs	r3, #3
 8007f10:	e342      	b.n	8008598 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007f12:	4b49      	ldr	r3, [pc, #292]	; (8008038 <HAL_RCC_OscConfig+0x244>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d1f0      	bne.n	8007f00 <HAL_RCC_OscConfig+0x10c>
 8007f1e:	e000      	b.n	8007f22 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f003 0302 	and.w	r3, r3, #2
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	f000 808c 	beq.w	8008048 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f30:	4b41      	ldr	r3, [pc, #260]	; (8008038 <HAL_RCC_OscConfig+0x244>)
 8007f32:	691b      	ldr	r3, [r3, #16]
 8007f34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f38:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007f3a:	4b3f      	ldr	r3, [pc, #252]	; (8008038 <HAL_RCC_OscConfig+0x244>)
 8007f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f3e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007f40:	6a3b      	ldr	r3, [r7, #32]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d007      	beq.n	8007f56 <HAL_RCC_OscConfig+0x162>
 8007f46:	6a3b      	ldr	r3, [r7, #32]
 8007f48:	2b18      	cmp	r3, #24
 8007f4a:	d137      	bne.n	8007fbc <HAL_RCC_OscConfig+0x1c8>
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	f003 0303 	and.w	r3, r3, #3
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d132      	bne.n	8007fbc <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f56:	4b38      	ldr	r3, [pc, #224]	; (8008038 <HAL_RCC_OscConfig+0x244>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f003 0304 	and.w	r3, r3, #4
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d005      	beq.n	8007f6e <HAL_RCC_OscConfig+0x17a>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	68db      	ldr	r3, [r3, #12]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d101      	bne.n	8007f6e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	e314      	b.n	8008598 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007f6e:	4b32      	ldr	r3, [pc, #200]	; (8008038 <HAL_RCC_OscConfig+0x244>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f023 0219 	bic.w	r2, r3, #25
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	68db      	ldr	r3, [r3, #12]
 8007f7a:	492f      	ldr	r1, [pc, #188]	; (8008038 <HAL_RCC_OscConfig+0x244>)
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f80:	f7fc fde6 	bl	8004b50 <HAL_GetTick>
 8007f84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f86:	e008      	b.n	8007f9a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f88:	f7fc fde2 	bl	8004b50 <HAL_GetTick>
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f90:	1ad3      	subs	r3, r2, r3
 8007f92:	2b02      	cmp	r3, #2
 8007f94:	d901      	bls.n	8007f9a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8007f96:	2303      	movs	r3, #3
 8007f98:	e2fe      	b.n	8008598 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f9a:	4b27      	ldr	r3, [pc, #156]	; (8008038 <HAL_RCC_OscConfig+0x244>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f003 0304 	and.w	r3, r3, #4
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d0f0      	beq.n	8007f88 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fa6:	4b24      	ldr	r3, [pc, #144]	; (8008038 <HAL_RCC_OscConfig+0x244>)
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	691b      	ldr	r3, [r3, #16]
 8007fb2:	061b      	lsls	r3, r3, #24
 8007fb4:	4920      	ldr	r1, [pc, #128]	; (8008038 <HAL_RCC_OscConfig+0x244>)
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007fba:	e045      	b.n	8008048 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	68db      	ldr	r3, [r3, #12]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d026      	beq.n	8008012 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007fc4:	4b1c      	ldr	r3, [pc, #112]	; (8008038 <HAL_RCC_OscConfig+0x244>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f023 0219 	bic.w	r2, r3, #25
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	68db      	ldr	r3, [r3, #12]
 8007fd0:	4919      	ldr	r1, [pc, #100]	; (8008038 <HAL_RCC_OscConfig+0x244>)
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fd6:	f7fc fdbb 	bl	8004b50 <HAL_GetTick>
 8007fda:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007fdc:	e008      	b.n	8007ff0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007fde:	f7fc fdb7 	bl	8004b50 <HAL_GetTick>
 8007fe2:	4602      	mov	r2, r0
 8007fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe6:	1ad3      	subs	r3, r2, r3
 8007fe8:	2b02      	cmp	r3, #2
 8007fea:	d901      	bls.n	8007ff0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007fec:	2303      	movs	r3, #3
 8007fee:	e2d3      	b.n	8008598 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ff0:	4b11      	ldr	r3, [pc, #68]	; (8008038 <HAL_RCC_OscConfig+0x244>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f003 0304 	and.w	r3, r3, #4
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d0f0      	beq.n	8007fde <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ffc:	4b0e      	ldr	r3, [pc, #56]	; (8008038 <HAL_RCC_OscConfig+0x244>)
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	691b      	ldr	r3, [r3, #16]
 8008008:	061b      	lsls	r3, r3, #24
 800800a:	490b      	ldr	r1, [pc, #44]	; (8008038 <HAL_RCC_OscConfig+0x244>)
 800800c:	4313      	orrs	r3, r2
 800800e:	604b      	str	r3, [r1, #4]
 8008010:	e01a      	b.n	8008048 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008012:	4b09      	ldr	r3, [pc, #36]	; (8008038 <HAL_RCC_OscConfig+0x244>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a08      	ldr	r2, [pc, #32]	; (8008038 <HAL_RCC_OscConfig+0x244>)
 8008018:	f023 0301 	bic.w	r3, r3, #1
 800801c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800801e:	f7fc fd97 	bl	8004b50 <HAL_GetTick>
 8008022:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008024:	e00a      	b.n	800803c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008026:	f7fc fd93 	bl	8004b50 <HAL_GetTick>
 800802a:	4602      	mov	r2, r0
 800802c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802e:	1ad3      	subs	r3, r2, r3
 8008030:	2b02      	cmp	r3, #2
 8008032:	d903      	bls.n	800803c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008034:	2303      	movs	r3, #3
 8008036:	e2af      	b.n	8008598 <HAL_RCC_OscConfig+0x7a4>
 8008038:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800803c:	4b96      	ldr	r3, [pc, #600]	; (8008298 <HAL_RCC_OscConfig+0x4a4>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f003 0304 	and.w	r3, r3, #4
 8008044:	2b00      	cmp	r3, #0
 8008046:	d1ee      	bne.n	8008026 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f003 0310 	and.w	r3, r3, #16
 8008050:	2b00      	cmp	r3, #0
 8008052:	d06a      	beq.n	800812a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008054:	4b90      	ldr	r3, [pc, #576]	; (8008298 <HAL_RCC_OscConfig+0x4a4>)
 8008056:	691b      	ldr	r3, [r3, #16]
 8008058:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800805c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800805e:	4b8e      	ldr	r3, [pc, #568]	; (8008298 <HAL_RCC_OscConfig+0x4a4>)
 8008060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008062:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008064:	69bb      	ldr	r3, [r7, #24]
 8008066:	2b08      	cmp	r3, #8
 8008068:	d007      	beq.n	800807a <HAL_RCC_OscConfig+0x286>
 800806a:	69bb      	ldr	r3, [r7, #24]
 800806c:	2b18      	cmp	r3, #24
 800806e:	d11b      	bne.n	80080a8 <HAL_RCC_OscConfig+0x2b4>
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	f003 0303 	and.w	r3, r3, #3
 8008076:	2b01      	cmp	r3, #1
 8008078:	d116      	bne.n	80080a8 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800807a:	4b87      	ldr	r3, [pc, #540]	; (8008298 <HAL_RCC_OscConfig+0x4a4>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008082:	2b00      	cmp	r3, #0
 8008084:	d005      	beq.n	8008092 <HAL_RCC_OscConfig+0x29e>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	69db      	ldr	r3, [r3, #28]
 800808a:	2b80      	cmp	r3, #128	; 0x80
 800808c:	d001      	beq.n	8008092 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800808e:	2301      	movs	r3, #1
 8008090:	e282      	b.n	8008598 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008092:	4b81      	ldr	r3, [pc, #516]	; (8008298 <HAL_RCC_OscConfig+0x4a4>)
 8008094:	68db      	ldr	r3, [r3, #12]
 8008096:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6a1b      	ldr	r3, [r3, #32]
 800809e:	061b      	lsls	r3, r3, #24
 80080a0:	497d      	ldr	r1, [pc, #500]	; (8008298 <HAL_RCC_OscConfig+0x4a4>)
 80080a2:	4313      	orrs	r3, r2
 80080a4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80080a6:	e040      	b.n	800812a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	69db      	ldr	r3, [r3, #28]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d023      	beq.n	80080f8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80080b0:	4b79      	ldr	r3, [pc, #484]	; (8008298 <HAL_RCC_OscConfig+0x4a4>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a78      	ldr	r2, [pc, #480]	; (8008298 <HAL_RCC_OscConfig+0x4a4>)
 80080b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080bc:	f7fc fd48 	bl	8004b50 <HAL_GetTick>
 80080c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80080c2:	e008      	b.n	80080d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80080c4:	f7fc fd44 	bl	8004b50 <HAL_GetTick>
 80080c8:	4602      	mov	r2, r0
 80080ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080cc:	1ad3      	subs	r3, r2, r3
 80080ce:	2b02      	cmp	r3, #2
 80080d0:	d901      	bls.n	80080d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80080d2:	2303      	movs	r3, #3
 80080d4:	e260      	b.n	8008598 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80080d6:	4b70      	ldr	r3, [pc, #448]	; (8008298 <HAL_RCC_OscConfig+0x4a4>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d0f0      	beq.n	80080c4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80080e2:	4b6d      	ldr	r3, [pc, #436]	; (8008298 <HAL_RCC_OscConfig+0x4a4>)
 80080e4:	68db      	ldr	r3, [r3, #12]
 80080e6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6a1b      	ldr	r3, [r3, #32]
 80080ee:	061b      	lsls	r3, r3, #24
 80080f0:	4969      	ldr	r1, [pc, #420]	; (8008298 <HAL_RCC_OscConfig+0x4a4>)
 80080f2:	4313      	orrs	r3, r2
 80080f4:	60cb      	str	r3, [r1, #12]
 80080f6:	e018      	b.n	800812a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80080f8:	4b67      	ldr	r3, [pc, #412]	; (8008298 <HAL_RCC_OscConfig+0x4a4>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a66      	ldr	r2, [pc, #408]	; (8008298 <HAL_RCC_OscConfig+0x4a4>)
 80080fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008102:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008104:	f7fc fd24 	bl	8004b50 <HAL_GetTick>
 8008108:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800810a:	e008      	b.n	800811e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800810c:	f7fc fd20 	bl	8004b50 <HAL_GetTick>
 8008110:	4602      	mov	r2, r0
 8008112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008114:	1ad3      	subs	r3, r2, r3
 8008116:	2b02      	cmp	r3, #2
 8008118:	d901      	bls.n	800811e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800811a:	2303      	movs	r3, #3
 800811c:	e23c      	b.n	8008598 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800811e:	4b5e      	ldr	r3, [pc, #376]	; (8008298 <HAL_RCC_OscConfig+0x4a4>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008126:	2b00      	cmp	r3, #0
 8008128:	d1f0      	bne.n	800810c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f003 0308 	and.w	r3, r3, #8
 8008132:	2b00      	cmp	r3, #0
 8008134:	d036      	beq.n	80081a4 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	695b      	ldr	r3, [r3, #20]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d019      	beq.n	8008172 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800813e:	4b56      	ldr	r3, [pc, #344]	; (8008298 <HAL_RCC_OscConfig+0x4a4>)
 8008140:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008142:	4a55      	ldr	r2, [pc, #340]	; (8008298 <HAL_RCC_OscConfig+0x4a4>)
 8008144:	f043 0301 	orr.w	r3, r3, #1
 8008148:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800814a:	f7fc fd01 	bl	8004b50 <HAL_GetTick>
 800814e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008150:	e008      	b.n	8008164 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008152:	f7fc fcfd 	bl	8004b50 <HAL_GetTick>
 8008156:	4602      	mov	r2, r0
 8008158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815a:	1ad3      	subs	r3, r2, r3
 800815c:	2b02      	cmp	r3, #2
 800815e:	d901      	bls.n	8008164 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008160:	2303      	movs	r3, #3
 8008162:	e219      	b.n	8008598 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008164:	4b4c      	ldr	r3, [pc, #304]	; (8008298 <HAL_RCC_OscConfig+0x4a4>)
 8008166:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008168:	f003 0302 	and.w	r3, r3, #2
 800816c:	2b00      	cmp	r3, #0
 800816e:	d0f0      	beq.n	8008152 <HAL_RCC_OscConfig+0x35e>
 8008170:	e018      	b.n	80081a4 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008172:	4b49      	ldr	r3, [pc, #292]	; (8008298 <HAL_RCC_OscConfig+0x4a4>)
 8008174:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008176:	4a48      	ldr	r2, [pc, #288]	; (8008298 <HAL_RCC_OscConfig+0x4a4>)
 8008178:	f023 0301 	bic.w	r3, r3, #1
 800817c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800817e:	f7fc fce7 	bl	8004b50 <HAL_GetTick>
 8008182:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008184:	e008      	b.n	8008198 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008186:	f7fc fce3 	bl	8004b50 <HAL_GetTick>
 800818a:	4602      	mov	r2, r0
 800818c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818e:	1ad3      	subs	r3, r2, r3
 8008190:	2b02      	cmp	r3, #2
 8008192:	d901      	bls.n	8008198 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8008194:	2303      	movs	r3, #3
 8008196:	e1ff      	b.n	8008598 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008198:	4b3f      	ldr	r3, [pc, #252]	; (8008298 <HAL_RCC_OscConfig+0x4a4>)
 800819a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800819c:	f003 0302 	and.w	r3, r3, #2
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d1f0      	bne.n	8008186 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f003 0320 	and.w	r3, r3, #32
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d036      	beq.n	800821e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	699b      	ldr	r3, [r3, #24]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d019      	beq.n	80081ec <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80081b8:	4b37      	ldr	r3, [pc, #220]	; (8008298 <HAL_RCC_OscConfig+0x4a4>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a36      	ldr	r2, [pc, #216]	; (8008298 <HAL_RCC_OscConfig+0x4a4>)
 80081be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80081c2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80081c4:	f7fc fcc4 	bl	8004b50 <HAL_GetTick>
 80081c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80081ca:	e008      	b.n	80081de <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80081cc:	f7fc fcc0 	bl	8004b50 <HAL_GetTick>
 80081d0:	4602      	mov	r2, r0
 80081d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d4:	1ad3      	subs	r3, r2, r3
 80081d6:	2b02      	cmp	r3, #2
 80081d8:	d901      	bls.n	80081de <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80081da:	2303      	movs	r3, #3
 80081dc:	e1dc      	b.n	8008598 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80081de:	4b2e      	ldr	r3, [pc, #184]	; (8008298 <HAL_RCC_OscConfig+0x4a4>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d0f0      	beq.n	80081cc <HAL_RCC_OscConfig+0x3d8>
 80081ea:	e018      	b.n	800821e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80081ec:	4b2a      	ldr	r3, [pc, #168]	; (8008298 <HAL_RCC_OscConfig+0x4a4>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a29      	ldr	r2, [pc, #164]	; (8008298 <HAL_RCC_OscConfig+0x4a4>)
 80081f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80081f6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80081f8:	f7fc fcaa 	bl	8004b50 <HAL_GetTick>
 80081fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80081fe:	e008      	b.n	8008212 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008200:	f7fc fca6 	bl	8004b50 <HAL_GetTick>
 8008204:	4602      	mov	r2, r0
 8008206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008208:	1ad3      	subs	r3, r2, r3
 800820a:	2b02      	cmp	r3, #2
 800820c:	d901      	bls.n	8008212 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800820e:	2303      	movs	r3, #3
 8008210:	e1c2      	b.n	8008598 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008212:	4b21      	ldr	r3, [pc, #132]	; (8008298 <HAL_RCC_OscConfig+0x4a4>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800821a:	2b00      	cmp	r3, #0
 800821c:	d1f0      	bne.n	8008200 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f003 0304 	and.w	r3, r3, #4
 8008226:	2b00      	cmp	r3, #0
 8008228:	f000 8086 	beq.w	8008338 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800822c:	4b1b      	ldr	r3, [pc, #108]	; (800829c <HAL_RCC_OscConfig+0x4a8>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a1a      	ldr	r2, [pc, #104]	; (800829c <HAL_RCC_OscConfig+0x4a8>)
 8008232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008236:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008238:	f7fc fc8a 	bl	8004b50 <HAL_GetTick>
 800823c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800823e:	e008      	b.n	8008252 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008240:	f7fc fc86 	bl	8004b50 <HAL_GetTick>
 8008244:	4602      	mov	r2, r0
 8008246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008248:	1ad3      	subs	r3, r2, r3
 800824a:	2b64      	cmp	r3, #100	; 0x64
 800824c:	d901      	bls.n	8008252 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800824e:	2303      	movs	r3, #3
 8008250:	e1a2      	b.n	8008598 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008252:	4b12      	ldr	r3, [pc, #72]	; (800829c <HAL_RCC_OscConfig+0x4a8>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800825a:	2b00      	cmp	r3, #0
 800825c:	d0f0      	beq.n	8008240 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	689b      	ldr	r3, [r3, #8]
 8008262:	2b01      	cmp	r3, #1
 8008264:	d106      	bne.n	8008274 <HAL_RCC_OscConfig+0x480>
 8008266:	4b0c      	ldr	r3, [pc, #48]	; (8008298 <HAL_RCC_OscConfig+0x4a4>)
 8008268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800826a:	4a0b      	ldr	r2, [pc, #44]	; (8008298 <HAL_RCC_OscConfig+0x4a4>)
 800826c:	f043 0301 	orr.w	r3, r3, #1
 8008270:	6713      	str	r3, [r2, #112]	; 0x70
 8008272:	e032      	b.n	80082da <HAL_RCC_OscConfig+0x4e6>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d111      	bne.n	80082a0 <HAL_RCC_OscConfig+0x4ac>
 800827c:	4b06      	ldr	r3, [pc, #24]	; (8008298 <HAL_RCC_OscConfig+0x4a4>)
 800827e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008280:	4a05      	ldr	r2, [pc, #20]	; (8008298 <HAL_RCC_OscConfig+0x4a4>)
 8008282:	f023 0301 	bic.w	r3, r3, #1
 8008286:	6713      	str	r3, [r2, #112]	; 0x70
 8008288:	4b03      	ldr	r3, [pc, #12]	; (8008298 <HAL_RCC_OscConfig+0x4a4>)
 800828a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800828c:	4a02      	ldr	r2, [pc, #8]	; (8008298 <HAL_RCC_OscConfig+0x4a4>)
 800828e:	f023 0304 	bic.w	r3, r3, #4
 8008292:	6713      	str	r3, [r2, #112]	; 0x70
 8008294:	e021      	b.n	80082da <HAL_RCC_OscConfig+0x4e6>
 8008296:	bf00      	nop
 8008298:	58024400 	.word	0x58024400
 800829c:	58024800 	.word	0x58024800
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	2b05      	cmp	r3, #5
 80082a6:	d10c      	bne.n	80082c2 <HAL_RCC_OscConfig+0x4ce>
 80082a8:	4b83      	ldr	r3, [pc, #524]	; (80084b8 <HAL_RCC_OscConfig+0x6c4>)
 80082aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082ac:	4a82      	ldr	r2, [pc, #520]	; (80084b8 <HAL_RCC_OscConfig+0x6c4>)
 80082ae:	f043 0304 	orr.w	r3, r3, #4
 80082b2:	6713      	str	r3, [r2, #112]	; 0x70
 80082b4:	4b80      	ldr	r3, [pc, #512]	; (80084b8 <HAL_RCC_OscConfig+0x6c4>)
 80082b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082b8:	4a7f      	ldr	r2, [pc, #508]	; (80084b8 <HAL_RCC_OscConfig+0x6c4>)
 80082ba:	f043 0301 	orr.w	r3, r3, #1
 80082be:	6713      	str	r3, [r2, #112]	; 0x70
 80082c0:	e00b      	b.n	80082da <HAL_RCC_OscConfig+0x4e6>
 80082c2:	4b7d      	ldr	r3, [pc, #500]	; (80084b8 <HAL_RCC_OscConfig+0x6c4>)
 80082c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082c6:	4a7c      	ldr	r2, [pc, #496]	; (80084b8 <HAL_RCC_OscConfig+0x6c4>)
 80082c8:	f023 0301 	bic.w	r3, r3, #1
 80082cc:	6713      	str	r3, [r2, #112]	; 0x70
 80082ce:	4b7a      	ldr	r3, [pc, #488]	; (80084b8 <HAL_RCC_OscConfig+0x6c4>)
 80082d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082d2:	4a79      	ldr	r2, [pc, #484]	; (80084b8 <HAL_RCC_OscConfig+0x6c4>)
 80082d4:	f023 0304 	bic.w	r3, r3, #4
 80082d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	689b      	ldr	r3, [r3, #8]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d015      	beq.n	800830e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082e2:	f7fc fc35 	bl	8004b50 <HAL_GetTick>
 80082e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80082e8:	e00a      	b.n	8008300 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082ea:	f7fc fc31 	bl	8004b50 <HAL_GetTick>
 80082ee:	4602      	mov	r2, r0
 80082f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f2:	1ad3      	subs	r3, r2, r3
 80082f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d901      	bls.n	8008300 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80082fc:	2303      	movs	r3, #3
 80082fe:	e14b      	b.n	8008598 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008300:	4b6d      	ldr	r3, [pc, #436]	; (80084b8 <HAL_RCC_OscConfig+0x6c4>)
 8008302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008304:	f003 0302 	and.w	r3, r3, #2
 8008308:	2b00      	cmp	r3, #0
 800830a:	d0ee      	beq.n	80082ea <HAL_RCC_OscConfig+0x4f6>
 800830c:	e014      	b.n	8008338 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800830e:	f7fc fc1f 	bl	8004b50 <HAL_GetTick>
 8008312:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008314:	e00a      	b.n	800832c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008316:	f7fc fc1b 	bl	8004b50 <HAL_GetTick>
 800831a:	4602      	mov	r2, r0
 800831c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831e:	1ad3      	subs	r3, r2, r3
 8008320:	f241 3288 	movw	r2, #5000	; 0x1388
 8008324:	4293      	cmp	r3, r2
 8008326:	d901      	bls.n	800832c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008328:	2303      	movs	r3, #3
 800832a:	e135      	b.n	8008598 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800832c:	4b62      	ldr	r3, [pc, #392]	; (80084b8 <HAL_RCC_OscConfig+0x6c4>)
 800832e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008330:	f003 0302 	and.w	r3, r3, #2
 8008334:	2b00      	cmp	r3, #0
 8008336:	d1ee      	bne.n	8008316 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800833c:	2b00      	cmp	r3, #0
 800833e:	f000 812a 	beq.w	8008596 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008342:	4b5d      	ldr	r3, [pc, #372]	; (80084b8 <HAL_RCC_OscConfig+0x6c4>)
 8008344:	691b      	ldr	r3, [r3, #16]
 8008346:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800834a:	2b18      	cmp	r3, #24
 800834c:	f000 80ba 	beq.w	80084c4 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008354:	2b02      	cmp	r3, #2
 8008356:	f040 8095 	bne.w	8008484 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800835a:	4b57      	ldr	r3, [pc, #348]	; (80084b8 <HAL_RCC_OscConfig+0x6c4>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a56      	ldr	r2, [pc, #344]	; (80084b8 <HAL_RCC_OscConfig+0x6c4>)
 8008360:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008364:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008366:	f7fc fbf3 	bl	8004b50 <HAL_GetTick>
 800836a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800836c:	e008      	b.n	8008380 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800836e:	f7fc fbef 	bl	8004b50 <HAL_GetTick>
 8008372:	4602      	mov	r2, r0
 8008374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008376:	1ad3      	subs	r3, r2, r3
 8008378:	2b02      	cmp	r3, #2
 800837a:	d901      	bls.n	8008380 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800837c:	2303      	movs	r3, #3
 800837e:	e10b      	b.n	8008598 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008380:	4b4d      	ldr	r3, [pc, #308]	; (80084b8 <HAL_RCC_OscConfig+0x6c4>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008388:	2b00      	cmp	r3, #0
 800838a:	d1f0      	bne.n	800836e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800838c:	4b4a      	ldr	r3, [pc, #296]	; (80084b8 <HAL_RCC_OscConfig+0x6c4>)
 800838e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008390:	4b4a      	ldr	r3, [pc, #296]	; (80084bc <HAL_RCC_OscConfig+0x6c8>)
 8008392:	4013      	ands	r3, r2
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008398:	687a      	ldr	r2, [r7, #4]
 800839a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800839c:	0112      	lsls	r2, r2, #4
 800839e:	430a      	orrs	r2, r1
 80083a0:	4945      	ldr	r1, [pc, #276]	; (80084b8 <HAL_RCC_OscConfig+0x6c4>)
 80083a2:	4313      	orrs	r3, r2
 80083a4:	628b      	str	r3, [r1, #40]	; 0x28
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083aa:	3b01      	subs	r3, #1
 80083ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083b4:	3b01      	subs	r3, #1
 80083b6:	025b      	lsls	r3, r3, #9
 80083b8:	b29b      	uxth	r3, r3
 80083ba:	431a      	orrs	r2, r3
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c0:	3b01      	subs	r3, #1
 80083c2:	041b      	lsls	r3, r3, #16
 80083c4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80083c8:	431a      	orrs	r2, r3
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083ce:	3b01      	subs	r3, #1
 80083d0:	061b      	lsls	r3, r3, #24
 80083d2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80083d6:	4938      	ldr	r1, [pc, #224]	; (80084b8 <HAL_RCC_OscConfig+0x6c4>)
 80083d8:	4313      	orrs	r3, r2
 80083da:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80083dc:	4b36      	ldr	r3, [pc, #216]	; (80084b8 <HAL_RCC_OscConfig+0x6c4>)
 80083de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e0:	4a35      	ldr	r2, [pc, #212]	; (80084b8 <HAL_RCC_OscConfig+0x6c4>)
 80083e2:	f023 0301 	bic.w	r3, r3, #1
 80083e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80083e8:	4b33      	ldr	r3, [pc, #204]	; (80084b8 <HAL_RCC_OscConfig+0x6c4>)
 80083ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083ec:	4b34      	ldr	r3, [pc, #208]	; (80084c0 <HAL_RCC_OscConfig+0x6cc>)
 80083ee:	4013      	ands	r3, r2
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80083f4:	00d2      	lsls	r2, r2, #3
 80083f6:	4930      	ldr	r1, [pc, #192]	; (80084b8 <HAL_RCC_OscConfig+0x6c4>)
 80083f8:	4313      	orrs	r3, r2
 80083fa:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80083fc:	4b2e      	ldr	r3, [pc, #184]	; (80084b8 <HAL_RCC_OscConfig+0x6c4>)
 80083fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008400:	f023 020c 	bic.w	r2, r3, #12
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008408:	492b      	ldr	r1, [pc, #172]	; (80084b8 <HAL_RCC_OscConfig+0x6c4>)
 800840a:	4313      	orrs	r3, r2
 800840c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800840e:	4b2a      	ldr	r3, [pc, #168]	; (80084b8 <HAL_RCC_OscConfig+0x6c4>)
 8008410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008412:	f023 0202 	bic.w	r2, r3, #2
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800841a:	4927      	ldr	r1, [pc, #156]	; (80084b8 <HAL_RCC_OscConfig+0x6c4>)
 800841c:	4313      	orrs	r3, r2
 800841e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008420:	4b25      	ldr	r3, [pc, #148]	; (80084b8 <HAL_RCC_OscConfig+0x6c4>)
 8008422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008424:	4a24      	ldr	r2, [pc, #144]	; (80084b8 <HAL_RCC_OscConfig+0x6c4>)
 8008426:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800842a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800842c:	4b22      	ldr	r3, [pc, #136]	; (80084b8 <HAL_RCC_OscConfig+0x6c4>)
 800842e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008430:	4a21      	ldr	r2, [pc, #132]	; (80084b8 <HAL_RCC_OscConfig+0x6c4>)
 8008432:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008436:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008438:	4b1f      	ldr	r3, [pc, #124]	; (80084b8 <HAL_RCC_OscConfig+0x6c4>)
 800843a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800843c:	4a1e      	ldr	r2, [pc, #120]	; (80084b8 <HAL_RCC_OscConfig+0x6c4>)
 800843e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008442:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008444:	4b1c      	ldr	r3, [pc, #112]	; (80084b8 <HAL_RCC_OscConfig+0x6c4>)
 8008446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008448:	4a1b      	ldr	r2, [pc, #108]	; (80084b8 <HAL_RCC_OscConfig+0x6c4>)
 800844a:	f043 0301 	orr.w	r3, r3, #1
 800844e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008450:	4b19      	ldr	r3, [pc, #100]	; (80084b8 <HAL_RCC_OscConfig+0x6c4>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a18      	ldr	r2, [pc, #96]	; (80084b8 <HAL_RCC_OscConfig+0x6c4>)
 8008456:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800845a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800845c:	f7fc fb78 	bl	8004b50 <HAL_GetTick>
 8008460:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008462:	e008      	b.n	8008476 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008464:	f7fc fb74 	bl	8004b50 <HAL_GetTick>
 8008468:	4602      	mov	r2, r0
 800846a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846c:	1ad3      	subs	r3, r2, r3
 800846e:	2b02      	cmp	r3, #2
 8008470:	d901      	bls.n	8008476 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8008472:	2303      	movs	r3, #3
 8008474:	e090      	b.n	8008598 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008476:	4b10      	ldr	r3, [pc, #64]	; (80084b8 <HAL_RCC_OscConfig+0x6c4>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800847e:	2b00      	cmp	r3, #0
 8008480:	d0f0      	beq.n	8008464 <HAL_RCC_OscConfig+0x670>
 8008482:	e088      	b.n	8008596 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008484:	4b0c      	ldr	r3, [pc, #48]	; (80084b8 <HAL_RCC_OscConfig+0x6c4>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a0b      	ldr	r2, [pc, #44]	; (80084b8 <HAL_RCC_OscConfig+0x6c4>)
 800848a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800848e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008490:	f7fc fb5e 	bl	8004b50 <HAL_GetTick>
 8008494:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008496:	e008      	b.n	80084aa <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008498:	f7fc fb5a 	bl	8004b50 <HAL_GetTick>
 800849c:	4602      	mov	r2, r0
 800849e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a0:	1ad3      	subs	r3, r2, r3
 80084a2:	2b02      	cmp	r3, #2
 80084a4:	d901      	bls.n	80084aa <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80084a6:	2303      	movs	r3, #3
 80084a8:	e076      	b.n	8008598 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80084aa:	4b03      	ldr	r3, [pc, #12]	; (80084b8 <HAL_RCC_OscConfig+0x6c4>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d1f0      	bne.n	8008498 <HAL_RCC_OscConfig+0x6a4>
 80084b6:	e06e      	b.n	8008596 <HAL_RCC_OscConfig+0x7a2>
 80084b8:	58024400 	.word	0x58024400
 80084bc:	fffffc0c 	.word	0xfffffc0c
 80084c0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80084c4:	4b36      	ldr	r3, [pc, #216]	; (80085a0 <HAL_RCC_OscConfig+0x7ac>)
 80084c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084c8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80084ca:	4b35      	ldr	r3, [pc, #212]	; (80085a0 <HAL_RCC_OscConfig+0x7ac>)
 80084cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ce:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	d031      	beq.n	800853c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	f003 0203 	and.w	r2, r3, #3
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d12a      	bne.n	800853c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	091b      	lsrs	r3, r3, #4
 80084ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d122      	bne.n	800853c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008500:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008502:	429a      	cmp	r2, r3
 8008504:	d11a      	bne.n	800853c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	0a5b      	lsrs	r3, r3, #9
 800850a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008512:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008514:	429a      	cmp	r2, r3
 8008516:	d111      	bne.n	800853c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	0c1b      	lsrs	r3, r3, #16
 800851c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008524:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008526:	429a      	cmp	r2, r3
 8008528:	d108      	bne.n	800853c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	0e1b      	lsrs	r3, r3, #24
 800852e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008536:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008538:	429a      	cmp	r2, r3
 800853a:	d001      	beq.n	8008540 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800853c:	2301      	movs	r3, #1
 800853e:	e02b      	b.n	8008598 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008540:	4b17      	ldr	r3, [pc, #92]	; (80085a0 <HAL_RCC_OscConfig+0x7ac>)
 8008542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008544:	08db      	lsrs	r3, r3, #3
 8008546:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800854a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008550:	693a      	ldr	r2, [r7, #16]
 8008552:	429a      	cmp	r2, r3
 8008554:	d01f      	beq.n	8008596 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008556:	4b12      	ldr	r3, [pc, #72]	; (80085a0 <HAL_RCC_OscConfig+0x7ac>)
 8008558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800855a:	4a11      	ldr	r2, [pc, #68]	; (80085a0 <HAL_RCC_OscConfig+0x7ac>)
 800855c:	f023 0301 	bic.w	r3, r3, #1
 8008560:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008562:	f7fc faf5 	bl	8004b50 <HAL_GetTick>
 8008566:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008568:	bf00      	nop
 800856a:	f7fc faf1 	bl	8004b50 <HAL_GetTick>
 800856e:	4602      	mov	r2, r0
 8008570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008572:	4293      	cmp	r3, r2
 8008574:	d0f9      	beq.n	800856a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008576:	4b0a      	ldr	r3, [pc, #40]	; (80085a0 <HAL_RCC_OscConfig+0x7ac>)
 8008578:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800857a:	4b0a      	ldr	r3, [pc, #40]	; (80085a4 <HAL_RCC_OscConfig+0x7b0>)
 800857c:	4013      	ands	r3, r2
 800857e:	687a      	ldr	r2, [r7, #4]
 8008580:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008582:	00d2      	lsls	r2, r2, #3
 8008584:	4906      	ldr	r1, [pc, #24]	; (80085a0 <HAL_RCC_OscConfig+0x7ac>)
 8008586:	4313      	orrs	r3, r2
 8008588:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800858a:	4b05      	ldr	r3, [pc, #20]	; (80085a0 <HAL_RCC_OscConfig+0x7ac>)
 800858c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800858e:	4a04      	ldr	r2, [pc, #16]	; (80085a0 <HAL_RCC_OscConfig+0x7ac>)
 8008590:	f043 0301 	orr.w	r3, r3, #1
 8008594:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008596:	2300      	movs	r3, #0
}
 8008598:	4618      	mov	r0, r3
 800859a:	3730      	adds	r7, #48	; 0x30
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}
 80085a0:	58024400 	.word	0x58024400
 80085a4:	ffff0007 	.word	0xffff0007

080085a8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b086      	sub	sp, #24
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d101      	bne.n	80085bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80085b8:	2301      	movs	r3, #1
 80085ba:	e19c      	b.n	80088f6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80085bc:	4b8a      	ldr	r3, [pc, #552]	; (80087e8 <HAL_RCC_ClockConfig+0x240>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f003 030f 	and.w	r3, r3, #15
 80085c4:	683a      	ldr	r2, [r7, #0]
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d910      	bls.n	80085ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085ca:	4b87      	ldr	r3, [pc, #540]	; (80087e8 <HAL_RCC_ClockConfig+0x240>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f023 020f 	bic.w	r2, r3, #15
 80085d2:	4985      	ldr	r1, [pc, #532]	; (80087e8 <HAL_RCC_ClockConfig+0x240>)
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	4313      	orrs	r3, r2
 80085d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80085da:	4b83      	ldr	r3, [pc, #524]	; (80087e8 <HAL_RCC_ClockConfig+0x240>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f003 030f 	and.w	r3, r3, #15
 80085e2:	683a      	ldr	r2, [r7, #0]
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d001      	beq.n	80085ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80085e8:	2301      	movs	r3, #1
 80085ea:	e184      	b.n	80088f6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f003 0304 	and.w	r3, r3, #4
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d010      	beq.n	800861a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	691a      	ldr	r2, [r3, #16]
 80085fc:	4b7b      	ldr	r3, [pc, #492]	; (80087ec <HAL_RCC_ClockConfig+0x244>)
 80085fe:	699b      	ldr	r3, [r3, #24]
 8008600:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008604:	429a      	cmp	r2, r3
 8008606:	d908      	bls.n	800861a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008608:	4b78      	ldr	r3, [pc, #480]	; (80087ec <HAL_RCC_ClockConfig+0x244>)
 800860a:	699b      	ldr	r3, [r3, #24]
 800860c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	691b      	ldr	r3, [r3, #16]
 8008614:	4975      	ldr	r1, [pc, #468]	; (80087ec <HAL_RCC_ClockConfig+0x244>)
 8008616:	4313      	orrs	r3, r2
 8008618:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f003 0308 	and.w	r3, r3, #8
 8008622:	2b00      	cmp	r3, #0
 8008624:	d010      	beq.n	8008648 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	695a      	ldr	r2, [r3, #20]
 800862a:	4b70      	ldr	r3, [pc, #448]	; (80087ec <HAL_RCC_ClockConfig+0x244>)
 800862c:	69db      	ldr	r3, [r3, #28]
 800862e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008632:	429a      	cmp	r2, r3
 8008634:	d908      	bls.n	8008648 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008636:	4b6d      	ldr	r3, [pc, #436]	; (80087ec <HAL_RCC_ClockConfig+0x244>)
 8008638:	69db      	ldr	r3, [r3, #28]
 800863a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	695b      	ldr	r3, [r3, #20]
 8008642:	496a      	ldr	r1, [pc, #424]	; (80087ec <HAL_RCC_ClockConfig+0x244>)
 8008644:	4313      	orrs	r3, r2
 8008646:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f003 0310 	and.w	r3, r3, #16
 8008650:	2b00      	cmp	r3, #0
 8008652:	d010      	beq.n	8008676 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	699a      	ldr	r2, [r3, #24]
 8008658:	4b64      	ldr	r3, [pc, #400]	; (80087ec <HAL_RCC_ClockConfig+0x244>)
 800865a:	69db      	ldr	r3, [r3, #28]
 800865c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008660:	429a      	cmp	r2, r3
 8008662:	d908      	bls.n	8008676 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008664:	4b61      	ldr	r3, [pc, #388]	; (80087ec <HAL_RCC_ClockConfig+0x244>)
 8008666:	69db      	ldr	r3, [r3, #28]
 8008668:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	699b      	ldr	r3, [r3, #24]
 8008670:	495e      	ldr	r1, [pc, #376]	; (80087ec <HAL_RCC_ClockConfig+0x244>)
 8008672:	4313      	orrs	r3, r2
 8008674:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f003 0320 	and.w	r3, r3, #32
 800867e:	2b00      	cmp	r3, #0
 8008680:	d010      	beq.n	80086a4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	69da      	ldr	r2, [r3, #28]
 8008686:	4b59      	ldr	r3, [pc, #356]	; (80087ec <HAL_RCC_ClockConfig+0x244>)
 8008688:	6a1b      	ldr	r3, [r3, #32]
 800868a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800868e:	429a      	cmp	r2, r3
 8008690:	d908      	bls.n	80086a4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008692:	4b56      	ldr	r3, [pc, #344]	; (80087ec <HAL_RCC_ClockConfig+0x244>)
 8008694:	6a1b      	ldr	r3, [r3, #32]
 8008696:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	69db      	ldr	r3, [r3, #28]
 800869e:	4953      	ldr	r1, [pc, #332]	; (80087ec <HAL_RCC_ClockConfig+0x244>)
 80086a0:	4313      	orrs	r3, r2
 80086a2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f003 0302 	and.w	r3, r3, #2
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d010      	beq.n	80086d2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	68da      	ldr	r2, [r3, #12]
 80086b4:	4b4d      	ldr	r3, [pc, #308]	; (80087ec <HAL_RCC_ClockConfig+0x244>)
 80086b6:	699b      	ldr	r3, [r3, #24]
 80086b8:	f003 030f 	and.w	r3, r3, #15
 80086bc:	429a      	cmp	r2, r3
 80086be:	d908      	bls.n	80086d2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80086c0:	4b4a      	ldr	r3, [pc, #296]	; (80087ec <HAL_RCC_ClockConfig+0x244>)
 80086c2:	699b      	ldr	r3, [r3, #24]
 80086c4:	f023 020f 	bic.w	r2, r3, #15
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	4947      	ldr	r1, [pc, #284]	; (80087ec <HAL_RCC_ClockConfig+0x244>)
 80086ce:	4313      	orrs	r3, r2
 80086d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f003 0301 	and.w	r3, r3, #1
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d055      	beq.n	800878a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80086de:	4b43      	ldr	r3, [pc, #268]	; (80087ec <HAL_RCC_ClockConfig+0x244>)
 80086e0:	699b      	ldr	r3, [r3, #24]
 80086e2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	4940      	ldr	r1, [pc, #256]	; (80087ec <HAL_RCC_ClockConfig+0x244>)
 80086ec:	4313      	orrs	r3, r2
 80086ee:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	2b02      	cmp	r3, #2
 80086f6:	d107      	bne.n	8008708 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80086f8:	4b3c      	ldr	r3, [pc, #240]	; (80087ec <HAL_RCC_ClockConfig+0x244>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008700:	2b00      	cmp	r3, #0
 8008702:	d121      	bne.n	8008748 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008704:	2301      	movs	r3, #1
 8008706:	e0f6      	b.n	80088f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	2b03      	cmp	r3, #3
 800870e:	d107      	bne.n	8008720 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008710:	4b36      	ldr	r3, [pc, #216]	; (80087ec <HAL_RCC_ClockConfig+0x244>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008718:	2b00      	cmp	r3, #0
 800871a:	d115      	bne.n	8008748 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800871c:	2301      	movs	r3, #1
 800871e:	e0ea      	b.n	80088f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	2b01      	cmp	r3, #1
 8008726:	d107      	bne.n	8008738 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008728:	4b30      	ldr	r3, [pc, #192]	; (80087ec <HAL_RCC_ClockConfig+0x244>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008730:	2b00      	cmp	r3, #0
 8008732:	d109      	bne.n	8008748 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008734:	2301      	movs	r3, #1
 8008736:	e0de      	b.n	80088f6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008738:	4b2c      	ldr	r3, [pc, #176]	; (80087ec <HAL_RCC_ClockConfig+0x244>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f003 0304 	and.w	r3, r3, #4
 8008740:	2b00      	cmp	r3, #0
 8008742:	d101      	bne.n	8008748 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008744:	2301      	movs	r3, #1
 8008746:	e0d6      	b.n	80088f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008748:	4b28      	ldr	r3, [pc, #160]	; (80087ec <HAL_RCC_ClockConfig+0x244>)
 800874a:	691b      	ldr	r3, [r3, #16]
 800874c:	f023 0207 	bic.w	r2, r3, #7
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	4925      	ldr	r1, [pc, #148]	; (80087ec <HAL_RCC_ClockConfig+0x244>)
 8008756:	4313      	orrs	r3, r2
 8008758:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800875a:	f7fc f9f9 	bl	8004b50 <HAL_GetTick>
 800875e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008760:	e00a      	b.n	8008778 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008762:	f7fc f9f5 	bl	8004b50 <HAL_GetTick>
 8008766:	4602      	mov	r2, r0
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	1ad3      	subs	r3, r2, r3
 800876c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008770:	4293      	cmp	r3, r2
 8008772:	d901      	bls.n	8008778 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008774:	2303      	movs	r3, #3
 8008776:	e0be      	b.n	80088f6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008778:	4b1c      	ldr	r3, [pc, #112]	; (80087ec <HAL_RCC_ClockConfig+0x244>)
 800877a:	691b      	ldr	r3, [r3, #16]
 800877c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	00db      	lsls	r3, r3, #3
 8008786:	429a      	cmp	r2, r3
 8008788:	d1eb      	bne.n	8008762 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f003 0302 	and.w	r3, r3, #2
 8008792:	2b00      	cmp	r3, #0
 8008794:	d010      	beq.n	80087b8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	68da      	ldr	r2, [r3, #12]
 800879a:	4b14      	ldr	r3, [pc, #80]	; (80087ec <HAL_RCC_ClockConfig+0x244>)
 800879c:	699b      	ldr	r3, [r3, #24]
 800879e:	f003 030f 	and.w	r3, r3, #15
 80087a2:	429a      	cmp	r2, r3
 80087a4:	d208      	bcs.n	80087b8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80087a6:	4b11      	ldr	r3, [pc, #68]	; (80087ec <HAL_RCC_ClockConfig+0x244>)
 80087a8:	699b      	ldr	r3, [r3, #24]
 80087aa:	f023 020f 	bic.w	r2, r3, #15
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	68db      	ldr	r3, [r3, #12]
 80087b2:	490e      	ldr	r1, [pc, #56]	; (80087ec <HAL_RCC_ClockConfig+0x244>)
 80087b4:	4313      	orrs	r3, r2
 80087b6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80087b8:	4b0b      	ldr	r3, [pc, #44]	; (80087e8 <HAL_RCC_ClockConfig+0x240>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f003 030f 	and.w	r3, r3, #15
 80087c0:	683a      	ldr	r2, [r7, #0]
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d214      	bcs.n	80087f0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087c6:	4b08      	ldr	r3, [pc, #32]	; (80087e8 <HAL_RCC_ClockConfig+0x240>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f023 020f 	bic.w	r2, r3, #15
 80087ce:	4906      	ldr	r1, [pc, #24]	; (80087e8 <HAL_RCC_ClockConfig+0x240>)
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	4313      	orrs	r3, r2
 80087d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80087d6:	4b04      	ldr	r3, [pc, #16]	; (80087e8 <HAL_RCC_ClockConfig+0x240>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f003 030f 	and.w	r3, r3, #15
 80087de:	683a      	ldr	r2, [r7, #0]
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d005      	beq.n	80087f0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80087e4:	2301      	movs	r3, #1
 80087e6:	e086      	b.n	80088f6 <HAL_RCC_ClockConfig+0x34e>
 80087e8:	52002000 	.word	0x52002000
 80087ec:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f003 0304 	and.w	r3, r3, #4
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d010      	beq.n	800881e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	691a      	ldr	r2, [r3, #16]
 8008800:	4b3f      	ldr	r3, [pc, #252]	; (8008900 <HAL_RCC_ClockConfig+0x358>)
 8008802:	699b      	ldr	r3, [r3, #24]
 8008804:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008808:	429a      	cmp	r2, r3
 800880a:	d208      	bcs.n	800881e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800880c:	4b3c      	ldr	r3, [pc, #240]	; (8008900 <HAL_RCC_ClockConfig+0x358>)
 800880e:	699b      	ldr	r3, [r3, #24]
 8008810:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	691b      	ldr	r3, [r3, #16]
 8008818:	4939      	ldr	r1, [pc, #228]	; (8008900 <HAL_RCC_ClockConfig+0x358>)
 800881a:	4313      	orrs	r3, r2
 800881c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f003 0308 	and.w	r3, r3, #8
 8008826:	2b00      	cmp	r3, #0
 8008828:	d010      	beq.n	800884c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	695a      	ldr	r2, [r3, #20]
 800882e:	4b34      	ldr	r3, [pc, #208]	; (8008900 <HAL_RCC_ClockConfig+0x358>)
 8008830:	69db      	ldr	r3, [r3, #28]
 8008832:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008836:	429a      	cmp	r2, r3
 8008838:	d208      	bcs.n	800884c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800883a:	4b31      	ldr	r3, [pc, #196]	; (8008900 <HAL_RCC_ClockConfig+0x358>)
 800883c:	69db      	ldr	r3, [r3, #28]
 800883e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	695b      	ldr	r3, [r3, #20]
 8008846:	492e      	ldr	r1, [pc, #184]	; (8008900 <HAL_RCC_ClockConfig+0x358>)
 8008848:	4313      	orrs	r3, r2
 800884a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f003 0310 	and.w	r3, r3, #16
 8008854:	2b00      	cmp	r3, #0
 8008856:	d010      	beq.n	800887a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	699a      	ldr	r2, [r3, #24]
 800885c:	4b28      	ldr	r3, [pc, #160]	; (8008900 <HAL_RCC_ClockConfig+0x358>)
 800885e:	69db      	ldr	r3, [r3, #28]
 8008860:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008864:	429a      	cmp	r2, r3
 8008866:	d208      	bcs.n	800887a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008868:	4b25      	ldr	r3, [pc, #148]	; (8008900 <HAL_RCC_ClockConfig+0x358>)
 800886a:	69db      	ldr	r3, [r3, #28]
 800886c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	699b      	ldr	r3, [r3, #24]
 8008874:	4922      	ldr	r1, [pc, #136]	; (8008900 <HAL_RCC_ClockConfig+0x358>)
 8008876:	4313      	orrs	r3, r2
 8008878:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f003 0320 	and.w	r3, r3, #32
 8008882:	2b00      	cmp	r3, #0
 8008884:	d010      	beq.n	80088a8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	69da      	ldr	r2, [r3, #28]
 800888a:	4b1d      	ldr	r3, [pc, #116]	; (8008900 <HAL_RCC_ClockConfig+0x358>)
 800888c:	6a1b      	ldr	r3, [r3, #32]
 800888e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008892:	429a      	cmp	r2, r3
 8008894:	d208      	bcs.n	80088a8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008896:	4b1a      	ldr	r3, [pc, #104]	; (8008900 <HAL_RCC_ClockConfig+0x358>)
 8008898:	6a1b      	ldr	r3, [r3, #32]
 800889a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	69db      	ldr	r3, [r3, #28]
 80088a2:	4917      	ldr	r1, [pc, #92]	; (8008900 <HAL_RCC_ClockConfig+0x358>)
 80088a4:	4313      	orrs	r3, r2
 80088a6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80088a8:	f000 f834 	bl	8008914 <HAL_RCC_GetSysClockFreq>
 80088ac:	4602      	mov	r2, r0
 80088ae:	4b14      	ldr	r3, [pc, #80]	; (8008900 <HAL_RCC_ClockConfig+0x358>)
 80088b0:	699b      	ldr	r3, [r3, #24]
 80088b2:	0a1b      	lsrs	r3, r3, #8
 80088b4:	f003 030f 	and.w	r3, r3, #15
 80088b8:	4912      	ldr	r1, [pc, #72]	; (8008904 <HAL_RCC_ClockConfig+0x35c>)
 80088ba:	5ccb      	ldrb	r3, [r1, r3]
 80088bc:	f003 031f 	and.w	r3, r3, #31
 80088c0:	fa22 f303 	lsr.w	r3, r2, r3
 80088c4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80088c6:	4b0e      	ldr	r3, [pc, #56]	; (8008900 <HAL_RCC_ClockConfig+0x358>)
 80088c8:	699b      	ldr	r3, [r3, #24]
 80088ca:	f003 030f 	and.w	r3, r3, #15
 80088ce:	4a0d      	ldr	r2, [pc, #52]	; (8008904 <HAL_RCC_ClockConfig+0x35c>)
 80088d0:	5cd3      	ldrb	r3, [r2, r3]
 80088d2:	f003 031f 	and.w	r3, r3, #31
 80088d6:	693a      	ldr	r2, [r7, #16]
 80088d8:	fa22 f303 	lsr.w	r3, r2, r3
 80088dc:	4a0a      	ldr	r2, [pc, #40]	; (8008908 <HAL_RCC_ClockConfig+0x360>)
 80088de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80088e0:	4a0a      	ldr	r2, [pc, #40]	; (800890c <HAL_RCC_ClockConfig+0x364>)
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80088e6:	4b0a      	ldr	r3, [pc, #40]	; (8008910 <HAL_RCC_ClockConfig+0x368>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4618      	mov	r0, r3
 80088ec:	f7fc f8e6 	bl	8004abc <HAL_InitTick>
 80088f0:	4603      	mov	r3, r0
 80088f2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80088f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3718      	adds	r7, #24
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}
 80088fe:	bf00      	nop
 8008900:	58024400 	.word	0x58024400
 8008904:	0800e9f8 	.word	0x0800e9f8
 8008908:	24000014 	.word	0x24000014
 800890c:	24000010 	.word	0x24000010
 8008910:	24000018 	.word	0x24000018

08008914 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008914:	b480      	push	{r7}
 8008916:	b089      	sub	sp, #36	; 0x24
 8008918:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800891a:	4bb3      	ldr	r3, [pc, #716]	; (8008be8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800891c:	691b      	ldr	r3, [r3, #16]
 800891e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008922:	2b18      	cmp	r3, #24
 8008924:	f200 8155 	bhi.w	8008bd2 <HAL_RCC_GetSysClockFreq+0x2be>
 8008928:	a201      	add	r2, pc, #4	; (adr r2, 8008930 <HAL_RCC_GetSysClockFreq+0x1c>)
 800892a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800892e:	bf00      	nop
 8008930:	08008995 	.word	0x08008995
 8008934:	08008bd3 	.word	0x08008bd3
 8008938:	08008bd3 	.word	0x08008bd3
 800893c:	08008bd3 	.word	0x08008bd3
 8008940:	08008bd3 	.word	0x08008bd3
 8008944:	08008bd3 	.word	0x08008bd3
 8008948:	08008bd3 	.word	0x08008bd3
 800894c:	08008bd3 	.word	0x08008bd3
 8008950:	080089bb 	.word	0x080089bb
 8008954:	08008bd3 	.word	0x08008bd3
 8008958:	08008bd3 	.word	0x08008bd3
 800895c:	08008bd3 	.word	0x08008bd3
 8008960:	08008bd3 	.word	0x08008bd3
 8008964:	08008bd3 	.word	0x08008bd3
 8008968:	08008bd3 	.word	0x08008bd3
 800896c:	08008bd3 	.word	0x08008bd3
 8008970:	080089c1 	.word	0x080089c1
 8008974:	08008bd3 	.word	0x08008bd3
 8008978:	08008bd3 	.word	0x08008bd3
 800897c:	08008bd3 	.word	0x08008bd3
 8008980:	08008bd3 	.word	0x08008bd3
 8008984:	08008bd3 	.word	0x08008bd3
 8008988:	08008bd3 	.word	0x08008bd3
 800898c:	08008bd3 	.word	0x08008bd3
 8008990:	080089c7 	.word	0x080089c7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008994:	4b94      	ldr	r3, [pc, #592]	; (8008be8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f003 0320 	and.w	r3, r3, #32
 800899c:	2b00      	cmp	r3, #0
 800899e:	d009      	beq.n	80089b4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80089a0:	4b91      	ldr	r3, [pc, #580]	; (8008be8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	08db      	lsrs	r3, r3, #3
 80089a6:	f003 0303 	and.w	r3, r3, #3
 80089aa:	4a90      	ldr	r2, [pc, #576]	; (8008bec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80089ac:	fa22 f303 	lsr.w	r3, r2, r3
 80089b0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80089b2:	e111      	b.n	8008bd8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80089b4:	4b8d      	ldr	r3, [pc, #564]	; (8008bec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80089b6:	61bb      	str	r3, [r7, #24]
      break;
 80089b8:	e10e      	b.n	8008bd8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80089ba:	4b8d      	ldr	r3, [pc, #564]	; (8008bf0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80089bc:	61bb      	str	r3, [r7, #24]
      break;
 80089be:	e10b      	b.n	8008bd8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80089c0:	4b8c      	ldr	r3, [pc, #560]	; (8008bf4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80089c2:	61bb      	str	r3, [r7, #24]
      break;
 80089c4:	e108      	b.n	8008bd8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80089c6:	4b88      	ldr	r3, [pc, #544]	; (8008be8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ca:	f003 0303 	and.w	r3, r3, #3
 80089ce:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80089d0:	4b85      	ldr	r3, [pc, #532]	; (8008be8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089d4:	091b      	lsrs	r3, r3, #4
 80089d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80089da:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80089dc:	4b82      	ldr	r3, [pc, #520]	; (8008be8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e0:	f003 0301 	and.w	r3, r3, #1
 80089e4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80089e6:	4b80      	ldr	r3, [pc, #512]	; (8008be8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ea:	08db      	lsrs	r3, r3, #3
 80089ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80089f0:	68fa      	ldr	r2, [r7, #12]
 80089f2:	fb02 f303 	mul.w	r3, r2, r3
 80089f6:	ee07 3a90 	vmov	s15, r3
 80089fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089fe:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	f000 80e1 	beq.w	8008bcc <HAL_RCC_GetSysClockFreq+0x2b8>
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	2b02      	cmp	r3, #2
 8008a0e:	f000 8083 	beq.w	8008b18 <HAL_RCC_GetSysClockFreq+0x204>
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	2b02      	cmp	r3, #2
 8008a16:	f200 80a1 	bhi.w	8008b5c <HAL_RCC_GetSysClockFreq+0x248>
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d003      	beq.n	8008a28 <HAL_RCC_GetSysClockFreq+0x114>
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	2b01      	cmp	r3, #1
 8008a24:	d056      	beq.n	8008ad4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008a26:	e099      	b.n	8008b5c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a28:	4b6f      	ldr	r3, [pc, #444]	; (8008be8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f003 0320 	and.w	r3, r3, #32
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d02d      	beq.n	8008a90 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a34:	4b6c      	ldr	r3, [pc, #432]	; (8008be8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	08db      	lsrs	r3, r3, #3
 8008a3a:	f003 0303 	and.w	r3, r3, #3
 8008a3e:	4a6b      	ldr	r2, [pc, #428]	; (8008bec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008a40:	fa22 f303 	lsr.w	r3, r2, r3
 8008a44:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	ee07 3a90 	vmov	s15, r3
 8008a4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	ee07 3a90 	vmov	s15, r3
 8008a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a5e:	4b62      	ldr	r3, [pc, #392]	; (8008be8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a66:	ee07 3a90 	vmov	s15, r3
 8008a6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a72:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008bf8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a8a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008a8e:	e087      	b.n	8008ba0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	ee07 3a90 	vmov	s15, r3
 8008a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a9a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008bfc <HAL_RCC_GetSysClockFreq+0x2e8>
 8008a9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008aa2:	4b51      	ldr	r3, [pc, #324]	; (8008be8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aaa:	ee07 3a90 	vmov	s15, r3
 8008aae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ab2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ab6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008bf8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008aba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008abe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ac2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ace:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008ad2:	e065      	b.n	8008ba0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	ee07 3a90 	vmov	s15, r3
 8008ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ade:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008c00 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008ae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ae6:	4b40      	ldr	r3, [pc, #256]	; (8008be8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aee:	ee07 3a90 	vmov	s15, r3
 8008af2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008af6:	ed97 6a02 	vldr	s12, [r7, #8]
 8008afa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008bf8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008afe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b12:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008b16:	e043      	b.n	8008ba0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	ee07 3a90 	vmov	s15, r3
 8008b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b22:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008c04 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008b26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b2a:	4b2f      	ldr	r3, [pc, #188]	; (8008be8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b32:	ee07 3a90 	vmov	s15, r3
 8008b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b3e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008bf8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b56:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008b5a:	e021      	b.n	8008ba0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	ee07 3a90 	vmov	s15, r3
 8008b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b66:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008c00 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008b6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b6e:	4b1e      	ldr	r3, [pc, #120]	; (8008be8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b76:	ee07 3a90 	vmov	s15, r3
 8008b7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b82:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008bf8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b9a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008b9e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008ba0:	4b11      	ldr	r3, [pc, #68]	; (8008be8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ba4:	0a5b      	lsrs	r3, r3, #9
 8008ba6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008baa:	3301      	adds	r3, #1
 8008bac:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	ee07 3a90 	vmov	s15, r3
 8008bb4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008bb8:	edd7 6a07 	vldr	s13, [r7, #28]
 8008bbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bc4:	ee17 3a90 	vmov	r3, s15
 8008bc8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008bca:	e005      	b.n	8008bd8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	61bb      	str	r3, [r7, #24]
      break;
 8008bd0:	e002      	b.n	8008bd8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008bd2:	4b07      	ldr	r3, [pc, #28]	; (8008bf0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008bd4:	61bb      	str	r3, [r7, #24]
      break;
 8008bd6:	bf00      	nop
  }

  return sysclockfreq;
 8008bd8:	69bb      	ldr	r3, [r7, #24]
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3724      	adds	r7, #36	; 0x24
 8008bde:	46bd      	mov	sp, r7
 8008be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be4:	4770      	bx	lr
 8008be6:	bf00      	nop
 8008be8:	58024400 	.word	0x58024400
 8008bec:	03d09000 	.word	0x03d09000
 8008bf0:	003d0900 	.word	0x003d0900
 8008bf4:	007a1200 	.word	0x007a1200
 8008bf8:	46000000 	.word	0x46000000
 8008bfc:	4c742400 	.word	0x4c742400
 8008c00:	4a742400 	.word	0x4a742400
 8008c04:	4af42400 	.word	0x4af42400

08008c08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b082      	sub	sp, #8
 8008c0c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008c0e:	f7ff fe81 	bl	8008914 <HAL_RCC_GetSysClockFreq>
 8008c12:	4602      	mov	r2, r0
 8008c14:	4b10      	ldr	r3, [pc, #64]	; (8008c58 <HAL_RCC_GetHCLKFreq+0x50>)
 8008c16:	699b      	ldr	r3, [r3, #24]
 8008c18:	0a1b      	lsrs	r3, r3, #8
 8008c1a:	f003 030f 	and.w	r3, r3, #15
 8008c1e:	490f      	ldr	r1, [pc, #60]	; (8008c5c <HAL_RCC_GetHCLKFreq+0x54>)
 8008c20:	5ccb      	ldrb	r3, [r1, r3]
 8008c22:	f003 031f 	and.w	r3, r3, #31
 8008c26:	fa22 f303 	lsr.w	r3, r2, r3
 8008c2a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008c2c:	4b0a      	ldr	r3, [pc, #40]	; (8008c58 <HAL_RCC_GetHCLKFreq+0x50>)
 8008c2e:	699b      	ldr	r3, [r3, #24]
 8008c30:	f003 030f 	and.w	r3, r3, #15
 8008c34:	4a09      	ldr	r2, [pc, #36]	; (8008c5c <HAL_RCC_GetHCLKFreq+0x54>)
 8008c36:	5cd3      	ldrb	r3, [r2, r3]
 8008c38:	f003 031f 	and.w	r3, r3, #31
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8008c42:	4a07      	ldr	r2, [pc, #28]	; (8008c60 <HAL_RCC_GetHCLKFreq+0x58>)
 8008c44:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008c46:	4a07      	ldr	r2, [pc, #28]	; (8008c64 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008c4c:	4b04      	ldr	r3, [pc, #16]	; (8008c60 <HAL_RCC_GetHCLKFreq+0x58>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3708      	adds	r7, #8
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}
 8008c58:	58024400 	.word	0x58024400
 8008c5c:	0800e9f8 	.word	0x0800e9f8
 8008c60:	24000014 	.word	0x24000014
 8008c64:	24000010 	.word	0x24000010

08008c68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008c6c:	f7ff ffcc 	bl	8008c08 <HAL_RCC_GetHCLKFreq>
 8008c70:	4602      	mov	r2, r0
 8008c72:	4b06      	ldr	r3, [pc, #24]	; (8008c8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008c74:	69db      	ldr	r3, [r3, #28]
 8008c76:	091b      	lsrs	r3, r3, #4
 8008c78:	f003 0307 	and.w	r3, r3, #7
 8008c7c:	4904      	ldr	r1, [pc, #16]	; (8008c90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008c7e:	5ccb      	ldrb	r3, [r1, r3]
 8008c80:	f003 031f 	and.w	r3, r3, #31
 8008c84:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	bd80      	pop	{r7, pc}
 8008c8c:	58024400 	.word	0x58024400
 8008c90:	0800e9f8 	.word	0x0800e9f8

08008c94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008c98:	f7ff ffb6 	bl	8008c08 <HAL_RCC_GetHCLKFreq>
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	4b06      	ldr	r3, [pc, #24]	; (8008cb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008ca0:	69db      	ldr	r3, [r3, #28]
 8008ca2:	0a1b      	lsrs	r3, r3, #8
 8008ca4:	f003 0307 	and.w	r3, r3, #7
 8008ca8:	4904      	ldr	r1, [pc, #16]	; (8008cbc <HAL_RCC_GetPCLK2Freq+0x28>)
 8008caa:	5ccb      	ldrb	r3, [r1, r3]
 8008cac:	f003 031f 	and.w	r3, r3, #31
 8008cb0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	bd80      	pop	{r7, pc}
 8008cb8:	58024400 	.word	0x58024400
 8008cbc:	0800e9f8 	.word	0x0800e9f8

08008cc0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008cc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008cc4:	b0c6      	sub	sp, #280	; 0x118
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008ccc:	2300      	movs	r3, #0
 8008cce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008cd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8008ce4:	2500      	movs	r5, #0
 8008ce6:	ea54 0305 	orrs.w	r3, r4, r5
 8008cea:	d049      	beq.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008cf2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008cf6:	d02f      	beq.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008cf8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008cfc:	d828      	bhi.n	8008d50 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008cfe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d02:	d01a      	beq.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008d04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d08:	d822      	bhi.n	8008d50 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d003      	beq.n	8008d16 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008d0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d12:	d007      	beq.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008d14:	e01c      	b.n	8008d50 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d16:	4bab      	ldr	r3, [pc, #684]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d1a:	4aaa      	ldr	r2, [pc, #680]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008d1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008d22:	e01a      	b.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d28:	3308      	adds	r3, #8
 8008d2a:	2102      	movs	r1, #2
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f001 fc25 	bl	800a57c <RCCEx_PLL2_Config>
 8008d32:	4603      	mov	r3, r0
 8008d34:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008d38:	e00f      	b.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008d3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d3e:	3328      	adds	r3, #40	; 0x28
 8008d40:	2102      	movs	r1, #2
 8008d42:	4618      	mov	r0, r3
 8008d44:	f001 fccc 	bl	800a6e0 <RCCEx_PLL3_Config>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008d4e:	e004      	b.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d50:	2301      	movs	r3, #1
 8008d52:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008d56:	e000      	b.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008d58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d5a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d10a      	bne.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008d62:	4b98      	ldr	r3, [pc, #608]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008d64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d66:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d70:	4a94      	ldr	r2, [pc, #592]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008d72:	430b      	orrs	r3, r1
 8008d74:	6513      	str	r3, [r2, #80]	; 0x50
 8008d76:	e003      	b.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d78:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008d7c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d88:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8008d8c:	f04f 0900 	mov.w	r9, #0
 8008d90:	ea58 0309 	orrs.w	r3, r8, r9
 8008d94:	d047      	beq.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008d96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d9c:	2b04      	cmp	r3, #4
 8008d9e:	d82a      	bhi.n	8008df6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008da0:	a201      	add	r2, pc, #4	; (adr r2, 8008da8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008da6:	bf00      	nop
 8008da8:	08008dbd 	.word	0x08008dbd
 8008dac:	08008dcb 	.word	0x08008dcb
 8008db0:	08008de1 	.word	0x08008de1
 8008db4:	08008dff 	.word	0x08008dff
 8008db8:	08008dff 	.word	0x08008dff
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008dbc:	4b81      	ldr	r3, [pc, #516]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc0:	4a80      	ldr	r2, [pc, #512]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008dc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008dc6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008dc8:	e01a      	b.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dce:	3308      	adds	r3, #8
 8008dd0:	2100      	movs	r1, #0
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f001 fbd2 	bl	800a57c <RCCEx_PLL2_Config>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008dde:	e00f      	b.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008de0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008de4:	3328      	adds	r3, #40	; 0x28
 8008de6:	2100      	movs	r1, #0
 8008de8:	4618      	mov	r0, r3
 8008dea:	f001 fc79 	bl	800a6e0 <RCCEx_PLL3_Config>
 8008dee:	4603      	mov	r3, r0
 8008df0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008df4:	e004      	b.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008df6:	2301      	movs	r3, #1
 8008df8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008dfc:	e000      	b.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008dfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e00:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d10a      	bne.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008e08:	4b6e      	ldr	r3, [pc, #440]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e0c:	f023 0107 	bic.w	r1, r3, #7
 8008e10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e16:	4a6b      	ldr	r2, [pc, #428]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e18:	430b      	orrs	r3, r1
 8008e1a:	6513      	str	r3, [r2, #80]	; 0x50
 8008e1c:	e003      	b.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e1e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008e22:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e2e:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8008e32:	f04f 0b00 	mov.w	fp, #0
 8008e36:	ea5a 030b 	orrs.w	r3, sl, fp
 8008e3a:	d05b      	beq.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008e3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e40:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008e44:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008e48:	d03b      	beq.n	8008ec2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8008e4a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008e4e:	d834      	bhi.n	8008eba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008e50:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008e54:	d037      	beq.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008e56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008e5a:	d82e      	bhi.n	8008eba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008e5c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008e60:	d033      	beq.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8008e62:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008e66:	d828      	bhi.n	8008eba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008e68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e6c:	d01a      	beq.n	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8008e6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e72:	d822      	bhi.n	8008eba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d003      	beq.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8008e78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e7c:	d007      	beq.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8008e7e:	e01c      	b.n	8008eba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e80:	4b50      	ldr	r3, [pc, #320]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e84:	4a4f      	ldr	r2, [pc, #316]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008e8c:	e01e      	b.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008e8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e92:	3308      	adds	r3, #8
 8008e94:	2100      	movs	r1, #0
 8008e96:	4618      	mov	r0, r3
 8008e98:	f001 fb70 	bl	800a57c <RCCEx_PLL2_Config>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008ea2:	e013      	b.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ea8:	3328      	adds	r3, #40	; 0x28
 8008eaa:	2100      	movs	r1, #0
 8008eac:	4618      	mov	r0, r3
 8008eae:	f001 fc17 	bl	800a6e0 <RCCEx_PLL3_Config>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008eb8:	e008      	b.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008eba:	2301      	movs	r3, #1
 8008ebc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008ec0:	e004      	b.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008ec2:	bf00      	nop
 8008ec4:	e002      	b.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008ec6:	bf00      	nop
 8008ec8:	e000      	b.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008eca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ecc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d10b      	bne.n	8008eec <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008ed4:	4b3b      	ldr	r3, [pc, #236]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ed8:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8008edc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ee0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008ee4:	4a37      	ldr	r2, [pc, #220]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008ee6:	430b      	orrs	r3, r1
 8008ee8:	6593      	str	r3, [r2, #88]	; 0x58
 8008eea:	e003      	b.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008eec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008ef0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008efc:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8008f00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008f04:	2300      	movs	r3, #0
 8008f06:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008f0a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8008f0e:	460b      	mov	r3, r1
 8008f10:	4313      	orrs	r3, r2
 8008f12:	d05d      	beq.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008f14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f18:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008f1c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008f20:	d03b      	beq.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8008f22:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008f26:	d834      	bhi.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008f28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008f2c:	d037      	beq.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8008f2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008f32:	d82e      	bhi.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008f34:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008f38:	d033      	beq.n	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8008f3a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008f3e:	d828      	bhi.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008f40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f44:	d01a      	beq.n	8008f7c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8008f46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f4a:	d822      	bhi.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d003      	beq.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008f50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008f54:	d007      	beq.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008f56:	e01c      	b.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f58:	4b1a      	ldr	r3, [pc, #104]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f5c:	4a19      	ldr	r2, [pc, #100]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f64:	e01e      	b.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008f66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f6a:	3308      	adds	r3, #8
 8008f6c:	2100      	movs	r1, #0
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f001 fb04 	bl	800a57c <RCCEx_PLL2_Config>
 8008f74:	4603      	mov	r3, r0
 8008f76:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008f7a:	e013      	b.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f80:	3328      	adds	r3, #40	; 0x28
 8008f82:	2100      	movs	r1, #0
 8008f84:	4618      	mov	r0, r3
 8008f86:	f001 fbab 	bl	800a6e0 <RCCEx_PLL3_Config>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f90:	e008      	b.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008f92:	2301      	movs	r3, #1
 8008f94:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008f98:	e004      	b.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008f9a:	bf00      	nop
 8008f9c:	e002      	b.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008f9e:	bf00      	nop
 8008fa0:	e000      	b.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008fa2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fa4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d10d      	bne.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008fac:	4b05      	ldr	r3, [pc, #20]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fb0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8008fb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fb8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008fbc:	4a01      	ldr	r2, [pc, #4]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008fbe:	430b      	orrs	r3, r1
 8008fc0:	6593      	str	r3, [r2, #88]	; 0x58
 8008fc2:	e005      	b.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8008fc4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fc8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008fcc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008fd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8008fdc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008fe6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8008fea:	460b      	mov	r3, r1
 8008fec:	4313      	orrs	r3, r2
 8008fee:	d03a      	beq.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8008ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ff6:	2b30      	cmp	r3, #48	; 0x30
 8008ff8:	d01f      	beq.n	800903a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8008ffa:	2b30      	cmp	r3, #48	; 0x30
 8008ffc:	d819      	bhi.n	8009032 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8008ffe:	2b20      	cmp	r3, #32
 8009000:	d00c      	beq.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009002:	2b20      	cmp	r3, #32
 8009004:	d815      	bhi.n	8009032 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8009006:	2b00      	cmp	r3, #0
 8009008:	d019      	beq.n	800903e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800900a:	2b10      	cmp	r3, #16
 800900c:	d111      	bne.n	8009032 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800900e:	4baa      	ldr	r3, [pc, #680]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009012:	4aa9      	ldr	r2, [pc, #676]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009018:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800901a:	e011      	b.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800901c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009020:	3308      	adds	r3, #8
 8009022:	2102      	movs	r1, #2
 8009024:	4618      	mov	r0, r3
 8009026:	f001 faa9 	bl	800a57c <RCCEx_PLL2_Config>
 800902a:	4603      	mov	r3, r0
 800902c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009030:	e006      	b.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009032:	2301      	movs	r3, #1
 8009034:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009038:	e002      	b.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800903a:	bf00      	nop
 800903c:	e000      	b.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800903e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009040:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009044:	2b00      	cmp	r3, #0
 8009046:	d10a      	bne.n	800905e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009048:	4b9b      	ldr	r3, [pc, #620]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800904a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800904c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8009050:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009056:	4a98      	ldr	r2, [pc, #608]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009058:	430b      	orrs	r3, r1
 800905a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800905c:	e003      	b.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800905e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009062:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009066:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800906a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800906e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8009072:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009076:	2300      	movs	r3, #0
 8009078:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800907c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8009080:	460b      	mov	r3, r1
 8009082:	4313      	orrs	r3, r2
 8009084:	d051      	beq.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009086:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800908a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800908c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009090:	d035      	beq.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8009092:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009096:	d82e      	bhi.n	80090f6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009098:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800909c:	d031      	beq.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800909e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80090a2:	d828      	bhi.n	80090f6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80090a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090a8:	d01a      	beq.n	80090e0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80090aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090ae:	d822      	bhi.n	80090f6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d003      	beq.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80090b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090b8:	d007      	beq.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80090ba:	e01c      	b.n	80090f6 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090bc:	4b7e      	ldr	r3, [pc, #504]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80090be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090c0:	4a7d      	ldr	r2, [pc, #500]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80090c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80090c8:	e01c      	b.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80090ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090ce:	3308      	adds	r3, #8
 80090d0:	2100      	movs	r1, #0
 80090d2:	4618      	mov	r0, r3
 80090d4:	f001 fa52 	bl	800a57c <RCCEx_PLL2_Config>
 80090d8:	4603      	mov	r3, r0
 80090da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80090de:	e011      	b.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80090e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090e4:	3328      	adds	r3, #40	; 0x28
 80090e6:	2100      	movs	r1, #0
 80090e8:	4618      	mov	r0, r3
 80090ea:	f001 faf9 	bl	800a6e0 <RCCEx_PLL3_Config>
 80090ee:	4603      	mov	r3, r0
 80090f0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80090f4:	e006      	b.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090f6:	2301      	movs	r3, #1
 80090f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80090fc:	e002      	b.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80090fe:	bf00      	nop
 8009100:	e000      	b.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8009102:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009104:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009108:	2b00      	cmp	r3, #0
 800910a:	d10a      	bne.n	8009122 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800910c:	4b6a      	ldr	r3, [pc, #424]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800910e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009110:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8009114:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800911a:	4a67      	ldr	r2, [pc, #412]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800911c:	430b      	orrs	r3, r1
 800911e:	6513      	str	r3, [r2, #80]	; 0x50
 8009120:	e003      	b.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009122:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009126:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800912a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800912e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009132:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8009136:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800913a:	2300      	movs	r3, #0
 800913c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009140:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8009144:	460b      	mov	r3, r1
 8009146:	4313      	orrs	r3, r2
 8009148:	d053      	beq.n	80091f2 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800914a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800914e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009150:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009154:	d033      	beq.n	80091be <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8009156:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800915a:	d82c      	bhi.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800915c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009160:	d02f      	beq.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8009162:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009166:	d826      	bhi.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009168:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800916c:	d02b      	beq.n	80091c6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800916e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009172:	d820      	bhi.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009174:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009178:	d012      	beq.n	80091a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800917a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800917e:	d81a      	bhi.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009180:	2b00      	cmp	r3, #0
 8009182:	d022      	beq.n	80091ca <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8009184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009188:	d115      	bne.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800918a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800918e:	3308      	adds	r3, #8
 8009190:	2101      	movs	r1, #1
 8009192:	4618      	mov	r0, r3
 8009194:	f001 f9f2 	bl	800a57c <RCCEx_PLL2_Config>
 8009198:	4603      	mov	r3, r0
 800919a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800919e:	e015      	b.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80091a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091a4:	3328      	adds	r3, #40	; 0x28
 80091a6:	2101      	movs	r1, #1
 80091a8:	4618      	mov	r0, r3
 80091aa:	f001 fa99 	bl	800a6e0 <RCCEx_PLL3_Config>
 80091ae:	4603      	mov	r3, r0
 80091b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80091b4:	e00a      	b.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80091b6:	2301      	movs	r3, #1
 80091b8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80091bc:	e006      	b.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80091be:	bf00      	nop
 80091c0:	e004      	b.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80091c2:	bf00      	nop
 80091c4:	e002      	b.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80091c6:	bf00      	nop
 80091c8:	e000      	b.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80091ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091cc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d10a      	bne.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80091d4:	4b38      	ldr	r3, [pc, #224]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80091d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091d8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80091dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091e2:	4a35      	ldr	r2, [pc, #212]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80091e4:	430b      	orrs	r3, r1
 80091e6:	6513      	str	r3, [r2, #80]	; 0x50
 80091e8:	e003      	b.n	80091f2 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091ea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80091ee:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80091f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091fa:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80091fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009202:	2300      	movs	r3, #0
 8009204:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009208:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800920c:	460b      	mov	r3, r1
 800920e:	4313      	orrs	r3, r2
 8009210:	d058      	beq.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009212:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009216:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800921a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800921e:	d033      	beq.n	8009288 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8009220:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009224:	d82c      	bhi.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800922a:	d02f      	beq.n	800928c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800922c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009230:	d826      	bhi.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009232:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009236:	d02b      	beq.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8009238:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800923c:	d820      	bhi.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800923e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009242:	d012      	beq.n	800926a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8009244:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009248:	d81a      	bhi.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800924a:	2b00      	cmp	r3, #0
 800924c:	d022      	beq.n	8009294 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800924e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009252:	d115      	bne.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009254:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009258:	3308      	adds	r3, #8
 800925a:	2101      	movs	r1, #1
 800925c:	4618      	mov	r0, r3
 800925e:	f001 f98d 	bl	800a57c <RCCEx_PLL2_Config>
 8009262:	4603      	mov	r3, r0
 8009264:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009268:	e015      	b.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800926a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800926e:	3328      	adds	r3, #40	; 0x28
 8009270:	2101      	movs	r1, #1
 8009272:	4618      	mov	r0, r3
 8009274:	f001 fa34 	bl	800a6e0 <RCCEx_PLL3_Config>
 8009278:	4603      	mov	r3, r0
 800927a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800927e:	e00a      	b.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009280:	2301      	movs	r3, #1
 8009282:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009286:	e006      	b.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009288:	bf00      	nop
 800928a:	e004      	b.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800928c:	bf00      	nop
 800928e:	e002      	b.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009290:	bf00      	nop
 8009292:	e000      	b.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009294:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009296:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800929a:	2b00      	cmp	r3, #0
 800929c:	d10e      	bne.n	80092bc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800929e:	4b06      	ldr	r3, [pc, #24]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80092a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092a2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80092a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80092ae:	4a02      	ldr	r2, [pc, #8]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80092b0:	430b      	orrs	r3, r1
 80092b2:	6593      	str	r3, [r2, #88]	; 0x58
 80092b4:	e006      	b.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80092b6:	bf00      	nop
 80092b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80092c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80092c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092cc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80092d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80092d4:	2300      	movs	r3, #0
 80092d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80092da:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80092de:	460b      	mov	r3, r1
 80092e0:	4313      	orrs	r3, r2
 80092e2:	d037      	beq.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80092e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092ee:	d00e      	beq.n	800930e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80092f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092f4:	d816      	bhi.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d018      	beq.n	800932c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80092fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80092fe:	d111      	bne.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009300:	4bc4      	ldr	r3, [pc, #784]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009304:	4ac3      	ldr	r2, [pc, #780]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009306:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800930a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800930c:	e00f      	b.n	800932e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800930e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009312:	3308      	adds	r3, #8
 8009314:	2101      	movs	r1, #1
 8009316:	4618      	mov	r0, r3
 8009318:	f001 f930 	bl	800a57c <RCCEx_PLL2_Config>
 800931c:	4603      	mov	r3, r0
 800931e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009322:	e004      	b.n	800932e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009324:	2301      	movs	r3, #1
 8009326:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800932a:	e000      	b.n	800932e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800932c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800932e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009332:	2b00      	cmp	r3, #0
 8009334:	d10a      	bne.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009336:	4bb7      	ldr	r3, [pc, #732]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800933a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800933e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009342:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009344:	4ab3      	ldr	r2, [pc, #716]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009346:	430b      	orrs	r3, r1
 8009348:	6513      	str	r3, [r2, #80]	; 0x50
 800934a:	e003      	b.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800934c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009350:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009354:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800935c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8009360:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009364:	2300      	movs	r3, #0
 8009366:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800936a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800936e:	460b      	mov	r3, r1
 8009370:	4313      	orrs	r3, r2
 8009372:	d039      	beq.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009374:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800937a:	2b03      	cmp	r3, #3
 800937c:	d81c      	bhi.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800937e:	a201      	add	r2, pc, #4	; (adr r2, 8009384 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8009380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009384:	080093c1 	.word	0x080093c1
 8009388:	08009395 	.word	0x08009395
 800938c:	080093a3 	.word	0x080093a3
 8009390:	080093c1 	.word	0x080093c1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009394:	4b9f      	ldr	r3, [pc, #636]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009398:	4a9e      	ldr	r2, [pc, #632]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800939a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800939e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80093a0:	e00f      	b.n	80093c2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80093a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093a6:	3308      	adds	r3, #8
 80093a8:	2102      	movs	r1, #2
 80093aa:	4618      	mov	r0, r3
 80093ac:	f001 f8e6 	bl	800a57c <RCCEx_PLL2_Config>
 80093b0:	4603      	mov	r3, r0
 80093b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80093b6:	e004      	b.n	80093c2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80093b8:	2301      	movs	r3, #1
 80093ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80093be:	e000      	b.n	80093c2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80093c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093c2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d10a      	bne.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80093ca:	4b92      	ldr	r3, [pc, #584]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80093cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093ce:	f023 0103 	bic.w	r1, r3, #3
 80093d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093d8:	4a8e      	ldr	r2, [pc, #568]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80093da:	430b      	orrs	r3, r1
 80093dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80093de:	e003      	b.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80093e4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80093e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80093f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80093f8:	2300      	movs	r3, #0
 80093fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80093fe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009402:	460b      	mov	r3, r1
 8009404:	4313      	orrs	r3, r2
 8009406:	f000 8099 	beq.w	800953c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800940a:	4b83      	ldr	r3, [pc, #524]	; (8009618 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a82      	ldr	r2, [pc, #520]	; (8009618 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009414:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009416:	f7fb fb9b 	bl	8004b50 <HAL_GetTick>
 800941a:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800941e:	e00b      	b.n	8009438 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009420:	f7fb fb96 	bl	8004b50 <HAL_GetTick>
 8009424:	4602      	mov	r2, r0
 8009426:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800942a:	1ad3      	subs	r3, r2, r3
 800942c:	2b64      	cmp	r3, #100	; 0x64
 800942e:	d903      	bls.n	8009438 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8009430:	2303      	movs	r3, #3
 8009432:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009436:	e005      	b.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009438:	4b77      	ldr	r3, [pc, #476]	; (8009618 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009440:	2b00      	cmp	r3, #0
 8009442:	d0ed      	beq.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8009444:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009448:	2b00      	cmp	r3, #0
 800944a:	d173      	bne.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800944c:	4b71      	ldr	r3, [pc, #452]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800944e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009450:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009454:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009458:	4053      	eors	r3, r2
 800945a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800945e:	2b00      	cmp	r3, #0
 8009460:	d015      	beq.n	800948e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009462:	4b6c      	ldr	r3, [pc, #432]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009466:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800946a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800946e:	4b69      	ldr	r3, [pc, #420]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009472:	4a68      	ldr	r2, [pc, #416]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009478:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800947a:	4b66      	ldr	r3, [pc, #408]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800947c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800947e:	4a65      	ldr	r2, [pc, #404]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009480:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009484:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009486:	4a63      	ldr	r2, [pc, #396]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009488:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800948c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800948e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009492:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009496:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800949a:	d118      	bne.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800949c:	f7fb fb58 	bl	8004b50 <HAL_GetTick>
 80094a0:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80094a4:	e00d      	b.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80094a6:	f7fb fb53 	bl	8004b50 <HAL_GetTick>
 80094aa:	4602      	mov	r2, r0
 80094ac:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80094b0:	1ad2      	subs	r2, r2, r3
 80094b2:	f241 3388 	movw	r3, #5000	; 0x1388
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d903      	bls.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80094ba:	2303      	movs	r3, #3
 80094bc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 80094c0:	e005      	b.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80094c2:	4b54      	ldr	r3, [pc, #336]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80094c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094c6:	f003 0302 	and.w	r3, r3, #2
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d0eb      	beq.n	80094a6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80094ce:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d129      	bne.n	800952a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80094d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80094de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80094e6:	d10e      	bne.n	8009506 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80094e8:	4b4a      	ldr	r3, [pc, #296]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80094ea:	691b      	ldr	r3, [r3, #16]
 80094ec:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80094f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80094f8:	091a      	lsrs	r2, r3, #4
 80094fa:	4b48      	ldr	r3, [pc, #288]	; (800961c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80094fc:	4013      	ands	r3, r2
 80094fe:	4a45      	ldr	r2, [pc, #276]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009500:	430b      	orrs	r3, r1
 8009502:	6113      	str	r3, [r2, #16]
 8009504:	e005      	b.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8009506:	4b43      	ldr	r3, [pc, #268]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009508:	691b      	ldr	r3, [r3, #16]
 800950a:	4a42      	ldr	r2, [pc, #264]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800950c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009510:	6113      	str	r3, [r2, #16]
 8009512:	4b40      	ldr	r3, [pc, #256]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009514:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009516:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800951a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800951e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009522:	4a3c      	ldr	r2, [pc, #240]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009524:	430b      	orrs	r3, r1
 8009526:	6713      	str	r3, [r2, #112]	; 0x70
 8009528:	e008      	b.n	800953c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800952a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800952e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8009532:	e003      	b.n	800953c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009534:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009538:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800953c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009544:	f002 0301 	and.w	r3, r2, #1
 8009548:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800954c:	2300      	movs	r3, #0
 800954e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009552:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8009556:	460b      	mov	r3, r1
 8009558:	4313      	orrs	r3, r2
 800955a:	f000 808f 	beq.w	800967c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800955e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009562:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009564:	2b28      	cmp	r3, #40	; 0x28
 8009566:	d871      	bhi.n	800964c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8009568:	a201      	add	r2, pc, #4	; (adr r2, 8009570 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800956a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800956e:	bf00      	nop
 8009570:	08009655 	.word	0x08009655
 8009574:	0800964d 	.word	0x0800964d
 8009578:	0800964d 	.word	0x0800964d
 800957c:	0800964d 	.word	0x0800964d
 8009580:	0800964d 	.word	0x0800964d
 8009584:	0800964d 	.word	0x0800964d
 8009588:	0800964d 	.word	0x0800964d
 800958c:	0800964d 	.word	0x0800964d
 8009590:	08009621 	.word	0x08009621
 8009594:	0800964d 	.word	0x0800964d
 8009598:	0800964d 	.word	0x0800964d
 800959c:	0800964d 	.word	0x0800964d
 80095a0:	0800964d 	.word	0x0800964d
 80095a4:	0800964d 	.word	0x0800964d
 80095a8:	0800964d 	.word	0x0800964d
 80095ac:	0800964d 	.word	0x0800964d
 80095b0:	08009637 	.word	0x08009637
 80095b4:	0800964d 	.word	0x0800964d
 80095b8:	0800964d 	.word	0x0800964d
 80095bc:	0800964d 	.word	0x0800964d
 80095c0:	0800964d 	.word	0x0800964d
 80095c4:	0800964d 	.word	0x0800964d
 80095c8:	0800964d 	.word	0x0800964d
 80095cc:	0800964d 	.word	0x0800964d
 80095d0:	08009655 	.word	0x08009655
 80095d4:	0800964d 	.word	0x0800964d
 80095d8:	0800964d 	.word	0x0800964d
 80095dc:	0800964d 	.word	0x0800964d
 80095e0:	0800964d 	.word	0x0800964d
 80095e4:	0800964d 	.word	0x0800964d
 80095e8:	0800964d 	.word	0x0800964d
 80095ec:	0800964d 	.word	0x0800964d
 80095f0:	08009655 	.word	0x08009655
 80095f4:	0800964d 	.word	0x0800964d
 80095f8:	0800964d 	.word	0x0800964d
 80095fc:	0800964d 	.word	0x0800964d
 8009600:	0800964d 	.word	0x0800964d
 8009604:	0800964d 	.word	0x0800964d
 8009608:	0800964d 	.word	0x0800964d
 800960c:	0800964d 	.word	0x0800964d
 8009610:	08009655 	.word	0x08009655
 8009614:	58024400 	.word	0x58024400
 8009618:	58024800 	.word	0x58024800
 800961c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009620:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009624:	3308      	adds	r3, #8
 8009626:	2101      	movs	r1, #1
 8009628:	4618      	mov	r0, r3
 800962a:	f000 ffa7 	bl	800a57c <RCCEx_PLL2_Config>
 800962e:	4603      	mov	r3, r0
 8009630:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009634:	e00f      	b.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009636:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800963a:	3328      	adds	r3, #40	; 0x28
 800963c:	2101      	movs	r1, #1
 800963e:	4618      	mov	r0, r3
 8009640:	f001 f84e 	bl	800a6e0 <RCCEx_PLL3_Config>
 8009644:	4603      	mov	r3, r0
 8009646:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800964a:	e004      	b.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800964c:	2301      	movs	r3, #1
 800964e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009652:	e000      	b.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8009654:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009656:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800965a:	2b00      	cmp	r3, #0
 800965c:	d10a      	bne.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800965e:	4bbf      	ldr	r3, [pc, #764]	; (800995c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009662:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8009666:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800966a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800966c:	4abb      	ldr	r2, [pc, #748]	; (800995c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800966e:	430b      	orrs	r3, r1
 8009670:	6553      	str	r3, [r2, #84]	; 0x54
 8009672:	e003      	b.n	800967c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009674:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009678:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800967c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009684:	f002 0302 	and.w	r3, r2, #2
 8009688:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800968c:	2300      	movs	r3, #0
 800968e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009692:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8009696:	460b      	mov	r3, r1
 8009698:	4313      	orrs	r3, r2
 800969a:	d041      	beq.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800969c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096a2:	2b05      	cmp	r3, #5
 80096a4:	d824      	bhi.n	80096f0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80096a6:	a201      	add	r2, pc, #4	; (adr r2, 80096ac <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80096a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ac:	080096f9 	.word	0x080096f9
 80096b0:	080096c5 	.word	0x080096c5
 80096b4:	080096db 	.word	0x080096db
 80096b8:	080096f9 	.word	0x080096f9
 80096bc:	080096f9 	.word	0x080096f9
 80096c0:	080096f9 	.word	0x080096f9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80096c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096c8:	3308      	adds	r3, #8
 80096ca:	2101      	movs	r1, #1
 80096cc:	4618      	mov	r0, r3
 80096ce:	f000 ff55 	bl	800a57c <RCCEx_PLL2_Config>
 80096d2:	4603      	mov	r3, r0
 80096d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80096d8:	e00f      	b.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80096da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096de:	3328      	adds	r3, #40	; 0x28
 80096e0:	2101      	movs	r1, #1
 80096e2:	4618      	mov	r0, r3
 80096e4:	f000 fffc 	bl	800a6e0 <RCCEx_PLL3_Config>
 80096e8:	4603      	mov	r3, r0
 80096ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80096ee:	e004      	b.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80096f0:	2301      	movs	r3, #1
 80096f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80096f6:	e000      	b.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80096f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096fa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d10a      	bne.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009702:	4b96      	ldr	r3, [pc, #600]	; (800995c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009706:	f023 0107 	bic.w	r1, r3, #7
 800970a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800970e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009710:	4a92      	ldr	r2, [pc, #584]	; (800995c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009712:	430b      	orrs	r3, r1
 8009714:	6553      	str	r3, [r2, #84]	; 0x54
 8009716:	e003      	b.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009718:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800971c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009720:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009728:	f002 0304 	and.w	r3, r2, #4
 800972c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009730:	2300      	movs	r3, #0
 8009732:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009736:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800973a:	460b      	mov	r3, r1
 800973c:	4313      	orrs	r3, r2
 800973e:	d044      	beq.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009740:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009748:	2b05      	cmp	r3, #5
 800974a:	d825      	bhi.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800974c:	a201      	add	r2, pc, #4	; (adr r2, 8009754 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800974e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009752:	bf00      	nop
 8009754:	080097a1 	.word	0x080097a1
 8009758:	0800976d 	.word	0x0800976d
 800975c:	08009783 	.word	0x08009783
 8009760:	080097a1 	.word	0x080097a1
 8009764:	080097a1 	.word	0x080097a1
 8009768:	080097a1 	.word	0x080097a1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800976c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009770:	3308      	adds	r3, #8
 8009772:	2101      	movs	r1, #1
 8009774:	4618      	mov	r0, r3
 8009776:	f000 ff01 	bl	800a57c <RCCEx_PLL2_Config>
 800977a:	4603      	mov	r3, r0
 800977c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009780:	e00f      	b.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009782:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009786:	3328      	adds	r3, #40	; 0x28
 8009788:	2101      	movs	r1, #1
 800978a:	4618      	mov	r0, r3
 800978c:	f000 ffa8 	bl	800a6e0 <RCCEx_PLL3_Config>
 8009790:	4603      	mov	r3, r0
 8009792:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009796:	e004      	b.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009798:	2301      	movs	r3, #1
 800979a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800979e:	e000      	b.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80097a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097a2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d10b      	bne.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80097aa:	4b6c      	ldr	r3, [pc, #432]	; (800995c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80097ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097ae:	f023 0107 	bic.w	r1, r3, #7
 80097b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097ba:	4a68      	ldr	r2, [pc, #416]	; (800995c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80097bc:	430b      	orrs	r3, r1
 80097be:	6593      	str	r3, [r2, #88]	; 0x58
 80097c0:	e003      	b.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097c2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80097c6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80097ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d2:	f002 0320 	and.w	r3, r2, #32
 80097d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80097da:	2300      	movs	r3, #0
 80097dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80097e0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80097e4:	460b      	mov	r3, r1
 80097e6:	4313      	orrs	r3, r2
 80097e8:	d055      	beq.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80097ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097f6:	d033      	beq.n	8009860 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80097f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097fc:	d82c      	bhi.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80097fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009802:	d02f      	beq.n	8009864 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8009804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009808:	d826      	bhi.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800980a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800980e:	d02b      	beq.n	8009868 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8009810:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009814:	d820      	bhi.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009816:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800981a:	d012      	beq.n	8009842 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800981c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009820:	d81a      	bhi.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009822:	2b00      	cmp	r3, #0
 8009824:	d022      	beq.n	800986c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8009826:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800982a:	d115      	bne.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800982c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009830:	3308      	adds	r3, #8
 8009832:	2100      	movs	r1, #0
 8009834:	4618      	mov	r0, r3
 8009836:	f000 fea1 	bl	800a57c <RCCEx_PLL2_Config>
 800983a:	4603      	mov	r3, r0
 800983c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009840:	e015      	b.n	800986e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009842:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009846:	3328      	adds	r3, #40	; 0x28
 8009848:	2102      	movs	r1, #2
 800984a:	4618      	mov	r0, r3
 800984c:	f000 ff48 	bl	800a6e0 <RCCEx_PLL3_Config>
 8009850:	4603      	mov	r3, r0
 8009852:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009856:	e00a      	b.n	800986e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009858:	2301      	movs	r3, #1
 800985a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800985e:	e006      	b.n	800986e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009860:	bf00      	nop
 8009862:	e004      	b.n	800986e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009864:	bf00      	nop
 8009866:	e002      	b.n	800986e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009868:	bf00      	nop
 800986a:	e000      	b.n	800986e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800986c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800986e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009872:	2b00      	cmp	r3, #0
 8009874:	d10b      	bne.n	800988e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009876:	4b39      	ldr	r3, [pc, #228]	; (800995c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800987a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800987e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009882:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009886:	4a35      	ldr	r2, [pc, #212]	; (800995c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009888:	430b      	orrs	r3, r1
 800988a:	6553      	str	r3, [r2, #84]	; 0x54
 800988c:	e003      	b.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800988e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009892:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009896:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800989a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800989e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80098a2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80098a6:	2300      	movs	r3, #0
 80098a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80098ac:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80098b0:	460b      	mov	r3, r1
 80098b2:	4313      	orrs	r3, r2
 80098b4:	d058      	beq.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80098b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80098be:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80098c2:	d033      	beq.n	800992c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80098c4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80098c8:	d82c      	bhi.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80098ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098ce:	d02f      	beq.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80098d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098d4:	d826      	bhi.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80098d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80098da:	d02b      	beq.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80098dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80098e0:	d820      	bhi.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80098e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80098e6:	d012      	beq.n	800990e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80098e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80098ec:	d81a      	bhi.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d022      	beq.n	8009938 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80098f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098f6:	d115      	bne.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80098f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098fc:	3308      	adds	r3, #8
 80098fe:	2100      	movs	r1, #0
 8009900:	4618      	mov	r0, r3
 8009902:	f000 fe3b 	bl	800a57c <RCCEx_PLL2_Config>
 8009906:	4603      	mov	r3, r0
 8009908:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800990c:	e015      	b.n	800993a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800990e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009912:	3328      	adds	r3, #40	; 0x28
 8009914:	2102      	movs	r1, #2
 8009916:	4618      	mov	r0, r3
 8009918:	f000 fee2 	bl	800a6e0 <RCCEx_PLL3_Config>
 800991c:	4603      	mov	r3, r0
 800991e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009922:	e00a      	b.n	800993a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009924:	2301      	movs	r3, #1
 8009926:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800992a:	e006      	b.n	800993a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800992c:	bf00      	nop
 800992e:	e004      	b.n	800993a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009930:	bf00      	nop
 8009932:	e002      	b.n	800993a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009934:	bf00      	nop
 8009936:	e000      	b.n	800993a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009938:	bf00      	nop
    }

    if (ret == HAL_OK)
 800993a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800993e:	2b00      	cmp	r3, #0
 8009940:	d10e      	bne.n	8009960 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009942:	4b06      	ldr	r3, [pc, #24]	; (800995c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009946:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800994a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800994e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009952:	4a02      	ldr	r2, [pc, #8]	; (800995c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009954:	430b      	orrs	r3, r1
 8009956:	6593      	str	r3, [r2, #88]	; 0x58
 8009958:	e006      	b.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800995a:	bf00      	nop
 800995c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009960:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009964:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009968:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800996c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009970:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8009974:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009978:	2300      	movs	r3, #0
 800997a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800997e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8009982:	460b      	mov	r3, r1
 8009984:	4313      	orrs	r3, r2
 8009986:	d055      	beq.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009988:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800998c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009990:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009994:	d033      	beq.n	80099fe <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8009996:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800999a:	d82c      	bhi.n	80099f6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800999c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099a0:	d02f      	beq.n	8009a02 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80099a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099a6:	d826      	bhi.n	80099f6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80099a8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80099ac:	d02b      	beq.n	8009a06 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80099ae:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80099b2:	d820      	bhi.n	80099f6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80099b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80099b8:	d012      	beq.n	80099e0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80099ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80099be:	d81a      	bhi.n	80099f6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d022      	beq.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80099c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099c8:	d115      	bne.n	80099f6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80099ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099ce:	3308      	adds	r3, #8
 80099d0:	2100      	movs	r1, #0
 80099d2:	4618      	mov	r0, r3
 80099d4:	f000 fdd2 	bl	800a57c <RCCEx_PLL2_Config>
 80099d8:	4603      	mov	r3, r0
 80099da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80099de:	e015      	b.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80099e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099e4:	3328      	adds	r3, #40	; 0x28
 80099e6:	2102      	movs	r1, #2
 80099e8:	4618      	mov	r0, r3
 80099ea:	f000 fe79 	bl	800a6e0 <RCCEx_PLL3_Config>
 80099ee:	4603      	mov	r3, r0
 80099f0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80099f4:	e00a      	b.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80099f6:	2301      	movs	r3, #1
 80099f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80099fc:	e006      	b.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80099fe:	bf00      	nop
 8009a00:	e004      	b.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009a02:	bf00      	nop
 8009a04:	e002      	b.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009a06:	bf00      	nop
 8009a08:	e000      	b.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009a0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a0c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d10b      	bne.n	8009a2c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009a14:	4ba0      	ldr	r3, [pc, #640]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a18:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8009a1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009a24:	4a9c      	ldr	r2, [pc, #624]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009a26:	430b      	orrs	r3, r1
 8009a28:	6593      	str	r3, [r2, #88]	; 0x58
 8009a2a:	e003      	b.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a2c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009a30:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8009a34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a3c:	f002 0308 	and.w	r3, r2, #8
 8009a40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009a44:	2300      	movs	r3, #0
 8009a46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009a4a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8009a4e:	460b      	mov	r3, r1
 8009a50:	4313      	orrs	r3, r2
 8009a52:	d01e      	beq.n	8009a92 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8009a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a60:	d10c      	bne.n	8009a7c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009a62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a66:	3328      	adds	r3, #40	; 0x28
 8009a68:	2102      	movs	r1, #2
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f000 fe38 	bl	800a6e0 <RCCEx_PLL3_Config>
 8009a70:	4603      	mov	r3, r0
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d002      	beq.n	8009a7c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8009a76:	2301      	movs	r3, #1
 8009a78:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8009a7c:	4b86      	ldr	r3, [pc, #536]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a80:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a8c:	4a82      	ldr	r2, [pc, #520]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009a8e:	430b      	orrs	r3, r1
 8009a90:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009a92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a9a:	f002 0310 	and.w	r3, r2, #16
 8009a9e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009aa8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8009aac:	460b      	mov	r3, r1
 8009aae:	4313      	orrs	r3, r2
 8009ab0:	d01e      	beq.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ab6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009aba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009abe:	d10c      	bne.n	8009ada <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009ac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ac4:	3328      	adds	r3, #40	; 0x28
 8009ac6:	2102      	movs	r1, #2
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f000 fe09 	bl	800a6e0 <RCCEx_PLL3_Config>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d002      	beq.n	8009ada <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009ada:	4b6f      	ldr	r3, [pc, #444]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ade:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ae6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009aea:	4a6b      	ldr	r2, [pc, #428]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009aec:	430b      	orrs	r3, r1
 8009aee:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009af0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8009afc:	67bb      	str	r3, [r7, #120]	; 0x78
 8009afe:	2300      	movs	r3, #0
 8009b00:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009b02:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8009b06:	460b      	mov	r3, r1
 8009b08:	4313      	orrs	r3, r2
 8009b0a:	d03e      	beq.n	8009b8a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b10:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009b14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009b18:	d022      	beq.n	8009b60 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8009b1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009b1e:	d81b      	bhi.n	8009b58 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d003      	beq.n	8009b2c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8009b24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b28:	d00b      	beq.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8009b2a:	e015      	b.n	8009b58 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b30:	3308      	adds	r3, #8
 8009b32:	2100      	movs	r1, #0
 8009b34:	4618      	mov	r0, r3
 8009b36:	f000 fd21 	bl	800a57c <RCCEx_PLL2_Config>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009b40:	e00f      	b.n	8009b62 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b46:	3328      	adds	r3, #40	; 0x28
 8009b48:	2102      	movs	r1, #2
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f000 fdc8 	bl	800a6e0 <RCCEx_PLL3_Config>
 8009b50:	4603      	mov	r3, r0
 8009b52:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009b56:	e004      	b.n	8009b62 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b58:	2301      	movs	r3, #1
 8009b5a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009b5e:	e000      	b.n	8009b62 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8009b60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b62:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d10b      	bne.n	8009b82 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009b6a:	4b4b      	ldr	r3, [pc, #300]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b6e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8009b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b76:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009b7a:	4a47      	ldr	r2, [pc, #284]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009b7c:	430b      	orrs	r3, r1
 8009b7e:	6593      	str	r3, [r2, #88]	; 0x58
 8009b80:	e003      	b.n	8009b8a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b82:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009b86:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b92:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8009b96:	673b      	str	r3, [r7, #112]	; 0x70
 8009b98:	2300      	movs	r3, #0
 8009b9a:	677b      	str	r3, [r7, #116]	; 0x74
 8009b9c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8009ba0:	460b      	mov	r3, r1
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	d03b      	beq.n	8009c1e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009ba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009baa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009bae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009bb2:	d01f      	beq.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8009bb4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009bb8:	d818      	bhi.n	8009bec <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8009bba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009bbe:	d003      	beq.n	8009bc8 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8009bc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009bc4:	d007      	beq.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8009bc6:	e011      	b.n	8009bec <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bc8:	4b33      	ldr	r3, [pc, #204]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bcc:	4a32      	ldr	r2, [pc, #200]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009bce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009bd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009bd4:	e00f      	b.n	8009bf6 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bda:	3328      	adds	r3, #40	; 0x28
 8009bdc:	2101      	movs	r1, #1
 8009bde:	4618      	mov	r0, r3
 8009be0:	f000 fd7e 	bl	800a6e0 <RCCEx_PLL3_Config>
 8009be4:	4603      	mov	r3, r0
 8009be6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8009bea:	e004      	b.n	8009bf6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009bec:	2301      	movs	r3, #1
 8009bee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009bf2:	e000      	b.n	8009bf6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8009bf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bf6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d10b      	bne.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009bfe:	4b26      	ldr	r3, [pc, #152]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c02:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009c06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c0e:	4a22      	ldr	r2, [pc, #136]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009c10:	430b      	orrs	r3, r1
 8009c12:	6553      	str	r3, [r2, #84]	; 0x54
 8009c14:	e003      	b.n	8009c1e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c16:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009c1a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009c1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c26:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8009c2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009c30:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8009c34:	460b      	mov	r3, r1
 8009c36:	4313      	orrs	r3, r2
 8009c38:	d034      	beq.n	8009ca4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009c3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d003      	beq.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8009c44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c48:	d007      	beq.n	8009c5a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8009c4a:	e011      	b.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c4c:	4b12      	ldr	r3, [pc, #72]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c50:	4a11      	ldr	r2, [pc, #68]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009c52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009c58:	e00e      	b.n	8009c78 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009c5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c5e:	3308      	adds	r3, #8
 8009c60:	2102      	movs	r1, #2
 8009c62:	4618      	mov	r0, r3
 8009c64:	f000 fc8a 	bl	800a57c <RCCEx_PLL2_Config>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009c6e:	e003      	b.n	8009c78 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8009c70:	2301      	movs	r3, #1
 8009c72:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009c76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c78:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d10d      	bne.n	8009c9c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009c80:	4b05      	ldr	r3, [pc, #20]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c8e:	4a02      	ldr	r2, [pc, #8]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009c90:	430b      	orrs	r3, r1
 8009c92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009c94:	e006      	b.n	8009ca4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8009c96:	bf00      	nop
 8009c98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c9c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009ca0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cac:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8009cb0:	663b      	str	r3, [r7, #96]	; 0x60
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	667b      	str	r3, [r7, #100]	; 0x64
 8009cb6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8009cba:	460b      	mov	r3, r1
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	d00c      	beq.n	8009cda <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cc4:	3328      	adds	r3, #40	; 0x28
 8009cc6:	2102      	movs	r1, #2
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f000 fd09 	bl	800a6e0 <RCCEx_PLL3_Config>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d002      	beq.n	8009cda <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009cda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ce2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8009ce6:	65bb      	str	r3, [r7, #88]	; 0x58
 8009ce8:	2300      	movs	r3, #0
 8009cea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009cec:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8009cf0:	460b      	mov	r3, r1
 8009cf2:	4313      	orrs	r3, r2
 8009cf4:	d036      	beq.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009cfc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d00:	d018      	beq.n	8009d34 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8009d02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d06:	d811      	bhi.n	8009d2c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8009d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d0c:	d014      	beq.n	8009d38 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8009d0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d12:	d80b      	bhi.n	8009d2c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d011      	beq.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8009d18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d1c:	d106      	bne.n	8009d2c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d1e:	4bb7      	ldr	r3, [pc, #732]	; (8009ffc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d22:	4ab6      	ldr	r2, [pc, #728]	; (8009ffc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d28:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009d2a:	e008      	b.n	8009d3e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009d32:	e004      	b.n	8009d3e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009d34:	bf00      	nop
 8009d36:	e002      	b.n	8009d3e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009d38:	bf00      	nop
 8009d3a:	e000      	b.n	8009d3e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009d3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d3e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d10a      	bne.n	8009d5c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009d46:	4bad      	ldr	r3, [pc, #692]	; (8009ffc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d4a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009d4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d54:	4aa9      	ldr	r2, [pc, #676]	; (8009ffc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d56:	430b      	orrs	r3, r1
 8009d58:	6553      	str	r3, [r2, #84]	; 0x54
 8009d5a:	e003      	b.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d5c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009d60:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009d64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d6c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8009d70:	653b      	str	r3, [r7, #80]	; 0x50
 8009d72:	2300      	movs	r3, #0
 8009d74:	657b      	str	r3, [r7, #84]	; 0x54
 8009d76:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8009d7a:	460b      	mov	r3, r1
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	d009      	beq.n	8009d94 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009d80:	4b9e      	ldr	r3, [pc, #632]	; (8009ffc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d84:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d8e:	4a9b      	ldr	r2, [pc, #620]	; (8009ffc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d90:	430b      	orrs	r3, r1
 8009d92:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d9c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8009da0:	64bb      	str	r3, [r7, #72]	; 0x48
 8009da2:	2300      	movs	r3, #0
 8009da4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009da6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8009daa:	460b      	mov	r3, r1
 8009dac:	4313      	orrs	r3, r2
 8009dae:	d009      	beq.n	8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009db0:	4b92      	ldr	r3, [pc, #584]	; (8009ffc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009db4:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8009db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009dbe:	4a8f      	ldr	r2, [pc, #572]	; (8009ffc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009dc0:	430b      	orrs	r3, r1
 8009dc2:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dcc:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8009dd0:	643b      	str	r3, [r7, #64]	; 0x40
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	647b      	str	r3, [r7, #68]	; 0x44
 8009dd6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8009dda:	460b      	mov	r3, r1
 8009ddc:	4313      	orrs	r3, r2
 8009dde:	d00e      	beq.n	8009dfe <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009de0:	4b86      	ldr	r3, [pc, #536]	; (8009ffc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009de2:	691b      	ldr	r3, [r3, #16]
 8009de4:	4a85      	ldr	r2, [pc, #532]	; (8009ffc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009de6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009dea:	6113      	str	r3, [r2, #16]
 8009dec:	4b83      	ldr	r3, [pc, #524]	; (8009ffc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009dee:	6919      	ldr	r1, [r3, #16]
 8009df0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009df4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009df8:	4a80      	ldr	r2, [pc, #512]	; (8009ffc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009dfa:	430b      	orrs	r3, r1
 8009dfc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009dfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e06:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8009e0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e10:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8009e14:	460b      	mov	r3, r1
 8009e16:	4313      	orrs	r3, r2
 8009e18:	d009      	beq.n	8009e2e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009e1a:	4b78      	ldr	r3, [pc, #480]	; (8009ffc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e1e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e28:	4a74      	ldr	r2, [pc, #464]	; (8009ffc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009e2a:	430b      	orrs	r3, r1
 8009e2c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009e2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e36:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8009e3a:	633b      	str	r3, [r7, #48]	; 0x30
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	637b      	str	r3, [r7, #52]	; 0x34
 8009e40:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8009e44:	460b      	mov	r3, r1
 8009e46:	4313      	orrs	r3, r2
 8009e48:	d00a      	beq.n	8009e60 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009e4a:	4b6c      	ldr	r3, [pc, #432]	; (8009ffc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e4e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8009e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e5a:	4a68      	ldr	r2, [pc, #416]	; (8009ffc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009e5c:	430b      	orrs	r3, r1
 8009e5e:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e68:	2100      	movs	r1, #0
 8009e6a:	62b9      	str	r1, [r7, #40]	; 0x28
 8009e6c:	f003 0301 	and.w	r3, r3, #1
 8009e70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e72:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8009e76:	460b      	mov	r3, r1
 8009e78:	4313      	orrs	r3, r2
 8009e7a:	d011      	beq.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e80:	3308      	adds	r3, #8
 8009e82:	2100      	movs	r1, #0
 8009e84:	4618      	mov	r0, r3
 8009e86:	f000 fb79 	bl	800a57c <RCCEx_PLL2_Config>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8009e90:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d003      	beq.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e98:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009e9c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009ea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea8:	2100      	movs	r1, #0
 8009eaa:	6239      	str	r1, [r7, #32]
 8009eac:	f003 0302 	and.w	r3, r3, #2
 8009eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8009eb2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009eb6:	460b      	mov	r3, r1
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	d011      	beq.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ec0:	3308      	adds	r3, #8
 8009ec2:	2101      	movs	r1, #1
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f000 fb59 	bl	800a57c <RCCEx_PLL2_Config>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8009ed0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d003      	beq.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ed8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009edc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee8:	2100      	movs	r1, #0
 8009eea:	61b9      	str	r1, [r7, #24]
 8009eec:	f003 0304 	and.w	r3, r3, #4
 8009ef0:	61fb      	str	r3, [r7, #28]
 8009ef2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009ef6:	460b      	mov	r3, r1
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	d011      	beq.n	8009f20 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f00:	3308      	adds	r3, #8
 8009f02:	2102      	movs	r1, #2
 8009f04:	4618      	mov	r0, r3
 8009f06:	f000 fb39 	bl	800a57c <RCCEx_PLL2_Config>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8009f10:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d003      	beq.n	8009f20 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f18:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009f1c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f28:	2100      	movs	r1, #0
 8009f2a:	6139      	str	r1, [r7, #16]
 8009f2c:	f003 0308 	and.w	r3, r3, #8
 8009f30:	617b      	str	r3, [r7, #20]
 8009f32:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009f36:	460b      	mov	r3, r1
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	d011      	beq.n	8009f60 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009f3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f40:	3328      	adds	r3, #40	; 0x28
 8009f42:	2100      	movs	r1, #0
 8009f44:	4618      	mov	r0, r3
 8009f46:	f000 fbcb 	bl	800a6e0 <RCCEx_PLL3_Config>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8009f50:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d003      	beq.n	8009f60 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009f5c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f68:	2100      	movs	r1, #0
 8009f6a:	60b9      	str	r1, [r7, #8]
 8009f6c:	f003 0310 	and.w	r3, r3, #16
 8009f70:	60fb      	str	r3, [r7, #12]
 8009f72:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009f76:	460b      	mov	r3, r1
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	d011      	beq.n	8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f80:	3328      	adds	r3, #40	; 0x28
 8009f82:	2101      	movs	r1, #1
 8009f84:	4618      	mov	r0, r3
 8009f86:	f000 fbab 	bl	800a6e0 <RCCEx_PLL3_Config>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8009f90:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d003      	beq.n	8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f98:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009f9c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa8:	2100      	movs	r1, #0
 8009faa:	6039      	str	r1, [r7, #0]
 8009fac:	f003 0320 	and.w	r3, r3, #32
 8009fb0:	607b      	str	r3, [r7, #4]
 8009fb2:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009fb6:	460b      	mov	r3, r1
 8009fb8:	4313      	orrs	r3, r2
 8009fba:	d011      	beq.n	8009fe0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fc0:	3328      	adds	r3, #40	; 0x28
 8009fc2:	2102      	movs	r1, #2
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f000 fb8b 	bl	800a6e0 <RCCEx_PLL3_Config>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8009fd0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d003      	beq.n	8009fe0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fd8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009fdc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8009fe0:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d101      	bne.n	8009fec <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	e000      	b.n	8009fee <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8009fec:	2301      	movs	r3, #1
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009ffa:	bf00      	nop
 8009ffc:	58024400 	.word	0x58024400

0800a000 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a004:	f7fe fe00 	bl	8008c08 <HAL_RCC_GetHCLKFreq>
 800a008:	4602      	mov	r2, r0
 800a00a:	4b06      	ldr	r3, [pc, #24]	; (800a024 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a00c:	6a1b      	ldr	r3, [r3, #32]
 800a00e:	091b      	lsrs	r3, r3, #4
 800a010:	f003 0307 	and.w	r3, r3, #7
 800a014:	4904      	ldr	r1, [pc, #16]	; (800a028 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a016:	5ccb      	ldrb	r3, [r1, r3]
 800a018:	f003 031f 	and.w	r3, r3, #31
 800a01c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a020:	4618      	mov	r0, r3
 800a022:	bd80      	pop	{r7, pc}
 800a024:	58024400 	.word	0x58024400
 800a028:	0800e9f8 	.word	0x0800e9f8

0800a02c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a02c:	b480      	push	{r7}
 800a02e:	b089      	sub	sp, #36	; 0x24
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a034:	4ba1      	ldr	r3, [pc, #644]	; (800a2bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a038:	f003 0303 	and.w	r3, r3, #3
 800a03c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a03e:	4b9f      	ldr	r3, [pc, #636]	; (800a2bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a042:	0b1b      	lsrs	r3, r3, #12
 800a044:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a048:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a04a:	4b9c      	ldr	r3, [pc, #624]	; (800a2bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a04c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a04e:	091b      	lsrs	r3, r3, #4
 800a050:	f003 0301 	and.w	r3, r3, #1
 800a054:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a056:	4b99      	ldr	r3, [pc, #612]	; (800a2bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a05a:	08db      	lsrs	r3, r3, #3
 800a05c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a060:	693a      	ldr	r2, [r7, #16]
 800a062:	fb02 f303 	mul.w	r3, r2, r3
 800a066:	ee07 3a90 	vmov	s15, r3
 800a06a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a06e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	2b00      	cmp	r3, #0
 800a076:	f000 8111 	beq.w	800a29c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a07a:	69bb      	ldr	r3, [r7, #24]
 800a07c:	2b02      	cmp	r3, #2
 800a07e:	f000 8083 	beq.w	800a188 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a082:	69bb      	ldr	r3, [r7, #24]
 800a084:	2b02      	cmp	r3, #2
 800a086:	f200 80a1 	bhi.w	800a1cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a08a:	69bb      	ldr	r3, [r7, #24]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d003      	beq.n	800a098 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a090:	69bb      	ldr	r3, [r7, #24]
 800a092:	2b01      	cmp	r3, #1
 800a094:	d056      	beq.n	800a144 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a096:	e099      	b.n	800a1cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a098:	4b88      	ldr	r3, [pc, #544]	; (800a2bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f003 0320 	and.w	r3, r3, #32
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d02d      	beq.n	800a100 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a0a4:	4b85      	ldr	r3, [pc, #532]	; (800a2bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	08db      	lsrs	r3, r3, #3
 800a0aa:	f003 0303 	and.w	r3, r3, #3
 800a0ae:	4a84      	ldr	r2, [pc, #528]	; (800a2c0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a0b0:	fa22 f303 	lsr.w	r3, r2, r3
 800a0b4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	ee07 3a90 	vmov	s15, r3
 800a0bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	ee07 3a90 	vmov	s15, r3
 800a0c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0ce:	4b7b      	ldr	r3, [pc, #492]	; (800a2bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0d6:	ee07 3a90 	vmov	s15, r3
 800a0da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0de:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0e2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a2c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a0e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a0fe:	e087      	b.n	800a210 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	ee07 3a90 	vmov	s15, r3
 800a106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a10a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a2c8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a10e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a112:	4b6a      	ldr	r3, [pc, #424]	; (800a2bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a11a:	ee07 3a90 	vmov	s15, r3
 800a11e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a122:	ed97 6a03 	vldr	s12, [r7, #12]
 800a126:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a2c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a12a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a12e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a132:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a13a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a13e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a142:	e065      	b.n	800a210 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a144:	697b      	ldr	r3, [r7, #20]
 800a146:	ee07 3a90 	vmov	s15, r3
 800a14a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a14e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a2cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a156:	4b59      	ldr	r3, [pc, #356]	; (800a2bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a15a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a15e:	ee07 3a90 	vmov	s15, r3
 800a162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a166:	ed97 6a03 	vldr	s12, [r7, #12]
 800a16a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a2c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a16e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a176:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a17a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a17e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a182:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a186:	e043      	b.n	800a210 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	ee07 3a90 	vmov	s15, r3
 800a18e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a192:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a2d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a19a:	4b48      	ldr	r3, [pc, #288]	; (800a2bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a19c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a19e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1a2:	ee07 3a90 	vmov	s15, r3
 800a1a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1ae:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a2c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a1b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a1ca:	e021      	b.n	800a210 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a1cc:	697b      	ldr	r3, [r7, #20]
 800a1ce:	ee07 3a90 	vmov	s15, r3
 800a1d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1d6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a2cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a1da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1de:	4b37      	ldr	r3, [pc, #220]	; (800a2bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1e6:	ee07 3a90 	vmov	s15, r3
 800a1ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1f2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a2c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a1f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a20a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a20e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a210:	4b2a      	ldr	r3, [pc, #168]	; (800a2bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a214:	0a5b      	lsrs	r3, r3, #9
 800a216:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a21a:	ee07 3a90 	vmov	s15, r3
 800a21e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a222:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a226:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a22a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a22e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a232:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a236:	ee17 2a90 	vmov	r2, s15
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a23e:	4b1f      	ldr	r3, [pc, #124]	; (800a2bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a242:	0c1b      	lsrs	r3, r3, #16
 800a244:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a248:	ee07 3a90 	vmov	s15, r3
 800a24c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a250:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a254:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a258:	edd7 6a07 	vldr	s13, [r7, #28]
 800a25c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a260:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a264:	ee17 2a90 	vmov	r2, s15
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a26c:	4b13      	ldr	r3, [pc, #76]	; (800a2bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a26e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a270:	0e1b      	lsrs	r3, r3, #24
 800a272:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a276:	ee07 3a90 	vmov	s15, r3
 800a27a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a27e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a282:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a286:	edd7 6a07 	vldr	s13, [r7, #28]
 800a28a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a28e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a292:	ee17 2a90 	vmov	r2, s15
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a29a:	e008      	b.n	800a2ae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	609a      	str	r2, [r3, #8]
}
 800a2ae:	bf00      	nop
 800a2b0:	3724      	adds	r7, #36	; 0x24
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b8:	4770      	bx	lr
 800a2ba:	bf00      	nop
 800a2bc:	58024400 	.word	0x58024400
 800a2c0:	03d09000 	.word	0x03d09000
 800a2c4:	46000000 	.word	0x46000000
 800a2c8:	4c742400 	.word	0x4c742400
 800a2cc:	4a742400 	.word	0x4a742400
 800a2d0:	4af42400 	.word	0x4af42400

0800a2d4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b089      	sub	sp, #36	; 0x24
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a2dc:	4ba1      	ldr	r3, [pc, #644]	; (800a564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2e0:	f003 0303 	and.w	r3, r3, #3
 800a2e4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a2e6:	4b9f      	ldr	r3, [pc, #636]	; (800a564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2ea:	0d1b      	lsrs	r3, r3, #20
 800a2ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a2f0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a2f2:	4b9c      	ldr	r3, [pc, #624]	; (800a564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2f6:	0a1b      	lsrs	r3, r3, #8
 800a2f8:	f003 0301 	and.w	r3, r3, #1
 800a2fc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a2fe:	4b99      	ldr	r3, [pc, #612]	; (800a564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a302:	08db      	lsrs	r3, r3, #3
 800a304:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a308:	693a      	ldr	r2, [r7, #16]
 800a30a:	fb02 f303 	mul.w	r3, r2, r3
 800a30e:	ee07 3a90 	vmov	s15, r3
 800a312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a316:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	f000 8111 	beq.w	800a544 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a322:	69bb      	ldr	r3, [r7, #24]
 800a324:	2b02      	cmp	r3, #2
 800a326:	f000 8083 	beq.w	800a430 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a32a:	69bb      	ldr	r3, [r7, #24]
 800a32c:	2b02      	cmp	r3, #2
 800a32e:	f200 80a1 	bhi.w	800a474 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a332:	69bb      	ldr	r3, [r7, #24]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d003      	beq.n	800a340 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a338:	69bb      	ldr	r3, [r7, #24]
 800a33a:	2b01      	cmp	r3, #1
 800a33c:	d056      	beq.n	800a3ec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a33e:	e099      	b.n	800a474 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a340:	4b88      	ldr	r3, [pc, #544]	; (800a564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f003 0320 	and.w	r3, r3, #32
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d02d      	beq.n	800a3a8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a34c:	4b85      	ldr	r3, [pc, #532]	; (800a564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	08db      	lsrs	r3, r3, #3
 800a352:	f003 0303 	and.w	r3, r3, #3
 800a356:	4a84      	ldr	r2, [pc, #528]	; (800a568 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a358:	fa22 f303 	lsr.w	r3, r2, r3
 800a35c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	ee07 3a90 	vmov	s15, r3
 800a364:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a368:	697b      	ldr	r3, [r7, #20]
 800a36a:	ee07 3a90 	vmov	s15, r3
 800a36e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a376:	4b7b      	ldr	r3, [pc, #492]	; (800a564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a37a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a37e:	ee07 3a90 	vmov	s15, r3
 800a382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a386:	ed97 6a03 	vldr	s12, [r7, #12]
 800a38a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a56c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a38e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a396:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a39a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a39e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a3a6:	e087      	b.n	800a4b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	ee07 3a90 	vmov	s15, r3
 800a3ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3b2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a570 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a3b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3ba:	4b6a      	ldr	r3, [pc, #424]	; (800a564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3c2:	ee07 3a90 	vmov	s15, r3
 800a3c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3ce:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a56c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a3d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a3de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a3ea:	e065      	b.n	800a4b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	ee07 3a90 	vmov	s15, r3
 800a3f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3f6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a574 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a3fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3fe:	4b59      	ldr	r3, [pc, #356]	; (800a564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a406:	ee07 3a90 	vmov	s15, r3
 800a40a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a40e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a412:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a56c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a416:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a41a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a41e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a422:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a42a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a42e:	e043      	b.n	800a4b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a430:	697b      	ldr	r3, [r7, #20]
 800a432:	ee07 3a90 	vmov	s15, r3
 800a436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a43a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a578 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a43e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a442:	4b48      	ldr	r3, [pc, #288]	; (800a564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a44a:	ee07 3a90 	vmov	s15, r3
 800a44e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a452:	ed97 6a03 	vldr	s12, [r7, #12]
 800a456:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a56c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a45a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a45e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a462:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a466:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a46a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a46e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a472:	e021      	b.n	800a4b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	ee07 3a90 	vmov	s15, r3
 800a47a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a47e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a574 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a486:	4b37      	ldr	r3, [pc, #220]	; (800a564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a48a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a48e:	ee07 3a90 	vmov	s15, r3
 800a492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a496:	ed97 6a03 	vldr	s12, [r7, #12]
 800a49a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a56c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a49e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a4b6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a4b8:	4b2a      	ldr	r3, [pc, #168]	; (800a564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4bc:	0a5b      	lsrs	r3, r3, #9
 800a4be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4c2:	ee07 3a90 	vmov	s15, r3
 800a4c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a4ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a4d2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a4d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a4da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4de:	ee17 2a90 	vmov	r2, s15
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a4e6:	4b1f      	ldr	r3, [pc, #124]	; (800a564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4ea:	0c1b      	lsrs	r3, r3, #16
 800a4ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4f0:	ee07 3a90 	vmov	s15, r3
 800a4f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a4fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a500:	edd7 6a07 	vldr	s13, [r7, #28]
 800a504:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a508:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a50c:	ee17 2a90 	vmov	r2, s15
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a514:	4b13      	ldr	r3, [pc, #76]	; (800a564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a518:	0e1b      	lsrs	r3, r3, #24
 800a51a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a51e:	ee07 3a90 	vmov	s15, r3
 800a522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a526:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a52a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a52e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a532:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a536:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a53a:	ee17 2a90 	vmov	r2, s15
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a542:	e008      	b.n	800a556 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2200      	movs	r2, #0
 800a548:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2200      	movs	r2, #0
 800a54e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2200      	movs	r2, #0
 800a554:	609a      	str	r2, [r3, #8]
}
 800a556:	bf00      	nop
 800a558:	3724      	adds	r7, #36	; 0x24
 800a55a:	46bd      	mov	sp, r7
 800a55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a560:	4770      	bx	lr
 800a562:	bf00      	nop
 800a564:	58024400 	.word	0x58024400
 800a568:	03d09000 	.word	0x03d09000
 800a56c:	46000000 	.word	0x46000000
 800a570:	4c742400 	.word	0x4c742400
 800a574:	4a742400 	.word	0x4a742400
 800a578:	4af42400 	.word	0x4af42400

0800a57c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b084      	sub	sp, #16
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
 800a584:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a586:	2300      	movs	r3, #0
 800a588:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a58a:	4b53      	ldr	r3, [pc, #332]	; (800a6d8 <RCCEx_PLL2_Config+0x15c>)
 800a58c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a58e:	f003 0303 	and.w	r3, r3, #3
 800a592:	2b03      	cmp	r3, #3
 800a594:	d101      	bne.n	800a59a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a596:	2301      	movs	r3, #1
 800a598:	e099      	b.n	800a6ce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a59a:	4b4f      	ldr	r3, [pc, #316]	; (800a6d8 <RCCEx_PLL2_Config+0x15c>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	4a4e      	ldr	r2, [pc, #312]	; (800a6d8 <RCCEx_PLL2_Config+0x15c>)
 800a5a0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a5a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a5a6:	f7fa fad3 	bl	8004b50 <HAL_GetTick>
 800a5aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a5ac:	e008      	b.n	800a5c0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a5ae:	f7fa facf 	bl	8004b50 <HAL_GetTick>
 800a5b2:	4602      	mov	r2, r0
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	1ad3      	subs	r3, r2, r3
 800a5b8:	2b02      	cmp	r3, #2
 800a5ba:	d901      	bls.n	800a5c0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a5bc:	2303      	movs	r3, #3
 800a5be:	e086      	b.n	800a6ce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a5c0:	4b45      	ldr	r3, [pc, #276]	; (800a6d8 <RCCEx_PLL2_Config+0x15c>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d1f0      	bne.n	800a5ae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a5cc:	4b42      	ldr	r3, [pc, #264]	; (800a6d8 <RCCEx_PLL2_Config+0x15c>)
 800a5ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5d0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	031b      	lsls	r3, r3, #12
 800a5da:	493f      	ldr	r1, [pc, #252]	; (800a6d8 <RCCEx_PLL2_Config+0x15c>)
 800a5dc:	4313      	orrs	r3, r2
 800a5de:	628b      	str	r3, [r1, #40]	; 0x28
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	685b      	ldr	r3, [r3, #4]
 800a5e4:	3b01      	subs	r3, #1
 800a5e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	689b      	ldr	r3, [r3, #8]
 800a5ee:	3b01      	subs	r3, #1
 800a5f0:	025b      	lsls	r3, r3, #9
 800a5f2:	b29b      	uxth	r3, r3
 800a5f4:	431a      	orrs	r2, r3
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	68db      	ldr	r3, [r3, #12]
 800a5fa:	3b01      	subs	r3, #1
 800a5fc:	041b      	lsls	r3, r3, #16
 800a5fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a602:	431a      	orrs	r2, r3
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	691b      	ldr	r3, [r3, #16]
 800a608:	3b01      	subs	r3, #1
 800a60a:	061b      	lsls	r3, r3, #24
 800a60c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a610:	4931      	ldr	r1, [pc, #196]	; (800a6d8 <RCCEx_PLL2_Config+0x15c>)
 800a612:	4313      	orrs	r3, r2
 800a614:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a616:	4b30      	ldr	r3, [pc, #192]	; (800a6d8 <RCCEx_PLL2_Config+0x15c>)
 800a618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a61a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	695b      	ldr	r3, [r3, #20]
 800a622:	492d      	ldr	r1, [pc, #180]	; (800a6d8 <RCCEx_PLL2_Config+0x15c>)
 800a624:	4313      	orrs	r3, r2
 800a626:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a628:	4b2b      	ldr	r3, [pc, #172]	; (800a6d8 <RCCEx_PLL2_Config+0x15c>)
 800a62a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a62c:	f023 0220 	bic.w	r2, r3, #32
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	699b      	ldr	r3, [r3, #24]
 800a634:	4928      	ldr	r1, [pc, #160]	; (800a6d8 <RCCEx_PLL2_Config+0x15c>)
 800a636:	4313      	orrs	r3, r2
 800a638:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a63a:	4b27      	ldr	r3, [pc, #156]	; (800a6d8 <RCCEx_PLL2_Config+0x15c>)
 800a63c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a63e:	4a26      	ldr	r2, [pc, #152]	; (800a6d8 <RCCEx_PLL2_Config+0x15c>)
 800a640:	f023 0310 	bic.w	r3, r3, #16
 800a644:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a646:	4b24      	ldr	r3, [pc, #144]	; (800a6d8 <RCCEx_PLL2_Config+0x15c>)
 800a648:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a64a:	4b24      	ldr	r3, [pc, #144]	; (800a6dc <RCCEx_PLL2_Config+0x160>)
 800a64c:	4013      	ands	r3, r2
 800a64e:	687a      	ldr	r2, [r7, #4]
 800a650:	69d2      	ldr	r2, [r2, #28]
 800a652:	00d2      	lsls	r2, r2, #3
 800a654:	4920      	ldr	r1, [pc, #128]	; (800a6d8 <RCCEx_PLL2_Config+0x15c>)
 800a656:	4313      	orrs	r3, r2
 800a658:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a65a:	4b1f      	ldr	r3, [pc, #124]	; (800a6d8 <RCCEx_PLL2_Config+0x15c>)
 800a65c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a65e:	4a1e      	ldr	r2, [pc, #120]	; (800a6d8 <RCCEx_PLL2_Config+0x15c>)
 800a660:	f043 0310 	orr.w	r3, r3, #16
 800a664:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d106      	bne.n	800a67a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a66c:	4b1a      	ldr	r3, [pc, #104]	; (800a6d8 <RCCEx_PLL2_Config+0x15c>)
 800a66e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a670:	4a19      	ldr	r2, [pc, #100]	; (800a6d8 <RCCEx_PLL2_Config+0x15c>)
 800a672:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a676:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a678:	e00f      	b.n	800a69a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	2b01      	cmp	r3, #1
 800a67e:	d106      	bne.n	800a68e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a680:	4b15      	ldr	r3, [pc, #84]	; (800a6d8 <RCCEx_PLL2_Config+0x15c>)
 800a682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a684:	4a14      	ldr	r2, [pc, #80]	; (800a6d8 <RCCEx_PLL2_Config+0x15c>)
 800a686:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a68a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a68c:	e005      	b.n	800a69a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a68e:	4b12      	ldr	r3, [pc, #72]	; (800a6d8 <RCCEx_PLL2_Config+0x15c>)
 800a690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a692:	4a11      	ldr	r2, [pc, #68]	; (800a6d8 <RCCEx_PLL2_Config+0x15c>)
 800a694:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a698:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a69a:	4b0f      	ldr	r3, [pc, #60]	; (800a6d8 <RCCEx_PLL2_Config+0x15c>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	4a0e      	ldr	r2, [pc, #56]	; (800a6d8 <RCCEx_PLL2_Config+0x15c>)
 800a6a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a6a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a6a6:	f7fa fa53 	bl	8004b50 <HAL_GetTick>
 800a6aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a6ac:	e008      	b.n	800a6c0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a6ae:	f7fa fa4f 	bl	8004b50 <HAL_GetTick>
 800a6b2:	4602      	mov	r2, r0
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	1ad3      	subs	r3, r2, r3
 800a6b8:	2b02      	cmp	r3, #2
 800a6ba:	d901      	bls.n	800a6c0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a6bc:	2303      	movs	r3, #3
 800a6be:	e006      	b.n	800a6ce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a6c0:	4b05      	ldr	r3, [pc, #20]	; (800a6d8 <RCCEx_PLL2_Config+0x15c>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d0f0      	beq.n	800a6ae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a6cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3710      	adds	r7, #16
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}
 800a6d6:	bf00      	nop
 800a6d8:	58024400 	.word	0x58024400
 800a6dc:	ffff0007 	.word	0xffff0007

0800a6e0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b084      	sub	sp, #16
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
 800a6e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a6ee:	4b53      	ldr	r3, [pc, #332]	; (800a83c <RCCEx_PLL3_Config+0x15c>)
 800a6f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6f2:	f003 0303 	and.w	r3, r3, #3
 800a6f6:	2b03      	cmp	r3, #3
 800a6f8:	d101      	bne.n	800a6fe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	e099      	b.n	800a832 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a6fe:	4b4f      	ldr	r3, [pc, #316]	; (800a83c <RCCEx_PLL3_Config+0x15c>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	4a4e      	ldr	r2, [pc, #312]	; (800a83c <RCCEx_PLL3_Config+0x15c>)
 800a704:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a708:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a70a:	f7fa fa21 	bl	8004b50 <HAL_GetTick>
 800a70e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a710:	e008      	b.n	800a724 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a712:	f7fa fa1d 	bl	8004b50 <HAL_GetTick>
 800a716:	4602      	mov	r2, r0
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	1ad3      	subs	r3, r2, r3
 800a71c:	2b02      	cmp	r3, #2
 800a71e:	d901      	bls.n	800a724 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a720:	2303      	movs	r3, #3
 800a722:	e086      	b.n	800a832 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a724:	4b45      	ldr	r3, [pc, #276]	; (800a83c <RCCEx_PLL3_Config+0x15c>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d1f0      	bne.n	800a712 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a730:	4b42      	ldr	r3, [pc, #264]	; (800a83c <RCCEx_PLL3_Config+0x15c>)
 800a732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a734:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	051b      	lsls	r3, r3, #20
 800a73e:	493f      	ldr	r1, [pc, #252]	; (800a83c <RCCEx_PLL3_Config+0x15c>)
 800a740:	4313      	orrs	r3, r2
 800a742:	628b      	str	r3, [r1, #40]	; 0x28
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	685b      	ldr	r3, [r3, #4]
 800a748:	3b01      	subs	r3, #1
 800a74a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	689b      	ldr	r3, [r3, #8]
 800a752:	3b01      	subs	r3, #1
 800a754:	025b      	lsls	r3, r3, #9
 800a756:	b29b      	uxth	r3, r3
 800a758:	431a      	orrs	r2, r3
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	68db      	ldr	r3, [r3, #12]
 800a75e:	3b01      	subs	r3, #1
 800a760:	041b      	lsls	r3, r3, #16
 800a762:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a766:	431a      	orrs	r2, r3
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	691b      	ldr	r3, [r3, #16]
 800a76c:	3b01      	subs	r3, #1
 800a76e:	061b      	lsls	r3, r3, #24
 800a770:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a774:	4931      	ldr	r1, [pc, #196]	; (800a83c <RCCEx_PLL3_Config+0x15c>)
 800a776:	4313      	orrs	r3, r2
 800a778:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a77a:	4b30      	ldr	r3, [pc, #192]	; (800a83c <RCCEx_PLL3_Config+0x15c>)
 800a77c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a77e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	695b      	ldr	r3, [r3, #20]
 800a786:	492d      	ldr	r1, [pc, #180]	; (800a83c <RCCEx_PLL3_Config+0x15c>)
 800a788:	4313      	orrs	r3, r2
 800a78a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a78c:	4b2b      	ldr	r3, [pc, #172]	; (800a83c <RCCEx_PLL3_Config+0x15c>)
 800a78e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a790:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	699b      	ldr	r3, [r3, #24]
 800a798:	4928      	ldr	r1, [pc, #160]	; (800a83c <RCCEx_PLL3_Config+0x15c>)
 800a79a:	4313      	orrs	r3, r2
 800a79c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a79e:	4b27      	ldr	r3, [pc, #156]	; (800a83c <RCCEx_PLL3_Config+0x15c>)
 800a7a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7a2:	4a26      	ldr	r2, [pc, #152]	; (800a83c <RCCEx_PLL3_Config+0x15c>)
 800a7a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a7a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a7aa:	4b24      	ldr	r3, [pc, #144]	; (800a83c <RCCEx_PLL3_Config+0x15c>)
 800a7ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a7ae:	4b24      	ldr	r3, [pc, #144]	; (800a840 <RCCEx_PLL3_Config+0x160>)
 800a7b0:	4013      	ands	r3, r2
 800a7b2:	687a      	ldr	r2, [r7, #4]
 800a7b4:	69d2      	ldr	r2, [r2, #28]
 800a7b6:	00d2      	lsls	r2, r2, #3
 800a7b8:	4920      	ldr	r1, [pc, #128]	; (800a83c <RCCEx_PLL3_Config+0x15c>)
 800a7ba:	4313      	orrs	r3, r2
 800a7bc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a7be:	4b1f      	ldr	r3, [pc, #124]	; (800a83c <RCCEx_PLL3_Config+0x15c>)
 800a7c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7c2:	4a1e      	ldr	r2, [pc, #120]	; (800a83c <RCCEx_PLL3_Config+0x15c>)
 800a7c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a7c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d106      	bne.n	800a7de <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a7d0:	4b1a      	ldr	r3, [pc, #104]	; (800a83c <RCCEx_PLL3_Config+0x15c>)
 800a7d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7d4:	4a19      	ldr	r2, [pc, #100]	; (800a83c <RCCEx_PLL3_Config+0x15c>)
 800a7d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a7da:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a7dc:	e00f      	b.n	800a7fe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	2b01      	cmp	r3, #1
 800a7e2:	d106      	bne.n	800a7f2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a7e4:	4b15      	ldr	r3, [pc, #84]	; (800a83c <RCCEx_PLL3_Config+0x15c>)
 800a7e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7e8:	4a14      	ldr	r2, [pc, #80]	; (800a83c <RCCEx_PLL3_Config+0x15c>)
 800a7ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a7ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a7f0:	e005      	b.n	800a7fe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a7f2:	4b12      	ldr	r3, [pc, #72]	; (800a83c <RCCEx_PLL3_Config+0x15c>)
 800a7f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7f6:	4a11      	ldr	r2, [pc, #68]	; (800a83c <RCCEx_PLL3_Config+0x15c>)
 800a7f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a7fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a7fe:	4b0f      	ldr	r3, [pc, #60]	; (800a83c <RCCEx_PLL3_Config+0x15c>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	4a0e      	ldr	r2, [pc, #56]	; (800a83c <RCCEx_PLL3_Config+0x15c>)
 800a804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a808:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a80a:	f7fa f9a1 	bl	8004b50 <HAL_GetTick>
 800a80e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a810:	e008      	b.n	800a824 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a812:	f7fa f99d 	bl	8004b50 <HAL_GetTick>
 800a816:	4602      	mov	r2, r0
 800a818:	68bb      	ldr	r3, [r7, #8]
 800a81a:	1ad3      	subs	r3, r2, r3
 800a81c:	2b02      	cmp	r3, #2
 800a81e:	d901      	bls.n	800a824 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a820:	2303      	movs	r3, #3
 800a822:	e006      	b.n	800a832 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a824:	4b05      	ldr	r3, [pc, #20]	; (800a83c <RCCEx_PLL3_Config+0x15c>)
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d0f0      	beq.n	800a812 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a830:	7bfb      	ldrb	r3, [r7, #15]
}
 800a832:	4618      	mov	r0, r3
 800a834:	3710      	adds	r7, #16
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}
 800a83a:	bf00      	nop
 800a83c:	58024400 	.word	0x58024400
 800a840:	ffff0007 	.word	0xffff0007

0800a844 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b082      	sub	sp, #8
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d101      	bne.n	800a856 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a852:	2301      	movs	r3, #1
 800a854:	e049      	b.n	800a8ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a85c:	b2db      	uxtb	r3, r3
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d106      	bne.n	800a870 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2200      	movs	r2, #0
 800a866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f7f9 fe0a 	bl	8004484 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2202      	movs	r2, #2
 800a874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681a      	ldr	r2, [r3, #0]
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	3304      	adds	r3, #4
 800a880:	4619      	mov	r1, r3
 800a882:	4610      	mov	r0, r2
 800a884:	f000 feb8 	bl	800b5f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2201      	movs	r2, #1
 800a88c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2201      	movs	r2, #1
 800a894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2201      	movs	r2, #1
 800a89c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2201      	movs	r2, #1
 800a8a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2201      	movs	r2, #1
 800a8ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2201      	movs	r2, #1
 800a8b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2201      	movs	r2, #1
 800a8bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2201      	movs	r2, #1
 800a8cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2201      	movs	r2, #1
 800a8d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2201      	movs	r2, #1
 800a8dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2201      	movs	r2, #1
 800a8e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a8e8:	2300      	movs	r3, #0
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3708      	adds	r7, #8
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}
	...

0800a8f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b085      	sub	sp, #20
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a902:	b2db      	uxtb	r3, r3
 800a904:	2b01      	cmp	r3, #1
 800a906:	d001      	beq.n	800a90c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a908:	2301      	movs	r3, #1
 800a90a:	e05e      	b.n	800a9ca <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2202      	movs	r2, #2
 800a910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	68da      	ldr	r2, [r3, #12]
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f042 0201 	orr.w	r2, r2, #1
 800a922:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	4a2b      	ldr	r2, [pc, #172]	; (800a9d8 <HAL_TIM_Base_Start_IT+0xe4>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d02c      	beq.n	800a988 <HAL_TIM_Base_Start_IT+0x94>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a936:	d027      	beq.n	800a988 <HAL_TIM_Base_Start_IT+0x94>
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	4a27      	ldr	r2, [pc, #156]	; (800a9dc <HAL_TIM_Base_Start_IT+0xe8>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d022      	beq.n	800a988 <HAL_TIM_Base_Start_IT+0x94>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	4a26      	ldr	r2, [pc, #152]	; (800a9e0 <HAL_TIM_Base_Start_IT+0xec>)
 800a948:	4293      	cmp	r3, r2
 800a94a:	d01d      	beq.n	800a988 <HAL_TIM_Base_Start_IT+0x94>
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	4a24      	ldr	r2, [pc, #144]	; (800a9e4 <HAL_TIM_Base_Start_IT+0xf0>)
 800a952:	4293      	cmp	r3, r2
 800a954:	d018      	beq.n	800a988 <HAL_TIM_Base_Start_IT+0x94>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	4a23      	ldr	r2, [pc, #140]	; (800a9e8 <HAL_TIM_Base_Start_IT+0xf4>)
 800a95c:	4293      	cmp	r3, r2
 800a95e:	d013      	beq.n	800a988 <HAL_TIM_Base_Start_IT+0x94>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	4a21      	ldr	r2, [pc, #132]	; (800a9ec <HAL_TIM_Base_Start_IT+0xf8>)
 800a966:	4293      	cmp	r3, r2
 800a968:	d00e      	beq.n	800a988 <HAL_TIM_Base_Start_IT+0x94>
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	4a20      	ldr	r2, [pc, #128]	; (800a9f0 <HAL_TIM_Base_Start_IT+0xfc>)
 800a970:	4293      	cmp	r3, r2
 800a972:	d009      	beq.n	800a988 <HAL_TIM_Base_Start_IT+0x94>
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	4a1e      	ldr	r2, [pc, #120]	; (800a9f4 <HAL_TIM_Base_Start_IT+0x100>)
 800a97a:	4293      	cmp	r3, r2
 800a97c:	d004      	beq.n	800a988 <HAL_TIM_Base_Start_IT+0x94>
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	4a1d      	ldr	r2, [pc, #116]	; (800a9f8 <HAL_TIM_Base_Start_IT+0x104>)
 800a984:	4293      	cmp	r3, r2
 800a986:	d115      	bne.n	800a9b4 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	689a      	ldr	r2, [r3, #8]
 800a98e:	4b1b      	ldr	r3, [pc, #108]	; (800a9fc <HAL_TIM_Base_Start_IT+0x108>)
 800a990:	4013      	ands	r3, r2
 800a992:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	2b06      	cmp	r3, #6
 800a998:	d015      	beq.n	800a9c6 <HAL_TIM_Base_Start_IT+0xd2>
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9a0:	d011      	beq.n	800a9c6 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	681a      	ldr	r2, [r3, #0]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f042 0201 	orr.w	r2, r2, #1
 800a9b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9b2:	e008      	b.n	800a9c6 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	681a      	ldr	r2, [r3, #0]
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	f042 0201 	orr.w	r2, r2, #1
 800a9c2:	601a      	str	r2, [r3, #0]
 800a9c4:	e000      	b.n	800a9c8 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a9c8:	2300      	movs	r3, #0
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3714      	adds	r7, #20
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d4:	4770      	bx	lr
 800a9d6:	bf00      	nop
 800a9d8:	40010000 	.word	0x40010000
 800a9dc:	40000400 	.word	0x40000400
 800a9e0:	40000800 	.word	0x40000800
 800a9e4:	40000c00 	.word	0x40000c00
 800a9e8:	40010400 	.word	0x40010400
 800a9ec:	40001800 	.word	0x40001800
 800a9f0:	40014000 	.word	0x40014000
 800a9f4:	4000e000 	.word	0x4000e000
 800a9f8:	4000e400 	.word	0x4000e400
 800a9fc:	00010007 	.word	0x00010007

0800aa00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b082      	sub	sp, #8
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d101      	bne.n	800aa12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800aa0e:	2301      	movs	r3, #1
 800aa10:	e049      	b.n	800aaa6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa18:	b2db      	uxtb	r3, r3
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d106      	bne.n	800aa2c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2200      	movs	r2, #0
 800aa22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f7f9 fcf4 	bl	8004414 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2202      	movs	r2, #2
 800aa30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681a      	ldr	r2, [r3, #0]
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	3304      	adds	r3, #4
 800aa3c:	4619      	mov	r1, r3
 800aa3e:	4610      	mov	r0, r2
 800aa40:	f000 fdda 	bl	800b5f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2201      	movs	r2, #1
 800aa48:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2201      	movs	r2, #1
 800aa50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2201      	movs	r2, #1
 800aa58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2201      	movs	r2, #1
 800aa60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2201      	movs	r2, #1
 800aa68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2201      	movs	r2, #1
 800aa70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2201      	movs	r2, #1
 800aa78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2201      	movs	r2, #1
 800aa80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2201      	movs	r2, #1
 800aa88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2201      	movs	r2, #1
 800aa90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2201      	movs	r2, #1
 800aa98:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2201      	movs	r2, #1
 800aaa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aaa4:	2300      	movs	r3, #0
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3708      	adds	r7, #8
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}
	...

0800aab0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b084      	sub	sp, #16
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
 800aab8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d109      	bne.n	800aad4 <HAL_TIM_PWM_Start+0x24>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aac6:	b2db      	uxtb	r3, r3
 800aac8:	2b01      	cmp	r3, #1
 800aaca:	bf14      	ite	ne
 800aacc:	2301      	movne	r3, #1
 800aace:	2300      	moveq	r3, #0
 800aad0:	b2db      	uxtb	r3, r3
 800aad2:	e03c      	b.n	800ab4e <HAL_TIM_PWM_Start+0x9e>
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	2b04      	cmp	r3, #4
 800aad8:	d109      	bne.n	800aaee <HAL_TIM_PWM_Start+0x3e>
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800aae0:	b2db      	uxtb	r3, r3
 800aae2:	2b01      	cmp	r3, #1
 800aae4:	bf14      	ite	ne
 800aae6:	2301      	movne	r3, #1
 800aae8:	2300      	moveq	r3, #0
 800aaea:	b2db      	uxtb	r3, r3
 800aaec:	e02f      	b.n	800ab4e <HAL_TIM_PWM_Start+0x9e>
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	2b08      	cmp	r3, #8
 800aaf2:	d109      	bne.n	800ab08 <HAL_TIM_PWM_Start+0x58>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aafa:	b2db      	uxtb	r3, r3
 800aafc:	2b01      	cmp	r3, #1
 800aafe:	bf14      	ite	ne
 800ab00:	2301      	movne	r3, #1
 800ab02:	2300      	moveq	r3, #0
 800ab04:	b2db      	uxtb	r3, r3
 800ab06:	e022      	b.n	800ab4e <HAL_TIM_PWM_Start+0x9e>
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	2b0c      	cmp	r3, #12
 800ab0c:	d109      	bne.n	800ab22 <HAL_TIM_PWM_Start+0x72>
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab14:	b2db      	uxtb	r3, r3
 800ab16:	2b01      	cmp	r3, #1
 800ab18:	bf14      	ite	ne
 800ab1a:	2301      	movne	r3, #1
 800ab1c:	2300      	moveq	r3, #0
 800ab1e:	b2db      	uxtb	r3, r3
 800ab20:	e015      	b.n	800ab4e <HAL_TIM_PWM_Start+0x9e>
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	2b10      	cmp	r3, #16
 800ab26:	d109      	bne.n	800ab3c <HAL_TIM_PWM_Start+0x8c>
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ab2e:	b2db      	uxtb	r3, r3
 800ab30:	2b01      	cmp	r3, #1
 800ab32:	bf14      	ite	ne
 800ab34:	2301      	movne	r3, #1
 800ab36:	2300      	moveq	r3, #0
 800ab38:	b2db      	uxtb	r3, r3
 800ab3a:	e008      	b.n	800ab4e <HAL_TIM_PWM_Start+0x9e>
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ab42:	b2db      	uxtb	r3, r3
 800ab44:	2b01      	cmp	r3, #1
 800ab46:	bf14      	ite	ne
 800ab48:	2301      	movne	r3, #1
 800ab4a:	2300      	moveq	r3, #0
 800ab4c:	b2db      	uxtb	r3, r3
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d001      	beq.n	800ab56 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800ab52:	2301      	movs	r3, #1
 800ab54:	e0ab      	b.n	800acae <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d104      	bne.n	800ab66 <HAL_TIM_PWM_Start+0xb6>
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2202      	movs	r2, #2
 800ab60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ab64:	e023      	b.n	800abae <HAL_TIM_PWM_Start+0xfe>
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	2b04      	cmp	r3, #4
 800ab6a:	d104      	bne.n	800ab76 <HAL_TIM_PWM_Start+0xc6>
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2202      	movs	r2, #2
 800ab70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ab74:	e01b      	b.n	800abae <HAL_TIM_PWM_Start+0xfe>
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	2b08      	cmp	r3, #8
 800ab7a:	d104      	bne.n	800ab86 <HAL_TIM_PWM_Start+0xd6>
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2202      	movs	r2, #2
 800ab80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ab84:	e013      	b.n	800abae <HAL_TIM_PWM_Start+0xfe>
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	2b0c      	cmp	r3, #12
 800ab8a:	d104      	bne.n	800ab96 <HAL_TIM_PWM_Start+0xe6>
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2202      	movs	r2, #2
 800ab90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ab94:	e00b      	b.n	800abae <HAL_TIM_PWM_Start+0xfe>
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	2b10      	cmp	r3, #16
 800ab9a:	d104      	bne.n	800aba6 <HAL_TIM_PWM_Start+0xf6>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2202      	movs	r2, #2
 800aba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aba4:	e003      	b.n	800abae <HAL_TIM_PWM_Start+0xfe>
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2202      	movs	r2, #2
 800abaa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	2201      	movs	r2, #1
 800abb4:	6839      	ldr	r1, [r7, #0]
 800abb6:	4618      	mov	r0, r3
 800abb8:	f001 f938 	bl	800be2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	4a3d      	ldr	r2, [pc, #244]	; (800acb8 <HAL_TIM_PWM_Start+0x208>)
 800abc2:	4293      	cmp	r3, r2
 800abc4:	d013      	beq.n	800abee <HAL_TIM_PWM_Start+0x13e>
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	4a3c      	ldr	r2, [pc, #240]	; (800acbc <HAL_TIM_PWM_Start+0x20c>)
 800abcc:	4293      	cmp	r3, r2
 800abce:	d00e      	beq.n	800abee <HAL_TIM_PWM_Start+0x13e>
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	4a3a      	ldr	r2, [pc, #232]	; (800acc0 <HAL_TIM_PWM_Start+0x210>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d009      	beq.n	800abee <HAL_TIM_PWM_Start+0x13e>
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	4a39      	ldr	r2, [pc, #228]	; (800acc4 <HAL_TIM_PWM_Start+0x214>)
 800abe0:	4293      	cmp	r3, r2
 800abe2:	d004      	beq.n	800abee <HAL_TIM_PWM_Start+0x13e>
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	4a37      	ldr	r2, [pc, #220]	; (800acc8 <HAL_TIM_PWM_Start+0x218>)
 800abea:	4293      	cmp	r3, r2
 800abec:	d101      	bne.n	800abf2 <HAL_TIM_PWM_Start+0x142>
 800abee:	2301      	movs	r3, #1
 800abf0:	e000      	b.n	800abf4 <HAL_TIM_PWM_Start+0x144>
 800abf2:	2300      	movs	r3, #0
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d007      	beq.n	800ac08 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ac06:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	4a2a      	ldr	r2, [pc, #168]	; (800acb8 <HAL_TIM_PWM_Start+0x208>)
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d02c      	beq.n	800ac6c <HAL_TIM_PWM_Start+0x1bc>
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac1a:	d027      	beq.n	800ac6c <HAL_TIM_PWM_Start+0x1bc>
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	4a2a      	ldr	r2, [pc, #168]	; (800accc <HAL_TIM_PWM_Start+0x21c>)
 800ac22:	4293      	cmp	r3, r2
 800ac24:	d022      	beq.n	800ac6c <HAL_TIM_PWM_Start+0x1bc>
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	4a29      	ldr	r2, [pc, #164]	; (800acd0 <HAL_TIM_PWM_Start+0x220>)
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	d01d      	beq.n	800ac6c <HAL_TIM_PWM_Start+0x1bc>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	4a27      	ldr	r2, [pc, #156]	; (800acd4 <HAL_TIM_PWM_Start+0x224>)
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d018      	beq.n	800ac6c <HAL_TIM_PWM_Start+0x1bc>
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	4a1f      	ldr	r2, [pc, #124]	; (800acbc <HAL_TIM_PWM_Start+0x20c>)
 800ac40:	4293      	cmp	r3, r2
 800ac42:	d013      	beq.n	800ac6c <HAL_TIM_PWM_Start+0x1bc>
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	4a23      	ldr	r2, [pc, #140]	; (800acd8 <HAL_TIM_PWM_Start+0x228>)
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	d00e      	beq.n	800ac6c <HAL_TIM_PWM_Start+0x1bc>
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	4a1b      	ldr	r2, [pc, #108]	; (800acc0 <HAL_TIM_PWM_Start+0x210>)
 800ac54:	4293      	cmp	r3, r2
 800ac56:	d009      	beq.n	800ac6c <HAL_TIM_PWM_Start+0x1bc>
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	4a1f      	ldr	r2, [pc, #124]	; (800acdc <HAL_TIM_PWM_Start+0x22c>)
 800ac5e:	4293      	cmp	r3, r2
 800ac60:	d004      	beq.n	800ac6c <HAL_TIM_PWM_Start+0x1bc>
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	4a1e      	ldr	r2, [pc, #120]	; (800ace0 <HAL_TIM_PWM_Start+0x230>)
 800ac68:	4293      	cmp	r3, r2
 800ac6a:	d115      	bne.n	800ac98 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	689a      	ldr	r2, [r3, #8]
 800ac72:	4b1c      	ldr	r3, [pc, #112]	; (800ace4 <HAL_TIM_PWM_Start+0x234>)
 800ac74:	4013      	ands	r3, r2
 800ac76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	2b06      	cmp	r3, #6
 800ac7c:	d015      	beq.n	800acaa <HAL_TIM_PWM_Start+0x1fa>
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac84:	d011      	beq.n	800acaa <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	681a      	ldr	r2, [r3, #0]
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f042 0201 	orr.w	r2, r2, #1
 800ac94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac96:	e008      	b.n	800acaa <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	681a      	ldr	r2, [r3, #0]
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f042 0201 	orr.w	r2, r2, #1
 800aca6:	601a      	str	r2, [r3, #0]
 800aca8:	e000      	b.n	800acac <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800acaa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800acac:	2300      	movs	r3, #0
}
 800acae:	4618      	mov	r0, r3
 800acb0:	3710      	adds	r7, #16
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}
 800acb6:	bf00      	nop
 800acb8:	40010000 	.word	0x40010000
 800acbc:	40010400 	.word	0x40010400
 800acc0:	40014000 	.word	0x40014000
 800acc4:	40014400 	.word	0x40014400
 800acc8:	40014800 	.word	0x40014800
 800accc:	40000400 	.word	0x40000400
 800acd0:	40000800 	.word	0x40000800
 800acd4:	40000c00 	.word	0x40000c00
 800acd8:	40001800 	.word	0x40001800
 800acdc:	4000e000 	.word	0x4000e000
 800ace0:	4000e400 	.word	0x4000e400
 800ace4:	00010007 	.word	0x00010007

0800ace8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b086      	sub	sp, #24
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
 800acf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d101      	bne.n	800acfc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800acf8:	2301      	movs	r3, #1
 800acfa:	e08f      	b.n	800ae1c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad02:	b2db      	uxtb	r3, r3
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d106      	bne.n	800ad16 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f7f9 fac3 	bl	800429c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2202      	movs	r2, #2
 800ad1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	6899      	ldr	r1, [r3, #8]
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681a      	ldr	r2, [r3, #0]
 800ad28:	4b3e      	ldr	r3, [pc, #248]	; (800ae24 <HAL_TIM_Encoder_Init+0x13c>)
 800ad2a:	400b      	ands	r3, r1
 800ad2c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681a      	ldr	r2, [r3, #0]
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	3304      	adds	r3, #4
 800ad36:	4619      	mov	r1, r3
 800ad38:	4610      	mov	r0, r2
 800ad3a:	f000 fc5d 	bl	800b5f8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	689b      	ldr	r3, [r3, #8]
 800ad44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	699b      	ldr	r3, [r3, #24]
 800ad4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	6a1b      	ldr	r3, [r3, #32]
 800ad54:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	697a      	ldr	r2, [r7, #20]
 800ad5c:	4313      	orrs	r3, r2
 800ad5e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800ad60:	693a      	ldr	r2, [r7, #16]
 800ad62:	4b31      	ldr	r3, [pc, #196]	; (800ae28 <HAL_TIM_Encoder_Init+0x140>)
 800ad64:	4013      	ands	r3, r2
 800ad66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	689a      	ldr	r2, [r3, #8]
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	699b      	ldr	r3, [r3, #24]
 800ad70:	021b      	lsls	r3, r3, #8
 800ad72:	4313      	orrs	r3, r2
 800ad74:	693a      	ldr	r2, [r7, #16]
 800ad76:	4313      	orrs	r3, r2
 800ad78:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800ad7a:	693a      	ldr	r2, [r7, #16]
 800ad7c:	4b2b      	ldr	r3, [pc, #172]	; (800ae2c <HAL_TIM_Encoder_Init+0x144>)
 800ad7e:	4013      	ands	r3, r2
 800ad80:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800ad82:	693a      	ldr	r2, [r7, #16]
 800ad84:	4b2a      	ldr	r3, [pc, #168]	; (800ae30 <HAL_TIM_Encoder_Init+0x148>)
 800ad86:	4013      	ands	r3, r2
 800ad88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	68da      	ldr	r2, [r3, #12]
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	69db      	ldr	r3, [r3, #28]
 800ad92:	021b      	lsls	r3, r3, #8
 800ad94:	4313      	orrs	r3, r2
 800ad96:	693a      	ldr	r2, [r7, #16]
 800ad98:	4313      	orrs	r3, r2
 800ad9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	691b      	ldr	r3, [r3, #16]
 800ada0:	011a      	lsls	r2, r3, #4
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	6a1b      	ldr	r3, [r3, #32]
 800ada6:	031b      	lsls	r3, r3, #12
 800ada8:	4313      	orrs	r3, r2
 800adaa:	693a      	ldr	r2, [r7, #16]
 800adac:	4313      	orrs	r3, r2
 800adae:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800adb6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800adbe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	685a      	ldr	r2, [r3, #4]
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	695b      	ldr	r3, [r3, #20]
 800adc8:	011b      	lsls	r3, r3, #4
 800adca:	4313      	orrs	r3, r2
 800adcc:	68fa      	ldr	r2, [r7, #12]
 800adce:	4313      	orrs	r3, r2
 800add0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	697a      	ldr	r2, [r7, #20]
 800add8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	693a      	ldr	r2, [r7, #16]
 800ade0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	68fa      	ldr	r2, [r7, #12]
 800ade8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2201      	movs	r2, #1
 800adee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2201      	movs	r2, #1
 800adf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2201      	movs	r2, #1
 800adfe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2201      	movs	r2, #1
 800ae06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2201      	movs	r2, #1
 800ae0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2201      	movs	r2, #1
 800ae16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ae1a:	2300      	movs	r3, #0
}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	3718      	adds	r7, #24
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}
 800ae24:	fffebff8 	.word	0xfffebff8
 800ae28:	fffffcfc 	.word	0xfffffcfc
 800ae2c:	fffff3f3 	.word	0xfffff3f3
 800ae30:	ffff0f0f 	.word	0xffff0f0f

0800ae34 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b084      	sub	sp, #16
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
 800ae3c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ae44:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ae4c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae54:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae5c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d110      	bne.n	800ae86 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ae64:	7bfb      	ldrb	r3, [r7, #15]
 800ae66:	2b01      	cmp	r3, #1
 800ae68:	d102      	bne.n	800ae70 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800ae6a:	7b7b      	ldrb	r3, [r7, #13]
 800ae6c:	2b01      	cmp	r3, #1
 800ae6e:	d001      	beq.n	800ae74 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800ae70:	2301      	movs	r3, #1
 800ae72:	e069      	b.n	800af48 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2202      	movs	r2, #2
 800ae78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2202      	movs	r2, #2
 800ae80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae84:	e031      	b.n	800aeea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	2b04      	cmp	r3, #4
 800ae8a:	d110      	bne.n	800aeae <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800ae8c:	7bbb      	ldrb	r3, [r7, #14]
 800ae8e:	2b01      	cmp	r3, #1
 800ae90:	d102      	bne.n	800ae98 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800ae92:	7b3b      	ldrb	r3, [r7, #12]
 800ae94:	2b01      	cmp	r3, #1
 800ae96:	d001      	beq.n	800ae9c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800ae98:	2301      	movs	r3, #1
 800ae9a:	e055      	b.n	800af48 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2202      	movs	r2, #2
 800aea0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2202      	movs	r2, #2
 800aea8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aeac:	e01d      	b.n	800aeea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800aeae:	7bfb      	ldrb	r3, [r7, #15]
 800aeb0:	2b01      	cmp	r3, #1
 800aeb2:	d108      	bne.n	800aec6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800aeb4:	7bbb      	ldrb	r3, [r7, #14]
 800aeb6:	2b01      	cmp	r3, #1
 800aeb8:	d105      	bne.n	800aec6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800aeba:	7b7b      	ldrb	r3, [r7, #13]
 800aebc:	2b01      	cmp	r3, #1
 800aebe:	d102      	bne.n	800aec6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800aec0:	7b3b      	ldrb	r3, [r7, #12]
 800aec2:	2b01      	cmp	r3, #1
 800aec4:	d001      	beq.n	800aeca <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800aec6:	2301      	movs	r3, #1
 800aec8:	e03e      	b.n	800af48 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2202      	movs	r2, #2
 800aece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2202      	movs	r2, #2
 800aed6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2202      	movs	r2, #2
 800aede:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2202      	movs	r2, #2
 800aee6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d003      	beq.n	800aef8 <HAL_TIM_Encoder_Start+0xc4>
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	2b04      	cmp	r3, #4
 800aef4:	d008      	beq.n	800af08 <HAL_TIM_Encoder_Start+0xd4>
 800aef6:	e00f      	b.n	800af18 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	2201      	movs	r2, #1
 800aefe:	2100      	movs	r1, #0
 800af00:	4618      	mov	r0, r3
 800af02:	f000 ff93 	bl	800be2c <TIM_CCxChannelCmd>
      break;
 800af06:	e016      	b.n	800af36 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	2201      	movs	r2, #1
 800af0e:	2104      	movs	r1, #4
 800af10:	4618      	mov	r0, r3
 800af12:	f000 ff8b 	bl	800be2c <TIM_CCxChannelCmd>
      break;
 800af16:	e00e      	b.n	800af36 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	2201      	movs	r2, #1
 800af1e:	2100      	movs	r1, #0
 800af20:	4618      	mov	r0, r3
 800af22:	f000 ff83 	bl	800be2c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	2201      	movs	r2, #1
 800af2c:	2104      	movs	r1, #4
 800af2e:	4618      	mov	r0, r3
 800af30:	f000 ff7c 	bl	800be2c <TIM_CCxChannelCmd>
      break;
 800af34:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	681a      	ldr	r2, [r3, #0]
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f042 0201 	orr.w	r2, r2, #1
 800af44:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800af46:	2300      	movs	r3, #0
}
 800af48:	4618      	mov	r0, r3
 800af4a:	3710      	adds	r7, #16
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}

0800af50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b082      	sub	sp, #8
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	691b      	ldr	r3, [r3, #16]
 800af5e:	f003 0302 	and.w	r3, r3, #2
 800af62:	2b02      	cmp	r3, #2
 800af64:	d122      	bne.n	800afac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	68db      	ldr	r3, [r3, #12]
 800af6c:	f003 0302 	and.w	r3, r3, #2
 800af70:	2b02      	cmp	r3, #2
 800af72:	d11b      	bne.n	800afac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	f06f 0202 	mvn.w	r2, #2
 800af7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2201      	movs	r2, #1
 800af82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	699b      	ldr	r3, [r3, #24]
 800af8a:	f003 0303 	and.w	r3, r3, #3
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d003      	beq.n	800af9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800af92:	6878      	ldr	r0, [r7, #4]
 800af94:	f000 fb12 	bl	800b5bc <HAL_TIM_IC_CaptureCallback>
 800af98:	e005      	b.n	800afa6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 fb04 	bl	800b5a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f000 fb15 	bl	800b5d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2200      	movs	r2, #0
 800afaa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	691b      	ldr	r3, [r3, #16]
 800afb2:	f003 0304 	and.w	r3, r3, #4
 800afb6:	2b04      	cmp	r3, #4
 800afb8:	d122      	bne.n	800b000 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	68db      	ldr	r3, [r3, #12]
 800afc0:	f003 0304 	and.w	r3, r3, #4
 800afc4:	2b04      	cmp	r3, #4
 800afc6:	d11b      	bne.n	800b000 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	f06f 0204 	mvn.w	r2, #4
 800afd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2202      	movs	r2, #2
 800afd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	699b      	ldr	r3, [r3, #24]
 800afde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d003      	beq.n	800afee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f000 fae8 	bl	800b5bc <HAL_TIM_IC_CaptureCallback>
 800afec:	e005      	b.n	800affa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f000 fada 	bl	800b5a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f000 faeb 	bl	800b5d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2200      	movs	r2, #0
 800affe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	691b      	ldr	r3, [r3, #16]
 800b006:	f003 0308 	and.w	r3, r3, #8
 800b00a:	2b08      	cmp	r3, #8
 800b00c:	d122      	bne.n	800b054 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	68db      	ldr	r3, [r3, #12]
 800b014:	f003 0308 	and.w	r3, r3, #8
 800b018:	2b08      	cmp	r3, #8
 800b01a:	d11b      	bne.n	800b054 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f06f 0208 	mvn.w	r2, #8
 800b024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2204      	movs	r2, #4
 800b02a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	69db      	ldr	r3, [r3, #28]
 800b032:	f003 0303 	and.w	r3, r3, #3
 800b036:	2b00      	cmp	r3, #0
 800b038:	d003      	beq.n	800b042 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f000 fabe 	bl	800b5bc <HAL_TIM_IC_CaptureCallback>
 800b040:	e005      	b.n	800b04e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f000 fab0 	bl	800b5a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f000 fac1 	bl	800b5d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2200      	movs	r2, #0
 800b052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	691b      	ldr	r3, [r3, #16]
 800b05a:	f003 0310 	and.w	r3, r3, #16
 800b05e:	2b10      	cmp	r3, #16
 800b060:	d122      	bne.n	800b0a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	68db      	ldr	r3, [r3, #12]
 800b068:	f003 0310 	and.w	r3, r3, #16
 800b06c:	2b10      	cmp	r3, #16
 800b06e:	d11b      	bne.n	800b0a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f06f 0210 	mvn.w	r2, #16
 800b078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2208      	movs	r2, #8
 800b07e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	69db      	ldr	r3, [r3, #28]
 800b086:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d003      	beq.n	800b096 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	f000 fa94 	bl	800b5bc <HAL_TIM_IC_CaptureCallback>
 800b094:	e005      	b.n	800b0a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	f000 fa86 	bl	800b5a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b09c:	6878      	ldr	r0, [r7, #4]
 800b09e:	f000 fa97 	bl	800b5d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	691b      	ldr	r3, [r3, #16]
 800b0ae:	f003 0301 	and.w	r3, r3, #1
 800b0b2:	2b01      	cmp	r3, #1
 800b0b4:	d10e      	bne.n	800b0d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	68db      	ldr	r3, [r3, #12]
 800b0bc:	f003 0301 	and.w	r3, r3, #1
 800b0c0:	2b01      	cmp	r3, #1
 800b0c2:	d107      	bne.n	800b0d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f06f 0201 	mvn.w	r2, #1
 800b0cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f7f5 ff28 	bl	8000f24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	691b      	ldr	r3, [r3, #16]
 800b0da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0de:	2b80      	cmp	r3, #128	; 0x80
 800b0e0:	d10e      	bne.n	800b100 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	68db      	ldr	r3, [r3, #12]
 800b0e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0ec:	2b80      	cmp	r3, #128	; 0x80
 800b0ee:	d107      	bne.n	800b100 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b0f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f001 f802 	bl	800c104 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	691b      	ldr	r3, [r3, #16]
 800b106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b10a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b10e:	d10e      	bne.n	800b12e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	68db      	ldr	r3, [r3, #12]
 800b116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b11a:	2b80      	cmp	r3, #128	; 0x80
 800b11c:	d107      	bne.n	800b12e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b126:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b128:	6878      	ldr	r0, [r7, #4]
 800b12a:	f000 fff5 	bl	800c118 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	691b      	ldr	r3, [r3, #16]
 800b134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b138:	2b40      	cmp	r3, #64	; 0x40
 800b13a:	d10e      	bne.n	800b15a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	68db      	ldr	r3, [r3, #12]
 800b142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b146:	2b40      	cmp	r3, #64	; 0x40
 800b148:	d107      	bne.n	800b15a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b152:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f000 fa45 	bl	800b5e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	691b      	ldr	r3, [r3, #16]
 800b160:	f003 0320 	and.w	r3, r3, #32
 800b164:	2b20      	cmp	r3, #32
 800b166:	d10e      	bne.n	800b186 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	68db      	ldr	r3, [r3, #12]
 800b16e:	f003 0320 	and.w	r3, r3, #32
 800b172:	2b20      	cmp	r3, #32
 800b174:	d107      	bne.n	800b186 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	f06f 0220 	mvn.w	r2, #32
 800b17e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f000 ffb5 	bl	800c0f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b186:	bf00      	nop
 800b188:	3708      	adds	r7, #8
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}
	...

0800b190 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b086      	sub	sp, #24
 800b194:	af00      	add	r7, sp, #0
 800b196:	60f8      	str	r0, [r7, #12]
 800b198:	60b9      	str	r1, [r7, #8]
 800b19a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b19c:	2300      	movs	r3, #0
 800b19e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b1a6:	2b01      	cmp	r3, #1
 800b1a8:	d101      	bne.n	800b1ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b1aa:	2302      	movs	r3, #2
 800b1ac:	e0ff      	b.n	800b3ae <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	2201      	movs	r2, #1
 800b1b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2b14      	cmp	r3, #20
 800b1ba:	f200 80f0 	bhi.w	800b39e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b1be:	a201      	add	r2, pc, #4	; (adr r2, 800b1c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b1c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1c4:	0800b219 	.word	0x0800b219
 800b1c8:	0800b39f 	.word	0x0800b39f
 800b1cc:	0800b39f 	.word	0x0800b39f
 800b1d0:	0800b39f 	.word	0x0800b39f
 800b1d4:	0800b259 	.word	0x0800b259
 800b1d8:	0800b39f 	.word	0x0800b39f
 800b1dc:	0800b39f 	.word	0x0800b39f
 800b1e0:	0800b39f 	.word	0x0800b39f
 800b1e4:	0800b29b 	.word	0x0800b29b
 800b1e8:	0800b39f 	.word	0x0800b39f
 800b1ec:	0800b39f 	.word	0x0800b39f
 800b1f0:	0800b39f 	.word	0x0800b39f
 800b1f4:	0800b2db 	.word	0x0800b2db
 800b1f8:	0800b39f 	.word	0x0800b39f
 800b1fc:	0800b39f 	.word	0x0800b39f
 800b200:	0800b39f 	.word	0x0800b39f
 800b204:	0800b31d 	.word	0x0800b31d
 800b208:	0800b39f 	.word	0x0800b39f
 800b20c:	0800b39f 	.word	0x0800b39f
 800b210:	0800b39f 	.word	0x0800b39f
 800b214:	0800b35d 	.word	0x0800b35d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	68b9      	ldr	r1, [r7, #8]
 800b21e:	4618      	mov	r0, r3
 800b220:	f000 fa90 	bl	800b744 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	699a      	ldr	r2, [r3, #24]
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f042 0208 	orr.w	r2, r2, #8
 800b232:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	699a      	ldr	r2, [r3, #24]
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	f022 0204 	bic.w	r2, r2, #4
 800b242:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	6999      	ldr	r1, [r3, #24]
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	691a      	ldr	r2, [r3, #16]
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	430a      	orrs	r2, r1
 800b254:	619a      	str	r2, [r3, #24]
      break;
 800b256:	e0a5      	b.n	800b3a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	68b9      	ldr	r1, [r7, #8]
 800b25e:	4618      	mov	r0, r3
 800b260:	f000 fb00 	bl	800b864 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	699a      	ldr	r2, [r3, #24]
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b272:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	699a      	ldr	r2, [r3, #24]
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b282:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	6999      	ldr	r1, [r3, #24]
 800b28a:	68bb      	ldr	r3, [r7, #8]
 800b28c:	691b      	ldr	r3, [r3, #16]
 800b28e:	021a      	lsls	r2, r3, #8
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	430a      	orrs	r2, r1
 800b296:	619a      	str	r2, [r3, #24]
      break;
 800b298:	e084      	b.n	800b3a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	68b9      	ldr	r1, [r7, #8]
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	f000 fb69 	bl	800b978 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	69da      	ldr	r2, [r3, #28]
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f042 0208 	orr.w	r2, r2, #8
 800b2b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	69da      	ldr	r2, [r3, #28]
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f022 0204 	bic.w	r2, r2, #4
 800b2c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	69d9      	ldr	r1, [r3, #28]
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	691a      	ldr	r2, [r3, #16]
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	430a      	orrs	r2, r1
 800b2d6:	61da      	str	r2, [r3, #28]
      break;
 800b2d8:	e064      	b.n	800b3a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	68b9      	ldr	r1, [r7, #8]
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f000 fbd1 	bl	800ba88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	69da      	ldr	r2, [r3, #28]
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b2f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	69da      	ldr	r2, [r3, #28]
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b304:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	69d9      	ldr	r1, [r3, #28]
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	691b      	ldr	r3, [r3, #16]
 800b310:	021a      	lsls	r2, r3, #8
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	430a      	orrs	r2, r1
 800b318:	61da      	str	r2, [r3, #28]
      break;
 800b31a:	e043      	b.n	800b3a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	68b9      	ldr	r1, [r7, #8]
 800b322:	4618      	mov	r0, r3
 800b324:	f000 fc1a 	bl	800bb5c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f042 0208 	orr.w	r2, r2, #8
 800b336:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	f022 0204 	bic.w	r2, r2, #4
 800b346:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	691a      	ldr	r2, [r3, #16]
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	430a      	orrs	r2, r1
 800b358:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b35a:	e023      	b.n	800b3a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	68b9      	ldr	r1, [r7, #8]
 800b362:	4618      	mov	r0, r3
 800b364:	f000 fc5e 	bl	800bc24 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b376:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b386:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	691b      	ldr	r3, [r3, #16]
 800b392:	021a      	lsls	r2, r3, #8
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	430a      	orrs	r2, r1
 800b39a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b39c:	e002      	b.n	800b3a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b39e:	2301      	movs	r3, #1
 800b3a0:	75fb      	strb	r3, [r7, #23]
      break;
 800b3a2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b3ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3718      	adds	r7, #24
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}
 800b3b6:	bf00      	nop

0800b3b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b084      	sub	sp, #16
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
 800b3c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b3cc:	2b01      	cmp	r3, #1
 800b3ce:	d101      	bne.n	800b3d4 <HAL_TIM_ConfigClockSource+0x1c>
 800b3d0:	2302      	movs	r3, #2
 800b3d2:	e0dc      	b.n	800b58e <HAL_TIM_ConfigClockSource+0x1d6>
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2201      	movs	r2, #1
 800b3d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2202      	movs	r2, #2
 800b3e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	689b      	ldr	r3, [r3, #8]
 800b3ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b3ec:	68ba      	ldr	r2, [r7, #8]
 800b3ee:	4b6a      	ldr	r3, [pc, #424]	; (800b598 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b3f0:	4013      	ands	r3, r2
 800b3f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b3fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	68ba      	ldr	r2, [r7, #8]
 800b402:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	4a64      	ldr	r2, [pc, #400]	; (800b59c <HAL_TIM_ConfigClockSource+0x1e4>)
 800b40a:	4293      	cmp	r3, r2
 800b40c:	f000 80a9 	beq.w	800b562 <HAL_TIM_ConfigClockSource+0x1aa>
 800b410:	4a62      	ldr	r2, [pc, #392]	; (800b59c <HAL_TIM_ConfigClockSource+0x1e4>)
 800b412:	4293      	cmp	r3, r2
 800b414:	f200 80ae 	bhi.w	800b574 <HAL_TIM_ConfigClockSource+0x1bc>
 800b418:	4a61      	ldr	r2, [pc, #388]	; (800b5a0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b41a:	4293      	cmp	r3, r2
 800b41c:	f000 80a1 	beq.w	800b562 <HAL_TIM_ConfigClockSource+0x1aa>
 800b420:	4a5f      	ldr	r2, [pc, #380]	; (800b5a0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b422:	4293      	cmp	r3, r2
 800b424:	f200 80a6 	bhi.w	800b574 <HAL_TIM_ConfigClockSource+0x1bc>
 800b428:	4a5e      	ldr	r2, [pc, #376]	; (800b5a4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b42a:	4293      	cmp	r3, r2
 800b42c:	f000 8099 	beq.w	800b562 <HAL_TIM_ConfigClockSource+0x1aa>
 800b430:	4a5c      	ldr	r2, [pc, #368]	; (800b5a4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b432:	4293      	cmp	r3, r2
 800b434:	f200 809e 	bhi.w	800b574 <HAL_TIM_ConfigClockSource+0x1bc>
 800b438:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b43c:	f000 8091 	beq.w	800b562 <HAL_TIM_ConfigClockSource+0x1aa>
 800b440:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b444:	f200 8096 	bhi.w	800b574 <HAL_TIM_ConfigClockSource+0x1bc>
 800b448:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b44c:	f000 8089 	beq.w	800b562 <HAL_TIM_ConfigClockSource+0x1aa>
 800b450:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b454:	f200 808e 	bhi.w	800b574 <HAL_TIM_ConfigClockSource+0x1bc>
 800b458:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b45c:	d03e      	beq.n	800b4dc <HAL_TIM_ConfigClockSource+0x124>
 800b45e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b462:	f200 8087 	bhi.w	800b574 <HAL_TIM_ConfigClockSource+0x1bc>
 800b466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b46a:	f000 8086 	beq.w	800b57a <HAL_TIM_ConfigClockSource+0x1c2>
 800b46e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b472:	d87f      	bhi.n	800b574 <HAL_TIM_ConfigClockSource+0x1bc>
 800b474:	2b70      	cmp	r3, #112	; 0x70
 800b476:	d01a      	beq.n	800b4ae <HAL_TIM_ConfigClockSource+0xf6>
 800b478:	2b70      	cmp	r3, #112	; 0x70
 800b47a:	d87b      	bhi.n	800b574 <HAL_TIM_ConfigClockSource+0x1bc>
 800b47c:	2b60      	cmp	r3, #96	; 0x60
 800b47e:	d050      	beq.n	800b522 <HAL_TIM_ConfigClockSource+0x16a>
 800b480:	2b60      	cmp	r3, #96	; 0x60
 800b482:	d877      	bhi.n	800b574 <HAL_TIM_ConfigClockSource+0x1bc>
 800b484:	2b50      	cmp	r3, #80	; 0x50
 800b486:	d03c      	beq.n	800b502 <HAL_TIM_ConfigClockSource+0x14a>
 800b488:	2b50      	cmp	r3, #80	; 0x50
 800b48a:	d873      	bhi.n	800b574 <HAL_TIM_ConfigClockSource+0x1bc>
 800b48c:	2b40      	cmp	r3, #64	; 0x40
 800b48e:	d058      	beq.n	800b542 <HAL_TIM_ConfigClockSource+0x18a>
 800b490:	2b40      	cmp	r3, #64	; 0x40
 800b492:	d86f      	bhi.n	800b574 <HAL_TIM_ConfigClockSource+0x1bc>
 800b494:	2b30      	cmp	r3, #48	; 0x30
 800b496:	d064      	beq.n	800b562 <HAL_TIM_ConfigClockSource+0x1aa>
 800b498:	2b30      	cmp	r3, #48	; 0x30
 800b49a:	d86b      	bhi.n	800b574 <HAL_TIM_ConfigClockSource+0x1bc>
 800b49c:	2b20      	cmp	r3, #32
 800b49e:	d060      	beq.n	800b562 <HAL_TIM_ConfigClockSource+0x1aa>
 800b4a0:	2b20      	cmp	r3, #32
 800b4a2:	d867      	bhi.n	800b574 <HAL_TIM_ConfigClockSource+0x1bc>
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d05c      	beq.n	800b562 <HAL_TIM_ConfigClockSource+0x1aa>
 800b4a8:	2b10      	cmp	r3, #16
 800b4aa:	d05a      	beq.n	800b562 <HAL_TIM_ConfigClockSource+0x1aa>
 800b4ac:	e062      	b.n	800b574 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	6818      	ldr	r0, [r3, #0]
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	6899      	ldr	r1, [r3, #8]
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	685a      	ldr	r2, [r3, #4]
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	68db      	ldr	r3, [r3, #12]
 800b4be:	f000 fc95 	bl	800bdec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	689b      	ldr	r3, [r3, #8]
 800b4c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b4d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	68ba      	ldr	r2, [r7, #8]
 800b4d8:	609a      	str	r2, [r3, #8]
      break;
 800b4da:	e04f      	b.n	800b57c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	6818      	ldr	r0, [r3, #0]
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	6899      	ldr	r1, [r3, #8]
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	685a      	ldr	r2, [r3, #4]
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	68db      	ldr	r3, [r3, #12]
 800b4ec:	f000 fc7e 	bl	800bdec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	689a      	ldr	r2, [r3, #8]
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b4fe:	609a      	str	r2, [r3, #8]
      break;
 800b500:	e03c      	b.n	800b57c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6818      	ldr	r0, [r3, #0]
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	6859      	ldr	r1, [r3, #4]
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	68db      	ldr	r3, [r3, #12]
 800b50e:	461a      	mov	r2, r3
 800b510:	f000 fbee 	bl	800bcf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	2150      	movs	r1, #80	; 0x50
 800b51a:	4618      	mov	r0, r3
 800b51c:	f000 fc48 	bl	800bdb0 <TIM_ITRx_SetConfig>
      break;
 800b520:	e02c      	b.n	800b57c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6818      	ldr	r0, [r3, #0]
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	6859      	ldr	r1, [r3, #4]
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	68db      	ldr	r3, [r3, #12]
 800b52e:	461a      	mov	r2, r3
 800b530:	f000 fc0d 	bl	800bd4e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	2160      	movs	r1, #96	; 0x60
 800b53a:	4618      	mov	r0, r3
 800b53c:	f000 fc38 	bl	800bdb0 <TIM_ITRx_SetConfig>
      break;
 800b540:	e01c      	b.n	800b57c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6818      	ldr	r0, [r3, #0]
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	6859      	ldr	r1, [r3, #4]
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	68db      	ldr	r3, [r3, #12]
 800b54e:	461a      	mov	r2, r3
 800b550:	f000 fbce 	bl	800bcf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	2140      	movs	r1, #64	; 0x40
 800b55a:	4618      	mov	r0, r3
 800b55c:	f000 fc28 	bl	800bdb0 <TIM_ITRx_SetConfig>
      break;
 800b560:	e00c      	b.n	800b57c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681a      	ldr	r2, [r3, #0]
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	4619      	mov	r1, r3
 800b56c:	4610      	mov	r0, r2
 800b56e:	f000 fc1f 	bl	800bdb0 <TIM_ITRx_SetConfig>
      break;
 800b572:	e003      	b.n	800b57c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b574:	2301      	movs	r3, #1
 800b576:	73fb      	strb	r3, [r7, #15]
      break;
 800b578:	e000      	b.n	800b57c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b57a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2201      	movs	r2, #1
 800b580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2200      	movs	r2, #0
 800b588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b58c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b58e:	4618      	mov	r0, r3
 800b590:	3710      	adds	r7, #16
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}
 800b596:	bf00      	nop
 800b598:	ffceff88 	.word	0xffceff88
 800b59c:	00100040 	.word	0x00100040
 800b5a0:	00100030 	.word	0x00100030
 800b5a4:	00100020 	.word	0x00100020

0800b5a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	b083      	sub	sp, #12
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b5b0:	bf00      	nop
 800b5b2:	370c      	adds	r7, #12
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ba:	4770      	bx	lr

0800b5bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b5bc:	b480      	push	{r7}
 800b5be:	b083      	sub	sp, #12
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b5c4:	bf00      	nop
 800b5c6:	370c      	adds	r7, #12
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ce:	4770      	bx	lr

0800b5d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	b083      	sub	sp, #12
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b5d8:	bf00      	nop
 800b5da:	370c      	adds	r7, #12
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e2:	4770      	bx	lr

0800b5e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b5e4:	b480      	push	{r7}
 800b5e6:	b083      	sub	sp, #12
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b5ec:	bf00      	nop
 800b5ee:	370c      	adds	r7, #12
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f6:	4770      	bx	lr

0800b5f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b5f8:	b480      	push	{r7}
 800b5fa:	b085      	sub	sp, #20
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
 800b600:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	4a44      	ldr	r2, [pc, #272]	; (800b71c <TIM_Base_SetConfig+0x124>)
 800b60c:	4293      	cmp	r3, r2
 800b60e:	d013      	beq.n	800b638 <TIM_Base_SetConfig+0x40>
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b616:	d00f      	beq.n	800b638 <TIM_Base_SetConfig+0x40>
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	4a41      	ldr	r2, [pc, #260]	; (800b720 <TIM_Base_SetConfig+0x128>)
 800b61c:	4293      	cmp	r3, r2
 800b61e:	d00b      	beq.n	800b638 <TIM_Base_SetConfig+0x40>
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	4a40      	ldr	r2, [pc, #256]	; (800b724 <TIM_Base_SetConfig+0x12c>)
 800b624:	4293      	cmp	r3, r2
 800b626:	d007      	beq.n	800b638 <TIM_Base_SetConfig+0x40>
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	4a3f      	ldr	r2, [pc, #252]	; (800b728 <TIM_Base_SetConfig+0x130>)
 800b62c:	4293      	cmp	r3, r2
 800b62e:	d003      	beq.n	800b638 <TIM_Base_SetConfig+0x40>
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	4a3e      	ldr	r2, [pc, #248]	; (800b72c <TIM_Base_SetConfig+0x134>)
 800b634:	4293      	cmp	r3, r2
 800b636:	d108      	bne.n	800b64a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b63e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	685b      	ldr	r3, [r3, #4]
 800b644:	68fa      	ldr	r2, [r7, #12]
 800b646:	4313      	orrs	r3, r2
 800b648:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	4a33      	ldr	r2, [pc, #204]	; (800b71c <TIM_Base_SetConfig+0x124>)
 800b64e:	4293      	cmp	r3, r2
 800b650:	d027      	beq.n	800b6a2 <TIM_Base_SetConfig+0xaa>
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b658:	d023      	beq.n	800b6a2 <TIM_Base_SetConfig+0xaa>
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	4a30      	ldr	r2, [pc, #192]	; (800b720 <TIM_Base_SetConfig+0x128>)
 800b65e:	4293      	cmp	r3, r2
 800b660:	d01f      	beq.n	800b6a2 <TIM_Base_SetConfig+0xaa>
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	4a2f      	ldr	r2, [pc, #188]	; (800b724 <TIM_Base_SetConfig+0x12c>)
 800b666:	4293      	cmp	r3, r2
 800b668:	d01b      	beq.n	800b6a2 <TIM_Base_SetConfig+0xaa>
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	4a2e      	ldr	r2, [pc, #184]	; (800b728 <TIM_Base_SetConfig+0x130>)
 800b66e:	4293      	cmp	r3, r2
 800b670:	d017      	beq.n	800b6a2 <TIM_Base_SetConfig+0xaa>
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	4a2d      	ldr	r2, [pc, #180]	; (800b72c <TIM_Base_SetConfig+0x134>)
 800b676:	4293      	cmp	r3, r2
 800b678:	d013      	beq.n	800b6a2 <TIM_Base_SetConfig+0xaa>
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	4a2c      	ldr	r2, [pc, #176]	; (800b730 <TIM_Base_SetConfig+0x138>)
 800b67e:	4293      	cmp	r3, r2
 800b680:	d00f      	beq.n	800b6a2 <TIM_Base_SetConfig+0xaa>
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	4a2b      	ldr	r2, [pc, #172]	; (800b734 <TIM_Base_SetConfig+0x13c>)
 800b686:	4293      	cmp	r3, r2
 800b688:	d00b      	beq.n	800b6a2 <TIM_Base_SetConfig+0xaa>
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	4a2a      	ldr	r2, [pc, #168]	; (800b738 <TIM_Base_SetConfig+0x140>)
 800b68e:	4293      	cmp	r3, r2
 800b690:	d007      	beq.n	800b6a2 <TIM_Base_SetConfig+0xaa>
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	4a29      	ldr	r2, [pc, #164]	; (800b73c <TIM_Base_SetConfig+0x144>)
 800b696:	4293      	cmp	r3, r2
 800b698:	d003      	beq.n	800b6a2 <TIM_Base_SetConfig+0xaa>
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	4a28      	ldr	r2, [pc, #160]	; (800b740 <TIM_Base_SetConfig+0x148>)
 800b69e:	4293      	cmp	r3, r2
 800b6a0:	d108      	bne.n	800b6b4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b6a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	68db      	ldr	r3, [r3, #12]
 800b6ae:	68fa      	ldr	r2, [r7, #12]
 800b6b0:	4313      	orrs	r3, r2
 800b6b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	695b      	ldr	r3, [r3, #20]
 800b6be:	4313      	orrs	r3, r2
 800b6c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	68fa      	ldr	r2, [r7, #12]
 800b6c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	689a      	ldr	r2, [r3, #8]
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	681a      	ldr	r2, [r3, #0]
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	4a10      	ldr	r2, [pc, #64]	; (800b71c <TIM_Base_SetConfig+0x124>)
 800b6dc:	4293      	cmp	r3, r2
 800b6de:	d00f      	beq.n	800b700 <TIM_Base_SetConfig+0x108>
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	4a12      	ldr	r2, [pc, #72]	; (800b72c <TIM_Base_SetConfig+0x134>)
 800b6e4:	4293      	cmp	r3, r2
 800b6e6:	d00b      	beq.n	800b700 <TIM_Base_SetConfig+0x108>
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	4a11      	ldr	r2, [pc, #68]	; (800b730 <TIM_Base_SetConfig+0x138>)
 800b6ec:	4293      	cmp	r3, r2
 800b6ee:	d007      	beq.n	800b700 <TIM_Base_SetConfig+0x108>
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	4a10      	ldr	r2, [pc, #64]	; (800b734 <TIM_Base_SetConfig+0x13c>)
 800b6f4:	4293      	cmp	r3, r2
 800b6f6:	d003      	beq.n	800b700 <TIM_Base_SetConfig+0x108>
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	4a0f      	ldr	r2, [pc, #60]	; (800b738 <TIM_Base_SetConfig+0x140>)
 800b6fc:	4293      	cmp	r3, r2
 800b6fe:	d103      	bne.n	800b708 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	691a      	ldr	r2, [r3, #16]
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2201      	movs	r2, #1
 800b70c:	615a      	str	r2, [r3, #20]
}
 800b70e:	bf00      	nop
 800b710:	3714      	adds	r7, #20
 800b712:	46bd      	mov	sp, r7
 800b714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b718:	4770      	bx	lr
 800b71a:	bf00      	nop
 800b71c:	40010000 	.word	0x40010000
 800b720:	40000400 	.word	0x40000400
 800b724:	40000800 	.word	0x40000800
 800b728:	40000c00 	.word	0x40000c00
 800b72c:	40010400 	.word	0x40010400
 800b730:	40014000 	.word	0x40014000
 800b734:	40014400 	.word	0x40014400
 800b738:	40014800 	.word	0x40014800
 800b73c:	4000e000 	.word	0x4000e000
 800b740:	4000e400 	.word	0x4000e400

0800b744 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b744:	b480      	push	{r7}
 800b746:	b087      	sub	sp, #28
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
 800b74c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	6a1b      	ldr	r3, [r3, #32]
 800b752:	f023 0201 	bic.w	r2, r3, #1
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6a1b      	ldr	r3, [r3, #32]
 800b75e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	685b      	ldr	r3, [r3, #4]
 800b764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	699b      	ldr	r3, [r3, #24]
 800b76a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b76c:	68fa      	ldr	r2, [r7, #12]
 800b76e:	4b37      	ldr	r3, [pc, #220]	; (800b84c <TIM_OC1_SetConfig+0x108>)
 800b770:	4013      	ands	r3, r2
 800b772:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	f023 0303 	bic.w	r3, r3, #3
 800b77a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	68fa      	ldr	r2, [r7, #12]
 800b782:	4313      	orrs	r3, r2
 800b784:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b786:	697b      	ldr	r3, [r7, #20]
 800b788:	f023 0302 	bic.w	r3, r3, #2
 800b78c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	689b      	ldr	r3, [r3, #8]
 800b792:	697a      	ldr	r2, [r7, #20]
 800b794:	4313      	orrs	r3, r2
 800b796:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	4a2d      	ldr	r2, [pc, #180]	; (800b850 <TIM_OC1_SetConfig+0x10c>)
 800b79c:	4293      	cmp	r3, r2
 800b79e:	d00f      	beq.n	800b7c0 <TIM_OC1_SetConfig+0x7c>
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	4a2c      	ldr	r2, [pc, #176]	; (800b854 <TIM_OC1_SetConfig+0x110>)
 800b7a4:	4293      	cmp	r3, r2
 800b7a6:	d00b      	beq.n	800b7c0 <TIM_OC1_SetConfig+0x7c>
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	4a2b      	ldr	r2, [pc, #172]	; (800b858 <TIM_OC1_SetConfig+0x114>)
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	d007      	beq.n	800b7c0 <TIM_OC1_SetConfig+0x7c>
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	4a2a      	ldr	r2, [pc, #168]	; (800b85c <TIM_OC1_SetConfig+0x118>)
 800b7b4:	4293      	cmp	r3, r2
 800b7b6:	d003      	beq.n	800b7c0 <TIM_OC1_SetConfig+0x7c>
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	4a29      	ldr	r2, [pc, #164]	; (800b860 <TIM_OC1_SetConfig+0x11c>)
 800b7bc:	4293      	cmp	r3, r2
 800b7be:	d10c      	bne.n	800b7da <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b7c0:	697b      	ldr	r3, [r7, #20]
 800b7c2:	f023 0308 	bic.w	r3, r3, #8
 800b7c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	68db      	ldr	r3, [r3, #12]
 800b7cc:	697a      	ldr	r2, [r7, #20]
 800b7ce:	4313      	orrs	r3, r2
 800b7d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b7d2:	697b      	ldr	r3, [r7, #20]
 800b7d4:	f023 0304 	bic.w	r3, r3, #4
 800b7d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	4a1c      	ldr	r2, [pc, #112]	; (800b850 <TIM_OC1_SetConfig+0x10c>)
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	d00f      	beq.n	800b802 <TIM_OC1_SetConfig+0xbe>
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	4a1b      	ldr	r2, [pc, #108]	; (800b854 <TIM_OC1_SetConfig+0x110>)
 800b7e6:	4293      	cmp	r3, r2
 800b7e8:	d00b      	beq.n	800b802 <TIM_OC1_SetConfig+0xbe>
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	4a1a      	ldr	r2, [pc, #104]	; (800b858 <TIM_OC1_SetConfig+0x114>)
 800b7ee:	4293      	cmp	r3, r2
 800b7f0:	d007      	beq.n	800b802 <TIM_OC1_SetConfig+0xbe>
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	4a19      	ldr	r2, [pc, #100]	; (800b85c <TIM_OC1_SetConfig+0x118>)
 800b7f6:	4293      	cmp	r3, r2
 800b7f8:	d003      	beq.n	800b802 <TIM_OC1_SetConfig+0xbe>
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	4a18      	ldr	r2, [pc, #96]	; (800b860 <TIM_OC1_SetConfig+0x11c>)
 800b7fe:	4293      	cmp	r3, r2
 800b800:	d111      	bne.n	800b826 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b802:	693b      	ldr	r3, [r7, #16]
 800b804:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b808:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b80a:	693b      	ldr	r3, [r7, #16]
 800b80c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b810:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	695b      	ldr	r3, [r3, #20]
 800b816:	693a      	ldr	r2, [r7, #16]
 800b818:	4313      	orrs	r3, r2
 800b81a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	699b      	ldr	r3, [r3, #24]
 800b820:	693a      	ldr	r2, [r7, #16]
 800b822:	4313      	orrs	r3, r2
 800b824:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	693a      	ldr	r2, [r7, #16]
 800b82a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	68fa      	ldr	r2, [r7, #12]
 800b830:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	685a      	ldr	r2, [r3, #4]
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	697a      	ldr	r2, [r7, #20]
 800b83e:	621a      	str	r2, [r3, #32]
}
 800b840:	bf00      	nop
 800b842:	371c      	adds	r7, #28
 800b844:	46bd      	mov	sp, r7
 800b846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84a:	4770      	bx	lr
 800b84c:	fffeff8f 	.word	0xfffeff8f
 800b850:	40010000 	.word	0x40010000
 800b854:	40010400 	.word	0x40010400
 800b858:	40014000 	.word	0x40014000
 800b85c:	40014400 	.word	0x40014400
 800b860:	40014800 	.word	0x40014800

0800b864 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b864:	b480      	push	{r7}
 800b866:	b087      	sub	sp, #28
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
 800b86c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	6a1b      	ldr	r3, [r3, #32]
 800b872:	f023 0210 	bic.w	r2, r3, #16
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	6a1b      	ldr	r3, [r3, #32]
 800b87e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	685b      	ldr	r3, [r3, #4]
 800b884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	699b      	ldr	r3, [r3, #24]
 800b88a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b88c:	68fa      	ldr	r2, [r7, #12]
 800b88e:	4b34      	ldr	r3, [pc, #208]	; (800b960 <TIM_OC2_SetConfig+0xfc>)
 800b890:	4013      	ands	r3, r2
 800b892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b89a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	021b      	lsls	r3, r3, #8
 800b8a2:	68fa      	ldr	r2, [r7, #12]
 800b8a4:	4313      	orrs	r3, r2
 800b8a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	f023 0320 	bic.w	r3, r3, #32
 800b8ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	689b      	ldr	r3, [r3, #8]
 800b8b4:	011b      	lsls	r3, r3, #4
 800b8b6:	697a      	ldr	r2, [r7, #20]
 800b8b8:	4313      	orrs	r3, r2
 800b8ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	4a29      	ldr	r2, [pc, #164]	; (800b964 <TIM_OC2_SetConfig+0x100>)
 800b8c0:	4293      	cmp	r3, r2
 800b8c2:	d003      	beq.n	800b8cc <TIM_OC2_SetConfig+0x68>
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	4a28      	ldr	r2, [pc, #160]	; (800b968 <TIM_OC2_SetConfig+0x104>)
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	d10d      	bne.n	800b8e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b8cc:	697b      	ldr	r3, [r7, #20]
 800b8ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b8d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	68db      	ldr	r3, [r3, #12]
 800b8d8:	011b      	lsls	r3, r3, #4
 800b8da:	697a      	ldr	r2, [r7, #20]
 800b8dc:	4313      	orrs	r3, r2
 800b8de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b8e0:	697b      	ldr	r3, [r7, #20]
 800b8e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b8e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	4a1e      	ldr	r2, [pc, #120]	; (800b964 <TIM_OC2_SetConfig+0x100>)
 800b8ec:	4293      	cmp	r3, r2
 800b8ee:	d00f      	beq.n	800b910 <TIM_OC2_SetConfig+0xac>
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	4a1d      	ldr	r2, [pc, #116]	; (800b968 <TIM_OC2_SetConfig+0x104>)
 800b8f4:	4293      	cmp	r3, r2
 800b8f6:	d00b      	beq.n	800b910 <TIM_OC2_SetConfig+0xac>
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	4a1c      	ldr	r2, [pc, #112]	; (800b96c <TIM_OC2_SetConfig+0x108>)
 800b8fc:	4293      	cmp	r3, r2
 800b8fe:	d007      	beq.n	800b910 <TIM_OC2_SetConfig+0xac>
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	4a1b      	ldr	r2, [pc, #108]	; (800b970 <TIM_OC2_SetConfig+0x10c>)
 800b904:	4293      	cmp	r3, r2
 800b906:	d003      	beq.n	800b910 <TIM_OC2_SetConfig+0xac>
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	4a1a      	ldr	r2, [pc, #104]	; (800b974 <TIM_OC2_SetConfig+0x110>)
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d113      	bne.n	800b938 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b910:	693b      	ldr	r3, [r7, #16]
 800b912:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b916:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b91e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	695b      	ldr	r3, [r3, #20]
 800b924:	009b      	lsls	r3, r3, #2
 800b926:	693a      	ldr	r2, [r7, #16]
 800b928:	4313      	orrs	r3, r2
 800b92a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	699b      	ldr	r3, [r3, #24]
 800b930:	009b      	lsls	r3, r3, #2
 800b932:	693a      	ldr	r2, [r7, #16]
 800b934:	4313      	orrs	r3, r2
 800b936:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	693a      	ldr	r2, [r7, #16]
 800b93c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	68fa      	ldr	r2, [r7, #12]
 800b942:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	685a      	ldr	r2, [r3, #4]
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	697a      	ldr	r2, [r7, #20]
 800b950:	621a      	str	r2, [r3, #32]
}
 800b952:	bf00      	nop
 800b954:	371c      	adds	r7, #28
 800b956:	46bd      	mov	sp, r7
 800b958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95c:	4770      	bx	lr
 800b95e:	bf00      	nop
 800b960:	feff8fff 	.word	0xfeff8fff
 800b964:	40010000 	.word	0x40010000
 800b968:	40010400 	.word	0x40010400
 800b96c:	40014000 	.word	0x40014000
 800b970:	40014400 	.word	0x40014400
 800b974:	40014800 	.word	0x40014800

0800b978 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b978:	b480      	push	{r7}
 800b97a:	b087      	sub	sp, #28
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
 800b980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	6a1b      	ldr	r3, [r3, #32]
 800b986:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6a1b      	ldr	r3, [r3, #32]
 800b992:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	685b      	ldr	r3, [r3, #4]
 800b998:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	69db      	ldr	r3, [r3, #28]
 800b99e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b9a0:	68fa      	ldr	r2, [r7, #12]
 800b9a2:	4b33      	ldr	r3, [pc, #204]	; (800ba70 <TIM_OC3_SetConfig+0xf8>)
 800b9a4:	4013      	ands	r3, r2
 800b9a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	f023 0303 	bic.w	r3, r3, #3
 800b9ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	68fa      	ldr	r2, [r7, #12]
 800b9b6:	4313      	orrs	r3, r2
 800b9b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b9ba:	697b      	ldr	r3, [r7, #20]
 800b9bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b9c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	689b      	ldr	r3, [r3, #8]
 800b9c6:	021b      	lsls	r3, r3, #8
 800b9c8:	697a      	ldr	r2, [r7, #20]
 800b9ca:	4313      	orrs	r3, r2
 800b9cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	4a28      	ldr	r2, [pc, #160]	; (800ba74 <TIM_OC3_SetConfig+0xfc>)
 800b9d2:	4293      	cmp	r3, r2
 800b9d4:	d003      	beq.n	800b9de <TIM_OC3_SetConfig+0x66>
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	4a27      	ldr	r2, [pc, #156]	; (800ba78 <TIM_OC3_SetConfig+0x100>)
 800b9da:	4293      	cmp	r3, r2
 800b9dc:	d10d      	bne.n	800b9fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b9de:	697b      	ldr	r3, [r7, #20]
 800b9e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b9e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	68db      	ldr	r3, [r3, #12]
 800b9ea:	021b      	lsls	r3, r3, #8
 800b9ec:	697a      	ldr	r2, [r7, #20]
 800b9ee:	4313      	orrs	r3, r2
 800b9f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b9f2:	697b      	ldr	r3, [r7, #20]
 800b9f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b9f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	4a1d      	ldr	r2, [pc, #116]	; (800ba74 <TIM_OC3_SetConfig+0xfc>)
 800b9fe:	4293      	cmp	r3, r2
 800ba00:	d00f      	beq.n	800ba22 <TIM_OC3_SetConfig+0xaa>
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	4a1c      	ldr	r2, [pc, #112]	; (800ba78 <TIM_OC3_SetConfig+0x100>)
 800ba06:	4293      	cmp	r3, r2
 800ba08:	d00b      	beq.n	800ba22 <TIM_OC3_SetConfig+0xaa>
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	4a1b      	ldr	r2, [pc, #108]	; (800ba7c <TIM_OC3_SetConfig+0x104>)
 800ba0e:	4293      	cmp	r3, r2
 800ba10:	d007      	beq.n	800ba22 <TIM_OC3_SetConfig+0xaa>
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	4a1a      	ldr	r2, [pc, #104]	; (800ba80 <TIM_OC3_SetConfig+0x108>)
 800ba16:	4293      	cmp	r3, r2
 800ba18:	d003      	beq.n	800ba22 <TIM_OC3_SetConfig+0xaa>
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	4a19      	ldr	r2, [pc, #100]	; (800ba84 <TIM_OC3_SetConfig+0x10c>)
 800ba1e:	4293      	cmp	r3, r2
 800ba20:	d113      	bne.n	800ba4a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ba22:	693b      	ldr	r3, [r7, #16]
 800ba24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ba2a:	693b      	ldr	r3, [r7, #16]
 800ba2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ba30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	695b      	ldr	r3, [r3, #20]
 800ba36:	011b      	lsls	r3, r3, #4
 800ba38:	693a      	ldr	r2, [r7, #16]
 800ba3a:	4313      	orrs	r3, r2
 800ba3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	699b      	ldr	r3, [r3, #24]
 800ba42:	011b      	lsls	r3, r3, #4
 800ba44:	693a      	ldr	r2, [r7, #16]
 800ba46:	4313      	orrs	r3, r2
 800ba48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	693a      	ldr	r2, [r7, #16]
 800ba4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	68fa      	ldr	r2, [r7, #12]
 800ba54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	685a      	ldr	r2, [r3, #4]
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	697a      	ldr	r2, [r7, #20]
 800ba62:	621a      	str	r2, [r3, #32]
}
 800ba64:	bf00      	nop
 800ba66:	371c      	adds	r7, #28
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6e:	4770      	bx	lr
 800ba70:	fffeff8f 	.word	0xfffeff8f
 800ba74:	40010000 	.word	0x40010000
 800ba78:	40010400 	.word	0x40010400
 800ba7c:	40014000 	.word	0x40014000
 800ba80:	40014400 	.word	0x40014400
 800ba84:	40014800 	.word	0x40014800

0800ba88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ba88:	b480      	push	{r7}
 800ba8a:	b087      	sub	sp, #28
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
 800ba90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6a1b      	ldr	r3, [r3, #32]
 800ba96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6a1b      	ldr	r3, [r3, #32]
 800baa2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	685b      	ldr	r3, [r3, #4]
 800baa8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	69db      	ldr	r3, [r3, #28]
 800baae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bab0:	68fa      	ldr	r2, [r7, #12]
 800bab2:	4b24      	ldr	r3, [pc, #144]	; (800bb44 <TIM_OC4_SetConfig+0xbc>)
 800bab4:	4013      	ands	r3, r2
 800bab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800babe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	021b      	lsls	r3, r3, #8
 800bac6:	68fa      	ldr	r2, [r7, #12]
 800bac8:	4313      	orrs	r3, r2
 800baca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bacc:	693b      	ldr	r3, [r7, #16]
 800bace:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bad2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	689b      	ldr	r3, [r3, #8]
 800bad8:	031b      	lsls	r3, r3, #12
 800bada:	693a      	ldr	r2, [r7, #16]
 800badc:	4313      	orrs	r3, r2
 800bade:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	4a19      	ldr	r2, [pc, #100]	; (800bb48 <TIM_OC4_SetConfig+0xc0>)
 800bae4:	4293      	cmp	r3, r2
 800bae6:	d00f      	beq.n	800bb08 <TIM_OC4_SetConfig+0x80>
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	4a18      	ldr	r2, [pc, #96]	; (800bb4c <TIM_OC4_SetConfig+0xc4>)
 800baec:	4293      	cmp	r3, r2
 800baee:	d00b      	beq.n	800bb08 <TIM_OC4_SetConfig+0x80>
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	4a17      	ldr	r2, [pc, #92]	; (800bb50 <TIM_OC4_SetConfig+0xc8>)
 800baf4:	4293      	cmp	r3, r2
 800baf6:	d007      	beq.n	800bb08 <TIM_OC4_SetConfig+0x80>
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	4a16      	ldr	r2, [pc, #88]	; (800bb54 <TIM_OC4_SetConfig+0xcc>)
 800bafc:	4293      	cmp	r3, r2
 800bafe:	d003      	beq.n	800bb08 <TIM_OC4_SetConfig+0x80>
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	4a15      	ldr	r2, [pc, #84]	; (800bb58 <TIM_OC4_SetConfig+0xd0>)
 800bb04:	4293      	cmp	r3, r2
 800bb06:	d109      	bne.n	800bb1c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bb08:	697b      	ldr	r3, [r7, #20]
 800bb0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bb0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	695b      	ldr	r3, [r3, #20]
 800bb14:	019b      	lsls	r3, r3, #6
 800bb16:	697a      	ldr	r2, [r7, #20]
 800bb18:	4313      	orrs	r3, r2
 800bb1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	697a      	ldr	r2, [r7, #20]
 800bb20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	68fa      	ldr	r2, [r7, #12]
 800bb26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	685a      	ldr	r2, [r3, #4]
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	693a      	ldr	r2, [r7, #16]
 800bb34:	621a      	str	r2, [r3, #32]
}
 800bb36:	bf00      	nop
 800bb38:	371c      	adds	r7, #28
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb40:	4770      	bx	lr
 800bb42:	bf00      	nop
 800bb44:	feff8fff 	.word	0xfeff8fff
 800bb48:	40010000 	.word	0x40010000
 800bb4c:	40010400 	.word	0x40010400
 800bb50:	40014000 	.word	0x40014000
 800bb54:	40014400 	.word	0x40014400
 800bb58:	40014800 	.word	0x40014800

0800bb5c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bb5c:	b480      	push	{r7}
 800bb5e:	b087      	sub	sp, #28
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
 800bb64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	6a1b      	ldr	r3, [r3, #32]
 800bb6a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6a1b      	ldr	r3, [r3, #32]
 800bb76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	685b      	ldr	r3, [r3, #4]
 800bb7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bb84:	68fa      	ldr	r2, [r7, #12]
 800bb86:	4b21      	ldr	r3, [pc, #132]	; (800bc0c <TIM_OC5_SetConfig+0xb0>)
 800bb88:	4013      	ands	r3, r2
 800bb8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	68fa      	ldr	r2, [r7, #12]
 800bb92:	4313      	orrs	r3, r2
 800bb94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bb96:	693b      	ldr	r3, [r7, #16]
 800bb98:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800bb9c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	689b      	ldr	r3, [r3, #8]
 800bba2:	041b      	lsls	r3, r3, #16
 800bba4:	693a      	ldr	r2, [r7, #16]
 800bba6:	4313      	orrs	r3, r2
 800bba8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	4a18      	ldr	r2, [pc, #96]	; (800bc10 <TIM_OC5_SetConfig+0xb4>)
 800bbae:	4293      	cmp	r3, r2
 800bbb0:	d00f      	beq.n	800bbd2 <TIM_OC5_SetConfig+0x76>
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	4a17      	ldr	r2, [pc, #92]	; (800bc14 <TIM_OC5_SetConfig+0xb8>)
 800bbb6:	4293      	cmp	r3, r2
 800bbb8:	d00b      	beq.n	800bbd2 <TIM_OC5_SetConfig+0x76>
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	4a16      	ldr	r2, [pc, #88]	; (800bc18 <TIM_OC5_SetConfig+0xbc>)
 800bbbe:	4293      	cmp	r3, r2
 800bbc0:	d007      	beq.n	800bbd2 <TIM_OC5_SetConfig+0x76>
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	4a15      	ldr	r2, [pc, #84]	; (800bc1c <TIM_OC5_SetConfig+0xc0>)
 800bbc6:	4293      	cmp	r3, r2
 800bbc8:	d003      	beq.n	800bbd2 <TIM_OC5_SetConfig+0x76>
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	4a14      	ldr	r2, [pc, #80]	; (800bc20 <TIM_OC5_SetConfig+0xc4>)
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	d109      	bne.n	800bbe6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bbd2:	697b      	ldr	r3, [r7, #20]
 800bbd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bbd8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	695b      	ldr	r3, [r3, #20]
 800bbde:	021b      	lsls	r3, r3, #8
 800bbe0:	697a      	ldr	r2, [r7, #20]
 800bbe2:	4313      	orrs	r3, r2
 800bbe4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	697a      	ldr	r2, [r7, #20]
 800bbea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	68fa      	ldr	r2, [r7, #12]
 800bbf0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	685a      	ldr	r2, [r3, #4]
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	693a      	ldr	r2, [r7, #16]
 800bbfe:	621a      	str	r2, [r3, #32]
}
 800bc00:	bf00      	nop
 800bc02:	371c      	adds	r7, #28
 800bc04:	46bd      	mov	sp, r7
 800bc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0a:	4770      	bx	lr
 800bc0c:	fffeff8f 	.word	0xfffeff8f
 800bc10:	40010000 	.word	0x40010000
 800bc14:	40010400 	.word	0x40010400
 800bc18:	40014000 	.word	0x40014000
 800bc1c:	40014400 	.word	0x40014400
 800bc20:	40014800 	.word	0x40014800

0800bc24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bc24:	b480      	push	{r7}
 800bc26:	b087      	sub	sp, #28
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
 800bc2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6a1b      	ldr	r3, [r3, #32]
 800bc32:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	6a1b      	ldr	r3, [r3, #32]
 800bc3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	685b      	ldr	r3, [r3, #4]
 800bc44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bc4c:	68fa      	ldr	r2, [r7, #12]
 800bc4e:	4b22      	ldr	r3, [pc, #136]	; (800bcd8 <TIM_OC6_SetConfig+0xb4>)
 800bc50:	4013      	ands	r3, r2
 800bc52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	021b      	lsls	r3, r3, #8
 800bc5a:	68fa      	ldr	r2, [r7, #12]
 800bc5c:	4313      	orrs	r3, r2
 800bc5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bc60:	693b      	ldr	r3, [r7, #16]
 800bc62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bc66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	689b      	ldr	r3, [r3, #8]
 800bc6c:	051b      	lsls	r3, r3, #20
 800bc6e:	693a      	ldr	r2, [r7, #16]
 800bc70:	4313      	orrs	r3, r2
 800bc72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	4a19      	ldr	r2, [pc, #100]	; (800bcdc <TIM_OC6_SetConfig+0xb8>)
 800bc78:	4293      	cmp	r3, r2
 800bc7a:	d00f      	beq.n	800bc9c <TIM_OC6_SetConfig+0x78>
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	4a18      	ldr	r2, [pc, #96]	; (800bce0 <TIM_OC6_SetConfig+0xbc>)
 800bc80:	4293      	cmp	r3, r2
 800bc82:	d00b      	beq.n	800bc9c <TIM_OC6_SetConfig+0x78>
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	4a17      	ldr	r2, [pc, #92]	; (800bce4 <TIM_OC6_SetConfig+0xc0>)
 800bc88:	4293      	cmp	r3, r2
 800bc8a:	d007      	beq.n	800bc9c <TIM_OC6_SetConfig+0x78>
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	4a16      	ldr	r2, [pc, #88]	; (800bce8 <TIM_OC6_SetConfig+0xc4>)
 800bc90:	4293      	cmp	r3, r2
 800bc92:	d003      	beq.n	800bc9c <TIM_OC6_SetConfig+0x78>
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	4a15      	ldr	r2, [pc, #84]	; (800bcec <TIM_OC6_SetConfig+0xc8>)
 800bc98:	4293      	cmp	r3, r2
 800bc9a:	d109      	bne.n	800bcb0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bc9c:	697b      	ldr	r3, [r7, #20]
 800bc9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bca2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	695b      	ldr	r3, [r3, #20]
 800bca8:	029b      	lsls	r3, r3, #10
 800bcaa:	697a      	ldr	r2, [r7, #20]
 800bcac:	4313      	orrs	r3, r2
 800bcae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	697a      	ldr	r2, [r7, #20]
 800bcb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	68fa      	ldr	r2, [r7, #12]
 800bcba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	685a      	ldr	r2, [r3, #4]
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	693a      	ldr	r2, [r7, #16]
 800bcc8:	621a      	str	r2, [r3, #32]
}
 800bcca:	bf00      	nop
 800bccc:	371c      	adds	r7, #28
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd4:	4770      	bx	lr
 800bcd6:	bf00      	nop
 800bcd8:	feff8fff 	.word	0xfeff8fff
 800bcdc:	40010000 	.word	0x40010000
 800bce0:	40010400 	.word	0x40010400
 800bce4:	40014000 	.word	0x40014000
 800bce8:	40014400 	.word	0x40014400
 800bcec:	40014800 	.word	0x40014800

0800bcf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	b087      	sub	sp, #28
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	60f8      	str	r0, [r7, #12]
 800bcf8:	60b9      	str	r1, [r7, #8]
 800bcfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	6a1b      	ldr	r3, [r3, #32]
 800bd00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	6a1b      	ldr	r3, [r3, #32]
 800bd06:	f023 0201 	bic.w	r2, r3, #1
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	699b      	ldr	r3, [r3, #24]
 800bd12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bd14:	693b      	ldr	r3, [r7, #16]
 800bd16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bd1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	011b      	lsls	r3, r3, #4
 800bd20:	693a      	ldr	r2, [r7, #16]
 800bd22:	4313      	orrs	r3, r2
 800bd24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bd26:	697b      	ldr	r3, [r7, #20]
 800bd28:	f023 030a 	bic.w	r3, r3, #10
 800bd2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bd2e:	697a      	ldr	r2, [r7, #20]
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	4313      	orrs	r3, r2
 800bd34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	693a      	ldr	r2, [r7, #16]
 800bd3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	697a      	ldr	r2, [r7, #20]
 800bd40:	621a      	str	r2, [r3, #32]
}
 800bd42:	bf00      	nop
 800bd44:	371c      	adds	r7, #28
 800bd46:	46bd      	mov	sp, r7
 800bd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4c:	4770      	bx	lr

0800bd4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bd4e:	b480      	push	{r7}
 800bd50:	b087      	sub	sp, #28
 800bd52:	af00      	add	r7, sp, #0
 800bd54:	60f8      	str	r0, [r7, #12]
 800bd56:	60b9      	str	r1, [r7, #8]
 800bd58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	6a1b      	ldr	r3, [r3, #32]
 800bd5e:	f023 0210 	bic.w	r2, r3, #16
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	699b      	ldr	r3, [r3, #24]
 800bd6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	6a1b      	ldr	r3, [r3, #32]
 800bd70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bd72:	697b      	ldr	r3, [r7, #20]
 800bd74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bd78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	031b      	lsls	r3, r3, #12
 800bd7e:	697a      	ldr	r2, [r7, #20]
 800bd80:	4313      	orrs	r3, r2
 800bd82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bd84:	693b      	ldr	r3, [r7, #16]
 800bd86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bd8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	011b      	lsls	r3, r3, #4
 800bd90:	693a      	ldr	r2, [r7, #16]
 800bd92:	4313      	orrs	r3, r2
 800bd94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	697a      	ldr	r2, [r7, #20]
 800bd9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	693a      	ldr	r2, [r7, #16]
 800bda0:	621a      	str	r2, [r3, #32]
}
 800bda2:	bf00      	nop
 800bda4:	371c      	adds	r7, #28
 800bda6:	46bd      	mov	sp, r7
 800bda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdac:	4770      	bx	lr
	...

0800bdb0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bdb0:	b480      	push	{r7}
 800bdb2:	b085      	sub	sp, #20
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
 800bdb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	689b      	ldr	r3, [r3, #8]
 800bdbe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bdc0:	68fa      	ldr	r2, [r7, #12]
 800bdc2:	4b09      	ldr	r3, [pc, #36]	; (800bde8 <TIM_ITRx_SetConfig+0x38>)
 800bdc4:	4013      	ands	r3, r2
 800bdc6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bdc8:	683a      	ldr	r2, [r7, #0]
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	4313      	orrs	r3, r2
 800bdce:	f043 0307 	orr.w	r3, r3, #7
 800bdd2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	68fa      	ldr	r2, [r7, #12]
 800bdd8:	609a      	str	r2, [r3, #8]
}
 800bdda:	bf00      	nop
 800bddc:	3714      	adds	r7, #20
 800bdde:	46bd      	mov	sp, r7
 800bde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde4:	4770      	bx	lr
 800bde6:	bf00      	nop
 800bde8:	ffcfff8f 	.word	0xffcfff8f

0800bdec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bdec:	b480      	push	{r7}
 800bdee:	b087      	sub	sp, #28
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	60f8      	str	r0, [r7, #12]
 800bdf4:	60b9      	str	r1, [r7, #8]
 800bdf6:	607a      	str	r2, [r7, #4]
 800bdf8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	689b      	ldr	r3, [r3, #8]
 800bdfe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800be00:	697b      	ldr	r3, [r7, #20]
 800be02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800be06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	021a      	lsls	r2, r3, #8
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	431a      	orrs	r2, r3
 800be10:	68bb      	ldr	r3, [r7, #8]
 800be12:	4313      	orrs	r3, r2
 800be14:	697a      	ldr	r2, [r7, #20]
 800be16:	4313      	orrs	r3, r2
 800be18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	697a      	ldr	r2, [r7, #20]
 800be1e:	609a      	str	r2, [r3, #8]
}
 800be20:	bf00      	nop
 800be22:	371c      	adds	r7, #28
 800be24:	46bd      	mov	sp, r7
 800be26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2a:	4770      	bx	lr

0800be2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800be2c:	b480      	push	{r7}
 800be2e:	b087      	sub	sp, #28
 800be30:	af00      	add	r7, sp, #0
 800be32:	60f8      	str	r0, [r7, #12]
 800be34:	60b9      	str	r1, [r7, #8]
 800be36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800be38:	68bb      	ldr	r3, [r7, #8]
 800be3a:	f003 031f 	and.w	r3, r3, #31
 800be3e:	2201      	movs	r2, #1
 800be40:	fa02 f303 	lsl.w	r3, r2, r3
 800be44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	6a1a      	ldr	r2, [r3, #32]
 800be4a:	697b      	ldr	r3, [r7, #20]
 800be4c:	43db      	mvns	r3, r3
 800be4e:	401a      	ands	r2, r3
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	6a1a      	ldr	r2, [r3, #32]
 800be58:	68bb      	ldr	r3, [r7, #8]
 800be5a:	f003 031f 	and.w	r3, r3, #31
 800be5e:	6879      	ldr	r1, [r7, #4]
 800be60:	fa01 f303 	lsl.w	r3, r1, r3
 800be64:	431a      	orrs	r2, r3
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	621a      	str	r2, [r3, #32]
}
 800be6a:	bf00      	nop
 800be6c:	371c      	adds	r7, #28
 800be6e:	46bd      	mov	sp, r7
 800be70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be74:	4770      	bx	lr
	...

0800be78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800be78:	b480      	push	{r7}
 800be7a:	b085      	sub	sp, #20
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
 800be80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800be88:	2b01      	cmp	r3, #1
 800be8a:	d101      	bne.n	800be90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800be8c:	2302      	movs	r3, #2
 800be8e:	e077      	b.n	800bf80 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2201      	movs	r2, #1
 800be94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2202      	movs	r2, #2
 800be9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	685b      	ldr	r3, [r3, #4]
 800bea6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	689b      	ldr	r3, [r3, #8]
 800beae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	4a35      	ldr	r2, [pc, #212]	; (800bf8c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800beb6:	4293      	cmp	r3, r2
 800beb8:	d004      	beq.n	800bec4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	4a34      	ldr	r2, [pc, #208]	; (800bf90 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bec0:	4293      	cmp	r3, r2
 800bec2:	d108      	bne.n	800bed6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800beca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	685b      	ldr	r3, [r3, #4]
 800bed0:	68fa      	ldr	r2, [r7, #12]
 800bed2:	4313      	orrs	r3, r2
 800bed4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bedc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	68fa      	ldr	r2, [r7, #12]
 800bee4:	4313      	orrs	r3, r2
 800bee6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	68fa      	ldr	r2, [r7, #12]
 800beee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	4a25      	ldr	r2, [pc, #148]	; (800bf8c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bef6:	4293      	cmp	r3, r2
 800bef8:	d02c      	beq.n	800bf54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf02:	d027      	beq.n	800bf54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	4a22      	ldr	r2, [pc, #136]	; (800bf94 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800bf0a:	4293      	cmp	r3, r2
 800bf0c:	d022      	beq.n	800bf54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	4a21      	ldr	r2, [pc, #132]	; (800bf98 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800bf14:	4293      	cmp	r3, r2
 800bf16:	d01d      	beq.n	800bf54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	4a1f      	ldr	r2, [pc, #124]	; (800bf9c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800bf1e:	4293      	cmp	r3, r2
 800bf20:	d018      	beq.n	800bf54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	4a1a      	ldr	r2, [pc, #104]	; (800bf90 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bf28:	4293      	cmp	r3, r2
 800bf2a:	d013      	beq.n	800bf54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	4a1b      	ldr	r2, [pc, #108]	; (800bfa0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800bf32:	4293      	cmp	r3, r2
 800bf34:	d00e      	beq.n	800bf54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	4a1a      	ldr	r2, [pc, #104]	; (800bfa4 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800bf3c:	4293      	cmp	r3, r2
 800bf3e:	d009      	beq.n	800bf54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	4a18      	ldr	r2, [pc, #96]	; (800bfa8 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800bf46:	4293      	cmp	r3, r2
 800bf48:	d004      	beq.n	800bf54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	4a17      	ldr	r2, [pc, #92]	; (800bfac <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800bf50:	4293      	cmp	r3, r2
 800bf52:	d10c      	bne.n	800bf6e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bf5a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	689b      	ldr	r3, [r3, #8]
 800bf60:	68ba      	ldr	r2, [r7, #8]
 800bf62:	4313      	orrs	r3, r2
 800bf64:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	68ba      	ldr	r2, [r7, #8]
 800bf6c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2201      	movs	r2, #1
 800bf72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	2200      	movs	r2, #0
 800bf7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bf7e:	2300      	movs	r3, #0
}
 800bf80:	4618      	mov	r0, r3
 800bf82:	3714      	adds	r7, #20
 800bf84:	46bd      	mov	sp, r7
 800bf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8a:	4770      	bx	lr
 800bf8c:	40010000 	.word	0x40010000
 800bf90:	40010400 	.word	0x40010400
 800bf94:	40000400 	.word	0x40000400
 800bf98:	40000800 	.word	0x40000800
 800bf9c:	40000c00 	.word	0x40000c00
 800bfa0:	40001800 	.word	0x40001800
 800bfa4:	40014000 	.word	0x40014000
 800bfa8:	4000e000 	.word	0x4000e000
 800bfac:	4000e400 	.word	0x4000e400

0800bfb0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	b085      	sub	sp, #20
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
 800bfb8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bfba:	2300      	movs	r3, #0
 800bfbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bfc4:	2b01      	cmp	r3, #1
 800bfc6:	d101      	bne.n	800bfcc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bfc8:	2302      	movs	r3, #2
 800bfca:	e087      	b.n	800c0dc <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2201      	movs	r2, #1
 800bfd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	68db      	ldr	r3, [r3, #12]
 800bfde:	4313      	orrs	r3, r2
 800bfe0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	689b      	ldr	r3, [r3, #8]
 800bfec:	4313      	orrs	r3, r2
 800bfee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	685b      	ldr	r3, [r3, #4]
 800bffa:	4313      	orrs	r3, r2
 800bffc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	4313      	orrs	r3, r2
 800c00a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	691b      	ldr	r3, [r3, #16]
 800c016:	4313      	orrs	r3, r2
 800c018:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c020:	683b      	ldr	r3, [r7, #0]
 800c022:	695b      	ldr	r3, [r3, #20]
 800c024:	4313      	orrs	r3, r2
 800c026:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c032:	4313      	orrs	r3, r2
 800c034:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	699b      	ldr	r3, [r3, #24]
 800c040:	041b      	lsls	r3, r3, #16
 800c042:	4313      	orrs	r3, r2
 800c044:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	4a27      	ldr	r2, [pc, #156]	; (800c0e8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c04c:	4293      	cmp	r3, r2
 800c04e:	d004      	beq.n	800c05a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	4a25      	ldr	r2, [pc, #148]	; (800c0ec <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c056:	4293      	cmp	r3, r2
 800c058:	d106      	bne.n	800c068 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	69db      	ldr	r3, [r3, #28]
 800c064:	4313      	orrs	r3, r2
 800c066:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	4a1e      	ldr	r2, [pc, #120]	; (800c0e8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c06e:	4293      	cmp	r3, r2
 800c070:	d004      	beq.n	800c07c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	4a1d      	ldr	r2, [pc, #116]	; (800c0ec <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c078:	4293      	cmp	r3, r2
 800c07a:	d126      	bne.n	800c0ca <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c086:	051b      	lsls	r3, r3, #20
 800c088:	4313      	orrs	r3, r2
 800c08a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	6a1b      	ldr	r3, [r3, #32]
 800c096:	4313      	orrs	r3, r2
 800c098:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0a4:	4313      	orrs	r3, r2
 800c0a6:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	4a0e      	ldr	r2, [pc, #56]	; (800c0e8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c0ae:	4293      	cmp	r3, r2
 800c0b0:	d004      	beq.n	800c0bc <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	4a0d      	ldr	r2, [pc, #52]	; (800c0ec <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c0b8:	4293      	cmp	r3, r2
 800c0ba:	d106      	bne.n	800c0ca <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0c6:	4313      	orrs	r3, r2
 800c0c8:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	68fa      	ldr	r2, [r7, #12]
 800c0d0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c0da:	2300      	movs	r3, #0
}
 800c0dc:	4618      	mov	r0, r3
 800c0de:	3714      	adds	r7, #20
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e6:	4770      	bx	lr
 800c0e8:	40010000 	.word	0x40010000
 800c0ec:	40010400 	.word	0x40010400

0800c0f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c0f0:	b480      	push	{r7}
 800c0f2:	b083      	sub	sp, #12
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c0f8:	bf00      	nop
 800c0fa:	370c      	adds	r7, #12
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c102:	4770      	bx	lr

0800c104 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c104:	b480      	push	{r7}
 800c106:	b083      	sub	sp, #12
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c10c:	bf00      	nop
 800c10e:	370c      	adds	r7, #12
 800c110:	46bd      	mov	sp, r7
 800c112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c116:	4770      	bx	lr

0800c118 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c118:	b480      	push	{r7}
 800c11a:	b083      	sub	sp, #12
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c120:	bf00      	nop
 800c122:	370c      	adds	r7, #12
 800c124:	46bd      	mov	sp, r7
 800c126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12a:	4770      	bx	lr

0800c12c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b082      	sub	sp, #8
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d101      	bne.n	800c13e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c13a:	2301      	movs	r3, #1
 800c13c:	e042      	b.n	800c1c4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c144:	2b00      	cmp	r3, #0
 800c146:	d106      	bne.n	800c156 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	2200      	movs	r2, #0
 800c14c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c150:	6878      	ldr	r0, [r7, #4]
 800c152:	f7f8 fa41 	bl	80045d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2224      	movs	r2, #36	; 0x24
 800c15a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	681a      	ldr	r2, [r3, #0]
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	f022 0201 	bic.w	r2, r2, #1
 800c16c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f000 fcdc 	bl	800cb2c <UART_SetConfig>
 800c174:	4603      	mov	r3, r0
 800c176:	2b01      	cmp	r3, #1
 800c178:	d101      	bne.n	800c17e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c17a:	2301      	movs	r3, #1
 800c17c:	e022      	b.n	800c1c4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c182:	2b00      	cmp	r3, #0
 800c184:	d002      	beq.n	800c18c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c186:	6878      	ldr	r0, [r7, #4]
 800c188:	f001 fb3c 	bl	800d804 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	685a      	ldr	r2, [r3, #4]
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c19a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	689a      	ldr	r2, [r3, #8]
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c1aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	681a      	ldr	r2, [r3, #0]
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	f042 0201 	orr.w	r2, r2, #1
 800c1ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f001 fbc3 	bl	800d948 <UART_CheckIdleState>
 800c1c2:	4603      	mov	r3, r0
}
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	3708      	adds	r7, #8
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	bd80      	pop	{r7, pc}

0800c1cc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b08a      	sub	sp, #40	; 0x28
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	60f8      	str	r0, [r7, #12]
 800c1d4:	60b9      	str	r1, [r7, #8]
 800c1d6:	4613      	mov	r3, r2
 800c1d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1e0:	2b20      	cmp	r3, #32
 800c1e2:	d167      	bne.n	800c2b4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d002      	beq.n	800c1f0 <HAL_UART_Transmit_DMA+0x24>
 800c1ea:	88fb      	ldrh	r3, [r7, #6]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d101      	bne.n	800c1f4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	e060      	b.n	800c2b6 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	68ba      	ldr	r2, [r7, #8]
 800c1f8:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	88fa      	ldrh	r2, [r7, #6]
 800c1fe:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	88fa      	ldrh	r2, [r7, #6]
 800c206:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	2200      	movs	r2, #0
 800c20e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	2221      	movs	r2, #33	; 0x21
 800c216:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d028      	beq.n	800c274 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c226:	4a26      	ldr	r2, [pc, #152]	; (800c2c0 <HAL_UART_Transmit_DMA+0xf4>)
 800c228:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c22e:	4a25      	ldr	r2, [pc, #148]	; (800c2c4 <HAL_UART_Transmit_DMA+0xf8>)
 800c230:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c236:	4a24      	ldr	r2, [pc, #144]	; (800c2c8 <HAL_UART_Transmit_DMA+0xfc>)
 800c238:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c23e:	2200      	movs	r2, #0
 800c240:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c24a:	4619      	mov	r1, r3
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	3328      	adds	r3, #40	; 0x28
 800c252:	461a      	mov	r2, r3
 800c254:	88fb      	ldrh	r3, [r7, #6]
 800c256:	f7f9 f8f1 	bl	800543c <HAL_DMA_Start_IT>
 800c25a:	4603      	mov	r3, r0
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d009      	beq.n	800c274 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	2210      	movs	r2, #16
 800c264:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	2220      	movs	r2, #32
 800c26c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800c270:	2301      	movs	r3, #1
 800c272:	e020      	b.n	800c2b6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	2240      	movs	r2, #64	; 0x40
 800c27a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	3308      	adds	r3, #8
 800c282:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c284:	697b      	ldr	r3, [r7, #20]
 800c286:	e853 3f00 	ldrex	r3, [r3]
 800c28a:	613b      	str	r3, [r7, #16]
   return(result);
 800c28c:	693b      	ldr	r3, [r7, #16]
 800c28e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c292:	627b      	str	r3, [r7, #36]	; 0x24
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	3308      	adds	r3, #8
 800c29a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c29c:	623a      	str	r2, [r7, #32]
 800c29e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2a0:	69f9      	ldr	r1, [r7, #28]
 800c2a2:	6a3a      	ldr	r2, [r7, #32]
 800c2a4:	e841 2300 	strex	r3, r2, [r1]
 800c2a8:	61bb      	str	r3, [r7, #24]
   return(result);
 800c2aa:	69bb      	ldr	r3, [r7, #24]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d1e5      	bne.n	800c27c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	e000      	b.n	800c2b6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800c2b4:	2302      	movs	r3, #2
  }
}
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	3728      	adds	r7, #40	; 0x28
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	bd80      	pop	{r7, pc}
 800c2be:	bf00      	nop
 800c2c0:	0800de09 	.word	0x0800de09
 800c2c4:	0800de9f 	.word	0x0800de9f
 800c2c8:	0800e021 	.word	0x0800e021

0800c2cc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b08a      	sub	sp, #40	; 0x28
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	60f8      	str	r0, [r7, #12]
 800c2d4:	60b9      	str	r1, [r7, #8]
 800c2d6:	4613      	mov	r3, r2
 800c2d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2e0:	2b20      	cmp	r3, #32
 800c2e2:	d137      	bne.n	800c354 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d002      	beq.n	800c2f0 <HAL_UART_Receive_DMA+0x24>
 800c2ea:	88fb      	ldrh	r3, [r7, #6]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d101      	bne.n	800c2f4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800c2f0:	2301      	movs	r3, #1
 800c2f2:	e030      	b.n	800c356 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	4a18      	ldr	r2, [pc, #96]	; (800c360 <HAL_UART_Receive_DMA+0x94>)
 800c300:	4293      	cmp	r3, r2
 800c302:	d01f      	beq.n	800c344 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	685b      	ldr	r3, [r3, #4]
 800c30a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d018      	beq.n	800c344 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c318:	697b      	ldr	r3, [r7, #20]
 800c31a:	e853 3f00 	ldrex	r3, [r3]
 800c31e:	613b      	str	r3, [r7, #16]
   return(result);
 800c320:	693b      	ldr	r3, [r7, #16]
 800c322:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c326:	627b      	str	r3, [r7, #36]	; 0x24
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	461a      	mov	r2, r3
 800c32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c330:	623b      	str	r3, [r7, #32]
 800c332:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c334:	69f9      	ldr	r1, [r7, #28]
 800c336:	6a3a      	ldr	r2, [r7, #32]
 800c338:	e841 2300 	strex	r3, r2, [r1]
 800c33c:	61bb      	str	r3, [r7, #24]
   return(result);
 800c33e:	69bb      	ldr	r3, [r7, #24]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d1e6      	bne.n	800c312 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c344:	88fb      	ldrh	r3, [r7, #6]
 800c346:	461a      	mov	r2, r3
 800c348:	68b9      	ldr	r1, [r7, #8]
 800c34a:	68f8      	ldr	r0, [r7, #12]
 800c34c:	f001 fc0e 	bl	800db6c <UART_Start_Receive_DMA>
 800c350:	4603      	mov	r3, r0
 800c352:	e000      	b.n	800c356 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c354:	2302      	movs	r3, #2
  }
}
 800c356:	4618      	mov	r0, r3
 800c358:	3728      	adds	r7, #40	; 0x28
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd80      	pop	{r7, pc}
 800c35e:	bf00      	nop
 800c360:	58000c00 	.word	0x58000c00

0800c364 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b0ba      	sub	sp, #232	; 0xe8
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	69db      	ldr	r3, [r3, #28]
 800c372:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	689b      	ldr	r3, [r3, #8]
 800c386:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c38a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c38e:	f640 030f 	movw	r3, #2063	; 0x80f
 800c392:	4013      	ands	r3, r2
 800c394:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c398:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d11b      	bne.n	800c3d8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c3a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3a4:	f003 0320 	and.w	r3, r3, #32
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d015      	beq.n	800c3d8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c3ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3b0:	f003 0320 	and.w	r3, r3, #32
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d105      	bne.n	800c3c4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c3b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c3bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d009      	beq.n	800c3d8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	f000 8377 	beq.w	800cabc <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	4798      	blx	r3
      }
      return;
 800c3d6:	e371      	b.n	800cabc <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c3d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	f000 8123 	beq.w	800c628 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c3e2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c3e6:	4b8d      	ldr	r3, [pc, #564]	; (800c61c <HAL_UART_IRQHandler+0x2b8>)
 800c3e8:	4013      	ands	r3, r2
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d106      	bne.n	800c3fc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c3ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c3f2:	4b8b      	ldr	r3, [pc, #556]	; (800c620 <HAL_UART_IRQHandler+0x2bc>)
 800c3f4:	4013      	ands	r3, r2
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	f000 8116 	beq.w	800c628 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c3fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c400:	f003 0301 	and.w	r3, r3, #1
 800c404:	2b00      	cmp	r3, #0
 800c406:	d011      	beq.n	800c42c <HAL_UART_IRQHandler+0xc8>
 800c408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c40c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c410:	2b00      	cmp	r3, #0
 800c412:	d00b      	beq.n	800c42c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	2201      	movs	r2, #1
 800c41a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c422:	f043 0201 	orr.w	r2, r3, #1
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c42c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c430:	f003 0302 	and.w	r3, r3, #2
 800c434:	2b00      	cmp	r3, #0
 800c436:	d011      	beq.n	800c45c <HAL_UART_IRQHandler+0xf8>
 800c438:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c43c:	f003 0301 	and.w	r3, r3, #1
 800c440:	2b00      	cmp	r3, #0
 800c442:	d00b      	beq.n	800c45c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	2202      	movs	r2, #2
 800c44a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c452:	f043 0204 	orr.w	r2, r3, #4
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c45c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c460:	f003 0304 	and.w	r3, r3, #4
 800c464:	2b00      	cmp	r3, #0
 800c466:	d011      	beq.n	800c48c <HAL_UART_IRQHandler+0x128>
 800c468:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c46c:	f003 0301 	and.w	r3, r3, #1
 800c470:	2b00      	cmp	r3, #0
 800c472:	d00b      	beq.n	800c48c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	2204      	movs	r2, #4
 800c47a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c482:	f043 0202 	orr.w	r2, r3, #2
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c48c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c490:	f003 0308 	and.w	r3, r3, #8
 800c494:	2b00      	cmp	r3, #0
 800c496:	d017      	beq.n	800c4c8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c49c:	f003 0320 	and.w	r3, r3, #32
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d105      	bne.n	800c4b0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c4a4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c4a8:	4b5c      	ldr	r3, [pc, #368]	; (800c61c <HAL_UART_IRQHandler+0x2b8>)
 800c4aa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d00b      	beq.n	800c4c8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	2208      	movs	r2, #8
 800c4b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4be:	f043 0208 	orr.w	r2, r3, #8
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c4c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d012      	beq.n	800c4fa <HAL_UART_IRQHandler+0x196>
 800c4d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c4d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d00c      	beq.n	800c4fa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c4e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4f0:	f043 0220 	orr.w	r2, r3, #32
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c500:	2b00      	cmp	r3, #0
 800c502:	f000 82dd 	beq.w	800cac0 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c50a:	f003 0320 	and.w	r3, r3, #32
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d013      	beq.n	800c53a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c512:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c516:	f003 0320 	and.w	r3, r3, #32
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d105      	bne.n	800c52a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c51e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c526:	2b00      	cmp	r3, #0
 800c528:	d007      	beq.n	800c53a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d003      	beq.n	800c53a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c536:	6878      	ldr	r0, [r7, #4]
 800c538:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c540:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	689b      	ldr	r3, [r3, #8]
 800c54a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c54e:	2b40      	cmp	r3, #64	; 0x40
 800c550:	d005      	beq.n	800c55e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c552:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c556:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d054      	beq.n	800c608 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c55e:	6878      	ldr	r0, [r7, #4]
 800c560:	f001 fbec 	bl	800dd3c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	689b      	ldr	r3, [r3, #8]
 800c56a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c56e:	2b40      	cmp	r3, #64	; 0x40
 800c570:	d146      	bne.n	800c600 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	3308      	adds	r3, #8
 800c578:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c57c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c580:	e853 3f00 	ldrex	r3, [r3]
 800c584:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c588:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c58c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c590:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	3308      	adds	r3, #8
 800c59a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c59e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c5a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c5aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c5ae:	e841 2300 	strex	r3, r2, [r1]
 800c5b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c5b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d1d9      	bne.n	800c572 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d017      	beq.n	800c5f8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c5ce:	4a15      	ldr	r2, [pc, #84]	; (800c624 <HAL_UART_IRQHandler+0x2c0>)
 800c5d0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c5d8:	4618      	mov	r0, r3
 800c5da:	f7f9 fcb7 	bl	8005f4c <HAL_DMA_Abort_IT>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d019      	beq.n	800c618 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c5ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5ec:	687a      	ldr	r2, [r7, #4]
 800c5ee:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800c5f2:	4610      	mov	r0, r2
 800c5f4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c5f6:	e00f      	b.n	800c618 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c5f8:	6878      	ldr	r0, [r7, #4]
 800c5fa:	f000 fa81 	bl	800cb00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c5fe:	e00b      	b.n	800c618 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c600:	6878      	ldr	r0, [r7, #4]
 800c602:	f000 fa7d 	bl	800cb00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c606:	e007      	b.n	800c618 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	f000 fa79 	bl	800cb00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	2200      	movs	r2, #0
 800c612:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800c616:	e253      	b.n	800cac0 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c618:	bf00      	nop
    return;
 800c61a:	e251      	b.n	800cac0 <HAL_UART_IRQHandler+0x75c>
 800c61c:	10000001 	.word	0x10000001
 800c620:	04000120 	.word	0x04000120
 800c624:	0800e0a1 	.word	0x0800e0a1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c62c:	2b01      	cmp	r3, #1
 800c62e:	f040 81e7 	bne.w	800ca00 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c636:	f003 0310 	and.w	r3, r3, #16
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	f000 81e0 	beq.w	800ca00 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c640:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c644:	f003 0310 	and.w	r3, r3, #16
 800c648:	2b00      	cmp	r3, #0
 800c64a:	f000 81d9 	beq.w	800ca00 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	2210      	movs	r2, #16
 800c654:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	689b      	ldr	r3, [r3, #8]
 800c65c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c660:	2b40      	cmp	r3, #64	; 0x40
 800c662:	f040 8151 	bne.w	800c908 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	4a96      	ldr	r2, [pc, #600]	; (800c8c8 <HAL_UART_IRQHandler+0x564>)
 800c670:	4293      	cmp	r3, r2
 800c672:	d068      	beq.n	800c746 <HAL_UART_IRQHandler+0x3e2>
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	4a93      	ldr	r2, [pc, #588]	; (800c8cc <HAL_UART_IRQHandler+0x568>)
 800c67e:	4293      	cmp	r3, r2
 800c680:	d061      	beq.n	800c746 <HAL_UART_IRQHandler+0x3e2>
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	4a91      	ldr	r2, [pc, #580]	; (800c8d0 <HAL_UART_IRQHandler+0x56c>)
 800c68c:	4293      	cmp	r3, r2
 800c68e:	d05a      	beq.n	800c746 <HAL_UART_IRQHandler+0x3e2>
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	4a8e      	ldr	r2, [pc, #568]	; (800c8d4 <HAL_UART_IRQHandler+0x570>)
 800c69a:	4293      	cmp	r3, r2
 800c69c:	d053      	beq.n	800c746 <HAL_UART_IRQHandler+0x3e2>
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	4a8c      	ldr	r2, [pc, #560]	; (800c8d8 <HAL_UART_IRQHandler+0x574>)
 800c6a8:	4293      	cmp	r3, r2
 800c6aa:	d04c      	beq.n	800c746 <HAL_UART_IRQHandler+0x3e2>
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	4a89      	ldr	r2, [pc, #548]	; (800c8dc <HAL_UART_IRQHandler+0x578>)
 800c6b6:	4293      	cmp	r3, r2
 800c6b8:	d045      	beq.n	800c746 <HAL_UART_IRQHandler+0x3e2>
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	4a87      	ldr	r2, [pc, #540]	; (800c8e0 <HAL_UART_IRQHandler+0x57c>)
 800c6c4:	4293      	cmp	r3, r2
 800c6c6:	d03e      	beq.n	800c746 <HAL_UART_IRQHandler+0x3e2>
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	4a84      	ldr	r2, [pc, #528]	; (800c8e4 <HAL_UART_IRQHandler+0x580>)
 800c6d2:	4293      	cmp	r3, r2
 800c6d4:	d037      	beq.n	800c746 <HAL_UART_IRQHandler+0x3e2>
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	4a82      	ldr	r2, [pc, #520]	; (800c8e8 <HAL_UART_IRQHandler+0x584>)
 800c6e0:	4293      	cmp	r3, r2
 800c6e2:	d030      	beq.n	800c746 <HAL_UART_IRQHandler+0x3e2>
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	4a7f      	ldr	r2, [pc, #508]	; (800c8ec <HAL_UART_IRQHandler+0x588>)
 800c6ee:	4293      	cmp	r3, r2
 800c6f0:	d029      	beq.n	800c746 <HAL_UART_IRQHandler+0x3e2>
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	4a7d      	ldr	r2, [pc, #500]	; (800c8f0 <HAL_UART_IRQHandler+0x58c>)
 800c6fc:	4293      	cmp	r3, r2
 800c6fe:	d022      	beq.n	800c746 <HAL_UART_IRQHandler+0x3e2>
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	4a7a      	ldr	r2, [pc, #488]	; (800c8f4 <HAL_UART_IRQHandler+0x590>)
 800c70a:	4293      	cmp	r3, r2
 800c70c:	d01b      	beq.n	800c746 <HAL_UART_IRQHandler+0x3e2>
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	4a78      	ldr	r2, [pc, #480]	; (800c8f8 <HAL_UART_IRQHandler+0x594>)
 800c718:	4293      	cmp	r3, r2
 800c71a:	d014      	beq.n	800c746 <HAL_UART_IRQHandler+0x3e2>
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	4a75      	ldr	r2, [pc, #468]	; (800c8fc <HAL_UART_IRQHandler+0x598>)
 800c726:	4293      	cmp	r3, r2
 800c728:	d00d      	beq.n	800c746 <HAL_UART_IRQHandler+0x3e2>
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	4a73      	ldr	r2, [pc, #460]	; (800c900 <HAL_UART_IRQHandler+0x59c>)
 800c734:	4293      	cmp	r3, r2
 800c736:	d006      	beq.n	800c746 <HAL_UART_IRQHandler+0x3e2>
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	4a70      	ldr	r2, [pc, #448]	; (800c904 <HAL_UART_IRQHandler+0x5a0>)
 800c742:	4293      	cmp	r3, r2
 800c744:	d106      	bne.n	800c754 <HAL_UART_IRQHandler+0x3f0>
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	685b      	ldr	r3, [r3, #4]
 800c750:	b29b      	uxth	r3, r3
 800c752:	e005      	b.n	800c760 <HAL_UART_IRQHandler+0x3fc>
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	685b      	ldr	r3, [r3, #4]
 800c75e:	b29b      	uxth	r3, r3
 800c760:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c764:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c768:	2b00      	cmp	r3, #0
 800c76a:	f000 81ab 	beq.w	800cac4 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c774:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c778:	429a      	cmp	r2, r3
 800c77a:	f080 81a3 	bcs.w	800cac4 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c784:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c78e:	69db      	ldr	r3, [r3, #28]
 800c790:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c794:	f000 8087 	beq.w	800c8a6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c7a4:	e853 3f00 	ldrex	r3, [r3]
 800c7a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c7ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c7b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c7b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	461a      	mov	r2, r3
 800c7be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c7c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c7c6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c7ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c7d2:	e841 2300 	strex	r3, r2, [r1]
 800c7d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c7da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d1da      	bne.n	800c798 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	3308      	adds	r3, #8
 800c7e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c7ec:	e853 3f00 	ldrex	r3, [r3]
 800c7f0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c7f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c7f4:	f023 0301 	bic.w	r3, r3, #1
 800c7f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	3308      	adds	r3, #8
 800c802:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c806:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c80a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c80c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c80e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c812:	e841 2300 	strex	r3, r2, [r1]
 800c816:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c818:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d1e1      	bne.n	800c7e2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	3308      	adds	r3, #8
 800c824:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c826:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c828:	e853 3f00 	ldrex	r3, [r3]
 800c82c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c82e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c830:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c834:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	3308      	adds	r3, #8
 800c83e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c842:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c844:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c846:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c848:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c84a:	e841 2300 	strex	r3, r2, [r1]
 800c84e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c850:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c852:	2b00      	cmp	r3, #0
 800c854:	d1e3      	bne.n	800c81e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2220      	movs	r2, #32
 800c85a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	2200      	movs	r2, #0
 800c862:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c86a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c86c:	e853 3f00 	ldrex	r3, [r3]
 800c870:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c872:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c874:	f023 0310 	bic.w	r3, r3, #16
 800c878:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	461a      	mov	r2, r3
 800c882:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c886:	65bb      	str	r3, [r7, #88]	; 0x58
 800c888:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c88a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c88c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c88e:	e841 2300 	strex	r3, r2, [r1]
 800c892:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c894:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c896:	2b00      	cmp	r3, #0
 800c898:	d1e4      	bne.n	800c864 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	f7f9 f835 	bl	8005910 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2202      	movs	r2, #2
 800c8aa:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c8b8:	b29b      	uxth	r3, r3
 800c8ba:	1ad3      	subs	r3, r2, r3
 800c8bc:	b29b      	uxth	r3, r3
 800c8be:	4619      	mov	r1, r3
 800c8c0:	6878      	ldr	r0, [r7, #4]
 800c8c2:	f000 f927 	bl	800cb14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c8c6:	e0fd      	b.n	800cac4 <HAL_UART_IRQHandler+0x760>
 800c8c8:	40020010 	.word	0x40020010
 800c8cc:	40020028 	.word	0x40020028
 800c8d0:	40020040 	.word	0x40020040
 800c8d4:	40020058 	.word	0x40020058
 800c8d8:	40020070 	.word	0x40020070
 800c8dc:	40020088 	.word	0x40020088
 800c8e0:	400200a0 	.word	0x400200a0
 800c8e4:	400200b8 	.word	0x400200b8
 800c8e8:	40020410 	.word	0x40020410
 800c8ec:	40020428 	.word	0x40020428
 800c8f0:	40020440 	.word	0x40020440
 800c8f4:	40020458 	.word	0x40020458
 800c8f8:	40020470 	.word	0x40020470
 800c8fc:	40020488 	.word	0x40020488
 800c900:	400204a0 	.word	0x400204a0
 800c904:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c914:	b29b      	uxth	r3, r3
 800c916:	1ad3      	subs	r3, r2, r3
 800c918:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c922:	b29b      	uxth	r3, r3
 800c924:	2b00      	cmp	r3, #0
 800c926:	f000 80cf 	beq.w	800cac8 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800c92a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c92e:	2b00      	cmp	r3, #0
 800c930:	f000 80ca 	beq.w	800cac8 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c93a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c93c:	e853 3f00 	ldrex	r3, [r3]
 800c940:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c944:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c948:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	461a      	mov	r2, r3
 800c952:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c956:	647b      	str	r3, [r7, #68]	; 0x44
 800c958:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c95a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c95c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c95e:	e841 2300 	strex	r3, r2, [r1]
 800c962:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c966:	2b00      	cmp	r3, #0
 800c968:	d1e4      	bne.n	800c934 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	3308      	adds	r3, #8
 800c970:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c974:	e853 3f00 	ldrex	r3, [r3]
 800c978:	623b      	str	r3, [r7, #32]
   return(result);
 800c97a:	6a3a      	ldr	r2, [r7, #32]
 800c97c:	4b55      	ldr	r3, [pc, #340]	; (800cad4 <HAL_UART_IRQHandler+0x770>)
 800c97e:	4013      	ands	r3, r2
 800c980:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	3308      	adds	r3, #8
 800c98a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c98e:	633a      	str	r2, [r7, #48]	; 0x30
 800c990:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c992:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c994:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c996:	e841 2300 	strex	r3, r2, [r1]
 800c99a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c99c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d1e3      	bne.n	800c96a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	2220      	movs	r2, #32
 800c9a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9bc:	693b      	ldr	r3, [r7, #16]
 800c9be:	e853 3f00 	ldrex	r3, [r3]
 800c9c2:	60fb      	str	r3, [r7, #12]
   return(result);
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	f023 0310 	bic.w	r3, r3, #16
 800c9ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	461a      	mov	r2, r3
 800c9d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c9d8:	61fb      	str	r3, [r7, #28]
 800c9da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9dc:	69b9      	ldr	r1, [r7, #24]
 800c9de:	69fa      	ldr	r2, [r7, #28]
 800c9e0:	e841 2300 	strex	r3, r2, [r1]
 800c9e4:	617b      	str	r3, [r7, #20]
   return(result);
 800c9e6:	697b      	ldr	r3, [r7, #20]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d1e4      	bne.n	800c9b6 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	2202      	movs	r2, #2
 800c9f0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c9f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c9f6:	4619      	mov	r1, r3
 800c9f8:	6878      	ldr	r0, [r7, #4]
 800c9fa:	f000 f88b 	bl	800cb14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c9fe:	e063      	b.n	800cac8 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ca00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d00e      	beq.n	800ca2a <HAL_UART_IRQHandler+0x6c6>
 800ca0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ca10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d008      	beq.n	800ca2a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ca20:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ca22:	6878      	ldr	r0, [r7, #4]
 800ca24:	f001 fb7d 	bl	800e122 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ca28:	e051      	b.n	800cace <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ca2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d014      	beq.n	800ca60 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ca36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ca3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d105      	bne.n	800ca4e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ca42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ca46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d008      	beq.n	800ca60 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d03a      	beq.n	800cacc <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca5a:	6878      	ldr	r0, [r7, #4]
 800ca5c:	4798      	blx	r3
    }
    return;
 800ca5e:	e035      	b.n	800cacc <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ca60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d009      	beq.n	800ca80 <HAL_UART_IRQHandler+0x71c>
 800ca6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ca70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d003      	beq.n	800ca80 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800ca78:	6878      	ldr	r0, [r7, #4]
 800ca7a:	f001 fb27 	bl	800e0cc <UART_EndTransmit_IT>
    return;
 800ca7e:	e026      	b.n	800cace <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ca80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d009      	beq.n	800caa0 <HAL_UART_IRQHandler+0x73c>
 800ca8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ca90:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d003      	beq.n	800caa0 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ca98:	6878      	ldr	r0, [r7, #4]
 800ca9a:	f001 fb56 	bl	800e14a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ca9e:	e016      	b.n	800cace <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800caa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800caa4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d010      	beq.n	800cace <HAL_UART_IRQHandler+0x76a>
 800caac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	da0c      	bge.n	800cace <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800cab4:	6878      	ldr	r0, [r7, #4]
 800cab6:	f001 fb3e 	bl	800e136 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800caba:	e008      	b.n	800cace <HAL_UART_IRQHandler+0x76a>
      return;
 800cabc:	bf00      	nop
 800cabe:	e006      	b.n	800cace <HAL_UART_IRQHandler+0x76a>
    return;
 800cac0:	bf00      	nop
 800cac2:	e004      	b.n	800cace <HAL_UART_IRQHandler+0x76a>
      return;
 800cac4:	bf00      	nop
 800cac6:	e002      	b.n	800cace <HAL_UART_IRQHandler+0x76a>
      return;
 800cac8:	bf00      	nop
 800caca:	e000      	b.n	800cace <HAL_UART_IRQHandler+0x76a>
    return;
 800cacc:	bf00      	nop
  }
}
 800cace:	37e8      	adds	r7, #232	; 0xe8
 800cad0:	46bd      	mov	sp, r7
 800cad2:	bd80      	pop	{r7, pc}
 800cad4:	effffffe 	.word	0xeffffffe

0800cad8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cad8:	b480      	push	{r7}
 800cada:	b083      	sub	sp, #12
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800cae0:	bf00      	nop
 800cae2:	370c      	adds	r7, #12
 800cae4:	46bd      	mov	sp, r7
 800cae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caea:	4770      	bx	lr

0800caec <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800caec:	b480      	push	{r7}
 800caee:	b083      	sub	sp, #12
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800caf4:	bf00      	nop
 800caf6:	370c      	adds	r7, #12
 800caf8:	46bd      	mov	sp, r7
 800cafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafe:	4770      	bx	lr

0800cb00 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cb00:	b480      	push	{r7}
 800cb02:	b083      	sub	sp, #12
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800cb08:	bf00      	nop
 800cb0a:	370c      	adds	r7, #12
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb12:	4770      	bx	lr

0800cb14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cb14:	b480      	push	{r7}
 800cb16:	b083      	sub	sp, #12
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
 800cb1c:	460b      	mov	r3, r1
 800cb1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cb20:	bf00      	nop
 800cb22:	370c      	adds	r7, #12
 800cb24:	46bd      	mov	sp, r7
 800cb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2a:	4770      	bx	lr

0800cb2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cb2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cb30:	b092      	sub	sp, #72	; 0x48
 800cb32:	af00      	add	r7, sp, #0
 800cb34:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cb36:	2300      	movs	r3, #0
 800cb38:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cb3c:	697b      	ldr	r3, [r7, #20]
 800cb3e:	689a      	ldr	r2, [r3, #8]
 800cb40:	697b      	ldr	r3, [r7, #20]
 800cb42:	691b      	ldr	r3, [r3, #16]
 800cb44:	431a      	orrs	r2, r3
 800cb46:	697b      	ldr	r3, [r7, #20]
 800cb48:	695b      	ldr	r3, [r3, #20]
 800cb4a:	431a      	orrs	r2, r3
 800cb4c:	697b      	ldr	r3, [r7, #20]
 800cb4e:	69db      	ldr	r3, [r3, #28]
 800cb50:	4313      	orrs	r3, r2
 800cb52:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cb54:	697b      	ldr	r3, [r7, #20]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	681a      	ldr	r2, [r3, #0]
 800cb5a:	4bbe      	ldr	r3, [pc, #760]	; (800ce54 <UART_SetConfig+0x328>)
 800cb5c:	4013      	ands	r3, r2
 800cb5e:	697a      	ldr	r2, [r7, #20]
 800cb60:	6812      	ldr	r2, [r2, #0]
 800cb62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cb64:	430b      	orrs	r3, r1
 800cb66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cb68:	697b      	ldr	r3, [r7, #20]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	685b      	ldr	r3, [r3, #4]
 800cb6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cb72:	697b      	ldr	r3, [r7, #20]
 800cb74:	68da      	ldr	r2, [r3, #12]
 800cb76:	697b      	ldr	r3, [r7, #20]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	430a      	orrs	r2, r1
 800cb7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cb7e:	697b      	ldr	r3, [r7, #20]
 800cb80:	699b      	ldr	r3, [r3, #24]
 800cb82:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cb84:	697b      	ldr	r3, [r7, #20]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	4ab3      	ldr	r2, [pc, #716]	; (800ce58 <UART_SetConfig+0x32c>)
 800cb8a:	4293      	cmp	r3, r2
 800cb8c:	d004      	beq.n	800cb98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cb8e:	697b      	ldr	r3, [r7, #20]
 800cb90:	6a1b      	ldr	r3, [r3, #32]
 800cb92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cb94:	4313      	orrs	r3, r2
 800cb96:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cb98:	697b      	ldr	r3, [r7, #20]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	689a      	ldr	r2, [r3, #8]
 800cb9e:	4baf      	ldr	r3, [pc, #700]	; (800ce5c <UART_SetConfig+0x330>)
 800cba0:	4013      	ands	r3, r2
 800cba2:	697a      	ldr	r2, [r7, #20]
 800cba4:	6812      	ldr	r2, [r2, #0]
 800cba6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cba8:	430b      	orrs	r3, r1
 800cbaa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cbac:	697b      	ldr	r3, [r7, #20]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbb2:	f023 010f 	bic.w	r1, r3, #15
 800cbb6:	697b      	ldr	r3, [r7, #20]
 800cbb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cbba:	697b      	ldr	r3, [r7, #20]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	430a      	orrs	r2, r1
 800cbc0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cbc2:	697b      	ldr	r3, [r7, #20]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	4aa6      	ldr	r2, [pc, #664]	; (800ce60 <UART_SetConfig+0x334>)
 800cbc8:	4293      	cmp	r3, r2
 800cbca:	d177      	bne.n	800ccbc <UART_SetConfig+0x190>
 800cbcc:	4ba5      	ldr	r3, [pc, #660]	; (800ce64 <UART_SetConfig+0x338>)
 800cbce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbd0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cbd4:	2b28      	cmp	r3, #40	; 0x28
 800cbd6:	d86d      	bhi.n	800ccb4 <UART_SetConfig+0x188>
 800cbd8:	a201      	add	r2, pc, #4	; (adr r2, 800cbe0 <UART_SetConfig+0xb4>)
 800cbda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbde:	bf00      	nop
 800cbe0:	0800cc85 	.word	0x0800cc85
 800cbe4:	0800ccb5 	.word	0x0800ccb5
 800cbe8:	0800ccb5 	.word	0x0800ccb5
 800cbec:	0800ccb5 	.word	0x0800ccb5
 800cbf0:	0800ccb5 	.word	0x0800ccb5
 800cbf4:	0800ccb5 	.word	0x0800ccb5
 800cbf8:	0800ccb5 	.word	0x0800ccb5
 800cbfc:	0800ccb5 	.word	0x0800ccb5
 800cc00:	0800cc8d 	.word	0x0800cc8d
 800cc04:	0800ccb5 	.word	0x0800ccb5
 800cc08:	0800ccb5 	.word	0x0800ccb5
 800cc0c:	0800ccb5 	.word	0x0800ccb5
 800cc10:	0800ccb5 	.word	0x0800ccb5
 800cc14:	0800ccb5 	.word	0x0800ccb5
 800cc18:	0800ccb5 	.word	0x0800ccb5
 800cc1c:	0800ccb5 	.word	0x0800ccb5
 800cc20:	0800cc95 	.word	0x0800cc95
 800cc24:	0800ccb5 	.word	0x0800ccb5
 800cc28:	0800ccb5 	.word	0x0800ccb5
 800cc2c:	0800ccb5 	.word	0x0800ccb5
 800cc30:	0800ccb5 	.word	0x0800ccb5
 800cc34:	0800ccb5 	.word	0x0800ccb5
 800cc38:	0800ccb5 	.word	0x0800ccb5
 800cc3c:	0800ccb5 	.word	0x0800ccb5
 800cc40:	0800cc9d 	.word	0x0800cc9d
 800cc44:	0800ccb5 	.word	0x0800ccb5
 800cc48:	0800ccb5 	.word	0x0800ccb5
 800cc4c:	0800ccb5 	.word	0x0800ccb5
 800cc50:	0800ccb5 	.word	0x0800ccb5
 800cc54:	0800ccb5 	.word	0x0800ccb5
 800cc58:	0800ccb5 	.word	0x0800ccb5
 800cc5c:	0800ccb5 	.word	0x0800ccb5
 800cc60:	0800cca5 	.word	0x0800cca5
 800cc64:	0800ccb5 	.word	0x0800ccb5
 800cc68:	0800ccb5 	.word	0x0800ccb5
 800cc6c:	0800ccb5 	.word	0x0800ccb5
 800cc70:	0800ccb5 	.word	0x0800ccb5
 800cc74:	0800ccb5 	.word	0x0800ccb5
 800cc78:	0800ccb5 	.word	0x0800ccb5
 800cc7c:	0800ccb5 	.word	0x0800ccb5
 800cc80:	0800ccad 	.word	0x0800ccad
 800cc84:	2301      	movs	r3, #1
 800cc86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc8a:	e326      	b.n	800d2da <UART_SetConfig+0x7ae>
 800cc8c:	2304      	movs	r3, #4
 800cc8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc92:	e322      	b.n	800d2da <UART_SetConfig+0x7ae>
 800cc94:	2308      	movs	r3, #8
 800cc96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc9a:	e31e      	b.n	800d2da <UART_SetConfig+0x7ae>
 800cc9c:	2310      	movs	r3, #16
 800cc9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cca2:	e31a      	b.n	800d2da <UART_SetConfig+0x7ae>
 800cca4:	2320      	movs	r3, #32
 800cca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccaa:	e316      	b.n	800d2da <UART_SetConfig+0x7ae>
 800ccac:	2340      	movs	r3, #64	; 0x40
 800ccae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccb2:	e312      	b.n	800d2da <UART_SetConfig+0x7ae>
 800ccb4:	2380      	movs	r3, #128	; 0x80
 800ccb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccba:	e30e      	b.n	800d2da <UART_SetConfig+0x7ae>
 800ccbc:	697b      	ldr	r3, [r7, #20]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	4a69      	ldr	r2, [pc, #420]	; (800ce68 <UART_SetConfig+0x33c>)
 800ccc2:	4293      	cmp	r3, r2
 800ccc4:	d130      	bne.n	800cd28 <UART_SetConfig+0x1fc>
 800ccc6:	4b67      	ldr	r3, [pc, #412]	; (800ce64 <UART_SetConfig+0x338>)
 800ccc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ccca:	f003 0307 	and.w	r3, r3, #7
 800ccce:	2b05      	cmp	r3, #5
 800ccd0:	d826      	bhi.n	800cd20 <UART_SetConfig+0x1f4>
 800ccd2:	a201      	add	r2, pc, #4	; (adr r2, 800ccd8 <UART_SetConfig+0x1ac>)
 800ccd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccd8:	0800ccf1 	.word	0x0800ccf1
 800ccdc:	0800ccf9 	.word	0x0800ccf9
 800cce0:	0800cd01 	.word	0x0800cd01
 800cce4:	0800cd09 	.word	0x0800cd09
 800cce8:	0800cd11 	.word	0x0800cd11
 800ccec:	0800cd19 	.word	0x0800cd19
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccf6:	e2f0      	b.n	800d2da <UART_SetConfig+0x7ae>
 800ccf8:	2304      	movs	r3, #4
 800ccfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccfe:	e2ec      	b.n	800d2da <UART_SetConfig+0x7ae>
 800cd00:	2308      	movs	r3, #8
 800cd02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd06:	e2e8      	b.n	800d2da <UART_SetConfig+0x7ae>
 800cd08:	2310      	movs	r3, #16
 800cd0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd0e:	e2e4      	b.n	800d2da <UART_SetConfig+0x7ae>
 800cd10:	2320      	movs	r3, #32
 800cd12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd16:	e2e0      	b.n	800d2da <UART_SetConfig+0x7ae>
 800cd18:	2340      	movs	r3, #64	; 0x40
 800cd1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd1e:	e2dc      	b.n	800d2da <UART_SetConfig+0x7ae>
 800cd20:	2380      	movs	r3, #128	; 0x80
 800cd22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd26:	e2d8      	b.n	800d2da <UART_SetConfig+0x7ae>
 800cd28:	697b      	ldr	r3, [r7, #20]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	4a4f      	ldr	r2, [pc, #316]	; (800ce6c <UART_SetConfig+0x340>)
 800cd2e:	4293      	cmp	r3, r2
 800cd30:	d130      	bne.n	800cd94 <UART_SetConfig+0x268>
 800cd32:	4b4c      	ldr	r3, [pc, #304]	; (800ce64 <UART_SetConfig+0x338>)
 800cd34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd36:	f003 0307 	and.w	r3, r3, #7
 800cd3a:	2b05      	cmp	r3, #5
 800cd3c:	d826      	bhi.n	800cd8c <UART_SetConfig+0x260>
 800cd3e:	a201      	add	r2, pc, #4	; (adr r2, 800cd44 <UART_SetConfig+0x218>)
 800cd40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd44:	0800cd5d 	.word	0x0800cd5d
 800cd48:	0800cd65 	.word	0x0800cd65
 800cd4c:	0800cd6d 	.word	0x0800cd6d
 800cd50:	0800cd75 	.word	0x0800cd75
 800cd54:	0800cd7d 	.word	0x0800cd7d
 800cd58:	0800cd85 	.word	0x0800cd85
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd62:	e2ba      	b.n	800d2da <UART_SetConfig+0x7ae>
 800cd64:	2304      	movs	r3, #4
 800cd66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd6a:	e2b6      	b.n	800d2da <UART_SetConfig+0x7ae>
 800cd6c:	2308      	movs	r3, #8
 800cd6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd72:	e2b2      	b.n	800d2da <UART_SetConfig+0x7ae>
 800cd74:	2310      	movs	r3, #16
 800cd76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd7a:	e2ae      	b.n	800d2da <UART_SetConfig+0x7ae>
 800cd7c:	2320      	movs	r3, #32
 800cd7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd82:	e2aa      	b.n	800d2da <UART_SetConfig+0x7ae>
 800cd84:	2340      	movs	r3, #64	; 0x40
 800cd86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd8a:	e2a6      	b.n	800d2da <UART_SetConfig+0x7ae>
 800cd8c:	2380      	movs	r3, #128	; 0x80
 800cd8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd92:	e2a2      	b.n	800d2da <UART_SetConfig+0x7ae>
 800cd94:	697b      	ldr	r3, [r7, #20]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	4a35      	ldr	r2, [pc, #212]	; (800ce70 <UART_SetConfig+0x344>)
 800cd9a:	4293      	cmp	r3, r2
 800cd9c:	d130      	bne.n	800ce00 <UART_SetConfig+0x2d4>
 800cd9e:	4b31      	ldr	r3, [pc, #196]	; (800ce64 <UART_SetConfig+0x338>)
 800cda0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cda2:	f003 0307 	and.w	r3, r3, #7
 800cda6:	2b05      	cmp	r3, #5
 800cda8:	d826      	bhi.n	800cdf8 <UART_SetConfig+0x2cc>
 800cdaa:	a201      	add	r2, pc, #4	; (adr r2, 800cdb0 <UART_SetConfig+0x284>)
 800cdac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdb0:	0800cdc9 	.word	0x0800cdc9
 800cdb4:	0800cdd1 	.word	0x0800cdd1
 800cdb8:	0800cdd9 	.word	0x0800cdd9
 800cdbc:	0800cde1 	.word	0x0800cde1
 800cdc0:	0800cde9 	.word	0x0800cde9
 800cdc4:	0800cdf1 	.word	0x0800cdf1
 800cdc8:	2300      	movs	r3, #0
 800cdca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdce:	e284      	b.n	800d2da <UART_SetConfig+0x7ae>
 800cdd0:	2304      	movs	r3, #4
 800cdd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdd6:	e280      	b.n	800d2da <UART_SetConfig+0x7ae>
 800cdd8:	2308      	movs	r3, #8
 800cdda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdde:	e27c      	b.n	800d2da <UART_SetConfig+0x7ae>
 800cde0:	2310      	movs	r3, #16
 800cde2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cde6:	e278      	b.n	800d2da <UART_SetConfig+0x7ae>
 800cde8:	2320      	movs	r3, #32
 800cdea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdee:	e274      	b.n	800d2da <UART_SetConfig+0x7ae>
 800cdf0:	2340      	movs	r3, #64	; 0x40
 800cdf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdf6:	e270      	b.n	800d2da <UART_SetConfig+0x7ae>
 800cdf8:	2380      	movs	r3, #128	; 0x80
 800cdfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdfe:	e26c      	b.n	800d2da <UART_SetConfig+0x7ae>
 800ce00:	697b      	ldr	r3, [r7, #20]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	4a1b      	ldr	r2, [pc, #108]	; (800ce74 <UART_SetConfig+0x348>)
 800ce06:	4293      	cmp	r3, r2
 800ce08:	d142      	bne.n	800ce90 <UART_SetConfig+0x364>
 800ce0a:	4b16      	ldr	r3, [pc, #88]	; (800ce64 <UART_SetConfig+0x338>)
 800ce0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce0e:	f003 0307 	and.w	r3, r3, #7
 800ce12:	2b05      	cmp	r3, #5
 800ce14:	d838      	bhi.n	800ce88 <UART_SetConfig+0x35c>
 800ce16:	a201      	add	r2, pc, #4	; (adr r2, 800ce1c <UART_SetConfig+0x2f0>)
 800ce18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce1c:	0800ce35 	.word	0x0800ce35
 800ce20:	0800ce3d 	.word	0x0800ce3d
 800ce24:	0800ce45 	.word	0x0800ce45
 800ce28:	0800ce4d 	.word	0x0800ce4d
 800ce2c:	0800ce79 	.word	0x0800ce79
 800ce30:	0800ce81 	.word	0x0800ce81
 800ce34:	2300      	movs	r3, #0
 800ce36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce3a:	e24e      	b.n	800d2da <UART_SetConfig+0x7ae>
 800ce3c:	2304      	movs	r3, #4
 800ce3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce42:	e24a      	b.n	800d2da <UART_SetConfig+0x7ae>
 800ce44:	2308      	movs	r3, #8
 800ce46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce4a:	e246      	b.n	800d2da <UART_SetConfig+0x7ae>
 800ce4c:	2310      	movs	r3, #16
 800ce4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce52:	e242      	b.n	800d2da <UART_SetConfig+0x7ae>
 800ce54:	cfff69f3 	.word	0xcfff69f3
 800ce58:	58000c00 	.word	0x58000c00
 800ce5c:	11fff4ff 	.word	0x11fff4ff
 800ce60:	40011000 	.word	0x40011000
 800ce64:	58024400 	.word	0x58024400
 800ce68:	40004400 	.word	0x40004400
 800ce6c:	40004800 	.word	0x40004800
 800ce70:	40004c00 	.word	0x40004c00
 800ce74:	40005000 	.word	0x40005000
 800ce78:	2320      	movs	r3, #32
 800ce7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce7e:	e22c      	b.n	800d2da <UART_SetConfig+0x7ae>
 800ce80:	2340      	movs	r3, #64	; 0x40
 800ce82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce86:	e228      	b.n	800d2da <UART_SetConfig+0x7ae>
 800ce88:	2380      	movs	r3, #128	; 0x80
 800ce8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce8e:	e224      	b.n	800d2da <UART_SetConfig+0x7ae>
 800ce90:	697b      	ldr	r3, [r7, #20]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	4ab1      	ldr	r2, [pc, #708]	; (800d15c <UART_SetConfig+0x630>)
 800ce96:	4293      	cmp	r3, r2
 800ce98:	d176      	bne.n	800cf88 <UART_SetConfig+0x45c>
 800ce9a:	4bb1      	ldr	r3, [pc, #708]	; (800d160 <UART_SetConfig+0x634>)
 800ce9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cea2:	2b28      	cmp	r3, #40	; 0x28
 800cea4:	d86c      	bhi.n	800cf80 <UART_SetConfig+0x454>
 800cea6:	a201      	add	r2, pc, #4	; (adr r2, 800ceac <UART_SetConfig+0x380>)
 800cea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ceac:	0800cf51 	.word	0x0800cf51
 800ceb0:	0800cf81 	.word	0x0800cf81
 800ceb4:	0800cf81 	.word	0x0800cf81
 800ceb8:	0800cf81 	.word	0x0800cf81
 800cebc:	0800cf81 	.word	0x0800cf81
 800cec0:	0800cf81 	.word	0x0800cf81
 800cec4:	0800cf81 	.word	0x0800cf81
 800cec8:	0800cf81 	.word	0x0800cf81
 800cecc:	0800cf59 	.word	0x0800cf59
 800ced0:	0800cf81 	.word	0x0800cf81
 800ced4:	0800cf81 	.word	0x0800cf81
 800ced8:	0800cf81 	.word	0x0800cf81
 800cedc:	0800cf81 	.word	0x0800cf81
 800cee0:	0800cf81 	.word	0x0800cf81
 800cee4:	0800cf81 	.word	0x0800cf81
 800cee8:	0800cf81 	.word	0x0800cf81
 800ceec:	0800cf61 	.word	0x0800cf61
 800cef0:	0800cf81 	.word	0x0800cf81
 800cef4:	0800cf81 	.word	0x0800cf81
 800cef8:	0800cf81 	.word	0x0800cf81
 800cefc:	0800cf81 	.word	0x0800cf81
 800cf00:	0800cf81 	.word	0x0800cf81
 800cf04:	0800cf81 	.word	0x0800cf81
 800cf08:	0800cf81 	.word	0x0800cf81
 800cf0c:	0800cf69 	.word	0x0800cf69
 800cf10:	0800cf81 	.word	0x0800cf81
 800cf14:	0800cf81 	.word	0x0800cf81
 800cf18:	0800cf81 	.word	0x0800cf81
 800cf1c:	0800cf81 	.word	0x0800cf81
 800cf20:	0800cf81 	.word	0x0800cf81
 800cf24:	0800cf81 	.word	0x0800cf81
 800cf28:	0800cf81 	.word	0x0800cf81
 800cf2c:	0800cf71 	.word	0x0800cf71
 800cf30:	0800cf81 	.word	0x0800cf81
 800cf34:	0800cf81 	.word	0x0800cf81
 800cf38:	0800cf81 	.word	0x0800cf81
 800cf3c:	0800cf81 	.word	0x0800cf81
 800cf40:	0800cf81 	.word	0x0800cf81
 800cf44:	0800cf81 	.word	0x0800cf81
 800cf48:	0800cf81 	.word	0x0800cf81
 800cf4c:	0800cf79 	.word	0x0800cf79
 800cf50:	2301      	movs	r3, #1
 800cf52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf56:	e1c0      	b.n	800d2da <UART_SetConfig+0x7ae>
 800cf58:	2304      	movs	r3, #4
 800cf5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf5e:	e1bc      	b.n	800d2da <UART_SetConfig+0x7ae>
 800cf60:	2308      	movs	r3, #8
 800cf62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf66:	e1b8      	b.n	800d2da <UART_SetConfig+0x7ae>
 800cf68:	2310      	movs	r3, #16
 800cf6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf6e:	e1b4      	b.n	800d2da <UART_SetConfig+0x7ae>
 800cf70:	2320      	movs	r3, #32
 800cf72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf76:	e1b0      	b.n	800d2da <UART_SetConfig+0x7ae>
 800cf78:	2340      	movs	r3, #64	; 0x40
 800cf7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf7e:	e1ac      	b.n	800d2da <UART_SetConfig+0x7ae>
 800cf80:	2380      	movs	r3, #128	; 0x80
 800cf82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf86:	e1a8      	b.n	800d2da <UART_SetConfig+0x7ae>
 800cf88:	697b      	ldr	r3, [r7, #20]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	4a75      	ldr	r2, [pc, #468]	; (800d164 <UART_SetConfig+0x638>)
 800cf8e:	4293      	cmp	r3, r2
 800cf90:	d130      	bne.n	800cff4 <UART_SetConfig+0x4c8>
 800cf92:	4b73      	ldr	r3, [pc, #460]	; (800d160 <UART_SetConfig+0x634>)
 800cf94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf96:	f003 0307 	and.w	r3, r3, #7
 800cf9a:	2b05      	cmp	r3, #5
 800cf9c:	d826      	bhi.n	800cfec <UART_SetConfig+0x4c0>
 800cf9e:	a201      	add	r2, pc, #4	; (adr r2, 800cfa4 <UART_SetConfig+0x478>)
 800cfa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfa4:	0800cfbd 	.word	0x0800cfbd
 800cfa8:	0800cfc5 	.word	0x0800cfc5
 800cfac:	0800cfcd 	.word	0x0800cfcd
 800cfb0:	0800cfd5 	.word	0x0800cfd5
 800cfb4:	0800cfdd 	.word	0x0800cfdd
 800cfb8:	0800cfe5 	.word	0x0800cfe5
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfc2:	e18a      	b.n	800d2da <UART_SetConfig+0x7ae>
 800cfc4:	2304      	movs	r3, #4
 800cfc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfca:	e186      	b.n	800d2da <UART_SetConfig+0x7ae>
 800cfcc:	2308      	movs	r3, #8
 800cfce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfd2:	e182      	b.n	800d2da <UART_SetConfig+0x7ae>
 800cfd4:	2310      	movs	r3, #16
 800cfd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfda:	e17e      	b.n	800d2da <UART_SetConfig+0x7ae>
 800cfdc:	2320      	movs	r3, #32
 800cfde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfe2:	e17a      	b.n	800d2da <UART_SetConfig+0x7ae>
 800cfe4:	2340      	movs	r3, #64	; 0x40
 800cfe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfea:	e176      	b.n	800d2da <UART_SetConfig+0x7ae>
 800cfec:	2380      	movs	r3, #128	; 0x80
 800cfee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cff2:	e172      	b.n	800d2da <UART_SetConfig+0x7ae>
 800cff4:	697b      	ldr	r3, [r7, #20]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	4a5b      	ldr	r2, [pc, #364]	; (800d168 <UART_SetConfig+0x63c>)
 800cffa:	4293      	cmp	r3, r2
 800cffc:	d130      	bne.n	800d060 <UART_SetConfig+0x534>
 800cffe:	4b58      	ldr	r3, [pc, #352]	; (800d160 <UART_SetConfig+0x634>)
 800d000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d002:	f003 0307 	and.w	r3, r3, #7
 800d006:	2b05      	cmp	r3, #5
 800d008:	d826      	bhi.n	800d058 <UART_SetConfig+0x52c>
 800d00a:	a201      	add	r2, pc, #4	; (adr r2, 800d010 <UART_SetConfig+0x4e4>)
 800d00c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d010:	0800d029 	.word	0x0800d029
 800d014:	0800d031 	.word	0x0800d031
 800d018:	0800d039 	.word	0x0800d039
 800d01c:	0800d041 	.word	0x0800d041
 800d020:	0800d049 	.word	0x0800d049
 800d024:	0800d051 	.word	0x0800d051
 800d028:	2300      	movs	r3, #0
 800d02a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d02e:	e154      	b.n	800d2da <UART_SetConfig+0x7ae>
 800d030:	2304      	movs	r3, #4
 800d032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d036:	e150      	b.n	800d2da <UART_SetConfig+0x7ae>
 800d038:	2308      	movs	r3, #8
 800d03a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d03e:	e14c      	b.n	800d2da <UART_SetConfig+0x7ae>
 800d040:	2310      	movs	r3, #16
 800d042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d046:	e148      	b.n	800d2da <UART_SetConfig+0x7ae>
 800d048:	2320      	movs	r3, #32
 800d04a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d04e:	e144      	b.n	800d2da <UART_SetConfig+0x7ae>
 800d050:	2340      	movs	r3, #64	; 0x40
 800d052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d056:	e140      	b.n	800d2da <UART_SetConfig+0x7ae>
 800d058:	2380      	movs	r3, #128	; 0x80
 800d05a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d05e:	e13c      	b.n	800d2da <UART_SetConfig+0x7ae>
 800d060:	697b      	ldr	r3, [r7, #20]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	4a41      	ldr	r2, [pc, #260]	; (800d16c <UART_SetConfig+0x640>)
 800d066:	4293      	cmp	r3, r2
 800d068:	f040 8082 	bne.w	800d170 <UART_SetConfig+0x644>
 800d06c:	4b3c      	ldr	r3, [pc, #240]	; (800d160 <UART_SetConfig+0x634>)
 800d06e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d070:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d074:	2b28      	cmp	r3, #40	; 0x28
 800d076:	d86d      	bhi.n	800d154 <UART_SetConfig+0x628>
 800d078:	a201      	add	r2, pc, #4	; (adr r2, 800d080 <UART_SetConfig+0x554>)
 800d07a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d07e:	bf00      	nop
 800d080:	0800d125 	.word	0x0800d125
 800d084:	0800d155 	.word	0x0800d155
 800d088:	0800d155 	.word	0x0800d155
 800d08c:	0800d155 	.word	0x0800d155
 800d090:	0800d155 	.word	0x0800d155
 800d094:	0800d155 	.word	0x0800d155
 800d098:	0800d155 	.word	0x0800d155
 800d09c:	0800d155 	.word	0x0800d155
 800d0a0:	0800d12d 	.word	0x0800d12d
 800d0a4:	0800d155 	.word	0x0800d155
 800d0a8:	0800d155 	.word	0x0800d155
 800d0ac:	0800d155 	.word	0x0800d155
 800d0b0:	0800d155 	.word	0x0800d155
 800d0b4:	0800d155 	.word	0x0800d155
 800d0b8:	0800d155 	.word	0x0800d155
 800d0bc:	0800d155 	.word	0x0800d155
 800d0c0:	0800d135 	.word	0x0800d135
 800d0c4:	0800d155 	.word	0x0800d155
 800d0c8:	0800d155 	.word	0x0800d155
 800d0cc:	0800d155 	.word	0x0800d155
 800d0d0:	0800d155 	.word	0x0800d155
 800d0d4:	0800d155 	.word	0x0800d155
 800d0d8:	0800d155 	.word	0x0800d155
 800d0dc:	0800d155 	.word	0x0800d155
 800d0e0:	0800d13d 	.word	0x0800d13d
 800d0e4:	0800d155 	.word	0x0800d155
 800d0e8:	0800d155 	.word	0x0800d155
 800d0ec:	0800d155 	.word	0x0800d155
 800d0f0:	0800d155 	.word	0x0800d155
 800d0f4:	0800d155 	.word	0x0800d155
 800d0f8:	0800d155 	.word	0x0800d155
 800d0fc:	0800d155 	.word	0x0800d155
 800d100:	0800d145 	.word	0x0800d145
 800d104:	0800d155 	.word	0x0800d155
 800d108:	0800d155 	.word	0x0800d155
 800d10c:	0800d155 	.word	0x0800d155
 800d110:	0800d155 	.word	0x0800d155
 800d114:	0800d155 	.word	0x0800d155
 800d118:	0800d155 	.word	0x0800d155
 800d11c:	0800d155 	.word	0x0800d155
 800d120:	0800d14d 	.word	0x0800d14d
 800d124:	2301      	movs	r3, #1
 800d126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d12a:	e0d6      	b.n	800d2da <UART_SetConfig+0x7ae>
 800d12c:	2304      	movs	r3, #4
 800d12e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d132:	e0d2      	b.n	800d2da <UART_SetConfig+0x7ae>
 800d134:	2308      	movs	r3, #8
 800d136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d13a:	e0ce      	b.n	800d2da <UART_SetConfig+0x7ae>
 800d13c:	2310      	movs	r3, #16
 800d13e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d142:	e0ca      	b.n	800d2da <UART_SetConfig+0x7ae>
 800d144:	2320      	movs	r3, #32
 800d146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d14a:	e0c6      	b.n	800d2da <UART_SetConfig+0x7ae>
 800d14c:	2340      	movs	r3, #64	; 0x40
 800d14e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d152:	e0c2      	b.n	800d2da <UART_SetConfig+0x7ae>
 800d154:	2380      	movs	r3, #128	; 0x80
 800d156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d15a:	e0be      	b.n	800d2da <UART_SetConfig+0x7ae>
 800d15c:	40011400 	.word	0x40011400
 800d160:	58024400 	.word	0x58024400
 800d164:	40007800 	.word	0x40007800
 800d168:	40007c00 	.word	0x40007c00
 800d16c:	40011800 	.word	0x40011800
 800d170:	697b      	ldr	r3, [r7, #20]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	4aad      	ldr	r2, [pc, #692]	; (800d42c <UART_SetConfig+0x900>)
 800d176:	4293      	cmp	r3, r2
 800d178:	d176      	bne.n	800d268 <UART_SetConfig+0x73c>
 800d17a:	4bad      	ldr	r3, [pc, #692]	; (800d430 <UART_SetConfig+0x904>)
 800d17c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d17e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d182:	2b28      	cmp	r3, #40	; 0x28
 800d184:	d86c      	bhi.n	800d260 <UART_SetConfig+0x734>
 800d186:	a201      	add	r2, pc, #4	; (adr r2, 800d18c <UART_SetConfig+0x660>)
 800d188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d18c:	0800d231 	.word	0x0800d231
 800d190:	0800d261 	.word	0x0800d261
 800d194:	0800d261 	.word	0x0800d261
 800d198:	0800d261 	.word	0x0800d261
 800d19c:	0800d261 	.word	0x0800d261
 800d1a0:	0800d261 	.word	0x0800d261
 800d1a4:	0800d261 	.word	0x0800d261
 800d1a8:	0800d261 	.word	0x0800d261
 800d1ac:	0800d239 	.word	0x0800d239
 800d1b0:	0800d261 	.word	0x0800d261
 800d1b4:	0800d261 	.word	0x0800d261
 800d1b8:	0800d261 	.word	0x0800d261
 800d1bc:	0800d261 	.word	0x0800d261
 800d1c0:	0800d261 	.word	0x0800d261
 800d1c4:	0800d261 	.word	0x0800d261
 800d1c8:	0800d261 	.word	0x0800d261
 800d1cc:	0800d241 	.word	0x0800d241
 800d1d0:	0800d261 	.word	0x0800d261
 800d1d4:	0800d261 	.word	0x0800d261
 800d1d8:	0800d261 	.word	0x0800d261
 800d1dc:	0800d261 	.word	0x0800d261
 800d1e0:	0800d261 	.word	0x0800d261
 800d1e4:	0800d261 	.word	0x0800d261
 800d1e8:	0800d261 	.word	0x0800d261
 800d1ec:	0800d249 	.word	0x0800d249
 800d1f0:	0800d261 	.word	0x0800d261
 800d1f4:	0800d261 	.word	0x0800d261
 800d1f8:	0800d261 	.word	0x0800d261
 800d1fc:	0800d261 	.word	0x0800d261
 800d200:	0800d261 	.word	0x0800d261
 800d204:	0800d261 	.word	0x0800d261
 800d208:	0800d261 	.word	0x0800d261
 800d20c:	0800d251 	.word	0x0800d251
 800d210:	0800d261 	.word	0x0800d261
 800d214:	0800d261 	.word	0x0800d261
 800d218:	0800d261 	.word	0x0800d261
 800d21c:	0800d261 	.word	0x0800d261
 800d220:	0800d261 	.word	0x0800d261
 800d224:	0800d261 	.word	0x0800d261
 800d228:	0800d261 	.word	0x0800d261
 800d22c:	0800d259 	.word	0x0800d259
 800d230:	2301      	movs	r3, #1
 800d232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d236:	e050      	b.n	800d2da <UART_SetConfig+0x7ae>
 800d238:	2304      	movs	r3, #4
 800d23a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d23e:	e04c      	b.n	800d2da <UART_SetConfig+0x7ae>
 800d240:	2308      	movs	r3, #8
 800d242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d246:	e048      	b.n	800d2da <UART_SetConfig+0x7ae>
 800d248:	2310      	movs	r3, #16
 800d24a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d24e:	e044      	b.n	800d2da <UART_SetConfig+0x7ae>
 800d250:	2320      	movs	r3, #32
 800d252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d256:	e040      	b.n	800d2da <UART_SetConfig+0x7ae>
 800d258:	2340      	movs	r3, #64	; 0x40
 800d25a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d25e:	e03c      	b.n	800d2da <UART_SetConfig+0x7ae>
 800d260:	2380      	movs	r3, #128	; 0x80
 800d262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d266:	e038      	b.n	800d2da <UART_SetConfig+0x7ae>
 800d268:	697b      	ldr	r3, [r7, #20]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	4a71      	ldr	r2, [pc, #452]	; (800d434 <UART_SetConfig+0x908>)
 800d26e:	4293      	cmp	r3, r2
 800d270:	d130      	bne.n	800d2d4 <UART_SetConfig+0x7a8>
 800d272:	4b6f      	ldr	r3, [pc, #444]	; (800d430 <UART_SetConfig+0x904>)
 800d274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d276:	f003 0307 	and.w	r3, r3, #7
 800d27a:	2b05      	cmp	r3, #5
 800d27c:	d826      	bhi.n	800d2cc <UART_SetConfig+0x7a0>
 800d27e:	a201      	add	r2, pc, #4	; (adr r2, 800d284 <UART_SetConfig+0x758>)
 800d280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d284:	0800d29d 	.word	0x0800d29d
 800d288:	0800d2a5 	.word	0x0800d2a5
 800d28c:	0800d2ad 	.word	0x0800d2ad
 800d290:	0800d2b5 	.word	0x0800d2b5
 800d294:	0800d2bd 	.word	0x0800d2bd
 800d298:	0800d2c5 	.word	0x0800d2c5
 800d29c:	2302      	movs	r3, #2
 800d29e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2a2:	e01a      	b.n	800d2da <UART_SetConfig+0x7ae>
 800d2a4:	2304      	movs	r3, #4
 800d2a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2aa:	e016      	b.n	800d2da <UART_SetConfig+0x7ae>
 800d2ac:	2308      	movs	r3, #8
 800d2ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2b2:	e012      	b.n	800d2da <UART_SetConfig+0x7ae>
 800d2b4:	2310      	movs	r3, #16
 800d2b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2ba:	e00e      	b.n	800d2da <UART_SetConfig+0x7ae>
 800d2bc:	2320      	movs	r3, #32
 800d2be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2c2:	e00a      	b.n	800d2da <UART_SetConfig+0x7ae>
 800d2c4:	2340      	movs	r3, #64	; 0x40
 800d2c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2ca:	e006      	b.n	800d2da <UART_SetConfig+0x7ae>
 800d2cc:	2380      	movs	r3, #128	; 0x80
 800d2ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2d2:	e002      	b.n	800d2da <UART_SetConfig+0x7ae>
 800d2d4:	2380      	movs	r3, #128	; 0x80
 800d2d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d2da:	697b      	ldr	r3, [r7, #20]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	4a55      	ldr	r2, [pc, #340]	; (800d434 <UART_SetConfig+0x908>)
 800d2e0:	4293      	cmp	r3, r2
 800d2e2:	f040 80f8 	bne.w	800d4d6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d2e6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d2ea:	2b20      	cmp	r3, #32
 800d2ec:	dc46      	bgt.n	800d37c <UART_SetConfig+0x850>
 800d2ee:	2b02      	cmp	r3, #2
 800d2f0:	db75      	blt.n	800d3de <UART_SetConfig+0x8b2>
 800d2f2:	3b02      	subs	r3, #2
 800d2f4:	2b1e      	cmp	r3, #30
 800d2f6:	d872      	bhi.n	800d3de <UART_SetConfig+0x8b2>
 800d2f8:	a201      	add	r2, pc, #4	; (adr r2, 800d300 <UART_SetConfig+0x7d4>)
 800d2fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2fe:	bf00      	nop
 800d300:	0800d383 	.word	0x0800d383
 800d304:	0800d3df 	.word	0x0800d3df
 800d308:	0800d38b 	.word	0x0800d38b
 800d30c:	0800d3df 	.word	0x0800d3df
 800d310:	0800d3df 	.word	0x0800d3df
 800d314:	0800d3df 	.word	0x0800d3df
 800d318:	0800d39b 	.word	0x0800d39b
 800d31c:	0800d3df 	.word	0x0800d3df
 800d320:	0800d3df 	.word	0x0800d3df
 800d324:	0800d3df 	.word	0x0800d3df
 800d328:	0800d3df 	.word	0x0800d3df
 800d32c:	0800d3df 	.word	0x0800d3df
 800d330:	0800d3df 	.word	0x0800d3df
 800d334:	0800d3df 	.word	0x0800d3df
 800d338:	0800d3ab 	.word	0x0800d3ab
 800d33c:	0800d3df 	.word	0x0800d3df
 800d340:	0800d3df 	.word	0x0800d3df
 800d344:	0800d3df 	.word	0x0800d3df
 800d348:	0800d3df 	.word	0x0800d3df
 800d34c:	0800d3df 	.word	0x0800d3df
 800d350:	0800d3df 	.word	0x0800d3df
 800d354:	0800d3df 	.word	0x0800d3df
 800d358:	0800d3df 	.word	0x0800d3df
 800d35c:	0800d3df 	.word	0x0800d3df
 800d360:	0800d3df 	.word	0x0800d3df
 800d364:	0800d3df 	.word	0x0800d3df
 800d368:	0800d3df 	.word	0x0800d3df
 800d36c:	0800d3df 	.word	0x0800d3df
 800d370:	0800d3df 	.word	0x0800d3df
 800d374:	0800d3df 	.word	0x0800d3df
 800d378:	0800d3d1 	.word	0x0800d3d1
 800d37c:	2b40      	cmp	r3, #64	; 0x40
 800d37e:	d02a      	beq.n	800d3d6 <UART_SetConfig+0x8aa>
 800d380:	e02d      	b.n	800d3de <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d382:	f7fc fe3d 	bl	800a000 <HAL_RCCEx_GetD3PCLK1Freq>
 800d386:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d388:	e02f      	b.n	800d3ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d38a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d38e:	4618      	mov	r0, r3
 800d390:	f7fc fe4c 	bl	800a02c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d396:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d398:	e027      	b.n	800d3ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d39a:	f107 0318 	add.w	r3, r7, #24
 800d39e:	4618      	mov	r0, r3
 800d3a0:	f7fc ff98 	bl	800a2d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d3a4:	69fb      	ldr	r3, [r7, #28]
 800d3a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d3a8:	e01f      	b.n	800d3ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d3aa:	4b21      	ldr	r3, [pc, #132]	; (800d430 <UART_SetConfig+0x904>)
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	f003 0320 	and.w	r3, r3, #32
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d009      	beq.n	800d3ca <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d3b6:	4b1e      	ldr	r3, [pc, #120]	; (800d430 <UART_SetConfig+0x904>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	08db      	lsrs	r3, r3, #3
 800d3bc:	f003 0303 	and.w	r3, r3, #3
 800d3c0:	4a1d      	ldr	r2, [pc, #116]	; (800d438 <UART_SetConfig+0x90c>)
 800d3c2:	fa22 f303 	lsr.w	r3, r2, r3
 800d3c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d3c8:	e00f      	b.n	800d3ea <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d3ca:	4b1b      	ldr	r3, [pc, #108]	; (800d438 <UART_SetConfig+0x90c>)
 800d3cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d3ce:	e00c      	b.n	800d3ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d3d0:	4b1a      	ldr	r3, [pc, #104]	; (800d43c <UART_SetConfig+0x910>)
 800d3d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d3d4:	e009      	b.n	800d3ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d3d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d3da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d3dc:	e005      	b.n	800d3ea <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d3de:	2300      	movs	r3, #0
 800d3e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d3e2:	2301      	movs	r3, #1
 800d3e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d3e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d3ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	f000 81ee 	beq.w	800d7ce <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d3f2:	697b      	ldr	r3, [r7, #20]
 800d3f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3f6:	4a12      	ldr	r2, [pc, #72]	; (800d440 <UART_SetConfig+0x914>)
 800d3f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d3fc:	461a      	mov	r2, r3
 800d3fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d400:	fbb3 f3f2 	udiv	r3, r3, r2
 800d404:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d406:	697b      	ldr	r3, [r7, #20]
 800d408:	685a      	ldr	r2, [r3, #4]
 800d40a:	4613      	mov	r3, r2
 800d40c:	005b      	lsls	r3, r3, #1
 800d40e:	4413      	add	r3, r2
 800d410:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d412:	429a      	cmp	r2, r3
 800d414:	d305      	bcc.n	800d422 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d416:	697b      	ldr	r3, [r7, #20]
 800d418:	685b      	ldr	r3, [r3, #4]
 800d41a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d41c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d41e:	429a      	cmp	r2, r3
 800d420:	d910      	bls.n	800d444 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800d422:	2301      	movs	r3, #1
 800d424:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d428:	e1d1      	b.n	800d7ce <UART_SetConfig+0xca2>
 800d42a:	bf00      	nop
 800d42c:	40011c00 	.word	0x40011c00
 800d430:	58024400 	.word	0x58024400
 800d434:	58000c00 	.word	0x58000c00
 800d438:	03d09000 	.word	0x03d09000
 800d43c:	003d0900 	.word	0x003d0900
 800d440:	0800ea10 	.word	0x0800ea10
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d446:	2200      	movs	r2, #0
 800d448:	60bb      	str	r3, [r7, #8]
 800d44a:	60fa      	str	r2, [r7, #12]
 800d44c:	697b      	ldr	r3, [r7, #20]
 800d44e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d450:	4ac0      	ldr	r2, [pc, #768]	; (800d754 <UART_SetConfig+0xc28>)
 800d452:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d456:	b29b      	uxth	r3, r3
 800d458:	2200      	movs	r2, #0
 800d45a:	603b      	str	r3, [r7, #0]
 800d45c:	607a      	str	r2, [r7, #4]
 800d45e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d462:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d466:	f7f2 ff5b 	bl	8000320 <__aeabi_uldivmod>
 800d46a:	4602      	mov	r2, r0
 800d46c:	460b      	mov	r3, r1
 800d46e:	4610      	mov	r0, r2
 800d470:	4619      	mov	r1, r3
 800d472:	f04f 0200 	mov.w	r2, #0
 800d476:	f04f 0300 	mov.w	r3, #0
 800d47a:	020b      	lsls	r3, r1, #8
 800d47c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d480:	0202      	lsls	r2, r0, #8
 800d482:	6979      	ldr	r1, [r7, #20]
 800d484:	6849      	ldr	r1, [r1, #4]
 800d486:	0849      	lsrs	r1, r1, #1
 800d488:	2000      	movs	r0, #0
 800d48a:	460c      	mov	r4, r1
 800d48c:	4605      	mov	r5, r0
 800d48e:	eb12 0804 	adds.w	r8, r2, r4
 800d492:	eb43 0905 	adc.w	r9, r3, r5
 800d496:	697b      	ldr	r3, [r7, #20]
 800d498:	685b      	ldr	r3, [r3, #4]
 800d49a:	2200      	movs	r2, #0
 800d49c:	469a      	mov	sl, r3
 800d49e:	4693      	mov	fp, r2
 800d4a0:	4652      	mov	r2, sl
 800d4a2:	465b      	mov	r3, fp
 800d4a4:	4640      	mov	r0, r8
 800d4a6:	4649      	mov	r1, r9
 800d4a8:	f7f2 ff3a 	bl	8000320 <__aeabi_uldivmod>
 800d4ac:	4602      	mov	r2, r0
 800d4ae:	460b      	mov	r3, r1
 800d4b0:	4613      	mov	r3, r2
 800d4b2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d4b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d4ba:	d308      	bcc.n	800d4ce <UART_SetConfig+0x9a2>
 800d4bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d4c2:	d204      	bcs.n	800d4ce <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800d4c4:	697b      	ldr	r3, [r7, #20]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d4ca:	60da      	str	r2, [r3, #12]
 800d4cc:	e17f      	b.n	800d7ce <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800d4ce:	2301      	movs	r3, #1
 800d4d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d4d4:	e17b      	b.n	800d7ce <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d4d6:	697b      	ldr	r3, [r7, #20]
 800d4d8:	69db      	ldr	r3, [r3, #28]
 800d4da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d4de:	f040 80bd 	bne.w	800d65c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800d4e2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d4e6:	2b20      	cmp	r3, #32
 800d4e8:	dc48      	bgt.n	800d57c <UART_SetConfig+0xa50>
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	db7b      	blt.n	800d5e6 <UART_SetConfig+0xaba>
 800d4ee:	2b20      	cmp	r3, #32
 800d4f0:	d879      	bhi.n	800d5e6 <UART_SetConfig+0xaba>
 800d4f2:	a201      	add	r2, pc, #4	; (adr r2, 800d4f8 <UART_SetConfig+0x9cc>)
 800d4f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4f8:	0800d583 	.word	0x0800d583
 800d4fc:	0800d58b 	.word	0x0800d58b
 800d500:	0800d5e7 	.word	0x0800d5e7
 800d504:	0800d5e7 	.word	0x0800d5e7
 800d508:	0800d593 	.word	0x0800d593
 800d50c:	0800d5e7 	.word	0x0800d5e7
 800d510:	0800d5e7 	.word	0x0800d5e7
 800d514:	0800d5e7 	.word	0x0800d5e7
 800d518:	0800d5a3 	.word	0x0800d5a3
 800d51c:	0800d5e7 	.word	0x0800d5e7
 800d520:	0800d5e7 	.word	0x0800d5e7
 800d524:	0800d5e7 	.word	0x0800d5e7
 800d528:	0800d5e7 	.word	0x0800d5e7
 800d52c:	0800d5e7 	.word	0x0800d5e7
 800d530:	0800d5e7 	.word	0x0800d5e7
 800d534:	0800d5e7 	.word	0x0800d5e7
 800d538:	0800d5b3 	.word	0x0800d5b3
 800d53c:	0800d5e7 	.word	0x0800d5e7
 800d540:	0800d5e7 	.word	0x0800d5e7
 800d544:	0800d5e7 	.word	0x0800d5e7
 800d548:	0800d5e7 	.word	0x0800d5e7
 800d54c:	0800d5e7 	.word	0x0800d5e7
 800d550:	0800d5e7 	.word	0x0800d5e7
 800d554:	0800d5e7 	.word	0x0800d5e7
 800d558:	0800d5e7 	.word	0x0800d5e7
 800d55c:	0800d5e7 	.word	0x0800d5e7
 800d560:	0800d5e7 	.word	0x0800d5e7
 800d564:	0800d5e7 	.word	0x0800d5e7
 800d568:	0800d5e7 	.word	0x0800d5e7
 800d56c:	0800d5e7 	.word	0x0800d5e7
 800d570:	0800d5e7 	.word	0x0800d5e7
 800d574:	0800d5e7 	.word	0x0800d5e7
 800d578:	0800d5d9 	.word	0x0800d5d9
 800d57c:	2b40      	cmp	r3, #64	; 0x40
 800d57e:	d02e      	beq.n	800d5de <UART_SetConfig+0xab2>
 800d580:	e031      	b.n	800d5e6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d582:	f7fb fb71 	bl	8008c68 <HAL_RCC_GetPCLK1Freq>
 800d586:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d588:	e033      	b.n	800d5f2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d58a:	f7fb fb83 	bl	8008c94 <HAL_RCC_GetPCLK2Freq>
 800d58e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d590:	e02f      	b.n	800d5f2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d592:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d596:	4618      	mov	r0, r3
 800d598:	f7fc fd48 	bl	800a02c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d59c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d59e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d5a0:	e027      	b.n	800d5f2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d5a2:	f107 0318 	add.w	r3, r7, #24
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	f7fc fe94 	bl	800a2d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d5ac:	69fb      	ldr	r3, [r7, #28]
 800d5ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d5b0:	e01f      	b.n	800d5f2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d5b2:	4b69      	ldr	r3, [pc, #420]	; (800d758 <UART_SetConfig+0xc2c>)
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	f003 0320 	and.w	r3, r3, #32
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d009      	beq.n	800d5d2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d5be:	4b66      	ldr	r3, [pc, #408]	; (800d758 <UART_SetConfig+0xc2c>)
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	08db      	lsrs	r3, r3, #3
 800d5c4:	f003 0303 	and.w	r3, r3, #3
 800d5c8:	4a64      	ldr	r2, [pc, #400]	; (800d75c <UART_SetConfig+0xc30>)
 800d5ca:	fa22 f303 	lsr.w	r3, r2, r3
 800d5ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d5d0:	e00f      	b.n	800d5f2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800d5d2:	4b62      	ldr	r3, [pc, #392]	; (800d75c <UART_SetConfig+0xc30>)
 800d5d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d5d6:	e00c      	b.n	800d5f2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d5d8:	4b61      	ldr	r3, [pc, #388]	; (800d760 <UART_SetConfig+0xc34>)
 800d5da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d5dc:	e009      	b.n	800d5f2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d5de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d5e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d5e4:	e005      	b.n	800d5f2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d5ea:	2301      	movs	r3, #1
 800d5ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d5f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d5f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	f000 80ea 	beq.w	800d7ce <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d5fa:	697b      	ldr	r3, [r7, #20]
 800d5fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5fe:	4a55      	ldr	r2, [pc, #340]	; (800d754 <UART_SetConfig+0xc28>)
 800d600:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d604:	461a      	mov	r2, r3
 800d606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d608:	fbb3 f3f2 	udiv	r3, r3, r2
 800d60c:	005a      	lsls	r2, r3, #1
 800d60e:	697b      	ldr	r3, [r7, #20]
 800d610:	685b      	ldr	r3, [r3, #4]
 800d612:	085b      	lsrs	r3, r3, #1
 800d614:	441a      	add	r2, r3
 800d616:	697b      	ldr	r3, [r7, #20]
 800d618:	685b      	ldr	r3, [r3, #4]
 800d61a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d61e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d622:	2b0f      	cmp	r3, #15
 800d624:	d916      	bls.n	800d654 <UART_SetConfig+0xb28>
 800d626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d628:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d62c:	d212      	bcs.n	800d654 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d62e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d630:	b29b      	uxth	r3, r3
 800d632:	f023 030f 	bic.w	r3, r3, #15
 800d636:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d63a:	085b      	lsrs	r3, r3, #1
 800d63c:	b29b      	uxth	r3, r3
 800d63e:	f003 0307 	and.w	r3, r3, #7
 800d642:	b29a      	uxth	r2, r3
 800d644:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d646:	4313      	orrs	r3, r2
 800d648:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800d64a:	697b      	ldr	r3, [r7, #20]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d650:	60da      	str	r2, [r3, #12]
 800d652:	e0bc      	b.n	800d7ce <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d654:	2301      	movs	r3, #1
 800d656:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d65a:	e0b8      	b.n	800d7ce <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d65c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d660:	2b20      	cmp	r3, #32
 800d662:	dc4b      	bgt.n	800d6fc <UART_SetConfig+0xbd0>
 800d664:	2b00      	cmp	r3, #0
 800d666:	f2c0 8087 	blt.w	800d778 <UART_SetConfig+0xc4c>
 800d66a:	2b20      	cmp	r3, #32
 800d66c:	f200 8084 	bhi.w	800d778 <UART_SetConfig+0xc4c>
 800d670:	a201      	add	r2, pc, #4	; (adr r2, 800d678 <UART_SetConfig+0xb4c>)
 800d672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d676:	bf00      	nop
 800d678:	0800d703 	.word	0x0800d703
 800d67c:	0800d70b 	.word	0x0800d70b
 800d680:	0800d779 	.word	0x0800d779
 800d684:	0800d779 	.word	0x0800d779
 800d688:	0800d713 	.word	0x0800d713
 800d68c:	0800d779 	.word	0x0800d779
 800d690:	0800d779 	.word	0x0800d779
 800d694:	0800d779 	.word	0x0800d779
 800d698:	0800d723 	.word	0x0800d723
 800d69c:	0800d779 	.word	0x0800d779
 800d6a0:	0800d779 	.word	0x0800d779
 800d6a4:	0800d779 	.word	0x0800d779
 800d6a8:	0800d779 	.word	0x0800d779
 800d6ac:	0800d779 	.word	0x0800d779
 800d6b0:	0800d779 	.word	0x0800d779
 800d6b4:	0800d779 	.word	0x0800d779
 800d6b8:	0800d733 	.word	0x0800d733
 800d6bc:	0800d779 	.word	0x0800d779
 800d6c0:	0800d779 	.word	0x0800d779
 800d6c4:	0800d779 	.word	0x0800d779
 800d6c8:	0800d779 	.word	0x0800d779
 800d6cc:	0800d779 	.word	0x0800d779
 800d6d0:	0800d779 	.word	0x0800d779
 800d6d4:	0800d779 	.word	0x0800d779
 800d6d8:	0800d779 	.word	0x0800d779
 800d6dc:	0800d779 	.word	0x0800d779
 800d6e0:	0800d779 	.word	0x0800d779
 800d6e4:	0800d779 	.word	0x0800d779
 800d6e8:	0800d779 	.word	0x0800d779
 800d6ec:	0800d779 	.word	0x0800d779
 800d6f0:	0800d779 	.word	0x0800d779
 800d6f4:	0800d779 	.word	0x0800d779
 800d6f8:	0800d76b 	.word	0x0800d76b
 800d6fc:	2b40      	cmp	r3, #64	; 0x40
 800d6fe:	d037      	beq.n	800d770 <UART_SetConfig+0xc44>
 800d700:	e03a      	b.n	800d778 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d702:	f7fb fab1 	bl	8008c68 <HAL_RCC_GetPCLK1Freq>
 800d706:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d708:	e03c      	b.n	800d784 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d70a:	f7fb fac3 	bl	8008c94 <HAL_RCC_GetPCLK2Freq>
 800d70e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d710:	e038      	b.n	800d784 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d716:	4618      	mov	r0, r3
 800d718:	f7fc fc88 	bl	800a02c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d71e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d720:	e030      	b.n	800d784 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d722:	f107 0318 	add.w	r3, r7, #24
 800d726:	4618      	mov	r0, r3
 800d728:	f7fc fdd4 	bl	800a2d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d72c:	69fb      	ldr	r3, [r7, #28]
 800d72e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d730:	e028      	b.n	800d784 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d732:	4b09      	ldr	r3, [pc, #36]	; (800d758 <UART_SetConfig+0xc2c>)
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	f003 0320 	and.w	r3, r3, #32
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d012      	beq.n	800d764 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d73e:	4b06      	ldr	r3, [pc, #24]	; (800d758 <UART_SetConfig+0xc2c>)
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	08db      	lsrs	r3, r3, #3
 800d744:	f003 0303 	and.w	r3, r3, #3
 800d748:	4a04      	ldr	r2, [pc, #16]	; (800d75c <UART_SetConfig+0xc30>)
 800d74a:	fa22 f303 	lsr.w	r3, r2, r3
 800d74e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d750:	e018      	b.n	800d784 <UART_SetConfig+0xc58>
 800d752:	bf00      	nop
 800d754:	0800ea10 	.word	0x0800ea10
 800d758:	58024400 	.word	0x58024400
 800d75c:	03d09000 	.word	0x03d09000
 800d760:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800d764:	4b24      	ldr	r3, [pc, #144]	; (800d7f8 <UART_SetConfig+0xccc>)
 800d766:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d768:	e00c      	b.n	800d784 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d76a:	4b24      	ldr	r3, [pc, #144]	; (800d7fc <UART_SetConfig+0xcd0>)
 800d76c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d76e:	e009      	b.n	800d784 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d770:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d774:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d776:	e005      	b.n	800d784 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800d778:	2300      	movs	r3, #0
 800d77a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d77c:	2301      	movs	r3, #1
 800d77e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d782:	bf00      	nop
    }

    if (pclk != 0U)
 800d784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d786:	2b00      	cmp	r3, #0
 800d788:	d021      	beq.n	800d7ce <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d78a:	697b      	ldr	r3, [r7, #20]
 800d78c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d78e:	4a1c      	ldr	r2, [pc, #112]	; (800d800 <UART_SetConfig+0xcd4>)
 800d790:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d794:	461a      	mov	r2, r3
 800d796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d798:	fbb3 f2f2 	udiv	r2, r3, r2
 800d79c:	697b      	ldr	r3, [r7, #20]
 800d79e:	685b      	ldr	r3, [r3, #4]
 800d7a0:	085b      	lsrs	r3, r3, #1
 800d7a2:	441a      	add	r2, r3
 800d7a4:	697b      	ldr	r3, [r7, #20]
 800d7a6:	685b      	ldr	r3, [r3, #4]
 800d7a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7ac:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d7ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7b0:	2b0f      	cmp	r3, #15
 800d7b2:	d909      	bls.n	800d7c8 <UART_SetConfig+0xc9c>
 800d7b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d7ba:	d205      	bcs.n	800d7c8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d7bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7be:	b29a      	uxth	r2, r3
 800d7c0:	697b      	ldr	r3, [r7, #20]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	60da      	str	r2, [r3, #12]
 800d7c6:	e002      	b.n	800d7ce <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d7c8:	2301      	movs	r3, #1
 800d7ca:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d7ce:	697b      	ldr	r3, [r7, #20]
 800d7d0:	2201      	movs	r2, #1
 800d7d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d7d6:	697b      	ldr	r3, [r7, #20]
 800d7d8:	2201      	movs	r2, #1
 800d7da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d7de:	697b      	ldr	r3, [r7, #20]
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800d7e4:	697b      	ldr	r3, [r7, #20]
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800d7ea:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	3748      	adds	r7, #72	; 0x48
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d7f8:	03d09000 	.word	0x03d09000
 800d7fc:	003d0900 	.word	0x003d0900
 800d800:	0800ea10 	.word	0x0800ea10

0800d804 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d804:	b480      	push	{r7}
 800d806:	b083      	sub	sp, #12
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d810:	f003 0301 	and.w	r3, r3, #1
 800d814:	2b00      	cmp	r3, #0
 800d816:	d00a      	beq.n	800d82e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	685b      	ldr	r3, [r3, #4]
 800d81e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	430a      	orrs	r2, r1
 800d82c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d832:	f003 0302 	and.w	r3, r3, #2
 800d836:	2b00      	cmp	r3, #0
 800d838:	d00a      	beq.n	800d850 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	685b      	ldr	r3, [r3, #4]
 800d840:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	430a      	orrs	r2, r1
 800d84e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d854:	f003 0304 	and.w	r3, r3, #4
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d00a      	beq.n	800d872 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	685b      	ldr	r3, [r3, #4]
 800d862:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	430a      	orrs	r2, r1
 800d870:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d876:	f003 0308 	and.w	r3, r3, #8
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d00a      	beq.n	800d894 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	685b      	ldr	r3, [r3, #4]
 800d884:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	430a      	orrs	r2, r1
 800d892:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d898:	f003 0310 	and.w	r3, r3, #16
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d00a      	beq.n	800d8b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	689b      	ldr	r3, [r3, #8]
 800d8a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	430a      	orrs	r2, r1
 800d8b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8ba:	f003 0320 	and.w	r3, r3, #32
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d00a      	beq.n	800d8d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	689b      	ldr	r3, [r3, #8]
 800d8c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	430a      	orrs	r2, r1
 800d8d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d01a      	beq.n	800d91a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	685b      	ldr	r3, [r3, #4]
 800d8ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	430a      	orrs	r2, r1
 800d8f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d8fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d902:	d10a      	bne.n	800d91a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	685b      	ldr	r3, [r3, #4]
 800d90a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	430a      	orrs	r2, r1
 800d918:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d91e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d922:	2b00      	cmp	r3, #0
 800d924:	d00a      	beq.n	800d93c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	685b      	ldr	r3, [r3, #4]
 800d92c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	430a      	orrs	r2, r1
 800d93a:	605a      	str	r2, [r3, #4]
  }
}
 800d93c:	bf00      	nop
 800d93e:	370c      	adds	r7, #12
 800d940:	46bd      	mov	sp, r7
 800d942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d946:	4770      	bx	lr

0800d948 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b098      	sub	sp, #96	; 0x60
 800d94c:	af02      	add	r7, sp, #8
 800d94e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	2200      	movs	r2, #0
 800d954:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d958:	f7f7 f8fa 	bl	8004b50 <HAL_GetTick>
 800d95c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	f003 0308 	and.w	r3, r3, #8
 800d968:	2b08      	cmp	r3, #8
 800d96a:	d12f      	bne.n	800d9cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d96c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d970:	9300      	str	r3, [sp, #0]
 800d972:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d974:	2200      	movs	r2, #0
 800d976:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d97a:	6878      	ldr	r0, [r7, #4]
 800d97c:	f000 f88e 	bl	800da9c <UART_WaitOnFlagUntilTimeout>
 800d980:	4603      	mov	r3, r0
 800d982:	2b00      	cmp	r3, #0
 800d984:	d022      	beq.n	800d9cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d98c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d98e:	e853 3f00 	ldrex	r3, [r3]
 800d992:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d996:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d99a:	653b      	str	r3, [r7, #80]	; 0x50
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	461a      	mov	r2, r3
 800d9a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9a4:	647b      	str	r3, [r7, #68]	; 0x44
 800d9a6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d9aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d9ac:	e841 2300 	strex	r3, r2, [r1]
 800d9b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d9b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d1e6      	bne.n	800d986 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	2220      	movs	r2, #32
 800d9bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d9c8:	2303      	movs	r3, #3
 800d9ca:	e063      	b.n	800da94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	f003 0304 	and.w	r3, r3, #4
 800d9d6:	2b04      	cmp	r3, #4
 800d9d8:	d149      	bne.n	800da6e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d9da:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d9de:	9300      	str	r3, [sp, #0]
 800d9e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d9e8:	6878      	ldr	r0, [r7, #4]
 800d9ea:	f000 f857 	bl	800da9c <UART_WaitOnFlagUntilTimeout>
 800d9ee:	4603      	mov	r3, r0
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d03c      	beq.n	800da6e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9fc:	e853 3f00 	ldrex	r3, [r3]
 800da00:	623b      	str	r3, [r7, #32]
   return(result);
 800da02:	6a3b      	ldr	r3, [r7, #32]
 800da04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800da08:	64fb      	str	r3, [r7, #76]	; 0x4c
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	461a      	mov	r2, r3
 800da10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da12:	633b      	str	r3, [r7, #48]	; 0x30
 800da14:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800da18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da1a:	e841 2300 	strex	r3, r2, [r1]
 800da1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800da20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da22:	2b00      	cmp	r3, #0
 800da24:	d1e6      	bne.n	800d9f4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	3308      	adds	r3, #8
 800da2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da2e:	693b      	ldr	r3, [r7, #16]
 800da30:	e853 3f00 	ldrex	r3, [r3]
 800da34:	60fb      	str	r3, [r7, #12]
   return(result);
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	f023 0301 	bic.w	r3, r3, #1
 800da3c:	64bb      	str	r3, [r7, #72]	; 0x48
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	3308      	adds	r3, #8
 800da44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800da46:	61fa      	str	r2, [r7, #28]
 800da48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da4a:	69b9      	ldr	r1, [r7, #24]
 800da4c:	69fa      	ldr	r2, [r7, #28]
 800da4e:	e841 2300 	strex	r3, r2, [r1]
 800da52:	617b      	str	r3, [r7, #20]
   return(result);
 800da54:	697b      	ldr	r3, [r7, #20]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d1e5      	bne.n	800da26 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	2220      	movs	r2, #32
 800da5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	2200      	movs	r2, #0
 800da66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800da6a:	2303      	movs	r3, #3
 800da6c:	e012      	b.n	800da94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	2220      	movs	r2, #32
 800da72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	2220      	movs	r2, #32
 800da7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	2200      	movs	r2, #0
 800da82:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2200      	movs	r2, #0
 800da88:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	2200      	movs	r2, #0
 800da8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800da92:	2300      	movs	r3, #0
}
 800da94:	4618      	mov	r0, r3
 800da96:	3758      	adds	r7, #88	; 0x58
 800da98:	46bd      	mov	sp, r7
 800da9a:	bd80      	pop	{r7, pc}

0800da9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b084      	sub	sp, #16
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	60f8      	str	r0, [r7, #12]
 800daa4:	60b9      	str	r1, [r7, #8]
 800daa6:	603b      	str	r3, [r7, #0]
 800daa8:	4613      	mov	r3, r2
 800daaa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800daac:	e049      	b.n	800db42 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800daae:	69bb      	ldr	r3, [r7, #24]
 800dab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dab4:	d045      	beq.n	800db42 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dab6:	f7f7 f84b 	bl	8004b50 <HAL_GetTick>
 800daba:	4602      	mov	r2, r0
 800dabc:	683b      	ldr	r3, [r7, #0]
 800dabe:	1ad3      	subs	r3, r2, r3
 800dac0:	69ba      	ldr	r2, [r7, #24]
 800dac2:	429a      	cmp	r2, r3
 800dac4:	d302      	bcc.n	800dacc <UART_WaitOnFlagUntilTimeout+0x30>
 800dac6:	69bb      	ldr	r3, [r7, #24]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d101      	bne.n	800dad0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800dacc:	2303      	movs	r3, #3
 800dace:	e048      	b.n	800db62 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	f003 0304 	and.w	r3, r3, #4
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d031      	beq.n	800db42 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	69db      	ldr	r3, [r3, #28]
 800dae4:	f003 0308 	and.w	r3, r3, #8
 800dae8:	2b08      	cmp	r3, #8
 800daea:	d110      	bne.n	800db0e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	2208      	movs	r2, #8
 800daf2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800daf4:	68f8      	ldr	r0, [r7, #12]
 800daf6:	f000 f921 	bl	800dd3c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	2208      	movs	r2, #8
 800dafe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	2200      	movs	r2, #0
 800db06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800db0a:	2301      	movs	r3, #1
 800db0c:	e029      	b.n	800db62 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	69db      	ldr	r3, [r3, #28]
 800db14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800db18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800db1c:	d111      	bne.n	800db42 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800db26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800db28:	68f8      	ldr	r0, [r7, #12]
 800db2a:	f000 f907 	bl	800dd3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	2220      	movs	r2, #32
 800db32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	2200      	movs	r2, #0
 800db3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800db3e:	2303      	movs	r3, #3
 800db40:	e00f      	b.n	800db62 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	69da      	ldr	r2, [r3, #28]
 800db48:	68bb      	ldr	r3, [r7, #8]
 800db4a:	4013      	ands	r3, r2
 800db4c:	68ba      	ldr	r2, [r7, #8]
 800db4e:	429a      	cmp	r2, r3
 800db50:	bf0c      	ite	eq
 800db52:	2301      	moveq	r3, #1
 800db54:	2300      	movne	r3, #0
 800db56:	b2db      	uxtb	r3, r3
 800db58:	461a      	mov	r2, r3
 800db5a:	79fb      	ldrb	r3, [r7, #7]
 800db5c:	429a      	cmp	r2, r3
 800db5e:	d0a6      	beq.n	800daae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800db60:	2300      	movs	r3, #0
}
 800db62:	4618      	mov	r0, r3
 800db64:	3710      	adds	r7, #16
 800db66:	46bd      	mov	sp, r7
 800db68:	bd80      	pop	{r7, pc}
	...

0800db6c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b096      	sub	sp, #88	; 0x58
 800db70:	af00      	add	r7, sp, #0
 800db72:	60f8      	str	r0, [r7, #12]
 800db74:	60b9      	str	r1, [r7, #8]
 800db76:	4613      	mov	r3, r2
 800db78:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	68ba      	ldr	r2, [r7, #8]
 800db7e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	88fa      	ldrh	r2, [r7, #6]
 800db84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	2200      	movs	r2, #0
 800db8c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	2222      	movs	r2, #34	; 0x22
 800db94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d02d      	beq.n	800dbfe <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dba8:	4a40      	ldr	r2, [pc, #256]	; (800dcac <UART_Start_Receive_DMA+0x140>)
 800dbaa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dbb2:	4a3f      	ldr	r2, [pc, #252]	; (800dcb0 <UART_Start_Receive_DMA+0x144>)
 800dbb4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dbbc:	4a3d      	ldr	r2, [pc, #244]	; (800dcb4 <UART_Start_Receive_DMA+0x148>)
 800dbbe:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	3324      	adds	r3, #36	; 0x24
 800dbd6:	4619      	mov	r1, r3
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dbdc:	461a      	mov	r2, r3
 800dbde:	88fb      	ldrh	r3, [r7, #6]
 800dbe0:	f7f7 fc2c 	bl	800543c <HAL_DMA_Start_IT>
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d009      	beq.n	800dbfe <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	2210      	movs	r2, #16
 800dbee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	2220      	movs	r2, #32
 800dbf6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800dbfa:	2301      	movs	r3, #1
 800dbfc:	e051      	b.n	800dca2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	691b      	ldr	r3, [r3, #16]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d018      	beq.n	800dc38 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc0e:	e853 3f00 	ldrex	r3, [r3]
 800dc12:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dc14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dc1a:	657b      	str	r3, [r7, #84]	; 0x54
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	461a      	mov	r2, r3
 800dc22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dc24:	64bb      	str	r3, [r7, #72]	; 0x48
 800dc26:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc28:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dc2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dc2c:	e841 2300 	strex	r3, r2, [r1]
 800dc30:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800dc32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d1e6      	bne.n	800dc06 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	3308      	adds	r3, #8
 800dc3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc42:	e853 3f00 	ldrex	r3, [r3]
 800dc46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dc48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc4a:	f043 0301 	orr.w	r3, r3, #1
 800dc4e:	653b      	str	r3, [r7, #80]	; 0x50
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	3308      	adds	r3, #8
 800dc56:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dc58:	637a      	str	r2, [r7, #52]	; 0x34
 800dc5a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dc5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc60:	e841 2300 	strex	r3, r2, [r1]
 800dc64:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800dc66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d1e5      	bne.n	800dc38 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	3308      	adds	r3, #8
 800dc72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc74:	697b      	ldr	r3, [r7, #20]
 800dc76:	e853 3f00 	ldrex	r3, [r3]
 800dc7a:	613b      	str	r3, [r7, #16]
   return(result);
 800dc7c:	693b      	ldr	r3, [r7, #16]
 800dc7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc82:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	3308      	adds	r3, #8
 800dc8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dc8c:	623a      	str	r2, [r7, #32]
 800dc8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc90:	69f9      	ldr	r1, [r7, #28]
 800dc92:	6a3a      	ldr	r2, [r7, #32]
 800dc94:	e841 2300 	strex	r3, r2, [r1]
 800dc98:	61bb      	str	r3, [r7, #24]
   return(result);
 800dc9a:	69bb      	ldr	r3, [r7, #24]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d1e5      	bne.n	800dc6c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800dca0:	2300      	movs	r3, #0
}
 800dca2:	4618      	mov	r0, r3
 800dca4:	3758      	adds	r7, #88	; 0x58
 800dca6:	46bd      	mov	sp, r7
 800dca8:	bd80      	pop	{r7, pc}
 800dcaa:	bf00      	nop
 800dcac:	0800debb 	.word	0x0800debb
 800dcb0:	0800dfe3 	.word	0x0800dfe3
 800dcb4:	0800e021 	.word	0x0800e021

0800dcb8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800dcb8:	b480      	push	{r7}
 800dcba:	b08f      	sub	sp, #60	; 0x3c
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcc6:	6a3b      	ldr	r3, [r7, #32]
 800dcc8:	e853 3f00 	ldrex	r3, [r3]
 800dccc:	61fb      	str	r3, [r7, #28]
   return(result);
 800dcce:	69fb      	ldr	r3, [r7, #28]
 800dcd0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800dcd4:	637b      	str	r3, [r7, #52]	; 0x34
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	461a      	mov	r2, r3
 800dcdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcde:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dce0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dce2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dce4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dce6:	e841 2300 	strex	r3, r2, [r1]
 800dcea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dcec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d1e6      	bne.n	800dcc0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	3308      	adds	r3, #8
 800dcf8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	e853 3f00 	ldrex	r3, [r3]
 800dd00:	60bb      	str	r3, [r7, #8]
   return(result);
 800dd02:	68bb      	ldr	r3, [r7, #8]
 800dd04:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800dd08:	633b      	str	r3, [r7, #48]	; 0x30
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	3308      	adds	r3, #8
 800dd10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd12:	61ba      	str	r2, [r7, #24]
 800dd14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd16:	6979      	ldr	r1, [r7, #20]
 800dd18:	69ba      	ldr	r2, [r7, #24]
 800dd1a:	e841 2300 	strex	r3, r2, [r1]
 800dd1e:	613b      	str	r3, [r7, #16]
   return(result);
 800dd20:	693b      	ldr	r3, [r7, #16]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d1e5      	bne.n	800dcf2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	2220      	movs	r2, #32
 800dd2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800dd2e:	bf00      	nop
 800dd30:	373c      	adds	r7, #60	; 0x3c
 800dd32:	46bd      	mov	sp, r7
 800dd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd38:	4770      	bx	lr
	...

0800dd3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dd3c:	b480      	push	{r7}
 800dd3e:	b095      	sub	sp, #84	; 0x54
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd4c:	e853 3f00 	ldrex	r3, [r3]
 800dd50:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800dd52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dd58:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	461a      	mov	r2, r3
 800dd60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd62:	643b      	str	r3, [r7, #64]	; 0x40
 800dd64:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd66:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dd68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dd6a:	e841 2300 	strex	r3, r2, [r1]
 800dd6e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dd70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d1e6      	bne.n	800dd44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	3308      	adds	r3, #8
 800dd7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd7e:	6a3b      	ldr	r3, [r7, #32]
 800dd80:	e853 3f00 	ldrex	r3, [r3]
 800dd84:	61fb      	str	r3, [r7, #28]
   return(result);
 800dd86:	69fa      	ldr	r2, [r7, #28]
 800dd88:	4b1e      	ldr	r3, [pc, #120]	; (800de04 <UART_EndRxTransfer+0xc8>)
 800dd8a:	4013      	ands	r3, r2
 800dd8c:	64bb      	str	r3, [r7, #72]	; 0x48
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	3308      	adds	r3, #8
 800dd94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dd96:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dd98:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dd9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd9e:	e841 2300 	strex	r3, r2, [r1]
 800dda2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dda4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d1e5      	bne.n	800dd76 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddae:	2b01      	cmp	r3, #1
 800ddb0:	d118      	bne.n	800dde4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	e853 3f00 	ldrex	r3, [r3]
 800ddbe:	60bb      	str	r3, [r7, #8]
   return(result);
 800ddc0:	68bb      	ldr	r3, [r7, #8]
 800ddc2:	f023 0310 	bic.w	r3, r3, #16
 800ddc6:	647b      	str	r3, [r7, #68]	; 0x44
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	461a      	mov	r2, r3
 800ddce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ddd0:	61bb      	str	r3, [r7, #24]
 800ddd2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddd4:	6979      	ldr	r1, [r7, #20]
 800ddd6:	69ba      	ldr	r2, [r7, #24]
 800ddd8:	e841 2300 	strex	r3, r2, [r1]
 800dddc:	613b      	str	r3, [r7, #16]
   return(result);
 800ddde:	693b      	ldr	r3, [r7, #16]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d1e6      	bne.n	800ddb2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	2220      	movs	r2, #32
 800dde8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	2200      	movs	r2, #0
 800ddf0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	675a      	str	r2, [r3, #116]	; 0x74
}
 800ddf8:	bf00      	nop
 800ddfa:	3754      	adds	r7, #84	; 0x54
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de02:	4770      	bx	lr
 800de04:	effffffe 	.word	0xeffffffe

0800de08 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b090      	sub	sp, #64	; 0x40
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de14:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	69db      	ldr	r3, [r3, #28]
 800de1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800de1e:	d037      	beq.n	800de90 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800de20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de22:	2200      	movs	r2, #0
 800de24:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800de28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	3308      	adds	r3, #8
 800de2e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de32:	e853 3f00 	ldrex	r3, [r3]
 800de36:	623b      	str	r3, [r7, #32]
   return(result);
 800de38:	6a3b      	ldr	r3, [r7, #32]
 800de3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800de3e:	63bb      	str	r3, [r7, #56]	; 0x38
 800de40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	3308      	adds	r3, #8
 800de46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800de48:	633a      	str	r2, [r7, #48]	; 0x30
 800de4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800de4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de50:	e841 2300 	strex	r3, r2, [r1]
 800de54:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800de56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d1e5      	bne.n	800de28 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800de5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de62:	693b      	ldr	r3, [r7, #16]
 800de64:	e853 3f00 	ldrex	r3, [r3]
 800de68:	60fb      	str	r3, [r7, #12]
   return(result);
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de70:	637b      	str	r3, [r7, #52]	; 0x34
 800de72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	461a      	mov	r2, r3
 800de78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de7a:	61fb      	str	r3, [r7, #28]
 800de7c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de7e:	69b9      	ldr	r1, [r7, #24]
 800de80:	69fa      	ldr	r2, [r7, #28]
 800de82:	e841 2300 	strex	r3, r2, [r1]
 800de86:	617b      	str	r3, [r7, #20]
   return(result);
 800de88:	697b      	ldr	r3, [r7, #20]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d1e6      	bne.n	800de5c <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800de8e:	e002      	b.n	800de96 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800de90:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800de92:	f7f5 fb39 	bl	8003508 <HAL_UART_TxCpltCallback>
}
 800de96:	bf00      	nop
 800de98:	3740      	adds	r7, #64	; 0x40
 800de9a:	46bd      	mov	sp, r7
 800de9c:	bd80      	pop	{r7, pc}

0800de9e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800de9e:	b580      	push	{r7, lr}
 800dea0:	b084      	sub	sp, #16
 800dea2:	af00      	add	r7, sp, #0
 800dea4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800deaa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800deac:	68f8      	ldr	r0, [r7, #12]
 800deae:	f7fe fe13 	bl	800cad8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800deb2:	bf00      	nop
 800deb4:	3710      	adds	r7, #16
 800deb6:	46bd      	mov	sp, r7
 800deb8:	bd80      	pop	{r7, pc}

0800deba <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800deba:	b580      	push	{r7, lr}
 800debc:	b09c      	sub	sp, #112	; 0x70
 800debe:	af00      	add	r7, sp, #0
 800dec0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dec6:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	69db      	ldr	r3, [r3, #28]
 800decc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ded0:	d071      	beq.n	800dfb6 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800ded2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ded4:	2200      	movs	r2, #0
 800ded6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800deda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dee0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dee2:	e853 3f00 	ldrex	r3, [r3]
 800dee6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800dee8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800deea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800deee:	66bb      	str	r3, [r7, #104]	; 0x68
 800def0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	461a      	mov	r2, r3
 800def6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800def8:	65bb      	str	r3, [r7, #88]	; 0x58
 800defa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800defc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800defe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800df00:	e841 2300 	strex	r3, r2, [r1]
 800df04:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800df06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d1e6      	bne.n	800deda <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800df0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	3308      	adds	r3, #8
 800df12:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df16:	e853 3f00 	ldrex	r3, [r3]
 800df1a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800df1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df1e:	f023 0301 	bic.w	r3, r3, #1
 800df22:	667b      	str	r3, [r7, #100]	; 0x64
 800df24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	3308      	adds	r3, #8
 800df2a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800df2c:	647a      	str	r2, [r7, #68]	; 0x44
 800df2e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df30:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800df32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800df34:	e841 2300 	strex	r3, r2, [r1]
 800df38:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800df3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d1e5      	bne.n	800df0c <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800df40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	3308      	adds	r3, #8
 800df46:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df4a:	e853 3f00 	ldrex	r3, [r3]
 800df4e:	623b      	str	r3, [r7, #32]
   return(result);
 800df50:	6a3b      	ldr	r3, [r7, #32]
 800df52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800df56:	663b      	str	r3, [r7, #96]	; 0x60
 800df58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	3308      	adds	r3, #8
 800df5e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800df60:	633a      	str	r2, [r7, #48]	; 0x30
 800df62:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800df66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df68:	e841 2300 	strex	r3, r2, [r1]
 800df6c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800df6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df70:	2b00      	cmp	r3, #0
 800df72:	d1e5      	bne.n	800df40 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800df74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df76:	2220      	movs	r2, #32
 800df78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800df7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df80:	2b01      	cmp	r3, #1
 800df82:	d118      	bne.n	800dfb6 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df8a:	693b      	ldr	r3, [r7, #16]
 800df8c:	e853 3f00 	ldrex	r3, [r3]
 800df90:	60fb      	str	r3, [r7, #12]
   return(result);
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	f023 0310 	bic.w	r3, r3, #16
 800df98:	65fb      	str	r3, [r7, #92]	; 0x5c
 800df9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	461a      	mov	r2, r3
 800dfa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dfa2:	61fb      	str	r3, [r7, #28]
 800dfa4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfa6:	69b9      	ldr	r1, [r7, #24]
 800dfa8:	69fa      	ldr	r2, [r7, #28]
 800dfaa:	e841 2300 	strex	r3, r2, [r1]
 800dfae:	617b      	str	r3, [r7, #20]
   return(result);
 800dfb0:	697b      	ldr	r3, [r7, #20]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d1e6      	bne.n	800df84 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dfb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dfb8:	2200      	movs	r2, #0
 800dfba:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dfbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dfbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfc0:	2b01      	cmp	r3, #1
 800dfc2:	d107      	bne.n	800dfd4 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dfc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dfc6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dfca:	4619      	mov	r1, r3
 800dfcc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800dfce:	f7fe fda1 	bl	800cb14 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800dfd2:	e002      	b.n	800dfda <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800dfd4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800dfd6:	f7f5 faa9 	bl	800352c <HAL_UART_RxCpltCallback>
}
 800dfda:	bf00      	nop
 800dfdc:	3770      	adds	r7, #112	; 0x70
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	bd80      	pop	{r7, pc}

0800dfe2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800dfe2:	b580      	push	{r7, lr}
 800dfe4:	b084      	sub	sp, #16
 800dfe6:	af00      	add	r7, sp, #0
 800dfe8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfee:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	2201      	movs	r2, #1
 800dff4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dffa:	2b01      	cmp	r3, #1
 800dffc:	d109      	bne.n	800e012 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e004:	085b      	lsrs	r3, r3, #1
 800e006:	b29b      	uxth	r3, r3
 800e008:	4619      	mov	r1, r3
 800e00a:	68f8      	ldr	r0, [r7, #12]
 800e00c:	f7fe fd82 	bl	800cb14 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e010:	e002      	b.n	800e018 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800e012:	68f8      	ldr	r0, [r7, #12]
 800e014:	f7fe fd6a 	bl	800caec <HAL_UART_RxHalfCpltCallback>
}
 800e018:	bf00      	nop
 800e01a:	3710      	adds	r7, #16
 800e01c:	46bd      	mov	sp, r7
 800e01e:	bd80      	pop	{r7, pc}

0800e020 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e020:	b580      	push	{r7, lr}
 800e022:	b086      	sub	sp, #24
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e02c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e02e:	697b      	ldr	r3, [r7, #20]
 800e030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e034:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e036:	697b      	ldr	r3, [r7, #20]
 800e038:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e03c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e03e:	697b      	ldr	r3, [r7, #20]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	689b      	ldr	r3, [r3, #8]
 800e044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e048:	2b80      	cmp	r3, #128	; 0x80
 800e04a:	d109      	bne.n	800e060 <UART_DMAError+0x40>
 800e04c:	693b      	ldr	r3, [r7, #16]
 800e04e:	2b21      	cmp	r3, #33	; 0x21
 800e050:	d106      	bne.n	800e060 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e052:	697b      	ldr	r3, [r7, #20]
 800e054:	2200      	movs	r2, #0
 800e056:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800e05a:	6978      	ldr	r0, [r7, #20]
 800e05c:	f7ff fe2c 	bl	800dcb8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e060:	697b      	ldr	r3, [r7, #20]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	689b      	ldr	r3, [r3, #8]
 800e066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e06a:	2b40      	cmp	r3, #64	; 0x40
 800e06c:	d109      	bne.n	800e082 <UART_DMAError+0x62>
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	2b22      	cmp	r3, #34	; 0x22
 800e072:	d106      	bne.n	800e082 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e074:	697b      	ldr	r3, [r7, #20]
 800e076:	2200      	movs	r2, #0
 800e078:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800e07c:	6978      	ldr	r0, [r7, #20]
 800e07e:	f7ff fe5d 	bl	800dd3c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e082:	697b      	ldr	r3, [r7, #20]
 800e084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e088:	f043 0210 	orr.w	r2, r3, #16
 800e08c:	697b      	ldr	r3, [r7, #20]
 800e08e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e092:	6978      	ldr	r0, [r7, #20]
 800e094:	f7fe fd34 	bl	800cb00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e098:	bf00      	nop
 800e09a:	3718      	adds	r7, #24
 800e09c:	46bd      	mov	sp, r7
 800e09e:	bd80      	pop	{r7, pc}

0800e0a0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b084      	sub	sp, #16
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	2200      	movs	r2, #0
 800e0b2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e0be:	68f8      	ldr	r0, [r7, #12]
 800e0c0:	f7fe fd1e 	bl	800cb00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e0c4:	bf00      	nop
 800e0c6:	3710      	adds	r7, #16
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	bd80      	pop	{r7, pc}

0800e0cc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e0cc:	b580      	push	{r7, lr}
 800e0ce:	b088      	sub	sp, #32
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	e853 3f00 	ldrex	r3, [r3]
 800e0e0:	60bb      	str	r3, [r7, #8]
   return(result);
 800e0e2:	68bb      	ldr	r3, [r7, #8]
 800e0e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e0e8:	61fb      	str	r3, [r7, #28]
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	461a      	mov	r2, r3
 800e0f0:	69fb      	ldr	r3, [r7, #28]
 800e0f2:	61bb      	str	r3, [r7, #24]
 800e0f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0f6:	6979      	ldr	r1, [r7, #20]
 800e0f8:	69ba      	ldr	r2, [r7, #24]
 800e0fa:	e841 2300 	strex	r3, r2, [r1]
 800e0fe:	613b      	str	r3, [r7, #16]
   return(result);
 800e100:	693b      	ldr	r3, [r7, #16]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d1e6      	bne.n	800e0d4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	2220      	movs	r2, #32
 800e10a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	2200      	movs	r2, #0
 800e112:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e114:	6878      	ldr	r0, [r7, #4]
 800e116:	f7f5 f9f7 	bl	8003508 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e11a:	bf00      	nop
 800e11c:	3720      	adds	r7, #32
 800e11e:	46bd      	mov	sp, r7
 800e120:	bd80      	pop	{r7, pc}

0800e122 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e122:	b480      	push	{r7}
 800e124:	b083      	sub	sp, #12
 800e126:	af00      	add	r7, sp, #0
 800e128:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e12a:	bf00      	nop
 800e12c:	370c      	adds	r7, #12
 800e12e:	46bd      	mov	sp, r7
 800e130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e134:	4770      	bx	lr

0800e136 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e136:	b480      	push	{r7}
 800e138:	b083      	sub	sp, #12
 800e13a:	af00      	add	r7, sp, #0
 800e13c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e13e:	bf00      	nop
 800e140:	370c      	adds	r7, #12
 800e142:	46bd      	mov	sp, r7
 800e144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e148:	4770      	bx	lr

0800e14a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e14a:	b480      	push	{r7}
 800e14c:	b083      	sub	sp, #12
 800e14e:	af00      	add	r7, sp, #0
 800e150:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e152:	bf00      	nop
 800e154:	370c      	adds	r7, #12
 800e156:	46bd      	mov	sp, r7
 800e158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15c:	4770      	bx	lr

0800e15e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e15e:	b480      	push	{r7}
 800e160:	b085      	sub	sp, #20
 800e162:	af00      	add	r7, sp, #0
 800e164:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e16c:	2b01      	cmp	r3, #1
 800e16e:	d101      	bne.n	800e174 <HAL_UARTEx_DisableFifoMode+0x16>
 800e170:	2302      	movs	r3, #2
 800e172:	e027      	b.n	800e1c4 <HAL_UARTEx_DisableFifoMode+0x66>
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	2201      	movs	r2, #1
 800e178:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	2224      	movs	r2, #36	; 0x24
 800e180:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	681a      	ldr	r2, [r3, #0]
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	f022 0201 	bic.w	r2, r2, #1
 800e19a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e1a2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	68fa      	ldr	r2, [r7, #12]
 800e1b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	2220      	movs	r2, #32
 800e1b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	2200      	movs	r2, #0
 800e1be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e1c2:	2300      	movs	r3, #0
}
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	3714      	adds	r7, #20
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ce:	4770      	bx	lr

0800e1d0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b084      	sub	sp, #16
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
 800e1d8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e1e0:	2b01      	cmp	r3, #1
 800e1e2:	d101      	bne.n	800e1e8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e1e4:	2302      	movs	r3, #2
 800e1e6:	e02d      	b.n	800e244 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	2201      	movs	r2, #1
 800e1ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	2224      	movs	r2, #36	; 0x24
 800e1f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	681a      	ldr	r2, [r3, #0]
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	f022 0201 	bic.w	r2, r2, #1
 800e20e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	689b      	ldr	r3, [r3, #8]
 800e216:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	683a      	ldr	r2, [r7, #0]
 800e220:	430a      	orrs	r2, r1
 800e222:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e224:	6878      	ldr	r0, [r7, #4]
 800e226:	f000 f84f 	bl	800e2c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	68fa      	ldr	r2, [r7, #12]
 800e230:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	2220      	movs	r2, #32
 800e236:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	2200      	movs	r2, #0
 800e23e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e242:	2300      	movs	r3, #0
}
 800e244:	4618      	mov	r0, r3
 800e246:	3710      	adds	r7, #16
 800e248:	46bd      	mov	sp, r7
 800e24a:	bd80      	pop	{r7, pc}

0800e24c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e24c:	b580      	push	{r7, lr}
 800e24e:	b084      	sub	sp, #16
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
 800e254:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e25c:	2b01      	cmp	r3, #1
 800e25e:	d101      	bne.n	800e264 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e260:	2302      	movs	r3, #2
 800e262:	e02d      	b.n	800e2c0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	2201      	movs	r2, #1
 800e268:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	2224      	movs	r2, #36	; 0x24
 800e270:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	681a      	ldr	r2, [r3, #0]
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	f022 0201 	bic.w	r2, r2, #1
 800e28a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	689b      	ldr	r3, [r3, #8]
 800e292:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	683a      	ldr	r2, [r7, #0]
 800e29c:	430a      	orrs	r2, r1
 800e29e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e2a0:	6878      	ldr	r0, [r7, #4]
 800e2a2:	f000 f811 	bl	800e2c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	68fa      	ldr	r2, [r7, #12]
 800e2ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	2220      	movs	r2, #32
 800e2b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	2200      	movs	r2, #0
 800e2ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e2be:	2300      	movs	r3, #0
}
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	3710      	adds	r7, #16
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	bd80      	pop	{r7, pc}

0800e2c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e2c8:	b480      	push	{r7}
 800e2ca:	b085      	sub	sp, #20
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d108      	bne.n	800e2ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	2201      	movs	r2, #1
 800e2dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	2201      	movs	r2, #1
 800e2e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e2e8:	e031      	b.n	800e34e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e2ea:	2310      	movs	r3, #16
 800e2ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e2ee:	2310      	movs	r3, #16
 800e2f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	689b      	ldr	r3, [r3, #8]
 800e2f8:	0e5b      	lsrs	r3, r3, #25
 800e2fa:	b2db      	uxtb	r3, r3
 800e2fc:	f003 0307 	and.w	r3, r3, #7
 800e300:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	689b      	ldr	r3, [r3, #8]
 800e308:	0f5b      	lsrs	r3, r3, #29
 800e30a:	b2db      	uxtb	r3, r3
 800e30c:	f003 0307 	and.w	r3, r3, #7
 800e310:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e312:	7bbb      	ldrb	r3, [r7, #14]
 800e314:	7b3a      	ldrb	r2, [r7, #12]
 800e316:	4911      	ldr	r1, [pc, #68]	; (800e35c <UARTEx_SetNbDataToProcess+0x94>)
 800e318:	5c8a      	ldrb	r2, [r1, r2]
 800e31a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e31e:	7b3a      	ldrb	r2, [r7, #12]
 800e320:	490f      	ldr	r1, [pc, #60]	; (800e360 <UARTEx_SetNbDataToProcess+0x98>)
 800e322:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e324:	fb93 f3f2 	sdiv	r3, r3, r2
 800e328:	b29a      	uxth	r2, r3
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e330:	7bfb      	ldrb	r3, [r7, #15]
 800e332:	7b7a      	ldrb	r2, [r7, #13]
 800e334:	4909      	ldr	r1, [pc, #36]	; (800e35c <UARTEx_SetNbDataToProcess+0x94>)
 800e336:	5c8a      	ldrb	r2, [r1, r2]
 800e338:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e33c:	7b7a      	ldrb	r2, [r7, #13]
 800e33e:	4908      	ldr	r1, [pc, #32]	; (800e360 <UARTEx_SetNbDataToProcess+0x98>)
 800e340:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e342:	fb93 f3f2 	sdiv	r3, r3, r2
 800e346:	b29a      	uxth	r2, r3
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e34e:	bf00      	nop
 800e350:	3714      	adds	r7, #20
 800e352:	46bd      	mov	sp, r7
 800e354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e358:	4770      	bx	lr
 800e35a:	bf00      	nop
 800e35c:	0800ea28 	.word	0x0800ea28
 800e360:	0800ea30 	.word	0x0800ea30

0800e364 <__cxa_pure_virtual>:
 800e364:	b508      	push	{r3, lr}
 800e366:	f000 f80d 	bl	800e384 <_ZSt9terminatev>

0800e36a <_ZN10__cxxabiv111__terminateEPFvvE>:
 800e36a:	b508      	push	{r3, lr}
 800e36c:	4780      	blx	r0
 800e36e:	f000 f80e 	bl	800e38e <abort>
	...

0800e374 <_ZSt13get_terminatev>:
 800e374:	4b02      	ldr	r3, [pc, #8]	; (800e380 <_ZSt13get_terminatev+0xc>)
 800e376:	6818      	ldr	r0, [r3, #0]
 800e378:	f3bf 8f5b 	dmb	ish
 800e37c:	4770      	bx	lr
 800e37e:	bf00      	nop
 800e380:	24000020 	.word	0x24000020

0800e384 <_ZSt9terminatev>:
 800e384:	b508      	push	{r3, lr}
 800e386:	f7ff fff5 	bl	800e374 <_ZSt13get_terminatev>
 800e38a:	f7ff ffee 	bl	800e36a <_ZN10__cxxabiv111__terminateEPFvvE>

0800e38e <abort>:
 800e38e:	b508      	push	{r3, lr}
 800e390:	2006      	movs	r0, #6
 800e392:	f000 f873 	bl	800e47c <raise>
 800e396:	2001      	movs	r0, #1
 800e398:	f7f6 fa72 	bl	8004880 <_exit>

0800e39c <__errno>:
 800e39c:	4b01      	ldr	r3, [pc, #4]	; (800e3a4 <__errno+0x8>)
 800e39e:	6818      	ldr	r0, [r3, #0]
 800e3a0:	4770      	bx	lr
 800e3a2:	bf00      	nop
 800e3a4:	24000024 	.word	0x24000024

0800e3a8 <__libc_init_array>:
 800e3a8:	b570      	push	{r4, r5, r6, lr}
 800e3aa:	4d0d      	ldr	r5, [pc, #52]	; (800e3e0 <__libc_init_array+0x38>)
 800e3ac:	4c0d      	ldr	r4, [pc, #52]	; (800e3e4 <__libc_init_array+0x3c>)
 800e3ae:	1b64      	subs	r4, r4, r5
 800e3b0:	10a4      	asrs	r4, r4, #2
 800e3b2:	2600      	movs	r6, #0
 800e3b4:	42a6      	cmp	r6, r4
 800e3b6:	d109      	bne.n	800e3cc <__libc_init_array+0x24>
 800e3b8:	4d0b      	ldr	r5, [pc, #44]	; (800e3e8 <__libc_init_array+0x40>)
 800e3ba:	4c0c      	ldr	r4, [pc, #48]	; (800e3ec <__libc_init_array+0x44>)
 800e3bc:	f000 f9b0 	bl	800e720 <_init>
 800e3c0:	1b64      	subs	r4, r4, r5
 800e3c2:	10a4      	asrs	r4, r4, #2
 800e3c4:	2600      	movs	r6, #0
 800e3c6:	42a6      	cmp	r6, r4
 800e3c8:	d105      	bne.n	800e3d6 <__libc_init_array+0x2e>
 800e3ca:	bd70      	pop	{r4, r5, r6, pc}
 800e3cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800e3d0:	4798      	blx	r3
 800e3d2:	3601      	adds	r6, #1
 800e3d4:	e7ee      	b.n	800e3b4 <__libc_init_array+0xc>
 800e3d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800e3da:	4798      	blx	r3
 800e3dc:	3601      	adds	r6, #1
 800e3de:	e7f2      	b.n	800e3c6 <__libc_init_array+0x1e>
 800e3e0:	0800ea40 	.word	0x0800ea40
 800e3e4:	0800ea40 	.word	0x0800ea40
 800e3e8:	0800ea40 	.word	0x0800ea40
 800e3ec:	0800ea48 	.word	0x0800ea48

0800e3f0 <memcpy>:
 800e3f0:	440a      	add	r2, r1
 800e3f2:	4291      	cmp	r1, r2
 800e3f4:	f100 33ff 	add.w	r3, r0, #4294967295
 800e3f8:	d100      	bne.n	800e3fc <memcpy+0xc>
 800e3fa:	4770      	bx	lr
 800e3fc:	b510      	push	{r4, lr}
 800e3fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e402:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e406:	4291      	cmp	r1, r2
 800e408:	d1f9      	bne.n	800e3fe <memcpy+0xe>
 800e40a:	bd10      	pop	{r4, pc}

0800e40c <memset>:
 800e40c:	4402      	add	r2, r0
 800e40e:	4603      	mov	r3, r0
 800e410:	4293      	cmp	r3, r2
 800e412:	d100      	bne.n	800e416 <memset+0xa>
 800e414:	4770      	bx	lr
 800e416:	f803 1b01 	strb.w	r1, [r3], #1
 800e41a:	e7f9      	b.n	800e410 <memset+0x4>

0800e41c <realloc>:
 800e41c:	4b02      	ldr	r3, [pc, #8]	; (800e428 <realloc+0xc>)
 800e41e:	460a      	mov	r2, r1
 800e420:	4601      	mov	r1, r0
 800e422:	6818      	ldr	r0, [r3, #0]
 800e424:	f000 b8da 	b.w	800e5dc <_realloc_r>
 800e428:	24000024 	.word	0x24000024

0800e42c <_raise_r>:
 800e42c:	291f      	cmp	r1, #31
 800e42e:	b538      	push	{r3, r4, r5, lr}
 800e430:	4604      	mov	r4, r0
 800e432:	460d      	mov	r5, r1
 800e434:	d904      	bls.n	800e440 <_raise_r+0x14>
 800e436:	2316      	movs	r3, #22
 800e438:	6003      	str	r3, [r0, #0]
 800e43a:	f04f 30ff 	mov.w	r0, #4294967295
 800e43e:	bd38      	pop	{r3, r4, r5, pc}
 800e440:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e442:	b112      	cbz	r2, 800e44a <_raise_r+0x1e>
 800e444:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e448:	b94b      	cbnz	r3, 800e45e <_raise_r+0x32>
 800e44a:	4620      	mov	r0, r4
 800e44c:	f000 f830 	bl	800e4b0 <_getpid_r>
 800e450:	462a      	mov	r2, r5
 800e452:	4601      	mov	r1, r0
 800e454:	4620      	mov	r0, r4
 800e456:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e45a:	f000 b817 	b.w	800e48c <_kill_r>
 800e45e:	2b01      	cmp	r3, #1
 800e460:	d00a      	beq.n	800e478 <_raise_r+0x4c>
 800e462:	1c59      	adds	r1, r3, #1
 800e464:	d103      	bne.n	800e46e <_raise_r+0x42>
 800e466:	2316      	movs	r3, #22
 800e468:	6003      	str	r3, [r0, #0]
 800e46a:	2001      	movs	r0, #1
 800e46c:	e7e7      	b.n	800e43e <_raise_r+0x12>
 800e46e:	2400      	movs	r4, #0
 800e470:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e474:	4628      	mov	r0, r5
 800e476:	4798      	blx	r3
 800e478:	2000      	movs	r0, #0
 800e47a:	e7e0      	b.n	800e43e <_raise_r+0x12>

0800e47c <raise>:
 800e47c:	4b02      	ldr	r3, [pc, #8]	; (800e488 <raise+0xc>)
 800e47e:	4601      	mov	r1, r0
 800e480:	6818      	ldr	r0, [r3, #0]
 800e482:	f7ff bfd3 	b.w	800e42c <_raise_r>
 800e486:	bf00      	nop
 800e488:	24000024 	.word	0x24000024

0800e48c <_kill_r>:
 800e48c:	b538      	push	{r3, r4, r5, lr}
 800e48e:	4d07      	ldr	r5, [pc, #28]	; (800e4ac <_kill_r+0x20>)
 800e490:	2300      	movs	r3, #0
 800e492:	4604      	mov	r4, r0
 800e494:	4608      	mov	r0, r1
 800e496:	4611      	mov	r1, r2
 800e498:	602b      	str	r3, [r5, #0]
 800e49a:	f7f6 f9e1 	bl	8004860 <_kill>
 800e49e:	1c43      	adds	r3, r0, #1
 800e4a0:	d102      	bne.n	800e4a8 <_kill_r+0x1c>
 800e4a2:	682b      	ldr	r3, [r5, #0]
 800e4a4:	b103      	cbz	r3, 800e4a8 <_kill_r+0x1c>
 800e4a6:	6023      	str	r3, [r4, #0]
 800e4a8:	bd38      	pop	{r3, r4, r5, pc}
 800e4aa:	bf00      	nop
 800e4ac:	24000ef8 	.word	0x24000ef8

0800e4b0 <_getpid_r>:
 800e4b0:	f7f6 b9ce 	b.w	8004850 <_getpid>

0800e4b4 <sbrk_aligned>:
 800e4b4:	b570      	push	{r4, r5, r6, lr}
 800e4b6:	4e0e      	ldr	r6, [pc, #56]	; (800e4f0 <sbrk_aligned+0x3c>)
 800e4b8:	460c      	mov	r4, r1
 800e4ba:	6831      	ldr	r1, [r6, #0]
 800e4bc:	4605      	mov	r5, r0
 800e4be:	b911      	cbnz	r1, 800e4c6 <sbrk_aligned+0x12>
 800e4c0:	f000 f8bc 	bl	800e63c <_sbrk_r>
 800e4c4:	6030      	str	r0, [r6, #0]
 800e4c6:	4621      	mov	r1, r4
 800e4c8:	4628      	mov	r0, r5
 800e4ca:	f000 f8b7 	bl	800e63c <_sbrk_r>
 800e4ce:	1c43      	adds	r3, r0, #1
 800e4d0:	d00a      	beq.n	800e4e8 <sbrk_aligned+0x34>
 800e4d2:	1cc4      	adds	r4, r0, #3
 800e4d4:	f024 0403 	bic.w	r4, r4, #3
 800e4d8:	42a0      	cmp	r0, r4
 800e4da:	d007      	beq.n	800e4ec <sbrk_aligned+0x38>
 800e4dc:	1a21      	subs	r1, r4, r0
 800e4de:	4628      	mov	r0, r5
 800e4e0:	f000 f8ac 	bl	800e63c <_sbrk_r>
 800e4e4:	3001      	adds	r0, #1
 800e4e6:	d101      	bne.n	800e4ec <sbrk_aligned+0x38>
 800e4e8:	f04f 34ff 	mov.w	r4, #4294967295
 800e4ec:	4620      	mov	r0, r4
 800e4ee:	bd70      	pop	{r4, r5, r6, pc}
 800e4f0:	24000ef4 	.word	0x24000ef4

0800e4f4 <_malloc_r>:
 800e4f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4f8:	1ccd      	adds	r5, r1, #3
 800e4fa:	f025 0503 	bic.w	r5, r5, #3
 800e4fe:	3508      	adds	r5, #8
 800e500:	2d0c      	cmp	r5, #12
 800e502:	bf38      	it	cc
 800e504:	250c      	movcc	r5, #12
 800e506:	2d00      	cmp	r5, #0
 800e508:	4607      	mov	r7, r0
 800e50a:	db01      	blt.n	800e510 <_malloc_r+0x1c>
 800e50c:	42a9      	cmp	r1, r5
 800e50e:	d905      	bls.n	800e51c <_malloc_r+0x28>
 800e510:	230c      	movs	r3, #12
 800e512:	603b      	str	r3, [r7, #0]
 800e514:	2600      	movs	r6, #0
 800e516:	4630      	mov	r0, r6
 800e518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e51c:	4e2e      	ldr	r6, [pc, #184]	; (800e5d8 <_malloc_r+0xe4>)
 800e51e:	f000 f89d 	bl	800e65c <__malloc_lock>
 800e522:	6833      	ldr	r3, [r6, #0]
 800e524:	461c      	mov	r4, r3
 800e526:	bb34      	cbnz	r4, 800e576 <_malloc_r+0x82>
 800e528:	4629      	mov	r1, r5
 800e52a:	4638      	mov	r0, r7
 800e52c:	f7ff ffc2 	bl	800e4b4 <sbrk_aligned>
 800e530:	1c43      	adds	r3, r0, #1
 800e532:	4604      	mov	r4, r0
 800e534:	d14d      	bne.n	800e5d2 <_malloc_r+0xde>
 800e536:	6834      	ldr	r4, [r6, #0]
 800e538:	4626      	mov	r6, r4
 800e53a:	2e00      	cmp	r6, #0
 800e53c:	d140      	bne.n	800e5c0 <_malloc_r+0xcc>
 800e53e:	6823      	ldr	r3, [r4, #0]
 800e540:	4631      	mov	r1, r6
 800e542:	4638      	mov	r0, r7
 800e544:	eb04 0803 	add.w	r8, r4, r3
 800e548:	f000 f878 	bl	800e63c <_sbrk_r>
 800e54c:	4580      	cmp	r8, r0
 800e54e:	d13a      	bne.n	800e5c6 <_malloc_r+0xd2>
 800e550:	6821      	ldr	r1, [r4, #0]
 800e552:	3503      	adds	r5, #3
 800e554:	1a6d      	subs	r5, r5, r1
 800e556:	f025 0503 	bic.w	r5, r5, #3
 800e55a:	3508      	adds	r5, #8
 800e55c:	2d0c      	cmp	r5, #12
 800e55e:	bf38      	it	cc
 800e560:	250c      	movcc	r5, #12
 800e562:	4629      	mov	r1, r5
 800e564:	4638      	mov	r0, r7
 800e566:	f7ff ffa5 	bl	800e4b4 <sbrk_aligned>
 800e56a:	3001      	adds	r0, #1
 800e56c:	d02b      	beq.n	800e5c6 <_malloc_r+0xd2>
 800e56e:	6823      	ldr	r3, [r4, #0]
 800e570:	442b      	add	r3, r5
 800e572:	6023      	str	r3, [r4, #0]
 800e574:	e00e      	b.n	800e594 <_malloc_r+0xa0>
 800e576:	6822      	ldr	r2, [r4, #0]
 800e578:	1b52      	subs	r2, r2, r5
 800e57a:	d41e      	bmi.n	800e5ba <_malloc_r+0xc6>
 800e57c:	2a0b      	cmp	r2, #11
 800e57e:	d916      	bls.n	800e5ae <_malloc_r+0xba>
 800e580:	1961      	adds	r1, r4, r5
 800e582:	42a3      	cmp	r3, r4
 800e584:	6025      	str	r5, [r4, #0]
 800e586:	bf18      	it	ne
 800e588:	6059      	strne	r1, [r3, #4]
 800e58a:	6863      	ldr	r3, [r4, #4]
 800e58c:	bf08      	it	eq
 800e58e:	6031      	streq	r1, [r6, #0]
 800e590:	5162      	str	r2, [r4, r5]
 800e592:	604b      	str	r3, [r1, #4]
 800e594:	4638      	mov	r0, r7
 800e596:	f104 060b 	add.w	r6, r4, #11
 800e59a:	f000 f865 	bl	800e668 <__malloc_unlock>
 800e59e:	f026 0607 	bic.w	r6, r6, #7
 800e5a2:	1d23      	adds	r3, r4, #4
 800e5a4:	1af2      	subs	r2, r6, r3
 800e5a6:	d0b6      	beq.n	800e516 <_malloc_r+0x22>
 800e5a8:	1b9b      	subs	r3, r3, r6
 800e5aa:	50a3      	str	r3, [r4, r2]
 800e5ac:	e7b3      	b.n	800e516 <_malloc_r+0x22>
 800e5ae:	6862      	ldr	r2, [r4, #4]
 800e5b0:	42a3      	cmp	r3, r4
 800e5b2:	bf0c      	ite	eq
 800e5b4:	6032      	streq	r2, [r6, #0]
 800e5b6:	605a      	strne	r2, [r3, #4]
 800e5b8:	e7ec      	b.n	800e594 <_malloc_r+0xa0>
 800e5ba:	4623      	mov	r3, r4
 800e5bc:	6864      	ldr	r4, [r4, #4]
 800e5be:	e7b2      	b.n	800e526 <_malloc_r+0x32>
 800e5c0:	4634      	mov	r4, r6
 800e5c2:	6876      	ldr	r6, [r6, #4]
 800e5c4:	e7b9      	b.n	800e53a <_malloc_r+0x46>
 800e5c6:	230c      	movs	r3, #12
 800e5c8:	603b      	str	r3, [r7, #0]
 800e5ca:	4638      	mov	r0, r7
 800e5cc:	f000 f84c 	bl	800e668 <__malloc_unlock>
 800e5d0:	e7a1      	b.n	800e516 <_malloc_r+0x22>
 800e5d2:	6025      	str	r5, [r4, #0]
 800e5d4:	e7de      	b.n	800e594 <_malloc_r+0xa0>
 800e5d6:	bf00      	nop
 800e5d8:	24000ef0 	.word	0x24000ef0

0800e5dc <_realloc_r>:
 800e5dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5e0:	4680      	mov	r8, r0
 800e5e2:	4614      	mov	r4, r2
 800e5e4:	460e      	mov	r6, r1
 800e5e6:	b921      	cbnz	r1, 800e5f2 <_realloc_r+0x16>
 800e5e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e5ec:	4611      	mov	r1, r2
 800e5ee:	f7ff bf81 	b.w	800e4f4 <_malloc_r>
 800e5f2:	b92a      	cbnz	r2, 800e600 <_realloc_r+0x24>
 800e5f4:	f000 f83e 	bl	800e674 <_free_r>
 800e5f8:	4625      	mov	r5, r4
 800e5fa:	4628      	mov	r0, r5
 800e5fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e600:	f000 f884 	bl	800e70c <_malloc_usable_size_r>
 800e604:	4284      	cmp	r4, r0
 800e606:	4607      	mov	r7, r0
 800e608:	d802      	bhi.n	800e610 <_realloc_r+0x34>
 800e60a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e60e:	d812      	bhi.n	800e636 <_realloc_r+0x5a>
 800e610:	4621      	mov	r1, r4
 800e612:	4640      	mov	r0, r8
 800e614:	f7ff ff6e 	bl	800e4f4 <_malloc_r>
 800e618:	4605      	mov	r5, r0
 800e61a:	2800      	cmp	r0, #0
 800e61c:	d0ed      	beq.n	800e5fa <_realloc_r+0x1e>
 800e61e:	42bc      	cmp	r4, r7
 800e620:	4622      	mov	r2, r4
 800e622:	4631      	mov	r1, r6
 800e624:	bf28      	it	cs
 800e626:	463a      	movcs	r2, r7
 800e628:	f7ff fee2 	bl	800e3f0 <memcpy>
 800e62c:	4631      	mov	r1, r6
 800e62e:	4640      	mov	r0, r8
 800e630:	f000 f820 	bl	800e674 <_free_r>
 800e634:	e7e1      	b.n	800e5fa <_realloc_r+0x1e>
 800e636:	4635      	mov	r5, r6
 800e638:	e7df      	b.n	800e5fa <_realloc_r+0x1e>
	...

0800e63c <_sbrk_r>:
 800e63c:	b538      	push	{r3, r4, r5, lr}
 800e63e:	4d06      	ldr	r5, [pc, #24]	; (800e658 <_sbrk_r+0x1c>)
 800e640:	2300      	movs	r3, #0
 800e642:	4604      	mov	r4, r0
 800e644:	4608      	mov	r0, r1
 800e646:	602b      	str	r3, [r5, #0]
 800e648:	f7f6 f924 	bl	8004894 <_sbrk>
 800e64c:	1c43      	adds	r3, r0, #1
 800e64e:	d102      	bne.n	800e656 <_sbrk_r+0x1a>
 800e650:	682b      	ldr	r3, [r5, #0]
 800e652:	b103      	cbz	r3, 800e656 <_sbrk_r+0x1a>
 800e654:	6023      	str	r3, [r4, #0]
 800e656:	bd38      	pop	{r3, r4, r5, pc}
 800e658:	24000ef8 	.word	0x24000ef8

0800e65c <__malloc_lock>:
 800e65c:	4801      	ldr	r0, [pc, #4]	; (800e664 <__malloc_lock+0x8>)
 800e65e:	f000 b85d 	b.w	800e71c <__retarget_lock_acquire_recursive>
 800e662:	bf00      	nop
 800e664:	24000efc 	.word	0x24000efc

0800e668 <__malloc_unlock>:
 800e668:	4801      	ldr	r0, [pc, #4]	; (800e670 <__malloc_unlock+0x8>)
 800e66a:	f000 b858 	b.w	800e71e <__retarget_lock_release_recursive>
 800e66e:	bf00      	nop
 800e670:	24000efc 	.word	0x24000efc

0800e674 <_free_r>:
 800e674:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e676:	2900      	cmp	r1, #0
 800e678:	d044      	beq.n	800e704 <_free_r+0x90>
 800e67a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e67e:	9001      	str	r0, [sp, #4]
 800e680:	2b00      	cmp	r3, #0
 800e682:	f1a1 0404 	sub.w	r4, r1, #4
 800e686:	bfb8      	it	lt
 800e688:	18e4      	addlt	r4, r4, r3
 800e68a:	f7ff ffe7 	bl	800e65c <__malloc_lock>
 800e68e:	4a1e      	ldr	r2, [pc, #120]	; (800e708 <_free_r+0x94>)
 800e690:	9801      	ldr	r0, [sp, #4]
 800e692:	6813      	ldr	r3, [r2, #0]
 800e694:	b933      	cbnz	r3, 800e6a4 <_free_r+0x30>
 800e696:	6063      	str	r3, [r4, #4]
 800e698:	6014      	str	r4, [r2, #0]
 800e69a:	b003      	add	sp, #12
 800e69c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e6a0:	f7ff bfe2 	b.w	800e668 <__malloc_unlock>
 800e6a4:	42a3      	cmp	r3, r4
 800e6a6:	d908      	bls.n	800e6ba <_free_r+0x46>
 800e6a8:	6825      	ldr	r5, [r4, #0]
 800e6aa:	1961      	adds	r1, r4, r5
 800e6ac:	428b      	cmp	r3, r1
 800e6ae:	bf01      	itttt	eq
 800e6b0:	6819      	ldreq	r1, [r3, #0]
 800e6b2:	685b      	ldreq	r3, [r3, #4]
 800e6b4:	1949      	addeq	r1, r1, r5
 800e6b6:	6021      	streq	r1, [r4, #0]
 800e6b8:	e7ed      	b.n	800e696 <_free_r+0x22>
 800e6ba:	461a      	mov	r2, r3
 800e6bc:	685b      	ldr	r3, [r3, #4]
 800e6be:	b10b      	cbz	r3, 800e6c4 <_free_r+0x50>
 800e6c0:	42a3      	cmp	r3, r4
 800e6c2:	d9fa      	bls.n	800e6ba <_free_r+0x46>
 800e6c4:	6811      	ldr	r1, [r2, #0]
 800e6c6:	1855      	adds	r5, r2, r1
 800e6c8:	42a5      	cmp	r5, r4
 800e6ca:	d10b      	bne.n	800e6e4 <_free_r+0x70>
 800e6cc:	6824      	ldr	r4, [r4, #0]
 800e6ce:	4421      	add	r1, r4
 800e6d0:	1854      	adds	r4, r2, r1
 800e6d2:	42a3      	cmp	r3, r4
 800e6d4:	6011      	str	r1, [r2, #0]
 800e6d6:	d1e0      	bne.n	800e69a <_free_r+0x26>
 800e6d8:	681c      	ldr	r4, [r3, #0]
 800e6da:	685b      	ldr	r3, [r3, #4]
 800e6dc:	6053      	str	r3, [r2, #4]
 800e6de:	4421      	add	r1, r4
 800e6e0:	6011      	str	r1, [r2, #0]
 800e6e2:	e7da      	b.n	800e69a <_free_r+0x26>
 800e6e4:	d902      	bls.n	800e6ec <_free_r+0x78>
 800e6e6:	230c      	movs	r3, #12
 800e6e8:	6003      	str	r3, [r0, #0]
 800e6ea:	e7d6      	b.n	800e69a <_free_r+0x26>
 800e6ec:	6825      	ldr	r5, [r4, #0]
 800e6ee:	1961      	adds	r1, r4, r5
 800e6f0:	428b      	cmp	r3, r1
 800e6f2:	bf04      	itt	eq
 800e6f4:	6819      	ldreq	r1, [r3, #0]
 800e6f6:	685b      	ldreq	r3, [r3, #4]
 800e6f8:	6063      	str	r3, [r4, #4]
 800e6fa:	bf04      	itt	eq
 800e6fc:	1949      	addeq	r1, r1, r5
 800e6fe:	6021      	streq	r1, [r4, #0]
 800e700:	6054      	str	r4, [r2, #4]
 800e702:	e7ca      	b.n	800e69a <_free_r+0x26>
 800e704:	b003      	add	sp, #12
 800e706:	bd30      	pop	{r4, r5, pc}
 800e708:	24000ef0 	.word	0x24000ef0

0800e70c <_malloc_usable_size_r>:
 800e70c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e710:	1f18      	subs	r0, r3, #4
 800e712:	2b00      	cmp	r3, #0
 800e714:	bfbc      	itt	lt
 800e716:	580b      	ldrlt	r3, [r1, r0]
 800e718:	18c0      	addlt	r0, r0, r3
 800e71a:	4770      	bx	lr

0800e71c <__retarget_lock_acquire_recursive>:
 800e71c:	4770      	bx	lr

0800e71e <__retarget_lock_release_recursive>:
 800e71e:	4770      	bx	lr

0800e720 <_init>:
 800e720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e722:	bf00      	nop
 800e724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e726:	bc08      	pop	{r3}
 800e728:	469e      	mov	lr, r3
 800e72a:	4770      	bx	lr

0800e72c <_fini>:
 800e72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e72e:	bf00      	nop
 800e730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e732:	bc08      	pop	{r3}
 800e734:	469e      	mov	lr, r3
 800e736:	4770      	bx	lr
